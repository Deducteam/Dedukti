Uset : Type.
Uprop : Type.
Utype : Type.

(; /!\ subtyping in coq, should be unidirectional /!\ ;)
[] Uprop --> Utype.
[] Uset --> Utype.

eprop : x : Uprop -> Type.
eset : x : Uset -> Type.
etype : x : Utype -> Type.

dotset : Utype.
dotprop : Utype.

(; /!\ type : type /!\, should use universes ;)
dottype : Utype.
[] dotset --> dottype.
[] dotprop --> dottype.

(; /!\ ;)
[x:Uprop] eprop x --> etype x.
[x:Uset]  eset  x --> etype x.

dotpipp : x : Uprop -> y : (eprop x -> Uprop) -> Uprop.
dotpips : x : Uprop -> y : (eprop x -> Uset)  -> Uset.
dotpipt : x : Uprop -> y : (eprop x -> Utype) -> Utype.
dotpisp : x : Uset  -> y : (eset x  -> Uprop) -> Uprop.
dotpitp : x : Utype -> y : (etype x -> Uprop) -> Uprop.
dotpist : x : Uset  -> y : (eset  x -> Utype) -> Utype.
dotpits : x : Utype -> y : (etype x -> Uset)  -> Uset.
dotpiss : x : Uset  -> y : (eset x  -> Uset)  -> Uset.
dotpitt : x : Utype -> y : (etype x -> Utype) -> Utype.
[] dotpipp --> dotpitt.
[] dotpips --> dotpitt.
[] dotpipt --> dotpitt.
[] dotpisp --> dotpitt.
[] dotpitp --> dotpitt.
[] dotpist --> dotpitt.
[] dotpits --> dotpitt.
[] dotpiss --> dotpitt.

[x:Utype, y : etype x -> Utype]
              etype (dotpitt x y) --> w : etype x -> etype (y w)

(; /!\ ;)
[] etype dottype --> Utype.

(; end of Coq1univ ;)
