type : Type.
arr : type -> type -> type.
e : type -> Type.
[a : type, b : type] e (arr a b) --> e a -> e b.

N : type.
z : e N.
s : e N -> e N.
 
numeral : Type.
[] numeral --> A : type -> (e A -> e A) -> (e A -> e A).
 
zero : numeral.
[] zero --> A : type => f : (e A -> e A) => x : e A => x.
one : numeral.
[] one --> A : type => f : (e A -> e A) => f.
two : numeral.
[] two --> A : type => f : (e A -> e A) => x : e A => f (f x).
three : numeral.
[] three --> A : type => f : (e A -> e A) => x : e A => f (f (f x)).
 
plus : numeral -> numeral -> numeral.
[] plus --> m : numeral => n : numeral => A : type => f : (e A -> e A) => x : e A => m A f (n A f x).

times : numeral -> numeral -> numeral.
[] times --> m : numeral => n : numeral => A : type => f : (e A -> e A) => x : e A => m A (n A f) x.

power : numeral -> numeral -> numeral.
[] power --> m : numeral => n : numeral => A : type => n (arr A A) (m A).

four : numeral.
[] four --> plus two two.
five : numeral.
[] five --> plus two three.

I : e N -> Type.

test : n : e N -> I n.
[] test (power two (times two two) N s z) --> test (power two (times two two) N s z).
