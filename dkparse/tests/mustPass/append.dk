A  : Type.
Nat: Type.
Z  : Nat.
S  : Nat -> Nat.

plus: Nat -> Nat -> Nat.
[m:Nat]       plus  Z    m --> m
[n:Nat,m:Nat] plus (S n) m --> plus n (S m).

Listn : Nat -> Type.
nil   : Listn Z.
cons  : n:Nat -> A -> Listn n -> Listn (S n).

append: n:Nat -> Listn n -> m:Nat -> Listn m -> Listn (plus m n).
[n:Nat,l1:Listn n]      append n l1 Z nil --> l1
[n:Nat,l1:Listn n,m:Nat,l2:Listn m,a:A] 
     append n l1 (S m) (cons {m} a l2) --> append (S n) (cons n a l1) m l2.

