(** A process module processes entries. It is parameterized by an environment. *)

(** The file declares four processors which are used for type
   checking, build a signature (without type checking), print an entry
   or compute the dependencies. Other processor can be defined by the
   user. Generally, a processor will be handled by the method
   [handle_input] or [handle_files]. *)

open Parsers

module type S =
sig
  type t

  val handle_entry : Env.t -> Entry.entry -> unit
  (** [handle_entry env entry] processed the entry [entry] in the environment [env] *)

  val get_data : unit -> t
  (** [get_data ()] returns the data computed by the current processor *)
end

module TypeChecker      : S with type t = unit
(** Provide a type checker for entries *)

module SignatureBuilder : S with type t = Kernel.Signature.t
(** Only build a signature without type checking the entries *)

module EntryPrinter     : S with type t = unit
(** Pretty prints entries *)

module Dependencies     : S with type t = Dep.t
(** Computes dependencies *)

val handle_processor : Env.t -> (module S) -> unit
(** [handle_processor env P ic] parses the input [ic] contains the environment [env],
    applies the processor P on the entries and returns the result. *)

val handle_input  :
  Parser.t ->
  ?hook_before:(Env.t -> unit) ->
  ?hook_after:(Env.t -> (Env.t * Kernel.Basic.loc * exn) option -> unit) ->
  (module S with type t = 'a) -> 'a
(** [handle_input input hook_before hook_after P] applies the
   processor [P] on the [input]. [hook_before env] is executed on the
   current environement [env] once before processing the [input] and
   [hook_after env' error] is executed at the end. If [error] is the
   3-uples (env,l,exn), then an exception [exn] has been raised while
   processing the data at location [l] in the environment [env]. If
   the user does not provide a [hook_after] function, then this
   exception is raised as an [Env.Env_error]. *)

val handle_files :
    string list ->
    ?hook_before:(Env.t -> unit) ->
    ?hook_after:(Env.t -> (Env.t * Kernel.Basic.loc * exn) option -> unit) ->
    (module S with type t = 'a) -> 'a
(** [handle_files files hook_before hook_after P] iters [handle_input] on the inputs generated by the [files]. *)

val process_files : string list ->
  ?hook_before:(Env.t -> unit) ->
  ?hook_after:(Env.t -> (Env.t * Kernel.Basic.loc * exn) option -> unit) ->
  ('a -> 'b -> 'b) -> 'b ->
  (module S with type t = 'a) -> 'b

val of_pure : f:('a -> Env.t -> Entry.entry -> 'a) -> init:'a
  -> (module S with type t = 'a)
(** [of_pure ~f ~init] returns processor from the fold-like function [f]. [f acc
    env ent] folds entry [ent] on accumulator [acc] in environment [env]. *)

(** {2 Custom processor} *)

(** Implements the same processor as above with a custom environment. *)

module type CustomEnv = (module type of Env) with type t = Env.t

module MakeTypeChecker(E:CustomEnv)      : S with type t = unit

module MakeSignatureBuilder(E:CustomEnv) : S with type t = Kernel.Signature.t

module MakeEntryPrinter(E:CustomEnv)     : S with type t = unit

module MakeDependencies(E:CustomEnv)     : S with type t = Dep.t
