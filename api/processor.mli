(** A process module processes entries. It is parameterized by an environment. *)
module type S =
sig
  type t

  val handle_entry : Env.t -> Entry.entry -> unit

  val get_data : unit -> t
end

module TypeChecker      : S with type t = unit
(** Provide a type checker for entries *)

module SignatureBuilder : S with type t = Signature.t
(** Only build a signature without type checking the entries *)

module EntryPrinter     : S with type t = unit
(** Pretty prints entries *)

module Dependencies     : S with type t = Dep.t
(** Computes dependencies *)

val handle_processor : Env.t -> (module S) -> unit
(** [handle_processor env P ic] parses the input [ic] in the environment [env],
    applies the processor P on the entries and returns the result. *)

val handle_input  :
  Parser.t ->
  ?hook_before:(Env.t -> unit) ->
  ?hook_after:(Env.t -> (Env.t * Basic.loc * exn) option -> unit) ->
  (module S with type t = 'a) -> 'a
(** [handle_input input hook_before hook_after P] applies the processor [P] on the [input]. [hook_before env] is executed on the current environement [env] once before processing the [input] and [hook_after env' error] is executed at the end. If [error] is the 3-uples (env,l,exn), then an exception [exn] has been raised while processing the data at location [l] in the environment [env]. If the user does not provide a [hook_after] function, then this exception is raised as an [Env.Env_error]. *)

val handle_files :
  string list ->
  ?hook_before:(Env.t -> unit) ->
  ?hook_after:(Env.t -> (Env.t * Basic.loc * exn) option -> unit) ->
  (module S with type t = 'a) -> 'a
(** [handle_files files hook_before hook_after P] iters [handle_input] on the inputs generated by the [files]. *)
