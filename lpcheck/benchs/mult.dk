#NAME exp

i : Type.
N : Type := i -> (i->i) -> i.

zero  : N := x:i=>f:(i->i)=>x.
one   : N := x:i=>f:(i->i)=>f x.
two   : N := x:i=>f:(i->i)=>f (f x).
three : N := x:i=>f:(i->i)=>f (f (f x)).

Succ : N->N := n:N => x:i=>f:(i->i)=> f (n x f).

Plus : N->N->N := m:N=>n:N=> x:i=>f:(i->i)=> m (n x f) f.

Mult : N->N->N := m:N=>n:N=> x:i=>f:(i->i)=> (g:(i->i)=>n x g) (y:i=>m y f).


nine : N := Mult three three.
nine2 : N := Mult nine nine.
nine4 : N := Mult nine2 nine2.
nine5 : N := Mult nine4 nine.
nine6 : N := Mult nine4 nine2.

e : N->Type.
u : e (Mult nine4 nine).
f : e (Mult nine nine4) -> Type.
x : f u.
