### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules main.ml > main.ml.depends # cached
# Target: debug.ml.depends, tags: { extension:ml, file:debug.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules debug.ml > debug.ml.depends # cached
# Target: types.ml.depends, tags: { extension:ml, file:types.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules types.ml > types.ml.depends # cached
# Target: types.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:types.cmo, file:types.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o types.cmo types.ml # cached
# Target: debug.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:debug.cmo, file:debug.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o debug.cmo debug.ml # cached
# Target: env.ml.depends, tags: { extension:ml, file:env.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules env.ml > env.ml.depends
# Target: global.ml.depends, tags: { extension:ml, file:global.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules global.ml > global.ml.depends # cached
# Target: global.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:global.cmo, file:global.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o global.cmo global.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, profile, quiet }
/usr/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, parser, profile, quiet }
/usr/bin/ocamlyacc parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml # cached
# Target: env.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:env.cmo, file:env.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o env.cmo env.ml
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o main.cmo main.ml
# Target: types.cmx, tags: { compile, extension:cmx, extension:ml, file:types.cmx, file:types.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o types.cmx types.ml # cached
# Target: debug.cmx, tags: { compile, extension:cmx, extension:ml, file:debug.cmx, file:debug.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o debug.cmx debug.ml # cached
# Target: global.cmx, tags: { compile, extension:cmx, extension:ml, file:global.cmx, file:global.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o global.cmx global.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules parser.ml > parser.ml.depends # cached
# Target: checker.ml.depends, tags: { extension:ml, file:checker.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules checker.ml > checker.ml.depends # cached
# Target: term.ml.depends, tags: { extension:ml, file:term.ml, ocaml, ocamldep, profile, quiet }
/usr/bin/ocamldep.opt -modules term.ml > term.ml.depends # cached
# Target: term.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:term.cmo, file:term.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o term.cmo term.ml
# Target: checker.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:checker.cmo, file:checker.ml, implem, ocaml, profile, quiet }
/usr/bin/ocamlc.opt -c -o checker.cmo checker.ml
# Target: env.cmx, tags: { compile, extension:cmx, extension:ml, file:env.cmx, file:env.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o env.cmx env.ml
# Target: term.cmx, tags: { compile, extension:cmx, extension:ml, file:term.cmx, file:term.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o term.cmx term.ml
# Target: checker.cmx, tags: { compile, extension:cmx, extension:ml, file:checker.cmx, file:checker.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o checker.cmx checker.ml
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o lexer.cmx lexer.ml
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, profile, quiet }
/usr/bin/ocamlopt.opt -c -p -o main.cmx main.ml
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, profile, program, quiet }
/usr/bin/ocamlopt.opt -p types.cmx debug.cmx global.cmx env.cmx term.cmx checker.cmx parser.cmx lexer.cmx main.cmx -o main.native
# Compilation successful.
