#NAME tuto.

(; Les Types ;)

Nat : Type.
Bool : Type.
NatList : Type.

(; Constructeurs ;)

0 : Nat.
S : Nat -> Nat.

True : Bool.
False : Bool.

Vide : NatList.
Cons : Nat -> NatList -> NatList.

(; Plein de fonctions ;)

def pred : Nat -> Nat.
[n] pred (S n) --> n.

def plus : Nat -> Nat -> Nat.
[n] plus 0 n --> n
[m, n] plus (S m) n --> S (plus m n).

def plus_rec_term : Nat -> Nat -> Nat.
[n] plus_rec_term 0 n --> n
[m, n] plus_rec_term (S m) n --> plus_rec_term m (S n).

def mult : Nat -> Nat -> Nat.
[] mult 0 _ --> 0
[m, n] mult (S m) n --> plus n (mult m n).

def not : Bool -> Bool.
[] not True --> False.
[] not False --> True.

def even : Nat -> Bool.
[] even 0 --> True.
[n] even (S n) --> not (even n).

def leq : Nat -> Nat -> Bool.
[] leq 0 _ --> True
[m] leq (S m) 0 --> False
[m, n] leq (S m) (S n) --> leq m n.

def moitie : Nat -> Nat.
[] moitie 0 --> 0
[n] moitie (S (S n)) --> S (moitie n).

def double_add : Nat -> Nat.
[n] double_add n --> plus n n.

def double_mult : Nat -> Nat.
[n] double_mult n --> mult (S (S 0)) n.

def double_constr : Nat -> Nat.
[] double_constr 0 --> 0
[n] double_constr (S n) --> S (S (double_constr n)).

def Ackermann : Nat -> Nat -> Nat.
[n] Ackermann 0 n --> S n
[m] Ackermann (S m) 0 --> Ackermann m (S 0)
[m, n] Ackermann (S m) (S n) --> Ackermann m (Ackermann (S m) n).

def hd : NatList -> Nat.
[n] hd (Cons n _) --> n.

def tl : NatList -> NatList.
[l] tl (Cons _ l) --> l.

def append : NatList -> NatList -> NatList.
[l] append Vide l --> l
[n,l1,l2] append (Cons n l1) l2 --> Cons n (append l1 l2).

def length : NatList -> Nat.
[] length Vide --> 0
[l] length (Cons _ l) --> S (length l).

[x,y,z] plus x (plus y z) --> plus (plus x y) z.