#NAME idic.

def Prop := cc.0.
def 1    := cc.1.
def plus := cc.plus.
def 2    := plus 1 1.


(;
(* id_example.v *)

Definition id {A : Type} (a : A) := a.

Polymorphic Definition pid {A : Type} (a : A) := a.

Definition pid_id      := pid (@id).
Definition pid_id_expl := @pid (forall A:Type,A->A) (@id).

Definition pid_pid      := pid (@pid).
Definition pid_pid_expl := @pid (forall A:Type,A->A) (@pid).

Polymorphic Definition p_pid_id      := pid (@id).
Polymorphic Definition p_pid_id_expl := @pid (forall A:Type,A->A) (@id).

Polymorphic Definition p_pid_pid      := pid (@pid).
Polymorphic Definition p_pid_pid_expl := @pid (forall A:Type,A->A) (@pid).
;)



(;
id = fun (A : Type@{Top.1}) (a : A) => a
     : forall A : Type@{Top.1}, A -> A
(* Top.1 |=  *)
;)
def Top_1  := 1.
def id : A : cc.U Top_1 -> cc.T Top_1 A -> cc.T Top_1 A :=
    A => x => x.


(;
Polymorphic pid@{Top.2} = 
fun (A : Type@{Top.2}) (a : A) => a
     : forall A : Type@{Top.2}, A -> A
(* Top.2 |=  *)
;)
def pid : Top_2 : cc.Sort ->
          A : cc.U Top_2 -> cc.T Top_2 A -> cc.T Top_2 A :=
    Top_2 => A => x => x.



(;
pid_id = pid@{Top.3} (@id)
     : forall A : Type@{Top.1}, A -> A
(* Top.3 |= Top.1 < Top.3
             *)
;)
def Top_3 := 2.
def pid_id : A : cc.U Top_1 -> cc.T Top_1 A -> cc.T Top_1 A :=
  pid Top_3
    (cc.prod
      Top_3
      Top_1
      (cc.u Top_1)
      (A => cc.prod Top_1 Top_1 A (x => A)))
    id.

(;
pid_id_expl = 
pid@{Top.4} (@id)
     : forall A : Type@{Top.5}, A -> A
(* Top.4 Top.5 |= Top.1 < Top.4
                  Top.1 = Top.5
                   *)
;)
def Top_4 := 2.
def Top_5 := 1.
def pid_id_expl : A : cc.U Top_5 -> cc.T Top_5 A -> cc.T Top_5 A :=
  pid Top_4
    (cc.prod
      Top_4
      Top_5
      (cc.u Top_5)
      (A => cc.prod Top_5 Top_5 A (x => A)))
    id.


(;
pid_pid = 
pid@{Top.6} (@pid@{Top.7})
     : forall A : Type@{Top.7}, A -> A
(* Top.6 Top.7 |= Top.7 < Top.6
                   *)
;)
def Top_6 := 2.
def Top_7 := 1.
def pid_pid : A : cc.U Top_7 -> cc.T Top_7 A -> cc.T Top_7 A :=
  pid Top_6
	 (cc.prod
	   Top_6
	   Top_7
       (cc.u Top_7)
       (A => cc.prod Top_7 Top_7 A (x => A)))
     (pid Top_7).


(; pid_pid_expl    is exactly the same as previous
  replacing Top.7 with Top.9 and Top.- with Top.8.  ;)


(;
Polymorphic p_pid_id@{Top.11} = 
pid@{Top.11} (@id)
     : forall A : Type@{Top.1}, A -> A
(* Top.11 |= Top.1 < Top.11
              *)
 ;)
(; Somehow translate here that Top.11 >= Top.1 + 1;)

constraints : Type.
prf : constraints -> Type.

eq : cc.Sort -> cc.Sort -> constraints.
refl : i : cc.Sort -> prf (eq i i).

lt : cc.Sort -> cc.Sort -> constraints.
ltp : i : cc.Sort -> j : cc.Sort -> prf (lt i (plus (plus i j) 1)).

le : cc.Sort -> cc.Sort -> constraints.
lep : i : cc.Sort -> j : cc.Sort -> prf (lt i (plus i j)).

and : constraints -> constraints -> constraints.
conj : a : constraints -> b : constraints -> prf a -> prf b -> prf (and a b).


def p_pid_id : Top_11 : cc.Sort ->
			   p : prf (lt Top_1 Top_11) ->
               A : cc.U Top_1 -> cc.T Top_1 A -> cc.T Top_1 A.
(;
[] p_pid_id -->
  Top_11 : cc.Sort =>
  pid Top_11
    (cc.prod
      Top_11
      Top_1
        (cc.lift (plus 1 Top_1) Top_11 (cc.u Top_1))
        (A => cc.prod Top_1 Top_1 A (x => A)))
    id.
;)

(;
Polymorphic p_pid_id_expl@{Top.12 Top.13} = 
pid@{Top.12} (@id)
     : forall A : Type@{Top.13}, A -> A
(* Top.12 Top.13 |= Top.1 < Top.12
                    Top.1 = Top.13
                     *)
;)


(;
Polymorphic p_pid_pid@{Top.14 Top.15} = 
pid@{Top.14} (@pid@{Top.15})
     : forall A : Type@{Top.15}, A -> A
(* Top.14 Top.15 |= Top.15 < Top.14
                     *)
;)


(;
Polymorphic p_pid_pid_expl@{Top.16 Top.17} = 
pid@{Top.16} (@pid@{Top.17})
     : forall A : Type@{Top.17}, A -> A
(* Top.16 Top.17 |= Top.17 < Top.16
                     *)
;)

