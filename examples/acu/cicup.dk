#NAME cc.

Sort : Type.

0 : Sort.
1 : Sort.

defac plus [Sort].
[i] plus i 0 --> i.

defac max [Sort].
[i,j,k] max (plus i k) (plus i j) --> plus i (max j k)
[i,j  ] max i (plus i j) --> plus i j
[i,j  ] max (plus i j) i --> plus i j
[i,j  ] max i i --> i
[i    ] max 0 i --> i.

def rule : Sort -> Sort -> Sort.
[i  ] rule i 0 --> 0
[i,j] rule i (plus 1 j) --> max i (plus 1 j)
[i,j] rule i 1 --> max i 1
[i,j] rule i (plus i j) --> plus i j
[i,j] rule i i --> i
[i,j] rule 0 j --> j.

[i,j,k] max (rule i j) (rule i k) --> rule i (max j k).
[i,j,k] max (rule j i) (rule k i) --> rule (max j k) i.

#SNF u : Sort => v : Sort => w : Sort => max (plus u v) (plus u w).

#SNF x : Sort => y : Sort => rule 0 (rule (plus (plus x 1) (plus y 0)) (plus (plus 0 (plus 0 1)) (plus x y))).

#SNF x : Sort => y : Sort => rule (rule (plus (plus x 1) (plus y 0)) (plus (plus 0 (plus 0 1)) (plus x y))) 0.

#SNF i : Sort => rule (plus 1 i) 1.


U : Sort -> Type.
u : i : Sort -> U (plus i 1).

lift : i : Sort -> a : U i -> U (plus i 1).

def lnlift : n : Sort -> i : Sort -> a : U n -> U (plus n i).
[n,a]   lnlift n 0 a --> a
[n,i,a] lnlift n (plus i 1) a --> lift (plus n i) (lnlift n i a).

def llift : i : Sort -> a : U 0 -> U i := lnlift 0.

def T : i : Sort -> a : U i -> Type.
[i,k]   T k (u i)      --> U i
[i,k,a] T k (lift i a) --> T i a
[i,k,a] T k (llift i a) --> T 0 a. (; This rule deduces from above. ;)

def prod :
  i : Sort ->
  j : Sort ->
  a : U i ->
  b : (x : T i a -> U j) ->
  U (rule i j).

[i,a,b] T 0 (prod i 0 a b) --> x : T i a -> T 0 (b x)

[i,j,a,b] T _ (prod i (plus i j) a b)
      --> x: T i a -> T (plus i j) (b x)

[i,j,a,b] T _ (prod (plus (plus i j) 1) (plus j 1) a b)
	  --> x : T (plus (plus i j) 1) a -> T (plus j 1) (b x).

[i,j,a,b] prod _ (plus (plus i j) 1) (lift i a) b
      --> prod i (plus (plus i j) 1) a          b

[i,j,a,b] prod _ (plus j 1) (lift (plus (plus i j) 1) a) b
      --> lift (plus (plus i j) 1) (prod (plus (plus i j) 1) (plus j 1) a b)

[i,j,a,b] prod (plus (plus i j ) (plus 1 1)) _ a (x => lift (plus j 1) (b x))
	  --> prod (plus (plus i j) (plus 1 1)) (plus j 1) a (x => b x)

[i,j,a,b] prod i _ a (x => lift (plus i j) (b x))
	  --> lift (plus i j) (prod i (plus i j) a (x => b x))

[i,a,b] prod (plus i 1) 1 a (x => lift 0 (b x))
	  --> llift (plus i 1) (prod (plus i 1) 0 a (x => b x))

[a,b] prod 0 1 a (x => lift 0 (b x))
	  --> lift 0 (prod 0 0 a (x => b x))

(; Why not merge the two above ? ;)

[i,a,b] prod (plus i 1) 0 (lift i a) b
	  --> prod i 0 a b.

