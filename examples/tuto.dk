#NAME simple.

Nat : Type.
Bool : Type.

0 : Nat.
S : Nat -> Nat.

True : Bool.
False : Bool.

def plus : Nat -> Nat -> Nat.
[n] plus 0 n --> n
[m, n] plus (S m) n --> plus m (S n).

def mult : Nat -> Nat -> Nat.
[] mult 0 _ --> 0
[m, n] mult (S m) n --> plus n (mult m n).

def not : Bool -> Bool.
[] not True --> False.
[] not False --> True.

def even : Nat -> Bool.
[] even 0 --> True.
[n] even (S n) --> not (even n).

def leq : Nat -> Nat -> Bool.
[] leq 0 _ --> True
[m] leq (S m) 0 --> False
[m, n] leq (S m) (S n) --> leq m n.

def moitie : Nat -> Nat.
[] moitie 0 --> 0
[] moitie (S 0) --> moitie (S 0)
[n] moitie (S (S n)) --> S (moitie n).

def double_add : Nat -> Nat.
[n] double_add n --> plus n n.

def double_mult : Nat -> Nat.
[n] double_mult n --> mult (S (S 0)) n.