#NAME dk_logic.

prop : cc.uT.

Prop : Type.

[] cc.eT (prop) --> Prop.

def ebP : (cc.eT dk_bool.bool) -> Prop.

imp : Prop -> Prop -> Prop.

forall_type : (cc.uT -> Prop) -> Prop.

forall : A:cc.uT -> ((cc.eT A) -> Prop) -> Prop.

and : Prop -> Prop -> Prop.

or : Prop -> Prop -> Prop.

def eeP : Prop -> cc.uT.

def eP : Prop -> Type := f:Prop => cc.eT (eeP f).

[f2, f1] eeP (imp f1 f2) --> cc.Arrow (eeP f1) (eeP f2)
[f, A] eeP (forall A f) --> cc.Pi A (x:(cc.eT A) => eeP (f x))
[f] eeP (forall_type f) --> cc.PiT (x:cc.uT => eeP (f x))
[B, A] eeP (and A B) --> dk_tuple.prod (eeP A) (eeP B)
[B, A] eeP (or A B) --> dk_sum.sum (eeP A) (eeP B).

def True : Prop := forall prop (P:Prop => imp P P).

def False : Prop := forall prop (P:Prop => P).

def not : f:Prop -> Prop := f:Prop => imp f False.

def eqv :
  A:Prop -> B:Prop -> Prop
  :=
  A:Prop => B:Prop => and (imp A B) (imp B A).

def exists :
  A:cc.uT -> f:((cc.eT A) -> Prop) -> Prop
  :=
  A:cc.uT =>
  f:((cc.eT A) -> Prop) =>
  forall prop (P:Prop => imp (forall A (x:(cc.eT A) => imp (f x) P)) P).

def forallc :
  A:cc.uT -> f:((cc.eT A) -> Prop) -> Prop
  :=
  A:cc.uT =>
  f:((cc.eT A) -> Prop) =>
  not (not (forall A (x:(cc.eT A) => not (not (f x))))).

def existsc :
  A:cc.uT -> f:((cc.eT A) -> Prop) -> Prop
  :=
  A:cc.uT =>
  f:((cc.eT A) -> Prop) =>
  not (not (exists A (x:(cc.eT A) => not (not (f x))))).

def exists_type :
  f:(cc.uT -> Prop) -> Prop
  :=
  f:(cc.uT -> Prop) =>
  forall prop (z:Prop => imp (forall_type (a:cc.uT => imp (f a) z)) z).

def TrueT : Type := eP True.

def FalseT : Type := eP False.

I : TrueT.

False_elim : A:cc.uT -> FalseT -> cc.eT A.

def Istrue : dk_bool.Bool -> Type.

[b] Istrue b --> eP (ebP b).

def and_intro :
  f1:Prop -> f2:Prop -> (eP f1) -> (eP f2) -> eP (and f1 f2)
  :=
  f1:Prop => f2:Prop => dk_tuple.pair (eeP f1) (eeP f2).

def and_elim1 :
  f1:Prop -> f2:Prop -> (eP (and f1 f2)) -> eP f1
  :=
  f1:Prop => f2:Prop => dk_tuple.fst (eeP f1) (eeP f2).

def and_elim2 :
  f1:Prop -> f2:Prop -> (eP (and f1 f2)) -> eP f2
  :=
  f1:Prop => f2:Prop => dk_tuple.snd (eeP f1) (eeP f2).

def or_intro1 :
  f1:Prop -> f2:Prop -> (eP f1) -> eP (or f1 f2)
  :=
  f1:Prop => f2:Prop => dk_sum.left (eeP f1) (eeP f2).

def or_intro2 :
  f1:Prop -> f2:Prop -> (eP f2) -> eP (or f1 f2)
  :=
  f1:Prop => f2:Prop => dk_sum.right (eeP f1) (eeP f2).

def or_elim :
  f1:Prop ->
  f2:Prop ->
  f3:Prop -> (eP (or f1 f2)) -> (eP (imp f1 f3)) -> (eP (imp f2 f3)) -> eP f3
  :=
  f1:Prop =>
  f2:Prop => f3:Prop => dk_sum.simple_match__sum (eeP f1) (eeP f2) (eeP f3).

def eqv_intro := f1:Prop => f2:Prop => and_intro (imp f1 f2) (imp f2 f1).

def eqv_elim1 := f1:Prop => f2:Prop => and_elim1 (imp f1 f2) (imp f2 f1).

def eqv_elim2 := f1:Prop => f2:Prop => and_elim2 (imp f1 f2) (imp f2 f1).

def equal :
  A:cc.uT -> x:(cc.eT A) -> y:(cc.eT A) -> Prop
  :=
  A:cc.uT =>
  x:(cc.eT A) =>
  y:(cc.eT A) =>
  forall (cc.Arrow A prop) (H:((cc.eT A) -> Prop) => imp (H x) (H y)).

def equalc :
  A:cc.uT -> x:(cc.eT A) -> y:(cc.eT A) -> Prop
  :=
  A:cc.uT => x:(cc.eT A) => y:(cc.eT A) => not (not (equal A x y)).

def refl :
  A:cc.uT -> x:(cc.eT A) -> eP (equal A x x)
  :=
  A:cc.uT => x:(cc.eT A) => H:((cc.eT A) -> Prop) => px:(eP (H x)) => px.

def equal_ind :
  A:cc.uT ->
  H:((cc.eT A) -> Prop) ->
  x:(cc.eT A) -> y:(cc.eT A) -> (eP (equal A x y)) -> (eP (H x)) -> eP (H y)
  :=
  A:cc.uT =>
  P:((cc.eT A) -> Prop) =>
  x:(cc.eT A) => y:(cc.eT A) => eq:(eP (equal A x y)) => eq P.

def equal_sym :
  A:cc.uT ->
  x:(cc.eT A) -> y:(cc.eT A) -> (eP (equal A x y)) -> eP (equal A y x)
  :=
  A:cc.uT =>
  x:(cc.eT A) =>
  y:(cc.eT A) =>
  eq:(eP (equal A x y)) =>
  equal_ind A (z:(cc.eT A) => equal A z x) x y eq (refl A x).

def equal_congr :
  A:cc.uT ->
  B:cc.uT ->
  f:((cc.eT A) -> cc.eT B) ->
  x:(cc.eT A) ->
  y:(cc.eT A) -> (eP (equal A x y)) -> eP (equal B (f x) (f y))
  :=
  A:cc.uT =>
  B:cc.uT =>
  f:((cc.eT A) -> cc.eT B) =>
  x:(cc.eT A) =>
  y:(cc.eT A) =>
  H:(eP (equal A x y)) =>
  equal_ind A (z:(cc.eT A) => equal B (f x) (f z)) x y H (refl B (f x)).

[] ebP (dk_bool.true) --> True
[] ebP (dk_bool.false) --> False.

