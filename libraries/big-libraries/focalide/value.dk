#NAME value.

def Imp_value_tol__consistency_rule :
  _p_T_T:cc.uT ->
  _p_T_geq:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_plus:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT _p_T_T) ->
  _p_tol_tol:(cc.eT _p_T_T) ->
  x:(cc.eT _p_T_T) -> y:(cc.eT _p_T_T) -> cc.eT basics.bool__t
  :=
  _p_T_T:cc.uT =>
  _p_T_geq:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_plus:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT _p_T_T) =>
  _p_tol_tol:(cc.eT _p_T_T) =>
  x:(cc.eT _p_T_T) =>
  y:(cc.eT _p_T_T) =>
  dk_bool.ite basics.bool__t (_p_T_geq x y) 
    (_p_T_geq (_p_T_plus y _p_tol_tol) x) 
    (_p_T_geq (_p_T_plus x _p_tol_tol) y).

def Imp_value_tol__element :
  _p_T_T:cc.uT -> _p_T_element:(cc.eT _p_T_T) -> cc.eT _p_T_T
  :=
  _p_T_T:cc.uT => _p_T_element:(cc.eT _p_T_T) => _p_T_element.

def Imp_value_tol__equal :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT _p_T_T) -> y:(cc.eT _p_T_T) -> cc.eT basics.bool__t
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT _p_T_T) => y:(cc.eT _p_T_T) => _p_T_equal x y.

def Imp_value_tol__parse :
  _p_T_T:cc.uT ->
  _p_T_parse:((cc.eT basics.string__t) -> cc.eT _p_T_T) ->
  x:(cc.eT basics.string__t) -> cc.eT _p_T_T
  :=
  _p_T_T:cc.uT =>
  _p_T_parse:((cc.eT basics.string__t) -> cc.eT _p_T_T) =>
  x:(cc.eT basics.string__t) => _p_T_parse x.

def Imp_value_tol__print :
  _p_T_T:cc.uT ->
  _p_T_print:((cc.eT _p_T_T) -> cc.eT basics.string__t) ->
  x:(cc.eT _p_T_T) -> cc.eT basics.string__t
  :=
  _p_T_T:cc.uT =>
  _p_T_print:((cc.eT _p_T_T) -> cc.eT basics.string__t) =>
  x:(cc.eT _p_T_T) => _p_T_print x.

def Imp_value_tol__consistency_rule_reflexive :
  _p_T_T:cc.uT ->
  _p_T_geq:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_plus:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT _p_T_T) ->
  _p_tol_tol:(cc.eT _p_T_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (a:(cc.eT _p_T_T) =>
        dk_logic.ebP 
          (Imp_value_tol__consistency_rule _p_T_T _p_T_geq _p_T_plus 
             _p_tol_tol a a)))
  :=
  _p_T_T:cc.uT =>
  _p_T_geq:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_plus:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT _p_T_T) =>
  _p_tol_tol:(cc.eT _p_T_T) =>
  (__A_1_LEMMA:
   (x:(cc.eT _p_T_T) ->
    dk_logic.eP (dk_logic.ebP (_p_T_geq (_p_T_plus x _p_tol_tol) x))) =>
   zen.nnpp 
     (zen.forall _p_T_T 
        (v_Vzb:(zen.term _p_T_T) =>
         zen.triangle 
           (focal.is_true 
              (Imp_value_tol__consistency_rule _p_T_T _p_T_geq _p_T_plus 
                 _p_tol_tol v_Vzb v_Vzb)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall _p_T_T 
               (v_Vzb:(zen.term _p_T_T) =>
                zen.triangle 
                  (focal.is_true 
                     (Imp_value_tol__consistency_rule _p_T_T _p_T_geq 
                        _p_T_plus _p_tol_tol v_Vzb v_Vzb)))))) =>
      zen.Rnotall _p_T_T 
        (v_Vzb:(zen.term _p_T_T) =>
         zen.triangle 
           (focal.is_true 
              (Imp_value_tol__consistency_rule _p_T_T _p_T_geq _p_T_plus 
                 _p_tol_tol v_Vzb v_Vzb))) 
        (v_Vbc:(zen.term _p_T_T) =>
         v_Vcc:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (dk_bool.ite basics.bool__t (_p_T_geq v_Vbc v_Vbc) 
                        (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc) 
                        (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc)))))) =>
         focal.zenon_focal_ite_bool_n (_p_T_geq v_Vbc v_Vbc) 
           (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc) 
           (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc) 
           (v_Vdc:
            (zen.proof (zen.triangle (focal.is_true (_p_T_geq v_Vbc v_Vbc)))) =>
            v_Vec:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc))))) =>
            zen.Rall _p_T_T 
              (v_Vfc:(zen.term _p_T_T) =>
               zen.triangle 
                 (focal.is_true (_p_T_geq (_p_T_plus v_Vfc _p_tol_tol) v_Vfc))) 
              v_Vbc 
              (v_Vgc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc))) v_Vgc 
                 v_Vec) __A_1_LEMMA) 
           (v_Vhc:
            (zen.proof 
               (zen.not (zen.triangle (focal.is_true (_p_T_geq v_Vbc v_Vbc))))) =>
            v_Vec:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc))))) =>
            zen.Rall _p_T_T 
              (v_Vfc:(zen.term _p_T_T) =>
               zen.triangle 
                 (focal.is_true (_p_T_geq (_p_T_plus v_Vfc _p_tol_tol) v_Vfc))) 
              v_Vbc 
              (v_Vgc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_T_geq (_p_T_plus v_Vbc _p_tol_tol) v_Vbc))) v_Vgc 
                 v_Vec) __A_1_LEMMA) v_Vcc) v_Vac)) 
    (x:(cc.eT _p_T_T) =>
     dk_builtins.magic_prove 
       (dk_logic.ebP (_p_T_geq (_p_T_plus x _p_tol_tol) x))).

def Imp_value_tol__consistency_rule_symmetric :
  _p_T_T:cc.uT ->
  abst_T:cc.uT ->
  abst_consistency_rule:((cc.eT abst_T) ->
                         (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (b:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_consistency_rule a b)) 
             (dk_logic.ebP (abst_consistency_rule b a)))))
  :=
  _p_T_T:cc.uT =>
  abst_T:cc.uT =>
  abst_consistency_rule:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (b:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_consistency_rule a b)) 
             (dk_logic.ebP (abst_consistency_rule b a))))).

def Imp_value_tol__equal_reflexive :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_T_T 
                             (x:(cc.eT _p_T_T) =>
                              dk_logic.ebP (_p_T_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (x:(cc.eT _p_T_T) =>
        dk_logic.ebP (Imp_value_tol__equal _p_T_T _p_T_equal x x)))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) => dk_logic.ebP (_p_T_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.triangle 
          (focal.is_true (Imp_value_tol__equal _p_T_T _p_T_equal v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vzb:(zen.term _p_T_T) =>
               zen.triangle 
                 (focal.is_true 
                    (Imp_value_tol__equal _p_T_T _p_T_equal v_Vzb v_Vzb)))))) =>
     zen.Rnotall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.triangle 
          (focal.is_true (Imp_value_tol__equal _p_T_T _p_T_equal v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term _p_T_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc))))) =>
        zen.Rall _p_T_T 
          (v_Vzb:(zen.term _p_T_T) =>
           zen.triangle (focal.is_true (_p_T_equal v_Vzb v_Vzb))) v_Vbc 
          (v_Vdc:
           (zen.proof (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc)))) =>
           zen.Raxiom 
             (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc))) v_Vdc 
             v_Vcc) _p_T_equal_reflexive) v_Vac).

def Imp_value_tol__equal_symmetric :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_T_T 
                             (x:(cc.eT _p_T_T) =>
                              dk_logic.forall _p_T_T 
                                (y:(cc.eT _p_T_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_T_equal x y)) 
                                   (dk_logic.ebP (_p_T_equal y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (x:(cc.eT _p_T_T) =>
        dk_logic.forall _p_T_T 
          (y:(cc.eT _p_T_T) =>
           dk_logic.imp 
             (dk_logic.ebP (Imp_value_tol__equal _p_T_T _p_T_equal x y)) 
             (dk_logic.ebP (Imp_value_tol__equal _p_T_T _p_T_equal y x)))))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
              (dk_logic.ebP (_p_T_equal y x)))))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vzb:(zen.term _p_T_T) =>
               zen.forall _p_T_T 
                 (v_Vac:(zen.term _p_T_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value_tol__equal _p_T_T _p_T_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value_tol__equal _p_T_T _p_T_equal v_Vac v_Vzb)))))))) =>
     zen.Rnotall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term _p_T_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_T_T 
                 (v_Vac:(zen.term _p_T_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value_tol__equal _p_T_T _p_T_equal v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value_tol__equal _p_T_T _p_T_equal v_Vac v_Vcc))))))) =>
        zen.Rnotall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vac v_Vcc)))) 
          (v_Vec:(zen.term _p_T_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value_tol__equal _p_T_T _p_T_equal v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value_tol__equal _p_T_T _p_T_equal v_Vec v_Vcc)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value_tol__equal _p_T_T _p_T_equal v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_T_equal v_Vec v_Vcc))))) =>
              zen.Rall _p_T_T 
                (v_Vzb:(zen.term _p_T_T) =>
                 zen.forall _p_T_T 
                   (v_Vac:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vzb v_Vac))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vac v_Vzb))))) 
                v_Vcc 
                (v_Vic:
                 (zen.proof 
                    (zen.forall _p_T_T 
                       (v_Vac:(zen.term _p_T_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vcc v_Vac))) 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vac v_Vcc)))))) =>
                 zen.Rall _p_T_T 
                   (v_Vac:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vac))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vac v_Vcc)))) 
                   v_Vec 
                   (v_Vjc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vec v_Vcc))))) =>
                    zen.Rimply 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vec))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vec v_Vcc))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_T_equal v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_T_equal v_Vcc v_Vec))) v_Vgc 
                         v_Vkc) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vec v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_T_equal v_Vec v_Vcc))) v_Vlc 
                         v_Vhc) v_Vjc) v_Vic) _p_T_equal_symmetric) v_Vfc) 
          v_Vdc) v_Vbc).

def Imp_value_tol__equal_transitive :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_T_T 
                              (x:(cc.eT _p_T_T) =>
                               dk_logic.forall _p_T_T 
                                 (y:(cc.eT _p_T_T) =>
                                  dk_logic.forall _p_T_T 
                                    (z:(cc.eT _p_T_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_T_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_T_equal y z)) 
                                          (dk_logic.ebP (_p_T_equal x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (x:(cc.eT _p_T_T) =>
        dk_logic.forall _p_T_T 
          (y:(cc.eT _p_T_T) =>
           dk_logic.forall _p_T_T 
             (z:(cc.eT _p_T_T) =>
              dk_logic.imp 
                (dk_logic.ebP (Imp_value_tol__equal _p_T_T _p_T_equal x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP (Imp_value_tol__equal _p_T_T _p_T_equal y z)) 
                   (dk_logic.ebP (Imp_value_tol__equal _p_T_T _p_T_equal x z)))))))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.forall _p_T_T 
              (z:(cc.eT _p_T_T) =>
               dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_T_equal y z)) 
                    (dk_logic.ebP (_p_T_equal x z)))))))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vkc:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vlc:(zen.term _p_T_T) =>
           zen.forall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value_tol__equal _p_T_T _p_T_equal v_Vkc v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vkc v_Vmc)))))))) 
    (v_Vnc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vkc:(zen.term _p_T_T) =>
               zen.forall _p_T_T 
                 (v_Vlc:(zen.term _p_T_T) =>
                  zen.forall _p_T_T 
                    (v_Vmc:(zen.term _p_T_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value_tol__equal _p_T_T _p_T_equal v_Vkc 
                                v_Vlc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Vlc v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Vkc v_Vmc)))))))))) =>
     zen.Rnotall _p_T_T 
       (v_Vkc:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vlc:(zen.term _p_T_T) =>
           zen.forall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value_tol__equal _p_T_T _p_T_equal v_Vkc v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vkc v_Vmc))))))) 
       (v_Voc:(zen.term _p_T_T) =>
        v_Vpc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_T_T 
                 (v_Vlc:(zen.term _p_T_T) =>
                  zen.forall _p_T_T 
                    (v_Vmc:(zen.term _p_T_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc 
                                v_Vlc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Vlc v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Voc v_Vmc))))))))) =>
        zen.Rnotall _p_T_T 
          (v_Vlc:(zen.term _p_T_T) =>
           zen.forall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc v_Vmc)))))) 
          (v_Vqc:(zen.term _p_T_T) =>
           v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_T_T 
                    (v_Vmc:(zen.term _p_T_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc 
                                v_Vqc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Vqc v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Voc v_Vmc)))))))) =>
           zen.Rnotall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc v_Vqc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vqc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc v_Vmc))))) 
             (v_Vsc:(zen.term _p_T_T) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc 
                                v_Vqc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Vqc v_Vsc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Voc v_Vsc))))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc v_Vqc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vqc v_Vsc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc v_Vsc)))) 
                (v_Vuc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_T_equal v_Voc v_Vqc)))) =>
                 v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Vqc v_Vsc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value_tol__equal _p_T_T _p_T_equal 
                                   v_Voc v_Vsc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Vqc v_Vsc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value_tol__equal _p_T_T _p_T_equal v_Voc v_Vsc))) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_T_equal v_Vqc v_Vsc)))) =>
                    v_Vxc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Voc v_Vsc))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Voc v_Vqc))))) 
                      (v_Vyc:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Voc v_Vqc)))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Voc v_Vqc)))) 
                         (v_Vzc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc)))) =>
                          v_Vad:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Voc v_Vqc))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Voc v_Vqc))) 
                            v_Vuc v_Vad) v_Vyc) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_T_T v_Voc v_Vqc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_T_equal v_Voc v_Vqc))))))) =>
                       zen.Rcut 
                         (zen.triangle (zen.equal _p_T_T v_Vsc v_Vsc)) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.triangle (zen.equal _p_T_T v_Vsc v_Vsc))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vdd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vdd)) 
                            (_p_T_equal v_Vqc v_Vsc) 
                            (_p_T_equal v_Voc v_Vsc) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_T_equal v_Vqc v_Vsc) 
                                         (_p_T_equal v_Voc v_Vsc))))) =>
                             zen.Rsubst _p_T_T 
                               (v_Vfd:(zen.term _p_T_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_T_equal v_Vfd v_Vsc) 
                                        (_p_T_equal v_Voc v_Vsc)))) v_Vqc 
                               v_Voc 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_T_T v_Vqc v_Voc)))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_T_T v_Voc v_Vqc))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_T_equal v_Voc v_Vqc)))) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_T_T v_Voc v_Vqc))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal _p_T_T v_Voc v_Vqc)) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_T_T v_Voc v_Vqc))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal _p_T_T v_Voc v_Voc)) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_T_T v_Voc v_Voc))) =>
                                         zen.Rsubst _p_T_T 
                                           (v_Vkd:(zen.term _p_T_T) =>
                                            zen.triangle 
                                              (zen.equal _p_T_T v_Vkd v_Voc)) 
                                           v_Voc v_Vqc 
                                           (v_Vzc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_T_T v_Voc 
                                                        v_Vqc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_T_T v_Voc 
                                                    v_Vqc)) v_Vid v_Vzc) 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_T_T v_Vqc 
                                                     v_Voc))) =>
                                            zen.Rsubst _p_T_T 
                                              (v_Vmd:(zen.term _p_T_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_T_T v_Vqc 
                                                    v_Vmd)) v_Voc v_Voc 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_T_T 
                                                           v_Voc v_Voc)))) =>
                                               zen.Rnoteq _p_T_T v_Voc v_Vnd) 
                                              (v_Vld0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_T_T v_Vqc 
                                                        v_Voc))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_T_T v_Vqc 
                                                       v_Voc)) v_Vld0 v_Vgd) 
                                              v_Vld) v_Vjd) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_T_T v_Voc 
                                                     v_Voc)))) =>
                                         zen.Rnoteq _p_T_T v_Voc v_Vnd)) 
                                     v_Vhd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Voc v_Vqc)))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_T_equal v_Voc v_Vqc))) 
                                     (v_Vuc0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_T_equal v_Voc v_Vqc)))) =>
                                      zen.Rall _p_T_T 
                                        (v_Vkc:(zen.term _p_T_T) =>
                                         zen.forall _p_T_T 
                                           (v_Vlc:(zen.term _p_T_T) =>
                                            zen.forall _p_T_T 
                                              (v_Vmc:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Vkc 
                                                          v_Vlc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vlc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vkc 
                                                             v_Vmc))))))) 
                                        v_Voc 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.forall _p_T_T 
                                               (v_Vlc:(zen.term _p_T_T) =>
                                                zen.forall _p_T_T 
                                                  (v_Vmc:(zen.term _p_T_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal v_Voc 
                                                              v_Vlc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vlc v_Vmc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vmc)))))))) =>
                                         zen.Rall _p_T_T 
                                           (v_Vlc:(zen.term _p_T_T) =>
                                            zen.forall _p_T_T 
                                              (v_Vmc:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vlc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vlc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vmc)))))) 
                                           v_Vqc 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.forall _p_T_T 
                                                  (v_Vmc:(zen.term _p_T_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vqc v_Vmc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vmc))))))) =>
                                            zen.Rall _p_T_T 
                                              (v_Vmc:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vqc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vqc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vmc))))) 
                                              v_Vsc 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vqc v_Vsc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vqc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vqc 
                                                             v_Vsc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vsc)))) 
                                                 (v_Vad:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vqc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vqc))) v_Vuc0 
                                                    v_Vad) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vqc v_Vsc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vqc 
                                                             v_Vsc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vsc))) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                v_Vqc v_Vsc))) 
                                                       v_Vwc v_Vtd) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc)))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vdd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vdd)) 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc) 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc) 
                                                       (v_Vvd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    _p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                        zen.Rsubst _p_T_T 
                                                          (v_Vfd:
                                                           (zen.term _p_T_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_T_equal 
                                                                    v_Vfd 
                                                                    v_Vsc) 
                                                                   (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                          v_Voc v_Voc 
                                                          (v_Vnd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_T_T 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                           zen.Rnoteq _p_T_T 
                                                             v_Voc v_Vnd) 
                                                          (v_Vvd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                           zen.Rsubst _p_T_T 
                                                             (v_Vwd:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vwd) 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                             v_Vsc v_Vsc 
                                                             (v_Vxd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_T_T 
                                                                    v_Vsc 
                                                                    v_Vsc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_T_T 
                                                                    v_Vsc 
                                                                    v_Vsc)) 
                                                                v_Vcd v_Vxd) 
                                                             (v_Vvd1:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (_p_T_equal 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                v_Vvd1) 
                                                             v_Vvd0) v_Vvd) 
                                                       (v_Vud0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_T_equal 
                                                                   v_Voc 
                                                                   v_Vsc))) 
                                                          v_Vud0 v_Vxc) v_Vud) 
                                                    v_Vsd) v_Vrd) v_Vqd) 
                                           v_Vpd) _p_T_equal_transitive) 
                                     v_Vod) v_Vbd) 
                               (v_Vvd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_T_equal v_Voc v_Vsc) 
                                            (_p_T_equal v_Voc v_Vsc))))) =>
                                zen.Rsubst _p_T_T 
                                  (v_Vwd:(zen.term _p_T_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_T_equal v_Voc v_Vwd) 
                                           (_p_T_equal v_Voc v_Vsc)))) v_Vsc 
                                  v_Vsc 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_T_T v_Vsc v_Vsc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal _p_T_T v_Vsc v_Vsc)) 
                                     v_Vcd v_Vxd) 
                                  (v_Vvd0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_T_equal v_Voc v_Vsc) 
                                               (_p_T_equal v_Voc v_Vsc))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (_p_T_equal v_Voc v_Vsc) v_Vvd0) v_Vvd) 
                               v_Ved) 
                            (v_Vud:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Voc v_Vsc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_T_equal v_Voc v_Vsc))) 
                               v_Vud v_Vxc) v_Vwc) 
                         (v_Vxd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal _p_T_T v_Vsc v_Vsc)))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Vsc v_Vsc))) 
                            (v_Vyd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Vsc v_Vsc)))) =>
                             zen.Rall _p_T_T 
                               (v_Vkc:(zen.term _p_T_T) =>
                                zen.forall _p_T_T 
                                  (v_Vlc:(zen.term _p_T_T) =>
                                   zen.forall _p_T_T 
                                     (v_Vmc:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vkc v_Vlc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vlc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vkc v_Vmc))))))) 
                               v_Vqc 
                               (v_Vzd:
                                (zen.proof 
                                   (zen.forall _p_T_T 
                                      (v_Vlc:(zen.term _p_T_T) =>
                                       zen.forall _p_T_T 
                                         (v_Vmc:(zen.term _p_T_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Vqc v_Vlc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vlc v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vmc)))))))) =>
                                zen.Rall _p_T_T 
                                  (v_Vlc:(zen.term _p_T_T) =>
                                   zen.forall _p_T_T 
                                     (v_Vmc:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vqc v_Vlc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vlc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vmc)))))) 
                                  v_Vsc 
                                  (v_Vae:
                                   (zen.proof 
                                      (zen.forall _p_T_T 
                                         (v_Vmc:(zen.term _p_T_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Vqc v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vsc v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vmc))))))) =>
                                   zen.Rall _p_T_T 
                                     (v_Vmc:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vqc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vsc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vmc))))) 
                                     v_Vsc 
                                     (v_Vbe:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Vqc v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vsc v_Vsc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vqc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vsc v_Vsc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vsc)))) 
                                        (v_Vtd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vsc))) 
                                           v_Vwc v_Vtd) 
                                        (v_Vce:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vsc v_Vsc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vsc v_Vsc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vsc))) 
                                           (v_Vde:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_T_equal v_Vsc 
                                                           v_Vsc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_T_equal v_Vsc v_Vsc))) 
                                              v_Vyd v_Vde) 
                                           (v_Vwc0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vdd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vdd)) 
                                              (_p_T_equal v_Vqc v_Vsc) 
                                              (_p_T_equal v_Voc v_Vsc) 
                                              (v_Ved:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_T_equal v_Vqc 
                                                              v_Vsc) 
                                                           (_p_T_equal v_Voc 
                                                              v_Vsc))))) =>
                                               zen.Rsubst _p_T_T 
                                                 (v_Vfd:(zen.term _p_T_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_T_equal v_Vfd 
                                                             v_Vsc) 
                                                          (_p_T_equal v_Voc 
                                                             v_Vsc)))) v_Vqc 
                                                 v_Voc 
                                                 (v_Vgd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_T_T 
                                                              v_Vqc v_Voc)))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_T_T 
                                                             v_Voc v_Vqc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                v_Voc v_Vqc)))) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_T_T 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_T_T 
                                                             v_Voc v_Vqc)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_T_T 
                                                                 v_Voc v_Vqc))) =>
                                                        zen.Reqsym _p_T_T 
                                                          v_Voc v_Vqc v_Vid 
                                                          v_Vgd) v_Vhd) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                v_Voc v_Vqc))) 
                                                       (v_Vuc0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc)))) =>
                                                        zen.Rall _p_T_T 
                                                          (v_Vkc:
                                                           (zen.term _p_T_T) =>
                                                           zen.forall _p_T_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.forall 
                                                                _p_T_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                          v_Voc 
                                                          (v_Vpd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_T_T 
                                                                 (v_Vlc:
                                                                  (zen.term 
                                                                    _p_T_T) =>
                                                                  zen.forall 
                                                                    _p_T_T 
                                                                    (
                                                                    v_Vmc:
                                                                    (
                                                                    zen.term 
                                                                    _p_T_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))))) =>
                                                           zen.Rall _p_T_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.forall 
                                                                _p_T_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))) 
                                                             v_Vqc 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_T_T 
                                                                    (
                                                                    v_Vmc:
                                                                    (
                                                                    zen.term 
                                                                    _p_T_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))))) =>
                                                              zen.Rall 
                                                                _p_T_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))) 
                                                                v_Vsc 
                                                                (v_Vrd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   (v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    v_Vuc0 
                                                                    v_Vad) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    v_Vwc0 
                                                                    v_Vtd) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc) 
                                                                    v_Vsd) 
                                                                   v_Vrd) 
                                                                v_Vqd) v_Vpd) 
                                                          _p_T_equal_transitive) 
                                                       v_Vod) v_Vbd) 
                                                 (v_Vvd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc) 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc))))) =>
                                                  zen.Rsubst _p_T_T 
                                                    (v_Vwd:
                                                     (zen.term _p_T_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_T_equal 
                                                                v_Voc v_Vwd) 
                                                             (_p_T_equal 
                                                                v_Voc v_Vsc)))) 
                                                    v_Vsc v_Vsc 
                                                    (v_Vxd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_T_T 
                                                                 v_Vsc v_Vsc)))) =>
                                                     zen.Rnoteq _p_T_T v_Vsc 
                                                       v_Vxd0) 
                                                    (v_Vvd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc) v_Vvd0) 
                                                    v_Vvd) v_Ved) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_T_equal v_Voc 
                                                           v_Vsc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc))) v_Vud 
                                                 v_Vxc) v_Vwc0) v_Vce) v_Vbe) 
                                     v_Vae) v_Vzd) _p_T_equal_transitive) 
                            (v_Vde:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_T_equal v_Vsc v_Vsc))))) =>
                             zen.Rnoteq _p_T_T v_Vsc v_Vxd)))) v_Vvc) v_Vtc) 
             v_Vrc) v_Vpc) v_Vnc).

Imp_value__me_as_species : T_T:cc.uT -> Type.

Imp_value__mk_record :
  T_T:cc.uT ->
  Imp_value__rf_T:cc.uT ->
  Imp_value__rf_consistency_rule:((cc.eT Imp_value__rf_T) ->
                                  (cc.eT Imp_value__rf_T) ->
                                  cc.eT basics.bool__t) ->
  Imp_value__rf_element:(cc.eT Imp_value__rf_T) ->
  Imp_value__rf_equal:((cc.eT Imp_value__rf_T) ->
                       (cc.eT Imp_value__rf_T) -> cc.eT basics.bool__t) ->
  Imp_value__rf_parse:((cc.eT basics.string__t) -> cc.eT Imp_value__rf_T) ->
  Imp_value__rf_print:((cc.eT Imp_value__rf_T) -> cc.eT basics.string__t) ->
  Imp_value__rf_consistency_rule_reflexive:(dk_logic.eP 
                                              (dk_logic.forall 
                                                 Imp_value__rf_T 
                                                 (a:
                                                  (cc.eT Imp_value__rf_T) =>
                                                  dk_logic.ebP 
                                                    (Imp_value__rf_consistency_rule 
                                                       a a)))) ->
  Imp_value__rf_consistency_rule_symmetric:(dk_logic.eP 
                                              (dk_logic.forall 
                                                 Imp_value__rf_T 
                                                 (a:
                                                  (cc.eT Imp_value__rf_T) =>
                                                  dk_logic.forall 
                                                    Imp_value__rf_T 
                                                    (b:
                                                     (cc.eT Imp_value__rf_T) =>
                                                     dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (Imp_value__rf_consistency_rule 
                                                             a b)) 
                                                       (dk_logic.ebP 
                                                          (Imp_value__rf_consistency_rule 
                                                             b a)))))) ->
  Imp_value__rf_different:((cc.eT Imp_value__rf_T) ->
                           (cc.eT Imp_value__rf_T) -> cc.eT basics.bool__t) ->
  Imp_value__rf_equal_reflexive:(dk_logic.eP 
                                   (dk_logic.forall Imp_value__rf_T 
                                      (x:(cc.eT Imp_value__rf_T) =>
                                       dk_logic.ebP (Imp_value__rf_equal x x)))) ->
  Imp_value__rf_equal_symmetric:(dk_logic.eP 
                                   (dk_logic.forall Imp_value__rf_T 
                                      (x:(cc.eT Imp_value__rf_T) =>
                                       dk_logic.forall Imp_value__rf_T 
                                         (y:(cc.eT Imp_value__rf_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP 
                                               (Imp_value__rf_equal x y)) 
                                            (dk_logic.ebP 
                                               (Imp_value__rf_equal y x)))))) ->
  Imp_value__rf_equal_transitive:(dk_logic.eP 
                                    (dk_logic.forall Imp_value__rf_T 
                                       (x:(cc.eT Imp_value__rf_T) =>
                                        dk_logic.forall Imp_value__rf_T 
                                          (y:(cc.eT Imp_value__rf_T) =>
                                           dk_logic.forall Imp_value__rf_T 
                                             (z:(cc.eT Imp_value__rf_T) =>
                                              dk_logic.imp 
                                                (dk_logic.ebP 
                                                   (Imp_value__rf_equal x y)) 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (Imp_value__rf_equal y 
                                                         z)) 
                                                   (dk_logic.ebP 
                                                      (Imp_value__rf_equal x 
                                                         z)))))))) ->
  Imp_value__rf_same_is_not_different:(dk_logic.eP 
                                         (dk_logic.forall Imp_value__rf_T 
                                            (x:(cc.eT Imp_value__rf_T) =>
                                             dk_logic.forall Imp_value__rf_T 
                                               (y:(cc.eT Imp_value__rf_T) =>
                                                dk_logic.eqv 
                                                  (dk_logic.ebP 
                                                     (Imp_value__rf_different 
                                                        x y)) 
                                                  (dk_logic.not 
                                                     (dk_logic.ebP 
                                                        (Imp_value__rf_equal 
                                                           x y))))))) ->
  Imp_value__rf_different_is_complete:(dk_logic.eP 
                                         (dk_logic.forall Imp_value__rf_T 
                                            (x:(cc.eT Imp_value__rf_T) =>
                                             dk_logic.forall Imp_value__rf_T 
                                               (y:(cc.eT Imp_value__rf_T) =>
                                                dk_logic.forall 
                                                  Imp_value__rf_T 
                                                  (z:
                                                   (cc.eT Imp_value__rf_T) =>
                                                   dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (Imp_value__rf_different 
                                                           x y)) 
                                                     (dk_logic.or 
                                                        (dk_logic.ebP 
                                                           (Imp_value__rf_different 
                                                              x z)) 
                                                        (dk_logic.ebP 
                                                           (Imp_value__rf_different 
                                                              y z)))))))) ->
  Imp_value__rf_different_is_irreflexive:(dk_logic.eP 
                                            (dk_logic.forall Imp_value__rf_T 
                                               (x:(cc.eT Imp_value__rf_T) =>
                                                dk_logic.not 
                                                  (dk_logic.ebP 
                                                     (Imp_value__rf_different 
                                                        x x))))) ->
  Imp_value__rf_different_is_symmetric:(dk_logic.eP 
                                          (dk_logic.forall Imp_value__rf_T 
                                             (x:(cc.eT Imp_value__rf_T) =>
                                              dk_logic.forall 
                                                Imp_value__rf_T 
                                                (y:(cc.eT Imp_value__rf_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (Imp_value__rf_different 
                                                         x y)) 
                                                   (dk_logic.ebP 
                                                      (Imp_value__rf_different 
                                                         y x)))))) ->
  Imp_value__me_as_species T_T.

def proj_Imp_value__rf_T :
  T_T:cc.uT -> record:(Imp_value__me_as_species T_T) -> cc.uT.

[Imp_value__rf_T]
  proj_Imp_value__rf_T _ (Imp_value__mk_record _ Imp_value__rf_T _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_T.

def proj_Imp_value__rf_consistency_rule :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  (cc.eT (proj_Imp_value__rf_T T_T record)) ->
  (cc.eT (proj_Imp_value__rf_T T_T record)) -> cc.eT basics.bool__t.

[Imp_value__rf_consistency_rule]
  proj_Imp_value__rf_consistency_rule _ (Imp_value__mk_record _ _ 
    Imp_value__rf_consistency_rule _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_consistency_rule.

def proj_Imp_value__rf_element :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  cc.eT (proj_Imp_value__rf_T T_T record).

[Imp_value__rf_element]
  proj_Imp_value__rf_element _ (Imp_value__mk_record _ _ _ 
    Imp_value__rf_element _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_element.

def proj_Imp_value__rf_equal :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  (cc.eT (proj_Imp_value__rf_T T_T record)) ->
  (cc.eT (proj_Imp_value__rf_T T_T record)) -> cc.eT basics.bool__t.

[Imp_value__rf_equal]
  proj_Imp_value__rf_equal _ (Imp_value__mk_record _ _ _ _ 
    Imp_value__rf_equal _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_equal.

def proj_Imp_value__rf_parse :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  (cc.eT basics.string__t) -> cc.eT (proj_Imp_value__rf_T T_T record).

[Imp_value__rf_parse]
  proj_Imp_value__rf_parse _ (Imp_value__mk_record _ _ _ _ _ 
    Imp_value__rf_parse _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_parse.

def proj_Imp_value__rf_print :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  (cc.eT (proj_Imp_value__rf_T T_T record)) -> cc.eT basics.string__t.

[Imp_value__rf_print]
  proj_Imp_value__rf_print _ (Imp_value__mk_record _ _ _ _ _ _ 
    Imp_value__rf_print _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_print.

def proj_Imp_value__rf_consistency_rule_reflexive :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (a:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.ebP (proj_Imp_value__rf_consistency_rule T_T record a a))).

[Imp_value__rf_consistency_rule_reflexive]
  proj_Imp_value__rf_consistency_rule_reflexive _ (Imp_value__mk_record _ _ 
    _ _ _ _ _ Imp_value__rf_consistency_rule_reflexive _ _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_consistency_rule_reflexive.

def proj_Imp_value__rf_consistency_rule_symmetric :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (a:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.forall (proj_Imp_value__rf_T T_T record) 
          (b:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Imp_value__rf_consistency_rule T_T record a b)) 
             (dk_logic.ebP 
                (proj_Imp_value__rf_consistency_rule T_T record b a))))).

[Imp_value__rf_consistency_rule_symmetric]
  proj_Imp_value__rf_consistency_rule_symmetric _ (Imp_value__mk_record _ _ 
    _ _ _ _ _ _ Imp_value__rf_consistency_rule_symmetric _ _ _ _ _ _ _ _)
  -->
  Imp_value__rf_consistency_rule_symmetric.

def proj_Imp_value__rf_different :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  (cc.eT (proj_Imp_value__rf_T T_T record)) ->
  (cc.eT (proj_Imp_value__rf_T T_T record)) -> cc.eT basics.bool__t.

[Imp_value__rf_different]
  proj_Imp_value__rf_different _ (Imp_value__mk_record _ _ _ _ _ _ _ _ _ 
    Imp_value__rf_different _ _ _ _ _ _ _)
  -->
  Imp_value__rf_different.

def proj_Imp_value__rf_equal_reflexive :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (x:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.ebP (proj_Imp_value__rf_equal T_T record x x))).

[Imp_value__rf_equal_reflexive]
  proj_Imp_value__rf_equal_reflexive _ (Imp_value__mk_record _ _ _ _ _ _ _ _ 
    _ _ Imp_value__rf_equal_reflexive _ _ _ _ _ _)
  -->
  Imp_value__rf_equal_reflexive.

def proj_Imp_value__rf_equal_symmetric :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (x:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.forall (proj_Imp_value__rf_T T_T record) 
          (y:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP (proj_Imp_value__rf_equal T_T record x y)) 
             (dk_logic.ebP (proj_Imp_value__rf_equal T_T record y x))))).

[Imp_value__rf_equal_symmetric]
  proj_Imp_value__rf_equal_symmetric _ (Imp_value__mk_record _ _ _ _ _ _ _ _ 
    _ _ _ Imp_value__rf_equal_symmetric _ _ _ _ _)
  -->
  Imp_value__rf_equal_symmetric.

def proj_Imp_value__rf_equal_transitive :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (x:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.forall (proj_Imp_value__rf_T T_T record) 
          (y:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
           dk_logic.forall (proj_Imp_value__rf_T T_T record) 
             (z:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP (proj_Imp_value__rf_equal T_T record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP (proj_Imp_value__rf_equal T_T record y z)) 
                   (dk_logic.ebP (proj_Imp_value__rf_equal T_T record x z))))))).

[Imp_value__rf_equal_transitive]
  proj_Imp_value__rf_equal_transitive _ (Imp_value__mk_record _ _ _ _ _ _ _ 
    _ _ _ _ _ Imp_value__rf_equal_transitive _ _ _ _)
  -->
  Imp_value__rf_equal_transitive.

def proj_Imp_value__rf_same_is_not_different :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (x:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.forall (proj_Imp_value__rf_T T_T record) 
          (y:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
           dk_logic.eqv 
             (dk_logic.ebP (proj_Imp_value__rf_different T_T record x y)) 
             (dk_logic.not 
                (dk_logic.ebP (proj_Imp_value__rf_equal T_T record x y)))))).

[Imp_value__rf_same_is_not_different]
  proj_Imp_value__rf_same_is_not_different _ (Imp_value__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ Imp_value__rf_same_is_not_different _ _ _)
  -->
  Imp_value__rf_same_is_not_different.

def proj_Imp_value__rf_different_is_complete :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (x:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.forall (proj_Imp_value__rf_T T_T record) 
          (y:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
           dk_logic.forall (proj_Imp_value__rf_T T_T record) 
             (z:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP (proj_Imp_value__rf_different T_T record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP 
                      (proj_Imp_value__rf_different T_T record x z)) 
                   (dk_logic.ebP 
                      (proj_Imp_value__rf_different T_T record y z))))))).

[Imp_value__rf_different_is_complete]
  proj_Imp_value__rf_different_is_complete _ (Imp_value__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ Imp_value__rf_different_is_complete _ _)
  -->
  Imp_value__rf_different_is_complete.

def proj_Imp_value__rf_different_is_irreflexive :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (x:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.not 
          (dk_logic.ebP (proj_Imp_value__rf_different T_T record x x)))).

[Imp_value__rf_different_is_irreflexive]
  proj_Imp_value__rf_different_is_irreflexive _ (Imp_value__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Imp_value__rf_different_is_irreflexive _)
  -->
  Imp_value__rf_different_is_irreflexive.

def proj_Imp_value__rf_different_is_symmetric :
  T_T:cc.uT ->
  record:(Imp_value__me_as_species T_T) ->
  dk_logic.eP 
    (dk_logic.forall (proj_Imp_value__rf_T T_T record) 
       (x:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
        dk_logic.forall (proj_Imp_value__rf_T T_T record) 
          (y:(cc.eT (proj_Imp_value__rf_T T_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP (proj_Imp_value__rf_different T_T record x y)) 
             (dk_logic.ebP (proj_Imp_value__rf_different T_T record y x))))).

[Imp_value__rf_different_is_symmetric]
  proj_Imp_value__rf_different_is_symmetric _ (Imp_value__mk_record _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Imp_value__rf_different_is_symmetric)
  -->
  Imp_value__rf_different_is_symmetric.

def Imp_value__consistency_rule :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT _p_T_T) -> y:(cc.eT _p_T_T) -> cc.eT basics.bool__t
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT _p_T_T) => y:(cc.eT _p_T_T) => _p_T_equal x y.

def Imp_value__element :
  _p_T_T:cc.uT -> _p_T_element:(cc.eT _p_T_T) -> cc.eT _p_T_T
  :=
  _p_T_T:cc.uT => _p_T_element:(cc.eT _p_T_T) => _p_T_element.

def Imp_value__equal :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT _p_T_T) -> y:(cc.eT _p_T_T) -> cc.eT basics.bool__t
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT _p_T_T) => y:(cc.eT _p_T_T) => _p_T_equal x y.

def Imp_value__parse :
  _p_T_T:cc.uT ->
  _p_T_parse:((cc.eT basics.string__t) -> cc.eT _p_T_T) ->
  x:(cc.eT basics.string__t) -> cc.eT _p_T_T
  :=
  _p_T_T:cc.uT =>
  _p_T_parse:((cc.eT basics.string__t) -> cc.eT _p_T_T) =>
  x:(cc.eT basics.string__t) => _p_T_parse x.

def Imp_value__print :
  _p_T_T:cc.uT ->
  _p_T_print:((cc.eT _p_T_T) -> cc.eT basics.string__t) ->
  x:(cc.eT _p_T_T) -> cc.eT basics.string__t
  :=
  _p_T_T:cc.uT =>
  _p_T_print:((cc.eT _p_T_T) -> cc.eT basics.string__t) =>
  x:(cc.eT _p_T_T) => _p_T_print x.

def Imp_value__consistency_rule_reflexive :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_T_T 
                             (x:(cc.eT _p_T_T) =>
                              dk_logic.ebP (_p_T_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (a:(cc.eT _p_T_T) =>
        dk_logic.ebP (Imp_value__consistency_rule _p_T_T _p_T_equal a a)))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) => dk_logic.ebP (_p_T_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.triangle 
          (focal.is_true 
             (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vzb:(zen.term _p_T_T) =>
               zen.triangle 
                 (focal.is_true 
                    (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vzb 
                       v_Vzb)))))) =>
     zen.Rnotall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.triangle 
          (focal.is_true 
             (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term _p_T_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc))))) =>
        zen.Rall _p_T_T 
          (v_Vdc:(zen.term _p_T_T) =>
           zen.triangle (focal.is_true (_p_T_equal v_Vdc v_Vdc))) v_Vbc 
          (v_Vec:
           (zen.proof (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc)))) =>
           zen.Raxiom 
             (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc))) v_Vec 
             v_Vcc) _p_T_equal_reflexive) v_Vac).

def Imp_value__consistency_rule_symmetric :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_T_T 
                             (x:(cc.eT _p_T_T) =>
                              dk_logic.forall _p_T_T 
                                (y:(cc.eT _p_T_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_T_equal x y)) 
                                   (dk_logic.ebP (_p_T_equal y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (a:(cc.eT _p_T_T) =>
        dk_logic.forall _p_T_T 
          (b:(cc.eT _p_T_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (Imp_value__consistency_rule _p_T_T _p_T_equal a b)) 
             (dk_logic.ebP 
                (Imp_value__consistency_rule _p_T_T _p_T_equal b a)))))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
              (dk_logic.ebP (_p_T_equal y x)))))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vzb:(zen.term _p_T_T) =>
               zen.forall _p_T_T 
                 (v_Vac:(zen.term _p_T_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__consistency_rule _p_T_T _p_T_equal 
                             v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__consistency_rule _p_T_T _p_T_equal 
                             v_Vac v_Vzb)))))))) =>
     zen.Rnotall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term _p_T_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_T_T 
                 (v_Vac:(zen.term _p_T_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__consistency_rule _p_T_T _p_T_equal 
                             v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__consistency_rule _p_T_T _p_T_equal 
                             v_Vac v_Vcc))))))) =>
        zen.Rnotall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vac v_Vcc)))) 
          (v_Vec:(zen.term _p_T_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__consistency_rule _p_T_T _p_T_equal 
                             v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__consistency_rule _p_T_T _p_T_equal 
                             v_Vec v_Vcc)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__consistency_rule _p_T_T _p_T_equal v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_T_equal v_Vec v_Vcc))))) =>
              zen.Rall _p_T_T 
                (v_Vic:(zen.term _p_T_T) =>
                 zen.forall _p_T_T 
                   (v_Vjc:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vic v_Vjc))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vjc v_Vic))))) 
                v_Vcc 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall _p_T_T 
                       (v_Vjc:(zen.term _p_T_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vcc v_Vjc))) 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vjc v_Vcc)))))) =>
                 zen.Rall _p_T_T 
                   (v_Vjc:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vjc))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vjc v_Vcc)))) 
                   v_Vec 
                   (v_Vlc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vec v_Vcc))))) =>
                    zen.Rimply 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vec))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vec v_Vcc))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_T_equal v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_T_equal v_Vcc v_Vec))) v_Vgc 
                         v_Vmc) 
                      (v_Vnc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vec v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_T_equal v_Vec v_Vcc))) v_Vnc 
                         v_Vhc) v_Vlc) v_Vkc) _p_T_equal_symmetric) v_Vfc) 
          v_Vdc) v_Vbc).

def Imp_value__equal_reflexive :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_T_T 
                             (x:(cc.eT _p_T_T) =>
                              dk_logic.ebP (_p_T_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (x:(cc.eT _p_T_T) =>
        dk_logic.ebP (Imp_value__equal _p_T_T _p_T_equal x x)))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) => dk_logic.ebP (_p_T_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.triangle 
          (focal.is_true (Imp_value__equal _p_T_T _p_T_equal v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vzb:(zen.term _p_T_T) =>
               zen.triangle 
                 (focal.is_true 
                    (Imp_value__equal _p_T_T _p_T_equal v_Vzb v_Vzb)))))) =>
     zen.Rnotall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.triangle 
          (focal.is_true (Imp_value__equal _p_T_T _p_T_equal v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term _p_T_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc))))) =>
        zen.Rall _p_T_T 
          (v_Vzb:(zen.term _p_T_T) =>
           zen.triangle (focal.is_true (_p_T_equal v_Vzb v_Vzb))) v_Vbc 
          (v_Vdc:
           (zen.proof (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc)))) =>
           zen.Raxiom 
             (zen.triangle (focal.is_true (_p_T_equal v_Vbc v_Vbc))) v_Vdc 
             v_Vcc) _p_T_equal_reflexive) v_Vac).

def Imp_value__equal_symmetric :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_T_T 
                             (x:(cc.eT _p_T_T) =>
                              dk_logic.forall _p_T_T 
                                (y:(cc.eT _p_T_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_T_equal x y)) 
                                   (dk_logic.ebP (_p_T_equal y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (x:(cc.eT _p_T_T) =>
        dk_logic.forall _p_T_T 
          (y:(cc.eT _p_T_T) =>
           dk_logic.imp 
             (dk_logic.ebP (Imp_value__equal _p_T_T _p_T_equal x y)) 
             (dk_logic.ebP (Imp_value__equal _p_T_T _p_T_equal y x)))))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
              (dk_logic.ebP (_p_T_equal y x)))))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vzb:(zen.term _p_T_T) =>
               zen.forall _p_T_T 
                 (v_Vac:(zen.term _p_T_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__equal _p_T_T _p_T_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__equal _p_T_T _p_T_equal v_Vac v_Vzb)))))))) =>
     zen.Rnotall _p_T_T 
       (v_Vzb:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term _p_T_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_T_T 
                 (v_Vac:(zen.term _p_T_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__equal _p_T_T _p_T_equal v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__equal _p_T_T _p_T_equal v_Vac v_Vcc))))))) =>
        zen.Rnotall _p_T_T 
          (v_Vac:(zen.term _p_T_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vac v_Vcc)))) 
          (v_Vec:(zen.term _p_T_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__equal _p_T_T _p_T_equal v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Imp_value__equal _p_T_T _p_T_equal v_Vec v_Vcc)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (Imp_value__equal _p_T_T _p_T_equal v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_T_equal v_Vec v_Vcc))))) =>
              zen.Rall _p_T_T 
                (v_Vzb:(zen.term _p_T_T) =>
                 zen.forall _p_T_T 
                   (v_Vac:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vzb v_Vac))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vac v_Vzb))))) 
                v_Vcc 
                (v_Vic:
                 (zen.proof 
                    (zen.forall _p_T_T 
                       (v_Vac:(zen.term _p_T_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vcc v_Vac))) 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vac v_Vcc)))))) =>
                 zen.Rall _p_T_T 
                   (v_Vac:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vac))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vac v_Vcc)))) 
                   v_Vec 
                   (v_Vjc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vec v_Vcc))))) =>
                    zen.Rimply 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vcc v_Vec))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vec v_Vcc))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_T_equal v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_T_equal v_Vcc v_Vec))) v_Vgc 
                         v_Vkc) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Vec v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_T_equal v_Vec v_Vcc))) v_Vlc 
                         v_Vhc) v_Vjc) v_Vic) _p_T_equal_symmetric) v_Vfc) 
          v_Vdc) v_Vbc).

def Imp_value__equal_transitive :
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_T_T 
                              (x:(cc.eT _p_T_T) =>
                               dk_logic.forall _p_T_T 
                                 (y:(cc.eT _p_T_T) =>
                                  dk_logic.forall _p_T_T 
                                    (z:(cc.eT _p_T_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_T_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_T_equal y z)) 
                                          (dk_logic.ebP (_p_T_equal x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_T_T 
       (x:(cc.eT _p_T_T) =>
        dk_logic.forall _p_T_T 
          (y:(cc.eT _p_T_T) =>
           dk_logic.forall _p_T_T 
             (z:(cc.eT _p_T_T) =>
              dk_logic.imp 
                (dk_logic.ebP (Imp_value__equal _p_T_T _p_T_equal x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP (Imp_value__equal _p_T_T _p_T_equal y z)) 
                   (dk_logic.ebP (Imp_value__equal _p_T_T _p_T_equal x z)))))))
  :=
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.forall _p_T_T 
              (z:(cc.eT _p_T_T) =>
               dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_T_equal y z)) 
                    (dk_logic.ebP (_p_T_equal x z)))))))) =>
  zen.nnpp 
    (zen.forall _p_T_T 
       (v_Vkc:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vlc:(zen.term _p_T_T) =>
           zen.forall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value__equal _p_T_T _p_T_equal v_Vkc v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vkc v_Vmc)))))))) 
    (v_Vnc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_T_T 
              (v_Vkc:(zen.term _p_T_T) =>
               zen.forall _p_T_T 
                 (v_Vlc:(zen.term _p_T_T) =>
                  zen.forall _p_T_T 
                    (v_Vmc:(zen.term _p_T_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value__equal _p_T_T _p_T_equal v_Vkc v_Vlc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Vlc 
                                   v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Vkc 
                                   v_Vmc)))))))))) =>
     zen.Rnotall _p_T_T 
       (v_Vkc:(zen.term _p_T_T) =>
        zen.forall _p_T_T 
          (v_Vlc:(zen.term _p_T_T) =>
           zen.forall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value__equal _p_T_T _p_T_equal v_Vkc v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vkc v_Vmc))))))) 
       (v_Voc:(zen.term _p_T_T) =>
        v_Vpc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_T_T 
                 (v_Vlc:(zen.term _p_T_T) =>
                  zen.forall _p_T_T 
                    (v_Vmc:(zen.term _p_T_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vlc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Vlc 
                                   v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Voc 
                                   v_Vmc))))))))) =>
        zen.Rnotall _p_T_T 
          (v_Vlc:(zen.term _p_T_T) =>
           zen.forall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vmc)))))) 
          (v_Vqc:(zen.term _p_T_T) =>
           v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_T_T 
                    (v_Vmc:(zen.term _p_T_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vqc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Vqc 
                                   v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Voc 
                                   v_Vmc)))))))) =>
           zen.Rnotall _p_T_T 
             (v_Vmc:(zen.term _p_T_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vqc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vqc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vmc))))) 
             (v_Vsc:(zen.term _p_T_T) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vqc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Vqc 
                                   v_Vsc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Voc 
                                   v_Vsc))))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vqc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vqc v_Vsc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vsc)))) 
                (v_Vuc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_T_equal v_Voc v_Vqc)))) =>
                 v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Vqc 
                                   v_Vsc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Imp_value__equal _p_T_T _p_T_equal v_Voc 
                                   v_Vsc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Vqc v_Vsc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Imp_value__equal _p_T_T _p_T_equal v_Voc v_Vsc))) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_T_equal v_Vqc v_Vsc)))) =>
                    v_Vxc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (_p_T_equal v_Voc v_Vsc))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Voc v_Vqc))))) 
                      (v_Vyc:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Voc v_Vqc)))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Voc v_Vqc)))) 
                         (v_Vzc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal _p_T_T v_Voc v_Vqc)))) =>
                          v_Vad:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Voc v_Vqc))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Voc v_Vqc))) 
                            v_Vuc v_Vad) v_Vyc) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_T_T v_Voc v_Vqc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_T_equal v_Voc v_Vqc))))))) =>
                       zen.Rcut 
                         (zen.triangle (zen.equal _p_T_T v_Vsc v_Vsc)) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.triangle (zen.equal _p_T_T v_Vsc v_Vsc))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vdd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vdd)) 
                            (_p_T_equal v_Vqc v_Vsc) 
                            (_p_T_equal v_Voc v_Vsc) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_T_equal v_Vqc v_Vsc) 
                                         (_p_T_equal v_Voc v_Vsc))))) =>
                             zen.Rsubst _p_T_T 
                               (v_Vfd:(zen.term _p_T_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_T_equal v_Vfd v_Vsc) 
                                        (_p_T_equal v_Voc v_Vsc)))) v_Vqc 
                               v_Voc 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_T_T v_Vqc v_Voc)))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_T_T v_Voc v_Vqc))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_T_equal v_Voc v_Vqc)))) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_T_T v_Voc v_Vqc))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal _p_T_T v_Voc v_Vqc)) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_T_T v_Voc v_Vqc))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal _p_T_T v_Voc v_Voc)) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_T_T v_Voc v_Voc))) =>
                                         zen.Rsubst _p_T_T 
                                           (v_Vkd:(zen.term _p_T_T) =>
                                            zen.triangle 
                                              (zen.equal _p_T_T v_Vkd v_Voc)) 
                                           v_Voc v_Vqc 
                                           (v_Vzc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_T_T v_Voc 
                                                        v_Vqc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_T_T v_Voc 
                                                    v_Vqc)) v_Vid v_Vzc) 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_T_T v_Vqc 
                                                     v_Voc))) =>
                                            zen.Rsubst _p_T_T 
                                              (v_Vmd:(zen.term _p_T_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_T_T v_Vqc 
                                                    v_Vmd)) v_Voc v_Voc 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_T_T 
                                                           v_Voc v_Voc)))) =>
                                               zen.Rnoteq _p_T_T v_Voc v_Vnd) 
                                              (v_Vld0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_T_T v_Vqc 
                                                        v_Voc))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_T_T v_Vqc 
                                                       v_Voc)) v_Vld0 v_Vgd) 
                                              v_Vld) v_Vjd) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_T_T v_Voc 
                                                     v_Voc)))) =>
                                         zen.Rnoteq _p_T_T v_Voc v_Vnd)) 
                                     v_Vhd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Voc v_Vqc)))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_T_equal v_Voc v_Vqc))) 
                                     (v_Vuc0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_T_equal v_Voc v_Vqc)))) =>
                                      zen.Rall _p_T_T 
                                        (v_Vkc:(zen.term _p_T_T) =>
                                         zen.forall _p_T_T 
                                           (v_Vlc:(zen.term _p_T_T) =>
                                            zen.forall _p_T_T 
                                              (v_Vmc:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Vkc 
                                                          v_Vlc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vlc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vkc 
                                                             v_Vmc))))))) 
                                        v_Voc 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.forall _p_T_T 
                                               (v_Vlc:(zen.term _p_T_T) =>
                                                zen.forall _p_T_T 
                                                  (v_Vmc:(zen.term _p_T_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal v_Voc 
                                                              v_Vlc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vlc v_Vmc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vmc)))))))) =>
                                         zen.Rall _p_T_T 
                                           (v_Vlc:(zen.term _p_T_T) =>
                                            zen.forall _p_T_T 
                                              (v_Vmc:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vlc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vlc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vmc)))))) 
                                           v_Vqc 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.forall _p_T_T 
                                                  (v_Vmc:(zen.term _p_T_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vqc v_Vmc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vmc))))))) =>
                                            zen.Rall _p_T_T 
                                              (v_Vmc:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vqc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vqc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vmc))))) 
                                              v_Vsc 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vqc v_Vsc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vqc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vqc 
                                                             v_Vsc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vsc)))) 
                                                 (v_Vad:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vqc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vqc))) v_Vuc0 
                                                    v_Vad) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vqc v_Vsc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vqc 
                                                             v_Vsc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Voc 
                                                             v_Vsc))) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                v_Vqc v_Vsc))) 
                                                       v_Vwc v_Vtd) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc)))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vdd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vdd)) 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc) 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc) 
                                                       (v_Vvd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    _p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                        zen.Rsubst _p_T_T 
                                                          (v_Vfd:
                                                           (zen.term _p_T_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_T_equal 
                                                                    v_Vfd 
                                                                    v_Vsc) 
                                                                   (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                          v_Voc v_Voc 
                                                          (v_Vnd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_T_T 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                           zen.Rnoteq _p_T_T 
                                                             v_Voc v_Vnd) 
                                                          (v_Vvd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                           zen.Rsubst _p_T_T 
                                                             (v_Vwd:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vwd) 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                             v_Vsc v_Vsc 
                                                             (v_Vxd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_T_T 
                                                                    v_Vsc 
                                                                    v_Vsc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_T_T 
                                                                    v_Vsc 
                                                                    v_Vsc)) 
                                                                v_Vcd v_Vxd) 
                                                             (v_Vvd1:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (_p_T_equal 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                v_Vvd1) 
                                                             v_Vvd0) v_Vvd) 
                                                       (v_Vud0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_T_equal 
                                                                   v_Voc 
                                                                   v_Vsc))) 
                                                          v_Vud0 v_Vxc) v_Vud) 
                                                    v_Vsd) v_Vrd) v_Vqd) 
                                           v_Vpd) _p_T_equal_transitive) 
                                     v_Vod) v_Vbd) 
                               (v_Vvd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_T_equal v_Voc v_Vsc) 
                                            (_p_T_equal v_Voc v_Vsc))))) =>
                                zen.Rsubst _p_T_T 
                                  (v_Vwd:(zen.term _p_T_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_T_equal v_Voc v_Vwd) 
                                           (_p_T_equal v_Voc v_Vsc)))) v_Vsc 
                                  v_Vsc 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_T_T v_Vsc v_Vsc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal _p_T_T v_Vsc v_Vsc)) 
                                     v_Vcd v_Vxd) 
                                  (v_Vvd0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_T_equal v_Voc v_Vsc) 
                                               (_p_T_equal v_Voc v_Vsc))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (_p_T_equal v_Voc v_Vsc) v_Vvd0) v_Vvd) 
                               v_Ved) 
                            (v_Vud:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Voc v_Vsc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_T_equal v_Voc v_Vsc))) 
                               v_Vud v_Vxc) v_Vwc) 
                         (v_Vxd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal _p_T_T v_Vsc v_Vsc)))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true (_p_T_equal v_Vsc v_Vsc))) 
                            (v_Vyd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_T_equal v_Vsc v_Vsc)))) =>
                             zen.Rall _p_T_T 
                               (v_Vkc:(zen.term _p_T_T) =>
                                zen.forall _p_T_T 
                                  (v_Vlc:(zen.term _p_T_T) =>
                                   zen.forall _p_T_T 
                                     (v_Vmc:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vkc v_Vlc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vlc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vkc v_Vmc))))))) 
                               v_Vqc 
                               (v_Vzd:
                                (zen.proof 
                                   (zen.forall _p_T_T 
                                      (v_Vlc:(zen.term _p_T_T) =>
                                       zen.forall _p_T_T 
                                         (v_Vmc:(zen.term _p_T_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Vqc v_Vlc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vlc v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vmc)))))))) =>
                                zen.Rall _p_T_T 
                                  (v_Vlc:(zen.term _p_T_T) =>
                                   zen.forall _p_T_T 
                                     (v_Vmc:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vqc v_Vlc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vlc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vmc)))))) 
                                  v_Vsc 
                                  (v_Vae:
                                   (zen.proof 
                                      (zen.forall _p_T_T 
                                         (v_Vmc:(zen.term _p_T_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Vqc v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vsc v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vmc))))))) =>
                                   zen.Rall _p_T_T 
                                     (v_Vmc:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vqc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vsc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vmc))))) 
                                     v_Vsc 
                                     (v_Vbe:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal v_Vqc v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vsc v_Vsc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vqc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vsc v_Vsc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vsc)))) 
                                        (v_Vtd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vsc))) 
                                           v_Vwc v_Vtd) 
                                        (v_Vce:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vsc v_Vsc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vsc v_Vsc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vqc v_Vsc))) 
                                           (v_Vde:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_T_equal v_Vsc 
                                                           v_Vsc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_T_equal v_Vsc v_Vsc))) 
                                              v_Vyd v_Vde) 
                                           (v_Vwc0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vqc v_Vsc)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vdd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vdd)) 
                                              (_p_T_equal v_Vqc v_Vsc) 
                                              (_p_T_equal v_Voc v_Vsc) 
                                              (v_Ved:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_T_equal v_Vqc 
                                                              v_Vsc) 
                                                           (_p_T_equal v_Voc 
                                                              v_Vsc))))) =>
                                               zen.Rsubst _p_T_T 
                                                 (v_Vfd:(zen.term _p_T_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_T_equal v_Vfd 
                                                             v_Vsc) 
                                                          (_p_T_equal v_Voc 
                                                             v_Vsc)))) v_Vqc 
                                                 v_Voc 
                                                 (v_Vgd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_T_T 
                                                              v_Vqc v_Voc)))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_T_T 
                                                             v_Voc v_Vqc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                v_Voc v_Vqc)))) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_T_T 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_T_T 
                                                             v_Voc v_Vqc)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_T_T 
                                                                 v_Voc v_Vqc))) =>
                                                        zen.Reqsym _p_T_T 
                                                          v_Voc v_Vqc v_Vid 
                                                          v_Vgd) v_Vhd) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                v_Voc v_Vqc))) 
                                                       (v_Vuc0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc)))) =>
                                                        zen.Rall _p_T_T 
                                                          (v_Vkc:
                                                           (zen.term _p_T_T) =>
                                                           zen.forall _p_T_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.forall 
                                                                _p_T_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                          v_Voc 
                                                          (v_Vpd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_T_T 
                                                                 (v_Vlc:
                                                                  (zen.term 
                                                                    _p_T_T) =>
                                                                  zen.forall 
                                                                    _p_T_T 
                                                                    (
                                                                    v_Vmc:
                                                                    (
                                                                    zen.term 
                                                                    _p_T_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))))) =>
                                                           zen.Rall _p_T_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.forall 
                                                                _p_T_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))) 
                                                             v_Vqc 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_T_T 
                                                                    (
                                                                    v_Vmc:
                                                                    (
                                                                    zen.term 
                                                                    _p_T_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))))) =>
                                                              zen.Rall 
                                                                _p_T_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))) 
                                                                v_Vsc 
                                                                (v_Vrd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   (v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    v_Vuc0 
                                                                    v_Vad) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    v_Vwc0 
                                                                    v_Vtd) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc) 
                                                                    v_Vsd) 
                                                                   v_Vrd) 
                                                                v_Vqd) v_Vpd) 
                                                          _p_T_equal_transitive) 
                                                       v_Vod) v_Vbd) 
                                                 (v_Vvd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc) 
                                                              (_p_T_equal 
                                                                 v_Voc v_Vsc))))) =>
                                                  zen.Rsubst _p_T_T 
                                                    (v_Vwd:
                                                     (zen.term _p_T_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_T_equal 
                                                                v_Voc v_Vwd) 
                                                             (_p_T_equal 
                                                                v_Voc v_Vsc)))) 
                                                    v_Vsc v_Vsc 
                                                    (v_Vxd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_T_T 
                                                                 v_Vsc v_Vsc)))) =>
                                                     zen.Rnoteq _p_T_T v_Vsc 
                                                       v_Vxd0) 
                                                    (v_Vvd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (_p_T_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc) v_Vvd0) 
                                                    v_Vvd) v_Ved) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_T_equal v_Voc 
                                                           v_Vsc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Voc 
                                                          v_Vsc))) v_Vud 
                                                 v_Vxc) v_Vwc0) v_Vce) v_Vbe) 
                                     v_Vae) v_Vzd) _p_T_equal_transitive) 
                            (v_Vde:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_T_equal v_Vsc v_Vsc))))) =>
                             zen.Rnoteq _p_T_T v_Vsc v_Vxd)))) v_Vvc) v_Vtc) 
             v_Vrc) v_Vpc) v_Vnc).

def Imp_value__collection_create
  :=
  _p_T_T:cc.uT =>
  _p_T_element:(cc.eT _p_T_T) =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) => dk_logic.ebP (_p_T_equal x x)))) =>
  _p_T_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
              (dk_logic.ebP (_p_T_equal y x)))))) =>
  _p_T_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.forall _p_T_T 
              (z:(cc.eT _p_T_T) =>
               dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_T_equal y z)) 
                    (dk_logic.ebP (_p_T_equal x z)))))))) =>
  _p_T_parse:((cc.eT basics.string__t) -> cc.eT _p_T_T) =>
  _p_T_print:((cc.eT _p_T_T) -> cc.eT basics.string__t) =>
  Imp_value__mk_record _p_T_T _p_T_T 
    (Imp_value__consistency_rule _p_T_T _p_T_equal) 
    (Imp_value__element _p_T_T _p_T_element) 
    (Imp_value__equal _p_T_T _p_T_equal) 
    (Imp_value__parse _p_T_T _p_T_parse) 
    (Imp_value__print _p_T_T _p_T_print) 
    (Imp_value__consistency_rule_reflexive _p_T_T _p_T_equal 
       _p_T_equal_reflexive) 
    (Imp_value__consistency_rule_symmetric _p_T_T _p_T_equal 
       _p_T_equal_symmetric) 
    (sets.Setoid__different _p_T_T (Imp_value__equal _p_T_T _p_T_equal)) 
    (Imp_value__equal_reflexive _p_T_T _p_T_equal _p_T_equal_reflexive) 
    (Imp_value__equal_symmetric _p_T_T _p_T_equal _p_T_equal_symmetric) 
    (Imp_value__equal_transitive _p_T_T _p_T_equal _p_T_equal_transitive) 
    (sets.Setoid__same_is_not_different _p_T_T 
       (Imp_value__equal _p_T_T _p_T_equal)) 
    (sets.Setoid__different_is_complete _p_T_T 
       (Imp_value__equal _p_T_T _p_T_equal) 
       (sets.Setoid__different _p_T_T (Imp_value__equal _p_T_T _p_T_equal)) 
       (Imp_value__equal_reflexive _p_T_T _p_T_equal _p_T_equal_reflexive) 
       (Imp_value__equal_symmetric _p_T_T _p_T_equal _p_T_equal_symmetric) 
       (Imp_value__equal_transitive _p_T_T _p_T_equal _p_T_equal_transitive) 
       (sets.Setoid__same_is_not_different _p_T_T 
          (Imp_value__equal _p_T_T _p_T_equal))) 
    (sets.Setoid__different_is_irreflexive _p_T_T 
       (Imp_value__equal _p_T_T _p_T_equal) 
       (sets.Setoid__different _p_T_T (Imp_value__equal _p_T_T _p_T_equal)) 
       (Imp_value__equal_reflexive _p_T_T _p_T_equal _p_T_equal_reflexive) 
       (sets.Setoid__same_is_not_different _p_T_T 
          (Imp_value__equal _p_T_T _p_T_equal))) 
    (sets.Setoid__different_is_symmetric _p_T_T 
       (Imp_value__equal _p_T_T _p_T_equal) 
       (sets.Setoid__different _p_T_T (Imp_value__equal _p_T_T _p_T_equal)) 
       (Imp_value__equal_symmetric _p_T_T _p_T_equal _p_T_equal_symmetric) 
       (sets.Setoid__same_is_not_different _p_T_T 
          (Imp_value__equal _p_T_T _p_T_equal))).

Spe_int_imp_value_tol2__me_as_species : Type.

Spe_int_imp_value_tol2__mk_record :
  Spe_int_imp_value_tol2__rf_T:cc.uT ->
  Spe_int_imp_value_tol2__rf_tol_is_positive:(dk_logic.eP 
                                                (dk_logic.ebP 
                                                   (basic_type.Coll_int_value__pos 
                                                      (basic_type.Coll_int_value__of_int 
                                                         (dk_int.from_nat 
                                                            (builtins.S 
                                                               (builtins.S 
                                                                  builtins.0))))))) ->
  Spe_int_imp_value_tol2__rf_consistency_rule:((cc.eT 
                                                  Spe_int_imp_value_tol2__rf_T) ->
                                               (cc.eT 
                                                  Spe_int_imp_value_tol2__rf_T) ->
                                               cc.eT basics.bool__t) ->
  Spe_int_imp_value_tol2__rf_element:(cc.eT Spe_int_imp_value_tol2__rf_T) ->
  Spe_int_imp_value_tol2__rf_equal:((cc.eT Spe_int_imp_value_tol2__rf_T) ->
                                    (cc.eT Spe_int_imp_value_tol2__rf_T) ->
                                    cc.eT basics.bool__t) ->
  Spe_int_imp_value_tol2__rf_parse:((cc.eT basics.string__t) ->
                                    cc.eT Spe_int_imp_value_tol2__rf_T) ->
  Spe_int_imp_value_tol2__rf_print:((cc.eT Spe_int_imp_value_tol2__rf_T) ->
                                    cc.eT basics.string__t) ->
  Spe_int_imp_value_tol2__rf_consistency_rule_reflexive:(dk_logic.eP 
                                                           (dk_logic.forall 
                                                              Spe_int_imp_value_tol2__rf_T 
                                                              (a:
                                                               (cc.eT 
                                                                  Spe_int_imp_value_tol2__rf_T) =>
                                                               dk_logic.ebP 
                                                                 (Spe_int_imp_value_tol2__rf_consistency_rule 
                                                                    a a)))) ->
  Spe_int_imp_value_tol2__rf_consistency_rule_symmetric:(dk_logic.eP 
                                                           (dk_logic.forall 
                                                              Spe_int_imp_value_tol2__rf_T 
                                                              (a:
                                                               (cc.eT 
                                                                  Spe_int_imp_value_tol2__rf_T) =>
                                                               dk_logic.forall 
                                                                 Spe_int_imp_value_tol2__rf_T 
                                                                 (b:
                                                                  (cc.eT 
                                                                    Spe_int_imp_value_tol2__rf_T) =>
                                                                  dk_logic.imp 
                                                                    (
                                                                    dk_logic.ebP 
                                                                    (Spe_int_imp_value_tol2__rf_consistency_rule 
                                                                    a b)) 
                                                                    (
                                                                    dk_logic.ebP 
                                                                    (Spe_int_imp_value_tol2__rf_consistency_rule 
                                                                    b a)))))) ->
  Spe_int_imp_value_tol2__rf_different:((cc.eT Spe_int_imp_value_tol2__rf_T) ->
                                        (cc.eT Spe_int_imp_value_tol2__rf_T) ->
                                        cc.eT basics.bool__t) ->
  Spe_int_imp_value_tol2__rf_equal_reflexive:(dk_logic.eP 
                                                (dk_logic.forall 
                                                   Spe_int_imp_value_tol2__rf_T 
                                                   (x:
                                                    (cc.eT 
                                                       Spe_int_imp_value_tol2__rf_T) =>
                                                    dk_logic.ebP 
                                                      (Spe_int_imp_value_tol2__rf_equal 
                                                         x x)))) ->
  Spe_int_imp_value_tol2__rf_equal_symmetric:(dk_logic.eP 
                                                (dk_logic.forall 
                                                   Spe_int_imp_value_tol2__rf_T 
                                                   (x:
                                                    (cc.eT 
                                                       Spe_int_imp_value_tol2__rf_T) =>
                                                    dk_logic.forall 
                                                      Spe_int_imp_value_tol2__rf_T 
                                                      (y:
                                                       (cc.eT 
                                                          Spe_int_imp_value_tol2__rf_T) =>
                                                       dk_logic.imp 
                                                         (dk_logic.ebP 
                                                            (Spe_int_imp_value_tol2__rf_equal 
                                                               x y)) 
                                                         (dk_logic.ebP 
                                                            (Spe_int_imp_value_tol2__rf_equal 
                                                               y x)))))) ->
  Spe_int_imp_value_tol2__rf_equal_transitive:(dk_logic.eP 
                                                 (dk_logic.forall 
                                                    Spe_int_imp_value_tol2__rf_T 
                                                    (x:
                                                     (cc.eT 
                                                        Spe_int_imp_value_tol2__rf_T) =>
                                                     dk_logic.forall 
                                                       Spe_int_imp_value_tol2__rf_T 
                                                       (y:
                                                        (cc.eT 
                                                           Spe_int_imp_value_tol2__rf_T) =>
                                                        dk_logic.forall 
                                                          Spe_int_imp_value_tol2__rf_T 
                                                          (z:
                                                           (cc.eT 
                                                              Spe_int_imp_value_tol2__rf_T) =>
                                                           dk_logic.imp 
                                                             (dk_logic.ebP 
                                                                (Spe_int_imp_value_tol2__rf_equal 
                                                                   x y)) 
                                                             (dk_logic.imp 
                                                                (dk_logic.ebP 
                                                                   (Spe_int_imp_value_tol2__rf_equal 
                                                                    y z)) 
                                                                (dk_logic.ebP 
                                                                   (Spe_int_imp_value_tol2__rf_equal 
                                                                    x z)))))))) ->
  Spe_int_imp_value_tol2__rf_same_is_not_different:(dk_logic.eP 
                                                      (dk_logic.forall 
                                                         Spe_int_imp_value_tol2__rf_T 
                                                         (x:
                                                          (cc.eT 
                                                             Spe_int_imp_value_tol2__rf_T) =>
                                                          dk_logic.forall 
                                                            Spe_int_imp_value_tol2__rf_T 
                                                            (y:
                                                             (cc.eT 
                                                                Spe_int_imp_value_tol2__rf_T) =>
                                                             dk_logic.eqv 
                                                               (dk_logic.ebP 
                                                                  (Spe_int_imp_value_tol2__rf_different 
                                                                    x y)) 
                                                               (dk_logic.not 
                                                                  (dk_logic.ebP 
                                                                    (Spe_int_imp_value_tol2__rf_equal 
                                                                    x y))))))) ->
  Spe_int_imp_value_tol2__rf_different_is_complete:(dk_logic.eP 
                                                      (dk_logic.forall 
                                                         Spe_int_imp_value_tol2__rf_T 
                                                         (x:
                                                          (cc.eT 
                                                             Spe_int_imp_value_tol2__rf_T) =>
                                                          dk_logic.forall 
                                                            Spe_int_imp_value_tol2__rf_T 
                                                            (y:
                                                             (cc.eT 
                                                                Spe_int_imp_value_tol2__rf_T) =>
                                                             dk_logic.forall 
                                                               Spe_int_imp_value_tol2__rf_T 
                                                               (z:
                                                                (cc.eT 
                                                                   Spe_int_imp_value_tol2__rf_T) =>
                                                                dk_logic.imp 
                                                                  (dk_logic.ebP 
                                                                    (Spe_int_imp_value_tol2__rf_different 
                                                                    x y)) 
                                                                  (dk_logic.or 
                                                                    (dk_logic.ebP 
                                                                    (Spe_int_imp_value_tol2__rf_different 
                                                                    x z)) 
                                                                    (dk_logic.ebP 
                                                                    (Spe_int_imp_value_tol2__rf_different 
                                                                    y z)))))))) ->
  Spe_int_imp_value_tol2__rf_different_is_irreflexive:(dk_logic.eP 
                                                         (dk_logic.forall 
                                                            Spe_int_imp_value_tol2__rf_T 
                                                            (x:
                                                             (cc.eT 
                                                                Spe_int_imp_value_tol2__rf_T) =>
                                                             dk_logic.not 
                                                               (dk_logic.ebP 
                                                                  (Spe_int_imp_value_tol2__rf_different 
                                                                    x x))))) ->
  Spe_int_imp_value_tol2__rf_different_is_symmetric:(dk_logic.eP 
                                                       (dk_logic.forall 
                                                          Spe_int_imp_value_tol2__rf_T 
                                                          (x:
                                                           (cc.eT 
                                                              Spe_int_imp_value_tol2__rf_T) =>
                                                           dk_logic.forall 
                                                             Spe_int_imp_value_tol2__rf_T 
                                                             (y:
                                                              (cc.eT 
                                                                 Spe_int_imp_value_tol2__rf_T) =>
                                                              dk_logic.imp 
                                                                (dk_logic.ebP 
                                                                   (Spe_int_imp_value_tol2__rf_different 
                                                                    x y)) 
                                                                (dk_logic.ebP 
                                                                   (Spe_int_imp_value_tol2__rf_different 
                                                                    y x)))))) ->
  Spe_int_imp_value_tol2__me_as_species.

def proj_Spe_int_imp_value_tol2__rf_T :
  record:Spe_int_imp_value_tol2__me_as_species -> cc.uT.

[Spe_int_imp_value_tol2__rf_T]
  proj_Spe_int_imp_value_tol2__rf_T (Spe_int_imp_value_tol2__mk_record Spe_int_imp_value_tol2__rf_T 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_T.

def proj_Spe_int_imp_value_tol2__rf_tol_is_positive :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.ebP 
       (basic_type.Coll_int_value__pos 
          (basic_type.Coll_int_value__of_int 
             (dk_int.from_nat (builtins.S (builtins.S builtins.0)))))).

[Spe_int_imp_value_tol2__rf_tol_is_positive]
  proj_Spe_int_imp_value_tol2__rf_tol_is_positive (Spe_int_imp_value_tol2__mk_record _ 
    Spe_int_imp_value_tol2__rf_tol_is_positive _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_tol_is_positive.

def proj_Spe_int_imp_value_tol2__rf_consistency_rule :
  record:Spe_int_imp_value_tol2__me_as_species ->
  (cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) ->
  (cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) -> cc.eT basics.bool__t.

[Spe_int_imp_value_tol2__rf_consistency_rule]
  proj_Spe_int_imp_value_tol2__rf_consistency_rule (Spe_int_imp_value_tol2__mk_record _ 
    _ Spe_int_imp_value_tol2__rf_consistency_rule _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Spe_int_imp_value_tol2__rf_consistency_rule.

def proj_Spe_int_imp_value_tol2__rf_element :
  record:Spe_int_imp_value_tol2__me_as_species ->
  cc.eT (proj_Spe_int_imp_value_tol2__rf_T record).

[Spe_int_imp_value_tol2__rf_element]
  proj_Spe_int_imp_value_tol2__rf_element (Spe_int_imp_value_tol2__mk_record _ 
    _ _ Spe_int_imp_value_tol2__rf_element _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_element.

def proj_Spe_int_imp_value_tol2__rf_equal :
  record:Spe_int_imp_value_tol2__me_as_species ->
  (cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) ->
  (cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) -> cc.eT basics.bool__t.

[Spe_int_imp_value_tol2__rf_equal]
  proj_Spe_int_imp_value_tol2__rf_equal (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ Spe_int_imp_value_tol2__rf_equal _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_equal.

def proj_Spe_int_imp_value_tol2__rf_parse :
  record:Spe_int_imp_value_tol2__me_as_species ->
  (cc.eT basics.string__t) ->
  cc.eT (proj_Spe_int_imp_value_tol2__rf_T record).

[Spe_int_imp_value_tol2__rf_parse]
  proj_Spe_int_imp_value_tol2__rf_parse (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ Spe_int_imp_value_tol2__rf_parse _ _ _ _ _ _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_parse.

def proj_Spe_int_imp_value_tol2__rf_print :
  record:Spe_int_imp_value_tol2__me_as_species ->
  (cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) ->
  cc.eT basics.string__t.

[Spe_int_imp_value_tol2__rf_print]
  proj_Spe_int_imp_value_tol2__rf_print (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ Spe_int_imp_value_tol2__rf_print _ _ _ _ _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_print.

def proj_Spe_int_imp_value_tol2__rf_consistency_rule_reflexive :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (a:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.ebP 
          (proj_Spe_int_imp_value_tol2__rf_consistency_rule record a a))).

[Spe_int_imp_value_tol2__rf_consistency_rule_reflexive]
  proj_Spe_int_imp_value_tol2__rf_consistency_rule_reflexive (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ Spe_int_imp_value_tol2__rf_consistency_rule_reflexive _ _ _ 
    _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_consistency_rule_reflexive.

def proj_Spe_int_imp_value_tol2__rf_consistency_rule_symmetric :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (a:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
          (b:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Spe_int_imp_value_tol2__rf_consistency_rule record a b)) 
             (dk_logic.ebP 
                (proj_Spe_int_imp_value_tol2__rf_consistency_rule record b a))))).

[Spe_int_imp_value_tol2__rf_consistency_rule_symmetric]
  proj_Spe_int_imp_value_tol2__rf_consistency_rule_symmetric (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ Spe_int_imp_value_tol2__rf_consistency_rule_symmetric _ _ 
    _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_consistency_rule_symmetric.

def proj_Spe_int_imp_value_tol2__rf_different :
  record:Spe_int_imp_value_tol2__me_as_species ->
  (cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) ->
  (cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) -> cc.eT basics.bool__t.

[Spe_int_imp_value_tol2__rf_different]
  proj_Spe_int_imp_value_tol2__rf_different (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ Spe_int_imp_value_tol2__rf_different _ _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_different.

def proj_Spe_int_imp_value_tol2__rf_equal_reflexive :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (x:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.ebP (proj_Spe_int_imp_value_tol2__rf_equal record x x))).

[Spe_int_imp_value_tol2__rf_equal_reflexive]
  proj_Spe_int_imp_value_tol2__rf_equal_reflexive (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ _ Spe_int_imp_value_tol2__rf_equal_reflexive _ _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_equal_reflexive.

def proj_Spe_int_imp_value_tol2__rf_equal_symmetric :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (x:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
          (y:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP (proj_Spe_int_imp_value_tol2__rf_equal record x y)) 
             (dk_logic.ebP (proj_Spe_int_imp_value_tol2__rf_equal record y x))))).

[Spe_int_imp_value_tol2__rf_equal_symmetric]
  proj_Spe_int_imp_value_tol2__rf_equal_symmetric (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ Spe_int_imp_value_tol2__rf_equal_symmetric _ _ _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_equal_symmetric.

def proj_Spe_int_imp_value_tol2__rf_equal_transitive :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (x:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
          (y:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
           dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
             (z:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Spe_int_imp_value_tol2__rf_equal record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Spe_int_imp_value_tol2__rf_equal record y z)) 
                   (dk_logic.ebP 
                      (proj_Spe_int_imp_value_tol2__rf_equal record x z))))))).

[Spe_int_imp_value_tol2__rf_equal_transitive]
  proj_Spe_int_imp_value_tol2__rf_equal_transitive (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ Spe_int_imp_value_tol2__rf_equal_transitive _ _ _ 
    _)
  -->
  Spe_int_imp_value_tol2__rf_equal_transitive.

def proj_Spe_int_imp_value_tol2__rf_same_is_not_different :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (x:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
          (y:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Spe_int_imp_value_tol2__rf_different record x y)) 
             (dk_logic.not 
                (dk_logic.ebP 
                   (proj_Spe_int_imp_value_tol2__rf_equal record x y)))))).

[Spe_int_imp_value_tol2__rf_same_is_not_different]
  proj_Spe_int_imp_value_tol2__rf_same_is_not_different (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Spe_int_imp_value_tol2__rf_same_is_not_different 
    _ _ _)
  -->
  Spe_int_imp_value_tol2__rf_same_is_not_different.

def proj_Spe_int_imp_value_tol2__rf_different_is_complete :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (x:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
          (y:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
           dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
             (z:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Spe_int_imp_value_tol2__rf_different record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP 
                      (proj_Spe_int_imp_value_tol2__rf_different record x z)) 
                   (dk_logic.ebP 
                      (proj_Spe_int_imp_value_tol2__rf_different record y z))))))).

[Spe_int_imp_value_tol2__rf_different_is_complete]
  proj_Spe_int_imp_value_tol2__rf_different_is_complete (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Spe_int_imp_value_tol2__rf_different_is_complete _ _)
  -->
  Spe_int_imp_value_tol2__rf_different_is_complete.

def proj_Spe_int_imp_value_tol2__rf_different_is_irreflexive :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (x:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.not 
          (dk_logic.ebP 
             (proj_Spe_int_imp_value_tol2__rf_different record x x)))).

[Spe_int_imp_value_tol2__rf_different_is_irreflexive]
  proj_Spe_int_imp_value_tol2__rf_different_is_irreflexive (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Spe_int_imp_value_tol2__rf_different_is_irreflexive _)
  -->
  Spe_int_imp_value_tol2__rf_different_is_irreflexive.

def proj_Spe_int_imp_value_tol2__rf_different_is_symmetric :
  record:Spe_int_imp_value_tol2__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
       (x:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
        dk_logic.forall (proj_Spe_int_imp_value_tol2__rf_T record) 
          (y:(cc.eT (proj_Spe_int_imp_value_tol2__rf_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Spe_int_imp_value_tol2__rf_different record x y)) 
             (dk_logic.ebP 
                (proj_Spe_int_imp_value_tol2__rf_different record y x))))).

[Spe_int_imp_value_tol2__rf_different_is_symmetric]
  proj_Spe_int_imp_value_tol2__rf_different_is_symmetric (Spe_int_imp_value_tol2__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Spe_int_imp_value_tol2__rf_different_is_symmetric)
  -->
  Spe_int_imp_value_tol2__rf_different_is_symmetric.

def Spe_int_imp_value_tol2__tol_is_positive :
  dk_logic.eP 
    (dk_logic.ebP 
       (basic_type.Coll_int_value__pos 
          (basic_type.Coll_int_value__of_int 
             (dk_int.from_nat (builtins.S (builtins.S builtins.0))))))
  :=
  (__J_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.ebP 
         (basic_type.Coll_int_value__pos 
            (basic_type.Coll_int_value__of_int 
               (dk_int.from_nat (builtins.S (builtins.S builtins.0))))))) =>
   zen.nnpp 
     (zen.triangle 
        (focal.is_true 
           (basic_type.Coll_int_value__pos 
              (basic_type.Coll_int_value__of_int 
                 (dk_int.from_nat (builtins.S (builtins.S builtins.0))))))) 
     (v_Vzb:
      (zen.proof 
         (zen.not 
            (zen.triangle 
               (focal.is_true 
                  (basic_type.Coll_int_value__pos 
                     (basic_type.Coll_int_value__of_int 
                        (dk_int.from_nat (builtins.S (builtins.S builtins.0))))))))) =>
      zen.Raxiom 
        (zen.triangle 
           (focal.is_true 
              (basic_type.Coll_int_value__pos 
                 (basic_type.Coll_int_value__of_int 
                    (dk_int.from_nat (builtins.S (builtins.S builtins.0))))))) 
        __J_1_LEMMA v_Vzb)) 
    (dk_builtins.magic_prove 
       (dk_logic.ebP 
          (basic_type.Coll_int_value__pos 
             (basic_type.Coll_int_value__of_int 
                (dk_int.from_nat (builtins.S (builtins.S builtins.0))))))).

def Spe_int_imp_value_tol2__collection_create
  :=
  Spe_int_imp_value_tol2__mk_record basic_type.Coll_int_value__me_as_carrier 
    Spe_int_imp_value_tol2__tol_is_positive 
    (Imp_value_tol__consistency_rule 
       basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__geq basic_type.Coll_int_value__plus 
       (basic_type.Coll_int_value__of_int 
          (dk_int.from_nat (builtins.S (builtins.S builtins.0))))) 
    (Imp_value_tol__element basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__element) 
    (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__equal) 
    (Imp_value_tol__parse basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__parse) 
    (Imp_value_tol__print basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__print) 
    (Imp_value_tol__consistency_rule_reflexive 
       basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__geq basic_type.Coll_int_value__plus 
       (basic_type.Coll_int_value__of_int 
          (dk_int.from_nat (builtins.S (builtins.S builtins.0))))) 
    (Imp_value_tol__consistency_rule_symmetric 
       basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__me_as_carrier 
       (Imp_value_tol__consistency_rule 
          basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__geq basic_type.Coll_int_value__plus 
          (basic_type.Coll_int_value__of_int 
             (dk_int.from_nat (builtins.S (builtins.S builtins.0)))))) 
    (sets.Setoid__different basic_type.Coll_int_value__me_as_carrier 
       (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal)) 
    (Imp_value_tol__equal_reflexive basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__equal 
       basic_type.Coll_int_value__equal_reflexive) 
    (Imp_value_tol__equal_symmetric basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__equal 
       basic_type.Coll_int_value__equal_symmetric) 
    (Imp_value_tol__equal_transitive 
       basic_type.Coll_int_value__me_as_carrier 
       basic_type.Coll_int_value__equal 
       basic_type.Coll_int_value__equal_transitive) 
    (sets.Setoid__same_is_not_different 
       basic_type.Coll_int_value__me_as_carrier 
       (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal)) 
    (sets.Setoid__different_is_complete 
       basic_type.Coll_int_value__me_as_carrier 
       (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal) 
       (sets.Setoid__different basic_type.Coll_int_value__me_as_carrier 
          (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
             basic_type.Coll_int_value__equal)) 
       (Imp_value_tol__equal_reflexive 
          basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal 
          basic_type.Coll_int_value__equal_reflexive) 
       (Imp_value_tol__equal_symmetric 
          basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal 
          basic_type.Coll_int_value__equal_symmetric) 
       (Imp_value_tol__equal_transitive 
          basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal 
          basic_type.Coll_int_value__equal_transitive) 
       (sets.Setoid__same_is_not_different 
          basic_type.Coll_int_value__me_as_carrier 
          (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
             basic_type.Coll_int_value__equal))) 
    (sets.Setoid__different_is_irreflexive 
       basic_type.Coll_int_value__me_as_carrier 
       (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal) 
       (sets.Setoid__different basic_type.Coll_int_value__me_as_carrier 
          (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
             basic_type.Coll_int_value__equal)) 
       (Imp_value_tol__equal_reflexive 
          basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal 
          basic_type.Coll_int_value__equal_reflexive) 
       (sets.Setoid__same_is_not_different 
          basic_type.Coll_int_value__me_as_carrier 
          (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
             basic_type.Coll_int_value__equal))) 
    (sets.Setoid__different_is_symmetric 
       basic_type.Coll_int_value__me_as_carrier 
       (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal) 
       (sets.Setoid__different basic_type.Coll_int_value__me_as_carrier 
          (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
             basic_type.Coll_int_value__equal)) 
       (Imp_value_tol__equal_symmetric 
          basic_type.Coll_int_value__me_as_carrier 
          basic_type.Coll_int_value__equal 
          basic_type.Coll_int_value__equal_symmetric) 
       (sets.Setoid__same_is_not_different 
          basic_type.Coll_int_value__me_as_carrier 
          (Imp_value_tol__equal basic_type.Coll_int_value__me_as_carrier 
             basic_type.Coll_int_value__equal))).

def Coll_int_imp_value_tol__effective_collection
  :=
  Spe_int_imp_value_tol2__collection_create.

def Coll_int_imp_value_tol__me_as_carrier
  :=
  basic_type.Coll_int_value__me_as_carrier.

def Coll_int_imp_value_tol__tol_is_positive
  :=
  proj_Spe_int_imp_value_tol2__rf_tol_is_positive 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__consistency_rule
  :=
  proj_Spe_int_imp_value_tol2__rf_consistency_rule 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__element
  :=
  proj_Spe_int_imp_value_tol2__rf_element 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__equal
  :=
  proj_Spe_int_imp_value_tol2__rf_equal 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__parse
  :=
  proj_Spe_int_imp_value_tol2__rf_parse 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__print
  :=
  proj_Spe_int_imp_value_tol2__rf_print 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__consistency_rule_reflexive
  :=
  proj_Spe_int_imp_value_tol2__rf_consistency_rule_reflexive 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__consistency_rule_symmetric
  :=
  proj_Spe_int_imp_value_tol2__rf_consistency_rule_symmetric 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__different
  :=
  proj_Spe_int_imp_value_tol2__rf_different 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__equal_reflexive
  :=
  proj_Spe_int_imp_value_tol2__rf_equal_reflexive 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__equal_symmetric
  :=
  proj_Spe_int_imp_value_tol2__rf_equal_symmetric 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__equal_transitive
  :=
  proj_Spe_int_imp_value_tol2__rf_equal_transitive 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__same_is_not_different
  :=
  proj_Spe_int_imp_value_tol2__rf_same_is_not_different 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__different_is_complete
  :=
  proj_Spe_int_imp_value_tol2__rf_different_is_complete 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__different_is_irreflexive
  :=
  proj_Spe_int_imp_value_tol2__rf_different_is_irreflexive 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value_tol__different_is_symmetric
  :=
  proj_Spe_int_imp_value_tol2__rf_different_is_symmetric 
    Coll_int_imp_value_tol__effective_collection.

def Coll_int_imp_value__effective_collection
  :=
  Imp_value__collection_create basic_type.Coll_int_value__me_as_carrier 
    basic_type.Coll_int_value__element basic_type.Coll_int_value__equal 
    basic_type.Coll_int_value__equal_reflexive 
    basic_type.Coll_int_value__equal_symmetric 
    basic_type.Coll_int_value__equal_transitive 
    basic_type.Coll_int_value__parse basic_type.Coll_int_value__print.

def Coll_int_imp_value__me_as_carrier
  :=
  basic_type.Coll_int_value__me_as_carrier.

def Coll_int_imp_value__consistency_rule
  :=
  proj_Imp_value__rf_consistency_rule 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__element
  :=
  proj_Imp_value__rf_element basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__equal
  :=
  proj_Imp_value__rf_equal basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__parse
  :=
  proj_Imp_value__rf_parse basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__print
  :=
  proj_Imp_value__rf_print basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__consistency_rule_reflexive
  :=
  proj_Imp_value__rf_consistency_rule_reflexive 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__consistency_rule_symmetric
  :=
  proj_Imp_value__rf_consistency_rule_symmetric 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__different
  :=
  proj_Imp_value__rf_different basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__equal_reflexive
  :=
  proj_Imp_value__rf_equal_reflexive 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__equal_symmetric
  :=
  proj_Imp_value__rf_equal_symmetric 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__equal_transitive
  :=
  proj_Imp_value__rf_equal_transitive 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__same_is_not_different
  :=
  proj_Imp_value__rf_same_is_not_different 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__different_is_complete
  :=
  proj_Imp_value__rf_different_is_complete 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__different_is_irreflexive
  :=
  proj_Imp_value__rf_different_is_irreflexive 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_int_imp_value__different_is_symmetric
  :=
  proj_Imp_value__rf_different_is_symmetric 
    basic_type.Coll_int_value__me_as_carrier 
    Coll_int_imp_value__effective_collection.

def Coll_bool_imp_value__effective_collection
  :=
  Imp_value__collection_create basic_type.Coll_bool_value__me_as_carrier 
    basic_type.Coll_bool_value__element basic_type.Coll_bool_value__equal 
    basic_type.Coll_bool_value__equal_reflexive 
    basic_type.Coll_bool_value__equal_symmetric 
    basic_type.Coll_bool_value__equal_transitive 
    basic_type.Coll_bool_value__parse basic_type.Coll_bool_value__print.

def Coll_bool_imp_value__me_as_carrier
  :=
  basic_type.Coll_bool_value__me_as_carrier.

def Coll_bool_imp_value__consistency_rule
  :=
  proj_Imp_value__rf_consistency_rule 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__element
  :=
  proj_Imp_value__rf_element basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__equal
  :=
  proj_Imp_value__rf_equal basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__parse
  :=
  proj_Imp_value__rf_parse basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__print
  :=
  proj_Imp_value__rf_print basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__consistency_rule_reflexive
  :=
  proj_Imp_value__rf_consistency_rule_reflexive 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__consistency_rule_symmetric
  :=
  proj_Imp_value__rf_consistency_rule_symmetric 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__different
  :=
  proj_Imp_value__rf_different basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__equal_reflexive
  :=
  proj_Imp_value__rf_equal_reflexive 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__equal_symmetric
  :=
  proj_Imp_value__rf_equal_symmetric 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__equal_transitive
  :=
  proj_Imp_value__rf_equal_transitive 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__same_is_not_different
  :=
  proj_Imp_value__rf_same_is_not_different 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__different_is_complete
  :=
  proj_Imp_value__rf_different_is_complete 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__different_is_irreflexive
  :=
  proj_Imp_value__rf_different_is_irreflexive 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

def Coll_bool_imp_value__different_is_symmetric
  :=
  proj_Imp_value__rf_different_is_symmetric 
    basic_type.Coll_bool_value__me_as_carrier 
    Coll_bool_imp_value__effective_collection.

