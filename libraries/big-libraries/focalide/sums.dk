#NAME sums.

def Sum_set__element :
  _p_A_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  abst_T:cc.uT -> abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) -> cc.eT abst_T
  :=
  _p_A_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) => abst_first _p_A_element.

def Sum_set__equal :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  dk_bool.ite basics.bool__t 
    (basics._amper__amper_ (abst_first_case x) (abst_first_case y)) 
    (_p_A_equal (abst_first_term x) (abst_first_term y)) 
    (dk_bool.ite basics.bool__t 
       (basics._amper__amper_ (abst_second_case x) (abst_second_case y)) 
       (_p_B_equal (abst_second_term x) (abst_second_term y)) dk_bool.false).

def Sum_set__equal_spec :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
                   abst_first_case abst_first_term abst_second_case 
                   abst_second_term x y)) 
             (dk_logic.or 
                (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                   (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                      (dk_logic.ebP 
                         (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                   (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                      (dk_logic.ebP 
                         (_p_B_equal (abst_second_term x) 
                            (abst_second_term y)))))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first_case abst_first_term 
                      abst_second_case abst_second_term v_Vzb v_Vac))) 
             (zen.or 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vzb) 
                               (abst_first_term v_Vac)))))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vzb) 
                               (abst_second_term v_Vac)))))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Sum_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first_case 
                             abst_first_term abst_second_case 
                             abst_second_term v_Vzb v_Vac))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vzb))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vac))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vzb) 
                                      (abst_first_term v_Vac)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vzb))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vac))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vzb) 
                                      (abst_second_term v_Vac)))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first_case abst_first_term 
                      abst_second_case abst_second_term v_Vzb v_Vac))) 
             (zen.or 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vzb) 
                               (abst_first_term v_Vac)))))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vzb) 
                               (abst_second_term v_Vac))))))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Sum_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first_case 
                             abst_first_term abst_second_case 
                             abst_second_term v_Vcc v_Vac))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vac))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vac)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vac))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vcc) 
                                      (abst_second_term v_Vac))))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first_case abst_first_term 
                      abst_second_case abst_second_term v_Vcc v_Vac))) 
             (zen.or 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vac)))))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vac)))))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Sum_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first_case 
                             abst_first_term abst_second_case 
                             abst_second_term v_Vcc v_Vec))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vec)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vcc) 
                                      (abst_second_term v_Vec)))))))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first_case abst_first_term 
                      abst_second_case abst_second_term v_Vcc v_Vec))) 
             (zen.or 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)))))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec))))))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (dk_bool.ite basics.bool__t 
                             (basics._amper__amper_ (abst_first_case v_Vcc) 
                                (abst_first_case v_Vec)) 
                             (_p_A_equal (abst_first_term v_Vcc) 
                                (abst_first_term v_Vec)) 
                             (dk_bool.ite basics.bool__t 
                                (basics._amper__amper_ 
                                   (abst_second_case v_Vcc) 
                                   (abst_second_case v_Vec)) 
                                (_p_B_equal (abst_second_term v_Vcc) 
                                   (abst_second_term v_Vec)) basics.false)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.or 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term v_Vcc) 
                                   (abst_first_term v_Vec)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term v_Vcc) 
                                   (abst_second_term v_Vec)))))))) =>
              zen.Ror 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)))))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)))))) 
                (v_Vic:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term v_Vcc) 
                                   (abst_first_term v_Vec))))))) =>
                 zen.Rand 
                   (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec))))) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_first_case v_Vcc)))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term v_Vcc) 
                                   (abst_first_term v_Vec)))))) =>
                    zen.Rand 
                      (zen.triangle (focal.is_true (abst_first_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vec)))) =>
                       v_Vmc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term v_Vcc) 
                                   (abst_first_term v_Vec))))) =>
                       focal.zenon_focal_ite_bool_n 
                         (basics._amper__amper_ (abst_first_case v_Vcc) 
                            (abst_first_case v_Vec)) 
                         (_p_A_equal (abst_first_term v_Vcc) 
                            (abst_first_term v_Vec)) 
                         (dk_bool.ite basics.bool__t 
                            (basics._amper__amper_ (abst_second_case v_Vcc) 
                               (abst_second_case v_Vec)) 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)) basics.false) 
                         (v_Vnc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._amper__amper_ 
                                      (abst_first_case v_Vcc) 
                                      (abst_first_case v_Vec))))) =>
                          v_Voc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vec)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal (abst_first_term v_Vcc) 
                                     (abst_first_term v_Vec)))) v_Vmc v_Voc) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_first_case v_Vcc) 
                                         (abst_first_case v_Vec)))))) =>
                          v_Vqc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (dk_bool.ite basics.bool__t 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)) 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)) 
                                         basics.false))))) =>
                          focal.zenon_focal_notand (abst_first_case v_Vcc) 
                            (abst_first_case v_Vec) 
                            (v_Vrc:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec)))))) =>
                             zen.Rnotand 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vec))) 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  v_Vjc v_Vsc) 
                               (v_Vtc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vec))) 
                                  v_Vlc v_Vtc) v_Vrc) v_Vpc) v_Vgc) v_Vkc) 
                   v_Vic) 
                (v_Vuc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term v_Vcc) 
                                   (abst_second_term v_Vec))))))) =>
                 zen.Rand 
                   (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec))))) 
                   (v_Vvc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_second_case v_Vcc)))) =>
                    v_Vwc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term v_Vcc) 
                                   (abst_second_term v_Vec)))))) =>
                    zen.Rand 
                      (zen.triangle (focal.is_true (abst_second_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)))) 
                      (v_Vxc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vec)))) =>
                       v_Vyc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term v_Vcc) 
                                   (abst_second_term v_Vec))))) =>
                       focal.zenon_focal_ite_bool_n 
                         (basics._amper__amper_ (abst_first_case v_Vcc) 
                            (abst_first_case v_Vec)) 
                         (_p_A_equal (abst_first_term v_Vcc) 
                            (abst_first_term v_Vec)) 
                         (dk_bool.ite basics.bool__t 
                            (basics._amper__amper_ (abst_second_case v_Vcc) 
                               (abst_second_case v_Vec)) 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)) basics.false) 
                         (v_Vnc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._amper__amper_ 
                                      (abst_first_case v_Vcc) 
                                      (abst_first_case v_Vec))))) =>
                          v_Voc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vec)))))) =>
                          focal.zenon_focal_and (abst_first_case v_Vcc) 
                            (abst_first_case v_Vec) 
                            (v_Vzc:
                             (zen.proof 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vec))))) =>
                             zen.Rand 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vec))) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vcc)))) =>
                                v_Vlc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vec)))) =>
                                zen.Rall abst_T 
                                  (v_Vzb:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vzb))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vzb))))) 
                                  v_Vec 
                                  (v_Vad:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec)))))) =>
                                   zen.Rnotand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vec))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vec))) 
                                     (v_Vtc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vec))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vec))) 
                                        v_Vlc v_Vtc) 
                                     (v_Vbd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vec))) 
                                        v_Vxc v_Vbd) v_Vad) 
                                  abst_case_exclusive) v_Vzc) v_Vnc) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_first_case v_Vcc) 
                                         (abst_first_case v_Vec)))))) =>
                          v_Vqc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (dk_bool.ite basics.bool__t 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)) 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)) 
                                         basics.false))))) =>
                          focal.zenon_focal_ite_bool_n 
                            (basics._amper__amper_ (abst_second_case v_Vcc) 
                               (abst_second_case v_Vec)) 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)) basics.false 
                            (v_Vcd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_second_case v_Vcc) 
                                         (abst_second_case v_Vec))))) =>
                             v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second_term v_Vcc) 
                                        (abst_second_term v_Vec)))) v_Vyc 
                               v_Vdd) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)))))) =>
                             v_Vfd:(zen.proof (zen.not zen.False)) =>
                             focal.zenon_focal_notand 
                               (abst_second_case v_Vcc) 
                               (abst_second_case v_Vec) 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec)))))) =>
                                zen.Rnotand 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vec))) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) v_Vvc 
                                     v_Vhd) 
                                  (v_Vbd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vec))) v_Vxc 
                                     v_Vbd) v_Vgd) v_Ved) v_Vqc) v_Vgc) v_Vwc) 
                   v_Vuc) v_Vhc) 
             (v_Vid:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (dk_bool.ite basics.bool__t 
                          (basics._amper__amper_ (abst_first_case v_Vcc) 
                             (abst_first_case v_Vec)) 
                          (_p_A_equal (abst_first_term v_Vcc) 
                             (abst_first_term v_Vec)) 
                          (dk_bool.ite basics.bool__t 
                             (basics._amper__amper_ (abst_second_case v_Vcc) 
                                (abst_second_case v_Vec)) 
                             (_p_B_equal (abst_second_term v_Vcc) 
                                (abst_second_term v_Vec)) basics.false))))) =>
              v_Vjd:
              (zen.proof 
                 (zen.not 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vec)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vcc) 
                                      (abst_second_term v_Vec))))))))) =>
              zen.Rnotor 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)))))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)))))) 
                (v_Vkd:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vec)))))))) =>
                 v_Vld:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vcc) 
                                      (abst_second_term v_Vec)))))))) =>
                 zen.Rnotand 
                   (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec))))) 
                   (v_Vsc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec))))) 
                      (v_Vhd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))))) =>
                       focal.zenon_focal_ite_bool 
                         (basics._amper__amper_ (abst_first_case v_Vcc) 
                            (abst_first_case v_Vec)) 
                         (_p_A_equal (abst_first_term v_Vcc) 
                            (abst_first_term v_Vec)) 
                         (dk_bool.ite basics.bool__t 
                            (basics._amper__amper_ (abst_second_case v_Vcc) 
                               (abst_second_case v_Vec)) 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)) basics.false) 
                         (v_Vnc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._amper__amper_ 
                                      (abst_first_case v_Vcc) 
                                      (abst_first_case v_Vec))))) =>
                          v_Vmc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vec))))) =>
                          focal.zenon_focal_and (abst_first_case v_Vcc) 
                            (abst_first_case v_Vec) 
                            (v_Vzc:
                             (zen.proof 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vec))))) =>
                             zen.Rand 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vec))) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vcc)))) =>
                                v_Vlc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vec)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  v_Vjc v_Vsc) v_Vzc) v_Vnc) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_first_case v_Vcc) 
                                         (abst_first_case v_Vec)))))) =>
                          v_Vmd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (dk_bool.ite basics.bool__t 
                                      (basics._amper__amper_ 
                                         (abst_second_case v_Vcc) 
                                         (abst_second_case v_Vec)) 
                                      (_p_B_equal (abst_second_term v_Vcc) 
                                         (abst_second_term v_Vec)) 
                                      basics.false)))) =>
                          focal.zenon_focal_ite_bool 
                            (basics._amper__amper_ (abst_second_case v_Vcc) 
                               (abst_second_case v_Vec)) 
                            (_p_B_equal (abst_second_term v_Vcc) 
                               (abst_second_term v_Vec)) basics.false 
                            (v_Vcd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_second_case v_Vcc) 
                                         (abst_second_case v_Vec))))) =>
                             v_Vyc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal (abst_second_term v_Vcc) 
                                         (abst_second_term v_Vec))))) =>
                             focal.zenon_focal_and (abst_second_case v_Vcc) 
                               (abst_second_case v_Vec) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vec))))) =>
                                zen.Rand 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vec))) 
                                  (v_Vvc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc)))) =>
                                   v_Vxc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vec)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) v_Vvc 
                                     v_Vhd) v_Vnd) v_Vcd) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)))))) =>
                             v_Vod:(zen.proof zen.False) => zen.Rfalse v_Vod) 
                            v_Vmd) v_Vid) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vec))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal (abst_second_term v_Vcc) 
                                         (abst_second_term v_Vec))))))) =>
                       zen.Rnotand 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)))) 
                         (v_Vbd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vec))))) =>
                          focal.zenon_focal_ite_bool 
                            (basics._amper__amper_ (abst_first_case v_Vcc) 
                               (abst_first_case v_Vec)) 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)) 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false) 
                            (v_Vnc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_first_case v_Vcc) 
                                         (abst_first_case v_Vec))))) =>
                             v_Vmc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vec))))) =>
                             focal.zenon_focal_and (abst_first_case v_Vcc) 
                               (abst_first_case v_Vec) 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec))))) =>
                                zen.Rand 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vec))) 
                                  (v_Vjc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc)))) =>
                                   v_Vlc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vcc))) v_Vjc 
                                     v_Vsc) v_Vzc) v_Vnc) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec)))))) =>
                             v_Vmd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (dk_bool.ite basics.bool__t 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)) 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)) 
                                         basics.false)))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec))))) =>
                                v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec))))) =>
                                focal.zenon_focal_and 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec) 
                                  (v_Vnd:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec))))) =>
                                   zen.Rand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vec))) 
                                     (v_Vvc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc)))) =>
                                      v_Vxc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vec))) 
                                        v_Vxc v_Vbd) v_Vnd) v_Vcd) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)))))) =>
                                v_Vod:(zen.proof zen.False) =>
                                zen.Rfalse v_Vod) v_Vmd) v_Vid) 
                         (v_Vdd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal (abst_second_term v_Vcc) 
                                         (abst_second_term v_Vec)))))) =>
                          focal.zenon_focal_ite_bool 
                            (basics._amper__amper_ (abst_first_case v_Vcc) 
                               (abst_first_case v_Vec)) 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)) 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false) 
                            (v_Vnc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_first_case v_Vcc) 
                                         (abst_first_case v_Vec))))) =>
                             v_Vmc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vec))))) =>
                             focal.zenon_focal_and (abst_first_case v_Vcc) 
                               (abst_first_case v_Vec) 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec))))) =>
                                zen.Rand 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vec))) 
                                  (v_Vjc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc)))) =>
                                   v_Vlc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vcc))) v_Vjc 
                                     v_Vsc) v_Vzc) v_Vnc) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec)))))) =>
                             v_Vmd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (dk_bool.ite basics.bool__t 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)) 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)) 
                                         basics.false)))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec))))) =>
                                v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal (abst_second_term v_Vcc) 
                                           (abst_second_term v_Vec)))) v_Vyc 
                                  v_Vdd) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)))))) =>
                                v_Vod:(zen.proof zen.False) =>
                                zen.Rfalse v_Vod) v_Vmd) v_Vid) v_Vpd) v_Vld) 
                   (v_Vqd:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vec))))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_first_case v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)))) 
                      (v_Vtc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vec))))) =>
                       zen.Rnotand 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vcc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vec))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec))))) 
                         (v_Vhd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vcc))))) =>
                          focal.zenon_focal_ite_bool 
                            (basics._amper__amper_ (abst_first_case v_Vcc) 
                               (abst_first_case v_Vec)) 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)) 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false) 
                            (v_Vnc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_first_case v_Vcc) 
                                         (abst_first_case v_Vec))))) =>
                             v_Vmc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vec))))) =>
                             focal.zenon_focal_and (abst_first_case v_Vcc) 
                               (abst_first_case v_Vec) 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec))))) =>
                                zen.Rand 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vec))) 
                                  (v_Vjc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc)))) =>
                                   v_Vlc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vec)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vec))) v_Vlc 
                                     v_Vtc) v_Vzc) v_Vnc) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec)))))) =>
                             v_Vmd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (dk_bool.ite basics.bool__t 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)) 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)) 
                                         basics.false)))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec))))) =>
                                v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec))))) =>
                                focal.zenon_focal_and 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec) 
                                  (v_Vnd:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec))))) =>
                                   zen.Rand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vec))) 
                                     (v_Vvc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc)))) =>
                                      v_Vxc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vcc))) 
                                        v_Vvc v_Vhd) v_Vnd) v_Vcd) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)))))) =>
                                v_Vod:(zen.proof zen.False) =>
                                zen.Rfalse v_Vod) v_Vmd) v_Vid) 
                         (v_Vpd:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vec))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec))))))) =>
                          zen.Rnotand 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vec))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)))) 
                            (v_Vbd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vec))))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_first_case v_Vcc) 
                                  (abst_first_case v_Vec)) 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vec)) 
                               (dk_bool.ite basics.bool__t 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false) 
                               (v_Vnc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec))))) =>
                                v_Vmc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first_term v_Vcc) 
                                            (abst_first_term v_Vec))))) =>
                                focal.zenon_focal_and 
                                  (abst_first_case v_Vcc) 
                                  (abst_first_case v_Vec) 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vec))))) =>
                                   zen.Rand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vec))) 
                                     (v_Vjc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vcc)))) =>
                                      v_Vlc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vec)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vec))) 
                                        v_Vlc v_Vtc) v_Vzc) v_Vnc) 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_first_case v_Vcc) 
                                               (abst_first_case v_Vec)))))) =>
                                v_Vmd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (dk_bool.ite basics.bool__t 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)) 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec)) 
                                            basics.false)))) =>
                                focal.zenon_focal_ite_bool 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec))))) =>
                                   v_Vyc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec))))) =>
                                   focal.zenon_focal_and 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec) 
                                     (v_Vnd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vcc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec))))) =>
                                      zen.Rand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vec))) 
                                        (v_Vvc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vcc)))) =>
                                         v_Vxc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vec))) 
                                           v_Vxc v_Vbd) v_Vnd) v_Vcd) 
                                  (v_Ved:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._amper__amper_ 
                                                  (abst_second_case v_Vcc) 
                                                  (abst_second_case v_Vec)))))) =>
                                   v_Vod:(zen.proof zen.False) =>
                                   zen.Rfalse v_Vod) v_Vmd) v_Vid) 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)))))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_first_case v_Vcc) 
                                  (abst_first_case v_Vec)) 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vec)) 
                               (dk_bool.ite basics.bool__t 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false) 
                               (v_Vnc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec))))) =>
                                v_Vmc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first_term v_Vcc) 
                                            (abst_first_term v_Vec))))) =>
                                focal.zenon_focal_and 
                                  (abst_first_case v_Vcc) 
                                  (abst_first_case v_Vec) 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vec))))) =>
                                   zen.Rand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vec))) 
                                     (v_Vjc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vcc)))) =>
                                      v_Vlc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vec)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vec))) 
                                        v_Vlc v_Vtc) v_Vzc) v_Vnc) 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_first_case v_Vcc) 
                                               (abst_first_case v_Vec)))))) =>
                                v_Vmd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (dk_bool.ite basics.bool__t 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)) 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec)) 
                                            basics.false)))) =>
                                focal.zenon_focal_ite_bool 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec))))) =>
                                   v_Vyc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second_term v_Vcc) 
                                              (abst_second_term v_Vec)))) 
                                     v_Vyc v_Vdd) 
                                  (v_Ved:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._amper__amper_ 
                                                  (abst_second_case v_Vcc) 
                                                  (abst_second_case v_Vec)))))) =>
                                   v_Vod:(zen.proof zen.False) =>
                                   zen.Rfalse v_Vod) v_Vmd) v_Vid) v_Vpd) 
                         v_Vld) 
                      (v_Voc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vec)))))) =>
                       zen.Rnotand 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vcc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vec))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec))))) 
                         (v_Vhd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vcc))))) =>
                          focal.zenon_focal_ite_bool 
                            (basics._amper__amper_ (abst_first_case v_Vcc) 
                               (abst_first_case v_Vec)) 
                            (_p_A_equal (abst_first_term v_Vcc) 
                               (abst_first_term v_Vec)) 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false) 
                            (v_Vnc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._amper__amper_ 
                                         (abst_first_case v_Vcc) 
                                         (abst_first_case v_Vec))))) =>
                             v_Vmc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vec))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_first_term v_Vcc) 
                                        (abst_first_term v_Vec)))) v_Vmc 
                               v_Voc) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec)))))) =>
                             v_Vmd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (dk_bool.ite basics.bool__t 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec)) 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)) 
                                         basics.false)))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec)) 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)) basics.false 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_second_case v_Vcc) 
                                            (abst_second_case v_Vec))))) =>
                                v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec))))) =>
                                focal.zenon_focal_and 
                                  (abst_second_case v_Vcc) 
                                  (abst_second_case v_Vec) 
                                  (v_Vnd:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec))))) =>
                                   zen.Rand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vec))) 
                                     (v_Vvc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc)))) =>
                                      v_Vxc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vec)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vcc))) 
                                        v_Vvc v_Vhd) v_Vnd) v_Vcd) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)))))) =>
                                v_Vod:(zen.proof zen.False) =>
                                zen.Rfalse v_Vod) v_Vmd) v_Vid) 
                         (v_Vpd:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vec))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec))))))) =>
                          zen.Rnotand 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vec))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)))) 
                            (v_Vbd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vec))))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_first_case v_Vcc) 
                                  (abst_first_case v_Vec)) 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vec)) 
                               (dk_bool.ite basics.bool__t 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false) 
                               (v_Vnc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec))))) =>
                                v_Vmc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first_term v_Vcc) 
                                            (abst_first_term v_Vec))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_first_term v_Vcc) 
                                           (abst_first_term v_Vec)))) v_Vmc 
                                  v_Voc) 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_first_case v_Vcc) 
                                               (abst_first_case v_Vec)))))) =>
                                v_Vmd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (dk_bool.ite basics.bool__t 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)) 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec)) 
                                            basics.false)))) =>
                                focal.zenon_focal_ite_bool 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec))))) =>
                                   v_Vyc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec))))) =>
                                   focal.zenon_focal_and 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec) 
                                     (v_Vnd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vcc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec))))) =>
                                      zen.Rand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vec))) 
                                        (v_Vvc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vcc)))) =>
                                         v_Vxc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vec))) 
                                           v_Vxc v_Vbd) v_Vnd) v_Vcd) 
                                  (v_Ved:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._amper__amper_ 
                                                  (abst_second_case v_Vcc) 
                                                  (abst_second_case v_Vec)))))) =>
                                   v_Vod:(zen.proof zen.False) =>
                                   zen.Rfalse v_Vod) v_Vmd) v_Vid) 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vec)))))) =>
                             focal.zenon_focal_ite_bool 
                               (basics._amper__amper_ 
                                  (abst_first_case v_Vcc) 
                                  (abst_first_case v_Vec)) 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vec)) 
                               (dk_bool.ite basics.bool__t 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false) 
                               (v_Vnc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._amper__amper_ 
                                            (abst_first_case v_Vcc) 
                                            (abst_first_case v_Vec))))) =>
                                v_Vmc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first_term v_Vcc) 
                                            (abst_first_term v_Vec))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_first_term v_Vcc) 
                                           (abst_first_term v_Vec)))) v_Vmc 
                                  v_Voc) 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_first_case v_Vcc) 
                                               (abst_first_case v_Vec)))))) =>
                                v_Vmd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (dk_bool.ite basics.bool__t 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec)) 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec)) 
                                            basics.false)))) =>
                                focal.zenon_focal_ite_bool 
                                  (basics._amper__amper_ 
                                     (abst_second_case v_Vcc) 
                                     (abst_second_case v_Vec)) 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vec)) basics.false 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._amper__amper_ 
                                               (abst_second_case v_Vcc) 
                                               (abst_second_case v_Vec))))) =>
                                   v_Vyc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vec))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second_term v_Vcc) 
                                              (abst_second_term v_Vec)))) 
                                     v_Vyc v_Vdd) 
                                  (v_Ved:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._amper__amper_ 
                                                  (abst_second_case v_Vcc) 
                                                  (abst_second_case v_Vec)))))) =>
                                   v_Vod:(zen.proof zen.False) =>
                                   zen.Rfalse v_Vod) v_Vmd) v_Vid) v_Vpd) 
                         v_Vld) v_Vqd) v_Vkd) v_Vjd) v_Vfc) v_Vdc) v_Vbc).

def Sum_set__first_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_first_has_case:(dk_logic.eP 
                         (dk_logic.forall _p_A_T 
                            (x:(cc.eT _p_A_T) =>
                             dk_logic.ebP (abst_first_case (abst_first x))))) ->
  abst_first_reverses_term:(dk_logic.eP 
                              (dk_logic.forall _p_A_T 
                                 (x:(cc.eT _p_A_T) =>
                                  dk_logic.ebP 
                                    (_p_A_equal 
                                       (abst_first_term (abst_first x)) x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall _p_A_T 
          (y:(cc.eT _p_A_T) =>
           dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
             (dk_logic.ebP 
                (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
                   abst_first_case abst_first_term abst_second_case 
                   abst_second_term (abst_first x) (abst_first y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_first_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_first_case (abst_first x))))) =>
  abst_first_reverses_term:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.ebP (_p_A_equal (abst_first_term (abst_first x)) x)))) =>
  (__B_1_LEMMA:
   (x:(cc.eT _p_A_T) ->
    y:(cc.eT _p_A_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_A_equal x y))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
            abst_first_case abst_first_term abst_second_case 
            abst_second_term (abst_first x) (abst_first y)))) =>
   zen.nnpp 
     (zen.forall _p_A_T 
        (v_Vzb:(zen.term _p_A_T) =>
         zen.forall _p_A_T 
           (v_Vac:(zen.term _p_A_T) =>
            zen.imp (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                       abst_T abst_first_case abst_first_term 
                       abst_second_case abst_second_term (abst_first v_Vzb) 
                       (abst_first v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_A_T 
               (v_Vzb:(zen.term _p_A_T) =>
                zen.forall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Sum_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_first_case 
                              abst_first_term abst_second_case 
                              abst_second_term (abst_first v_Vzb) 
                              (abst_first v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall _p_A_T 
           (v_Vzb:(zen.term _p_A_T) =>
            zen.forall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                          abst_T abst_first_case abst_first_term 
                          abst_second_case abst_second_term 
                          (abst_first v_Vzb) (abst_first v_Vac))))))) 
        __B_1_LEMMA v_Vbc)) 
    (x:(cc.eT _p_A_T) =>
     y:(cc.eT _p_A_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_A_equal x y))) =>
     (__B_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (_p_A_equal x (abst_first_term (abst_first x))))) =>
      (__B_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (_p_A_equal y (abst_first_term (abst_first y))))) =>
       (__B_1_3_LEMMA:
        (dk_logic.eP (dk_logic.ebP (abst_first_case (abst_first x)))) =>
        (__B_1_4_LEMMA:
         (dk_logic.eP (dk_logic.ebP (abst_first_case (abst_first y)))) =>
         (__B_1_5_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_A_equal (abst_first_term (abst_first x)) 
                   (abst_first_term (abst_first y))))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
                     abst_first_case abst_first_term abst_second_case 
                     abst_second_term (abst_first x) (abst_first y)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (dk_bool.ite basics.bool__t 
                            (basics._amper__amper_ 
                               (abst_first_case (abst_first x)) 
                               (abst_first_case (abst_first y))) 
                            (_p_A_equal (abst_first_term (abst_first x)) 
                               (abst_first_term (abst_first y))) 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case (abst_first x)) 
                                  (abst_second_case (abst_first y))) 
                               (_p_B_equal (abst_second_term (abst_first x)) 
                                  (abst_second_term (abst_first y))) 
                               basics.false)))))) =>
             focal.zenon_focal_ite_bool_n 
               (basics._amper__amper_ (abst_first_case (abst_first x)) 
                  (abst_first_case (abst_first y))) 
               (_p_A_equal (abst_first_term (abst_first x)) 
                  (abst_first_term (abst_first y))) 
               (dk_bool.ite basics.bool__t 
                  (basics._amper__amper_ (abst_second_case (abst_first x)) 
                     (abst_second_case (abst_first y))) 
                  (_p_B_equal (abst_second_term (abst_first x)) 
                     (abst_second_term (abst_first y))) basics.false) 
               (v_Vac:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._amper__amper_ 
                            (abst_first_case (abst_first x)) 
                            (abst_first_case (abst_first y)))))) =>
                v_Vbc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term (abst_first x)) 
                               (abst_first_term (abst_first y))))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal (abst_first_term (abst_first x)) 
                           (abst_first_term (abst_first y))))) __B_1_5_LEMMA 
                  v_Vbc) 
               (v_Vcc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._amper__amper_ 
                               (abst_first_case (abst_first x)) 
                               (abst_first_case (abst_first y))))))) =>
                v_Vdc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case (abst_first x)) 
                                  (abst_second_case (abst_first y))) 
                               (_p_B_equal (abst_second_term (abst_first x)) 
                                  (abst_second_term (abst_first y))) 
                               basics.false))))) =>
                focal.zenon_focal_notand (abst_first_case (abst_first x)) 
                  (abst_first_case (abst_first y)) 
                  (v_Vec:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first x)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first y))))))) =>
                   zen.Rnotand 
                     (zen.triangle 
                        (focal.is_true (abst_first_case (abst_first x)))) 
                     (zen.triangle 
                        (focal.is_true (abst_first_case (abst_first y)))) 
                     (v_Vfc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first x)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true (abst_first_case (abst_first x)))) 
                        __B_1_3_LEMMA v_Vfc) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first y)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true (abst_first_case (abst_first y)))) 
                        __B_1_4_LEMMA v_Vgc) v_Vec) v_Vcc) v_Vzb)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_A_equal (abst_first_term (abst_first x)) 
                       (abst_first_term (abst_first y))))) 
              (v_Vvc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_first_term (abst_first x)) 
                              (abst_first_term (abst_first y))))))) =>
               zen.Rall _p_A_T 
                 (v_Vwc:(zen.term _p_A_T) =>
                  zen.forall _p_A_T 
                    (v_Vxc:(zen.term _p_A_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_A_equal v_Vwc v_Vxc))) 
                       (zen.triangle (focal.is_true (_p_A_equal v_Vxc v_Vwc))))) 
                 (abst_first_term (abst_first y)) 
                 (v_Vyc:
                  (zen.proof 
                     (zen.forall _p_A_T 
                        (v_Vxc:(zen.term _p_A_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term (abst_first y)) v_Vxc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal v_Vxc 
                                    (abst_first_term (abst_first y)))))))) =>
                  zen.Rall _p_A_T 
                    (v_Vxc:(zen.term _p_A_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first_term (abst_first y)) 
                                v_Vxc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal v_Vxc 
                                (abst_first_term (abst_first y)))))) 
                    (abst_first_term (abst_first x)) 
                    (v_Vzc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term (abst_first y)) 
                                    (abst_first_term (abst_first x))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term (abst_first x)) 
                                    (abst_first_term (abst_first y))))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first_term (abst_first y)) 
                                (abst_first_term (abst_first x))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first_term (abst_first x)) 
                                (abst_first_term (abst_first y))))) 
                       (v_Vad:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term (abst_first y)) 
                                       (abst_first_term (abst_first x))))))) =>
                        zen.Rcut 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_A_T 
                                      (abst_first_term (abst_first y)) x))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (abst_first_term (abst_first y)) x))))) 
                          (v_Vbd:
                           (zen.proof 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_A_T 
                                          (abst_first_term (abst_first y)) x))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first_term (abst_first y)) 
                                             x)))))) =>
                           zen.Rand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_A_T 
                                      (abst_first_term (abst_first y)) x))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (abst_first_term (abst_first y)) x)))) 
                             (v_Vcd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_A_T 
                                          (abst_first_term (abst_first y)) x)))) =>
                              v_Vdd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first_term (abst_first y)) 
                                             x))))) =>
                              zen.Rall _p_A_T 
                                (v_Vwc:(zen.term _p_A_T) =>
                                 zen.forall _p_A_T 
                                   (v_Vxc:(zen.term _p_A_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Vwc v_Vxc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Vxc v_Vwc))))) x 
                                (v_Ved:
                                 (zen.proof 
                                    (zen.forall _p_A_T 
                                       (v_Vxc:(zen.term _p_A_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal x v_Vxc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal v_Vxc x)))))) =>
                                 zen.Rall _p_A_T 
                                   (v_Vxc:(zen.term _p_A_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (_p_A_equal x v_Vxc))) 
                                      (zen.triangle 
                                         (focal.is_true (_p_A_equal v_Vxc x)))) 
                                   (abst_first_term (abst_first y)) 
                                   (v_Vfd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal x 
                                                   (abst_first_term 
                                                      (abst_first y))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first_term 
                                                      (abst_first y)) x))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal x 
                                               (abst_first_term 
                                                  (abst_first y))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_first_term 
                                                  (abst_first y)) x))) 
                                      (v_Vgd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal x 
                                                      (abst_first_term 
                                                         (abst_first y))))))) =>
                                       zen.Rcut 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T x x))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x x))))) 
                                         (v_Vhd:
                                          (zen.proof 
                                             (zen.and 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T x x))) 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x x)))))) =>
                                          zen.Rand 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T x x))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x x)))) 
                                            (v_Vid:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T x x)))) =>
                                             v_Vjd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x x))))) =>
                                             zen.Rnoteq _p_A_T x v_Vid) v_Vhd) 
                                         (v_Vkd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.and 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_A_T x 
                                                            x))) 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x x))))))) =>
                                          zen.Rcut 
                                            (zen.triangle 
                                               (zen.equal _p_A_T y 
                                                  (abst_first_term 
                                                     (abst_first y)))) 
                                            (v_Vld:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T y 
                                                      (abst_first_term 
                                                         (abst_first y))))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vmd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vmd)) 
                                               (_p_A_equal x y) 
                                               (_p_A_equal x 
                                                  (abst_first_term 
                                                     (abst_first y))) 
                                               (v_Vnd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_A_equal x y) 
                                                            (_p_A_equal x 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    y))))))) =>
                                                zen.Rsubst _p_A_T 
                                                  (v_Vod:(zen.term _p_A_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_A_equal v_Vod 
                                                              y) 
                                                           (_p_A_equal x 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)))))) 
                                                  x x 
                                                  (v_Vid:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T x x)))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              x x))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal x x)))) 
                                                     (v_Vpd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_A_T x 
                                                                    x))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              x x)) 
                                                        (v_Vqd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_A_T x x))) =>
                                                         zen.Rcut 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T x x)) 
                                                           (v_Vqd0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_A_T x 
                                                                    x))) =>
                                                            zen.Rsubst 
                                                              _p_A_T 
                                                              (v_Vrd:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    v_Vrd x)) 
                                                              x x 
                                                              (v_Vid0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T x 
                                                                    x)) 
                                                                 v_Vqd0 
                                                                 v_Vid0) 
                                                              (v_Vqd0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x))) =>
                                                               zen.Rsubst 
                                                                 _p_A_T 
                                                                 (v_Vsd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T x 
                                                                    v_Vsd)) 
                                                                 x x 
                                                                 (v_Vid0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)))) =>
                                                                  zen.Rnoteq 
                                                                    _p_A_T x 
                                                                    v_Vid0) 
                                                                 (v_Vqd0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)) 
                                                                    v_Vqd0 
                                                                    v_Vid) 
                                                                 v_Vqd0) 
                                                              v_Vqd0) 
                                                           (v_Vid0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)))) =>
                                                            zen.Rnoteq 
                                                              _p_A_T x v_Vid0)) 
                                                        v_Vpd) 
                                                     (v_Vtd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x)))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal x x))) 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    x x)))) =>
                                                         zen.Rall _p_A_T 
                                                           (v_Vwc:
                                                            (zen.term _p_A_T) =>
                                                            zen.forall 
                                                              _p_A_T 
                                                              (v_Vxc:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                           x 
                                                           (v_Vwd:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  _p_A_T 
                                                                  (v_Vxc:
                                                                   (zen.term 
                                                                    _p_A_T) =>
                                                                   zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd)))))))) =>
                                                            zen.Rall _p_A_T 
                                                              (v_Vxc:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vxc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd)))))) 
                                                              x 
                                                              (v_Vxd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))))))) =>
                                                               zen.Rall 
                                                                 _p_A_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))))) 
                                                                 y 
                                                                 (v_Vyd:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y)))) 
                                                                    (
                                                                    v_Vjd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    v_Vud 
                                                                    v_Vjd) 
                                                                    (
                                                                    v_Vzd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) H 
                                                                    v_Vae) 
                                                                    (H0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vmd)) 
                                                                    (_p_A_equal 
                                                                    x y) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (v_Vnd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x y) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vod:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vod y) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) 
                                                                    x x 
                                                                    (v_Vid0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T x 
                                                                    v_Vid0) 
                                                                    (v_Vnd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x y) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x v_Vbe) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))) 
                                                                    v_Vld 
                                                                    v_Vce) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    v_Vde) 
                                                                    v_Vnd0) 
                                                                    v_Vnd0) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    v_Vee 
                                                                    v_Vgd) H0) 
                                                                    v_Vzd) 
                                                                    v_Vyd) 
                                                                 v_Vxd) v_Vwd) 
                                                           _p_A_equal_transitive) 
                                                        v_Vtd) v_Vkd) 
                                                  (v_Vnd0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_A_equal x 
                                                                  y) 
                                                               (_p_A_equal x 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                   zen.Rsubst _p_A_T 
                                                     (v_Vbe:
                                                      (zen.term _p_A_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal x 
                                                                 v_Vbe) 
                                                              (_p_A_equal x 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)))))) 
                                                     y 
                                                     (abst_first_term 
                                                        (abst_first y)) 
                                                     (v_Vce:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_A_T y 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              y 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)))) 
                                                        v_Vld v_Vce) 
                                                     (v_Vde:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                  (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (_p_A_equal x 
                                                           (abst_first_term 
                                                              (abst_first y))) 
                                                        v_Vde) v_Vnd0) v_Vnd) 
                                               (v_Vee:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x 
                                                            (abst_first_term 
                                                               (abst_first y)))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal x 
                                                           (abst_first_term 
                                                              (abst_first y))))) 
                                                  v_Vee v_Vgd) H) 
                                            (v_Vce:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T y 
                                                         (abst_first_term 
                                                            (abst_first y)))))) =>
                                             zen.Rcut 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal y 
                                                        (abst_first_term 
                                                           (abst_first y))))) 
                                               (__B_1_2_LEMMA0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal y 
                                                            (abst_first_term 
                                                               (abst_first y)))))) =>
                                                zen.Rall _p_A_T 
                                                  (v_Vwc:(zen.term _p_A_T) =>
                                                   zen.forall _p_A_T 
                                                     (v_Vxc:
                                                      (zen.term _p_A_T) =>
                                                      zen.forall _p_A_T 
                                                        (v_Vvd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                  x 
                                                  (v_Vwd:
                                                   (zen.proof 
                                                      (zen.forall _p_A_T 
                                                         (v_Vxc:
                                                          (zen.term _p_A_T) =>
                                                          zen.forall _p_A_T 
                                                            (v_Vvd:
                                                             (zen.term _p_A_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vxc))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd)))))))) =>
                                                   zen.Rall _p_A_T 
                                                     (v_Vxc:
                                                      (zen.term _p_A_T) =>
                                                      zen.forall _p_A_T 
                                                        (v_Vvd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    x v_Vxc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    x v_Vvd)))))) 
                                                     y 
                                                     (v_Vfe:
                                                      (zen.proof 
                                                         (zen.forall _p_A_T 
                                                            (v_Vvd:
                                                             (zen.term _p_A_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y v_Vvd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))))))) =>
                                                      zen.Rall _p_A_T 
                                                        (v_Vvd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    x y))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    y v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    x v_Vvd))))) 
                                                        (abst_first_term 
                                                           (abst_first y)) 
                                                        (v_Vge:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    x y))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) 
                                                           (v_Vae:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x y))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    x y))) H 
                                                              v_Vae) 
                                                           (v_Vhe:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                              (v_Vie:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                 __B_1_2_LEMMA0 
                                                                 v_Vie) 
                                                              (v_Vee:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                               zen.Rsubst 
                                                                 basics.bool__t 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    basics.bool__t) =>
                                                                  zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    v_Vmd)) 
                                                                 (_p_A_equal 
                                                                    x 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                 (_p_A_equal 
                                                                    x 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                 (v_Vde:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                  zen.Rsubst 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vje:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vje 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) 
                                                                    x x 
                                                                    (
                                                                    v_Vid:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x)))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T x 
                                                                    x v_Vqd 
                                                                    v_Vid) 
                                                                    v_Vpd) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x)))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                                    x 
                                                                    (v_Vwd0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd)))))) 
                                                                    x 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))))) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x x))) 
                                                                    v_Vud 
                                                                    v_Vjd) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    (v_Vgd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    v_Vee 
                                                                    v_Vgd0) 
                                                                    (v_Vee0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    v_Vee0 
                                                                    v_Vgd) 
                                                                    v_Vle) 
                                                                    v_Vke) 
                                                                    v_Vxd) 
                                                                    v_Vwd0) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vtd) 
                                                                    v_Vkd) 
                                                                    (
                                                                    v_Vde0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x v_Vbe) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vme) 
                                                                    (v_Vde0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    v_Vde0) 
                                                                    v_Vde0) 
                                                                    v_Vde) 
                                                                 (v_Vee0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    v_Vee0 
                                                                    v_Vgd) 
                                                                 v_Vee) v_Vhe) 
                                                           v_Vge) v_Vfe) 
                                                     v_Vwd) 
                                                  _p_A_equal_transitive) 
                                               (v_Vie:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal y 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    y))))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal y 
                                                           (abst_first_term 
                                                              (abst_first y))))) 
                                                  __B_1_2_LEMMA v_Vie)))) 
                                      (v_Vne:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first_term 
                                                      (abst_first y)) x)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first_term 
                                                     (abst_first y)) x))) 
                                         v_Vne v_Vdd) v_Vfd) v_Ved) 
                                _p_A_equal_symmetric) v_Vbd) 
                          (v_Voe:
                           (zen.proof 
                              (zen.not 
                                 (zen.and 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_first_term (abst_first y)) 
                                             x))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_first_term 
                                                   (abst_first y)) x))))))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (zen.equal _p_A_T 
                                   (abst_first_term (abst_first x)) 
                                   (abst_first_term (abst_first x)))) 
                             (v_Vpe:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal _p_A_T 
                                       (abst_first_term (abst_first x)) 
                                       (abst_first_term (abst_first x))))) =>
                              zen.Rsubst basics.bool__t 
                                (v_Vmd:(zen.term basics.bool__t) =>
                                 zen.triangle (focal.is_true v_Vmd)) 
                                (_p_A_equal x 
                                   (abst_first_term (abst_first x))) 
                                (_p_A_equal (abst_first_term (abst_first y)) 
                                   (abst_first_term (abst_first x))) 
                                (v_Vqe:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_A_equal x 
                                                (abst_first_term 
                                                   (abst_first x))) 
                                             (_p_A_equal 
                                                (abst_first_term 
                                                   (abst_first y)) 
                                                (abst_first_term 
                                                   (abst_first x))))))) =>
                                 zen.Rsubst _p_A_T 
                                   (v_Vre:(zen.term _p_A_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_A_equal v_Vre 
                                               (abst_first_term 
                                                  (abst_first x))) 
                                            (_p_A_equal 
                                               (abst_first_term 
                                                  (abst_first y)) 
                                               (abst_first_term 
                                                  (abst_first x)))))) x 
                                   (abst_first_term (abst_first y)) 
                                   (v_Vse:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_A_T x 
                                                (abst_first_term 
                                                   (abst_first y)))))) =>
                                    zen.Rnotand 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_first_term 
                                                  (abst_first y)) x))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first_term 
                                                     (abst_first y)) x)))) 
                                      (v_Vte:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first_term 
                                                         (abst_first y)) x))))) =>
                                       zen.Rnotnot 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_first_term 
                                                  (abst_first y)) x)) 
                                         (v_Vue:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_A_T 
                                                   (abst_first_term 
                                                      (abst_first y)) x))) =>
                                          zen.Rcut 
                                            (zen.triangle 
                                               (zen.equal _p_A_T 
                                                  (abst_first_term 
                                                     (abst_first y)) 
                                                  (abst_first_term 
                                                     (abst_first y)))) 
                                            (v_Vve:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first_term 
                                                         (abst_first y)) 
                                                      (abst_first_term 
                                                         (abst_first y))))) =>
                                             zen.Rsubst _p_A_T 
                                               (v_Vwe:(zen.term _p_A_T) =>
                                                zen.triangle 
                                                  (zen.equal _p_A_T v_Vwe 
                                                     (abst_first_term 
                                                        (abst_first y)))) 
                                               (abst_first_term 
                                                  (abst_first y)) x 
                                               (v_Vcd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_A_T 
                                                            (abst_first_term 
                                                               (abst_first y)) 
                                                            x)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_first_term 
                                                           (abst_first y)) x)) 
                                                  v_Vue v_Vcd) 
                                               (v_Vxe:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T x 
                                                         (abst_first_term 
                                                            (abst_first y))))) =>
                                                zen.Rsubst _p_A_T 
                                                  (v_Vsd:(zen.term _p_A_T) =>
                                                   zen.triangle 
                                                     (zen.equal _p_A_T x 
                                                        v_Vsd)) 
                                                  (abst_first_term 
                                                     (abst_first y)) 
                                                  (abst_first_term 
                                                     (abst_first y)) 
                                                  (v_Vme:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    y)) 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    y)))))) =>
                                                   zen.Rnoteq _p_A_T 
                                                     (abst_first_term 
                                                        (abst_first y)) v_Vme) 
                                                  (v_Vxe0:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal _p_A_T x 
                                                            (abst_first_term 
                                                               (abst_first y))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T x 
                                                           (abst_first_term 
                                                              (abst_first y)))) 
                                                     v_Vxe0 v_Vse) v_Vxe) 
                                               v_Vve) 
                                            (v_Vme:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T 
                                                         (abst_first_term 
                                                            (abst_first y)) 
                                                         (abst_first_term 
                                                            (abst_first y)))))) =>
                                             zen.Rnoteq _p_A_T 
                                               (abst_first_term 
                                                  (abst_first y)) v_Vme)) 
                                         v_Vte) 
                                      (v_Vye:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first_term 
                                                            (abst_first y)) x)))))) =>
                                       zen.Rnotnot 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first_term 
                                                     (abst_first y)) x))) 
                                         (v_Vne:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first_term 
                                                         (abst_first y)) x)))) =>
                                          zen.Rall _p_A_T 
                                            (v_Vwc:(zen.term _p_A_T) =>
                                             zen.forall _p_A_T 
                                               (v_Vxc:(zen.term _p_A_T) =>
                                                zen.forall _p_A_T 
                                                  (v_Vvd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal v_Vwc 
                                                              v_Vxc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vxc v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vwc v_Vvd))))))) 
                                            (abst_first_term (abst_first y)) 
                                            (v_Vze:
                                             (zen.proof 
                                                (zen.forall _p_A_T 
                                                   (v_Vxc:
                                                    (zen.term _p_A_T) =>
                                                    zen.forall _p_A_T 
                                                      (v_Vvd:
                                                       (zen.term _p_A_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vxc))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd)))))))) =>
                                             zen.Rall _p_A_T 
                                               (v_Vxc:(zen.term _p_A_T) =>
                                                zen.forall _p_A_T 
                                                  (v_Vvd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) v_Vxc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vxc v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) v_Vvd)))))) 
                                               x 
                                               (v_Vaf:
                                                (zen.proof 
                                                   (zen.forall _p_A_T 
                                                      (v_Vvd:
                                                       (zen.term _p_A_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    x v_Vvd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd))))))) =>
                                                zen.Rall _p_A_T 
                                                  (v_Vvd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) x))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal x 
                                                                 v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) v_Vvd))))) 
                                                  (abst_first_term 
                                                     (abst_first x)) 
                                                  (v_Vbf:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) x))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal x 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)))))) 
                                                     (v_Vdd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) x))) 
                                                        v_Vne v_Vdd) 
                                                     (v_Vcf:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal x 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))))) 
                                                        (v_Vdf:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    x 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                           __B_1_1_LEMMA 
                                                           v_Vdf) 
                                                        (v_Vef:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                         zen.Rsubst 
                                                           basics.bool__t 
                                                           (v_Vmd:
                                                            (zen.term 
                                                               basics.bool__t) =>
                                                            zen.triangle 
                                                              (focal.is_true 
                                                                 v_Vmd)) 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x))) 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x))) 
                                                           (v_Vff:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                            zen.Rsubst 
                                                              _p_A_T 
                                                              (v_Vre:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vre 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) 
                                                              (v_Vme:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                               zen.Rnoteq 
                                                                 _p_A_T 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) v_Vme) 
                                                              (v_Vff0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                               zen.Rsubst 
                                                                 _p_A_T 
                                                                 (v_Vgf:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vgf) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) 
                                                                 (v_Vhf:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))) 
                                                                    v_Vpe 
                                                                    v_Vhf) 
                                                                 (v_Vff0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                                  zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                                    v_Vff0) 
                                                                 v_Vff0) 
                                                              v_Vff) 
                                                           (v_Vef0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                              v_Vef0 v_Vad) 
                                                           v_Vef) v_Vcf) 
                                                     v_Vbf) v_Vaf) v_Vze) 
                                            _p_A_equal_transitive) v_Vye) 
                                      v_Voe) 
                                   (v_Vff:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_A_equal 
                                                   (abst_first_term 
                                                      (abst_first y)) 
                                                   (abst_first_term 
                                                      (abst_first x))) 
                                                (_p_A_equal 
                                                   (abst_first_term 
                                                      (abst_first y)) 
                                                   (abst_first_term 
                                                      (abst_first x))))))) =>
                                    zen.Rsubst _p_A_T 
                                      (v_Vgf:(zen.term _p_A_T) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_A_equal 
                                                  (abst_first_term 
                                                     (abst_first y)) v_Vgf) 
                                               (_p_A_equal 
                                                  (abst_first_term 
                                                     (abst_first y)) 
                                                  (abst_first_term 
                                                     (abst_first x)))))) 
                                      (abst_first_term (abst_first x)) 
                                      (abst_first_term (abst_first x)) 
                                      (v_Vhf:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_A_T 
                                                   (abst_first_term 
                                                      (abst_first x)) 
                                                   (abst_first_term 
                                                      (abst_first x)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (abst_first_term 
                                                  (abst_first x)) 
                                               (abst_first_term 
                                                  (abst_first x)))) v_Vpe 
                                         v_Vhf) 
                                      (v_Vff0:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_A_equal 
                                                      (abst_first_term 
                                                         (abst_first y)) 
                                                      (abst_first_term 
                                                         (abst_first x))) 
                                                   (_p_A_equal 
                                                      (abst_first_term 
                                                         (abst_first y)) 
                                                      (abst_first_term 
                                                         (abst_first x))))))) =>
                                       zen.Rnoteq basics.bool__t 
                                         (_p_A_equal 
                                            (abst_first_term (abst_first y)) 
                                            (abst_first_term (abst_first x))) 
                                         v_Vff0) v_Vff) v_Vqe) 
                                (v_Vef:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first_term (abst_first y)) 
                                             (abst_first_term (abst_first x)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_first_term (abst_first y)) 
                                            (abst_first_term (abst_first x))))) 
                                   v_Vef v_Vad) __B_1_1_LEMMA) 
                             (v_Vhf:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_A_T 
                                          (abst_first_term (abst_first x)) 
                                          (abst_first_term (abst_first x)))))) =>
                              zen.Rcut 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (abst_first_term (abst_first x)) 
                                         (abst_first_term (abst_first x))))) 
                                (v_Vif:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first_term (abst_first x)) 
                                             (abst_first_term (abst_first x)))))) =>
                                 zen.Rall _p_A_T 
                                   (v_Vwc:(zen.term _p_A_T) =>
                                    zen.forall _p_A_T 
                                      (v_Vxc:(zen.term _p_A_T) =>
                                       zen.forall _p_A_T 
                                         (v_Vvd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal v_Vwc v_Vxc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal v_Vxc v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal v_Vwc v_Vvd))))))) 
                                   x 
                                   (v_Vwd:
                                    (zen.proof 
                                       (zen.forall _p_A_T 
                                          (v_Vxc:(zen.term _p_A_T) =>
                                           zen.forall _p_A_T 
                                             (v_Vvd:(zen.term _p_A_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal x v_Vxc))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal v_Vxc 
                                                            v_Vvd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x v_Vvd)))))))) =>
                                    zen.Rall _p_A_T 
                                      (v_Vxc:(zen.term _p_A_T) =>
                                       zen.forall _p_A_T 
                                         (v_Vvd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal x v_Vxc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal v_Vxc v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x v_Vvd)))))) 
                                      (abst_first_term (abst_first x)) 
                                      (v_Vjf:
                                       (zen.proof 
                                          (zen.forall _p_A_T 
                                             (v_Vvd:(zen.term _p_A_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal x 
                                                         (abst_first_term 
                                                            (abst_first x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first_term 
                                                               (abst_first x)) 
                                                            v_Vvd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x v_Vvd))))))) =>
                                       zen.Rall _p_A_T 
                                         (v_Vvd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal x 
                                                     (abst_first_term 
                                                        (abst_first x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x v_Vvd))))) 
                                         (abst_first_term (abst_first x)) 
                                         (v_Vkf:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal x 
                                                         (abst_first_term 
                                                            (abst_first x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first_term 
                                                               (abst_first x)) 
                                                            (abst_first_term 
                                                               (abst_first x))))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x 
                                                            (abst_first_term 
                                                               (abst_first x)))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal x 
                                                     (abst_first_term 
                                                        (abst_first x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        (abst_first_term 
                                                           (abst_first x))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x 
                                                        (abst_first_term 
                                                           (abst_first x)))))) 
                                            (v_Vdf:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x 
                                                            (abst_first_term 
                                                               (abst_first x))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x 
                                                        (abst_first_term 
                                                           (abst_first x))))) 
                                               __B_1_1_LEMMA v_Vdf) 
                                            (v_Vlf:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first_term 
                                                               (abst_first x)) 
                                                            (abst_first_term 
                                                               (abst_first x))))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x 
                                                            (abst_first_term 
                                                               (abst_first x))))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        (abst_first_term 
                                                           (abst_first x))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x 
                                                        (abst_first_term 
                                                           (abst_first x))))) 
                                               (v_Vmf:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    x)) 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    x))))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              (abst_first x)) 
                                                           (abst_first_term 
                                                              (abst_first x))))) 
                                                  v_Vif v_Vmf) 
                                               (__B_1_1_LEMMA0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x 
                                                            (abst_first_term 
                                                               (abst_first x)))))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vmd:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vmd)) 
                                                  (_p_A_equal x 
                                                     (abst_first_term 
                                                        (abst_first x))) 
                                                  (_p_A_equal 
                                                     (abst_first_term 
                                                        (abst_first y)) 
                                                     (abst_first_term 
                                                        (abst_first x))) 
                                                  (v_Vqe:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_A_equal x 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                               (_p_A_equal 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                   zen.Rsubst _p_A_T 
                                                     (v_Vre:
                                                      (zen.term _p_A_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal 
                                                                 v_Vre 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))) 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)))))) 
                                                     x 
                                                     (abst_first_term 
                                                        (abst_first y)) 
                                                     (v_Vse:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_A_T x 
                                                                  (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                      zen.Rnotand 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) x))) 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y)) x)))) 
                                                        (v_Vte:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))))) =>
                                                         zen.Rnotnot 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    y)) x)) 
                                                           (v_Vue:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) =>
                                                            zen.Reqsym 
                                                              _p_A_T 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) x 
                                                              v_Vue v_Vse) 
                                                           v_Vte) 
                                                        (v_Vye:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x)))))) =>
                                                         zen.Rnotnot 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                           (v_Vne:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x)))) =>
                                                            zen.Rall _p_A_T 
                                                              (v_Vwc:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vxc:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.forall 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) 
                                                              (v_Vze:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd)))))))) =>
                                                               zen.Rall 
                                                                 _p_A_T 
                                                                 (v_Vxc:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.forall 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd)))))) 
                                                                 x 
                                                                 (v_Vaf:
                                                                  (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd))))))) =>
                                                                  zen.Rall 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd))))) 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (
                                                                    v_Vbf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) 
                                                                    (v_Vdd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) x))) 
                                                                    v_Vne 
                                                                    v_Vdd) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    x 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    __B_1_1_LEMMA0 
                                                                    v_Vdf) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    v_Vef 
                                                                    v_Vad) 
                                                                    v_Vcf) 
                                                                    v_Vbf) 
                                                                    v_Vaf) 
                                                                 v_Vze) 
                                                              _p_A_equal_transitive) 
                                                           v_Vye) v_Voe) 
                                                     (v_Vff:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                                  (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                      zen.Rsubst _p_A_T 
                                                        (v_Vgf:
                                                         (zen.term _p_A_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vgf) 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        (v_Vhf0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                         zen.Rnoteq _p_A_T 
                                                           (abst_first_term 
                                                              (abst_first x)) 
                                                           v_Vhf0) 
                                                        (v_Vff0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x))) 
                                                           v_Vff0) v_Vff) 
                                                     v_Vqe) 
                                                  (v_Vef:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    y)) 
                                                               (abst_first_term 
                                                                  (abst_first 
                                                                    x)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x))))) 
                                                     v_Vef v_Vad) 
                                                  __B_1_1_LEMMA0) v_Vlf) 
                                            v_Vkf) v_Vjf) v_Vwd) 
                                   _p_A_equal_transitive) 
                                (v_Vmf:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_first_term 
                                                   (abst_first x)) 
                                                (abst_first_term 
                                                   (abst_first x))))))) =>
                                 zen.Rnoteq _p_A_T 
                                   (abst_first_term (abst_first x)) v_Vhf)))) 
                       (v_Vnf:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term (abst_first x)) 
                                    (abst_first_term (abst_first y)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term (abst_first x)) 
                                   (abst_first_term (abst_first y))))) v_Vnf 
                          v_Vvc) v_Vzc) v_Vyc) _p_A_equal_symmetric))) 
          (zen.nnpp 
             (zen.triangle (focal.is_true (abst_first_case (abst_first y)))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_first_case (abst_first y)))))) =>
              zen.Rall _p_A_T 
                (v_Vac:(zen.term _p_A_T) =>
                 zen.triangle 
                   (focal.is_true (abst_first_case (abst_first v_Vac)))) y 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_first_case (abst_first y))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true (abst_first_case (abst_first y)))) 
                   v_Vbc v_Vzb) abst_first_has_case))) 
         (zen.nnpp 
            (zen.triangle (focal.is_true (abst_first_case (abst_first x)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (abst_first_case (abst_first x)))))) =>
             zen.Rall _p_A_T 
               (v_Vac:(zen.term _p_A_T) =>
                zen.triangle 
                  (focal.is_true (abst_first_case (abst_first v_Vac)))) x 
               (v_Vbc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true (abst_first_case (abst_first x))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true (abst_first_case (abst_first x)))) v_Vbc 
                  v_Vzb) abst_first_has_case))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true (_p_A_equal y (abst_first_term (abst_first y))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal y (abst_first_term (abst_first y))))))) =>
            zen.Rall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.triangle 
                 (focal.is_true 
                    (_p_A_equal (abst_first_term (abst_first v_Vac)) v_Vac))) 
              y 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal (abst_first_term (abst_first y)) y)))) =>
               zen.Rall _p_A_T 
                 (v_Vac:(zen.term _p_A_T) =>
                  zen.forall _p_A_T 
                    (v_Vcc:(zen.term _p_A_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_A_equal v_Vac v_Vcc))) 
                       (zen.triangle (focal.is_true (_p_A_equal v_Vcc v_Vac))))) 
                 (abst_first_term (abst_first y)) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.forall _p_A_T 
                        (v_Vcc:(zen.term _p_A_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term (abst_first y)) v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal v_Vcc 
                                    (abst_first_term (abst_first y)))))))) =>
                  zen.Rall _p_A_T 
                    (v_Vcc:(zen.term _p_A_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first_term (abst_first y)) 
                                v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal v_Vcc 
                                (abst_first_term (abst_first y)))))) y 
                    (v_Vec:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term (abst_first y)) y))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal y 
                                    (abst_first_term (abst_first y))))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first_term (abst_first y)) y))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal y (abst_first_term (abst_first y))))) 
                       (v_Vfc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term (abst_first y)) y))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term (abst_first y)) 
                                   y))) v_Vbc v_Vfc) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal y 
                                    (abst_first_term (abst_first y)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal y 
                                   (abst_first_term (abst_first y))))) v_Vgc 
                          v_Vzb) v_Vec) v_Vdc) _p_A_equal_symmetric) 
              abst_first_reverses_term))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (_p_A_equal x (abst_first_term (abst_first x))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal x (abst_first_term (abst_first x))))))) =>
           zen.Rall _p_A_T 
             (v_Vac:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first_term (abst_first v_Vac)) v_Vac))) 
             x 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_first_term (abst_first x)) x)))) =>
              zen.Rall _p_A_T 
                (v_Vac:(zen.term _p_A_T) =>
                 zen.forall _p_A_T 
                   (v_Vcc:(zen.term _p_A_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_A_equal v_Vac v_Vcc))) 
                      (zen.triangle (focal.is_true (_p_A_equal v_Vcc v_Vac))))) 
                (abst_first_term (abst_first x)) 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall _p_A_T 
                       (v_Vcc:(zen.term _p_A_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term (abst_first x)) 
                                   v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal v_Vcc 
                                   (abst_first_term (abst_first x)))))))) =>
                 zen.Rall _p_A_T 
                   (v_Vcc:(zen.term _p_A_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term (abst_first x)) 
                               v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal v_Vcc 
                               (abst_first_term (abst_first x)))))) x 
                   (v_Vec:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term (abst_first x)) 
                                   x))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal x 
                                   (abst_first_term (abst_first x))))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term (abst_first x)) x))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal x (abst_first_term (abst_first x))))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (abst_first_term (abst_first x)) x))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term (abst_first x)) x))) 
                         v_Vbc v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal x 
                                   (abst_first_term (abst_first x)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal x (abst_first_term (abst_first x))))) 
                         v_Vgc v_Vzb) v_Vec) v_Vdc) _p_A_equal_symmetric) 
             abst_first_reverses_term))).

def Sum_set__second_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_complete:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.or (dk_logic.ebP (abst_first_case x)) 
                              (dk_logic.ebP (abst_second_case x))))) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_second_has_case:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (abst_second_case (abst_second x))))) ->
  abst_second_reverses_term:(dk_logic.eP 
                               (dk_logic.forall _p_B_T 
                                  (x:(cc.eT _p_B_T) =>
                                   dk_logic.ebP 
                                     (_p_B_equal 
                                        (abst_second_term (abst_second x)) x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.forall _p_B_T 
          (y:(cc.eT _p_B_T) =>
           dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
             (dk_logic.ebP 
                (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
                   abst_first_case abst_first_term abst_second_case 
                   abst_second_term (abst_second x) (abst_second y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_complete:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.or (dk_logic.ebP (abst_first_case x)) 
           (dk_logic.ebP (abst_second_case x))))) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_second_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (abst_second_case (abst_second x))))) =>
  abst_second_reverses_term:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.ebP (_p_B_equal (abst_second_term (abst_second x)) x)))) =>
  (__C_1_LEMMA:
   (x:(cc.eT _p_B_T) ->
    y:(cc.eT _p_B_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_B_equal x y))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
            abst_first_case abst_first_term abst_second_case 
            abst_second_term (abst_second x) (abst_second y)))) =>
   zen.nnpp 
     (zen.forall _p_B_T 
        (v_Vzb:(zen.term _p_B_T) =>
         zen.forall _p_B_T 
           (v_Vac:(zen.term _p_B_T) =>
            zen.imp (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                       abst_T abst_first_case abst_first_term 
                       abst_second_case abst_second_term (abst_second v_Vzb) 
                       (abst_second v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_B_T 
               (v_Vzb:(zen.term _p_B_T) =>
                zen.forall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Sum_set__equal _p_A_T _p_B_T _p_A_equal 
                              _p_B_equal abst_T abst_first_case 
                              abst_first_term abst_second_case 
                              abst_second_term (abst_second v_Vzb) 
                              (abst_second v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall _p_B_T 
           (v_Vzb:(zen.term _p_B_T) =>
            zen.forall _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                          abst_T abst_first_case abst_first_term 
                          abst_second_case abst_second_term 
                          (abst_second v_Vzb) (abst_second v_Vac))))))) 
        __C_1_LEMMA v_Vbc)) 
    (x:(cc.eT _p_B_T) =>
     y:(cc.eT _p_B_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_B_equal x y))) =>
     (__C_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (_p_B_equal x (abst_second_term (abst_second x))))) =>
      (__C_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (_p_B_equal y (abst_second_term (abst_second y))))) =>
       (__C_1_3_LEMMA:
        (dk_logic.eP (dk_logic.ebP (abst_second_case (abst_second x)))) =>
        (__C_1_4_LEMMA:
         (dk_logic.eP (dk_logic.ebP (abst_second_case (abst_second y)))) =>
         (__C_1_5_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_B_equal (abst_second_term (abst_second x)) 
                   (abst_second_term (abst_second y))))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
                     abst_first_case abst_first_term abst_second_case 
                     abst_second_term (abst_second x) (abst_second y)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (dk_bool.ite basics.bool__t 
                            (basics._amper__amper_ 
                               (abst_first_case (abst_second x)) 
                               (abst_first_case (abst_second y))) 
                            (_p_A_equal (abst_first_term (abst_second x)) 
                               (abst_first_term (abst_second y))) 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case (abst_second x)) 
                                  (abst_second_case (abst_second y))) 
                               (_p_B_equal 
                                  (abst_second_term (abst_second x)) 
                                  (abst_second_term (abst_second y))) 
                               basics.false)))))) =>
             focal.zenon_focal_ite_bool_n 
               (basics._amper__amper_ (abst_first_case (abst_second x)) 
                  (abst_first_case (abst_second y))) 
               (_p_A_equal (abst_first_term (abst_second x)) 
                  (abst_first_term (abst_second y))) 
               (dk_bool.ite basics.bool__t 
                  (basics._amper__amper_ (abst_second_case (abst_second x)) 
                     (abst_second_case (abst_second y))) 
                  (_p_B_equal (abst_second_term (abst_second x)) 
                     (abst_second_term (abst_second y))) basics.false) 
               (v_Vac:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._amper__amper_ 
                            (abst_first_case (abst_second x)) 
                            (abst_first_case (abst_second y)))))) =>
                v_Vbc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first_term (abst_second x)) 
                               (abst_first_term (abst_second y))))))) =>
                focal.zenon_focal_and (abst_first_case (abst_second x)) 
                  (abst_first_case (abst_second y)) 
                  (v_Vcc:
                   (zen.proof 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case (abst_second x)))) 
                         (zen.triangle 
                            (focal.is_true (abst_first_case (abst_second y)))))) =>
                   zen.Rand 
                     (zen.triangle 
                        (focal.is_true (abst_first_case (abst_second x)))) 
                     (zen.triangle 
                        (focal.is_true (abst_first_case (abst_second y)))) 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true (abst_first_case (abst_second x))))) =>
                      v_Vec:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true (abst_first_case (abst_second y))))) =>
                      zen.Rall abst_T 
                        (v_Vfc:(zen.term abst_T) =>
                         zen.not 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case v_Vfc))) 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case v_Vfc))))) 
                        (abst_second y) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case (abst_second y)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case (abst_second y))))))) =>
                         zen.Rnotand 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_first_case (abst_second y)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case (abst_second y)))) 
                           (v_Vhc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case (abst_second y)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_first_case (abst_second y)))) 
                              v_Vec v_Vhc) 
                           (v_Vic:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case (abst_second y)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_second_case (abst_second y)))) 
                              __C_1_4_LEMMA v_Vic) v_Vgc) abst_case_exclusive) 
                     v_Vcc) v_Vac) 
               (v_Vjc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._amper__amper_ 
                               (abst_first_case (abst_second x)) 
                               (abst_first_case (abst_second y))))))) =>
                v_Vkc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (dk_bool.ite basics.bool__t 
                               (basics._amper__amper_ 
                                  (abst_second_case (abst_second x)) 
                                  (abst_second_case (abst_second y))) 
                               (_p_B_equal 
                                  (abst_second_term (abst_second x)) 
                                  (abst_second_term (abst_second y))) 
                               basics.false))))) =>
                focal.zenon_focal_ite_bool_n 
                  (basics._amper__amper_ (abst_second_case (abst_second x)) 
                     (abst_second_case (abst_second y))) 
                  (_p_B_equal (abst_second_term (abst_second x)) 
                     (abst_second_term (abst_second y))) basics.false 
                  (v_Vlc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._amper__amper_ 
                               (abst_second_case (abst_second x)) 
                               (abst_second_case (abst_second y)))))) =>
                   v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_second_term (abst_second x)) 
                                  (abst_second_term (abst_second y))))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second_term (abst_second x)) 
                              (abst_second_term (abst_second y))))) 
                     __C_1_5_LEMMA v_Vmc) 
                  (v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._amper__amper_ 
                                  (abst_second_case (abst_second x)) 
                                  (abst_second_case (abst_second y))))))) =>
                   v_Voc:(zen.proof (zen.not zen.False)) =>
                   focal.zenon_focal_notand 
                     (abst_second_case (abst_second x)) 
                     (abst_second_case (abst_second y)) 
                     (v_Vpc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second x)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second y))))))) =>
                      zen.Rnotand 
                        (zen.triangle 
                           (focal.is_true (abst_second_case (abst_second x)))) 
                        (zen.triangle 
                           (focal.is_true (abst_second_case (abst_second y)))) 
                        (v_Vqc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second x)))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case (abst_second x)))) 
                           __C_1_3_LEMMA v_Vqc) 
                        (v_Vic:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second y)))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case (abst_second y)))) 
                           __C_1_4_LEMMA v_Vic) v_Vpc) v_Vnc) v_Vkc) v_Vzb)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_B_equal (abst_second_term (abst_second x)) 
                       (abst_second_term (abst_second y))))) 
              (v_Vvc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second_term (abst_second x)) 
                              (abst_second_term (abst_second y))))))) =>
               zen.Rall _p_B_T 
                 (v_Vwc:(zen.term _p_B_T) =>
                  zen.forall _p_B_T 
                    (v_Vxc:(zen.term _p_B_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_B_equal v_Vwc v_Vxc))) 
                       (zen.triangle (focal.is_true (_p_B_equal v_Vxc v_Vwc))))) 
                 (abst_second_term (abst_second y)) 
                 (v_Vyc:
                  (zen.proof 
                     (zen.forall _p_B_T 
                        (v_Vxc:(zen.term _p_B_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term (abst_second y)) v_Vxc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal v_Vxc 
                                    (abst_second_term (abst_second y)))))))) =>
                  zen.Rall _p_B_T 
                    (v_Vxc:(zen.term _p_B_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second_term (abst_second y)) 
                                v_Vxc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal v_Vxc 
                                (abst_second_term (abst_second y)))))) 
                    (abst_second_term (abst_second x)) 
                    (v_Vzc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term (abst_second y)) 
                                    (abst_second_term (abst_second x))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term (abst_second x)) 
                                    (abst_second_term (abst_second y))))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second_term (abst_second y)) 
                                (abst_second_term (abst_second x))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second_term (abst_second x)) 
                                (abst_second_term (abst_second y))))) 
                       (v_Vad:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term (abst_second y)) 
                                       (abst_second_term (abst_second x))))))) =>
                        zen.Rcut 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T 
                                      (abst_second_term (abst_second y)) x))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal 
                                         (abst_second_term (abst_second y)) x))))) 
                          (v_Vbd:
                           (zen.proof 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_B_T 
                                          (abst_second_term (abst_second y)) 
                                          x))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_B_equal 
                                             (abst_second_term 
                                                (abst_second y)) x)))))) =>
                           zen.Rand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T 
                                      (abst_second_term (abst_second y)) x))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal 
                                         (abst_second_term (abst_second y)) x)))) 
                             (v_Vcd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_B_T 
                                          (abst_second_term (abst_second y)) 
                                          x)))) =>
                              v_Vdd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_B_equal 
                                             (abst_second_term 
                                                (abst_second y)) x))))) =>
                              zen.Rall _p_B_T 
                                (v_Vwc:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vxc:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vwc v_Vxc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vxc v_Vwc))))) x 
                                (v_Ved:
                                 (zen.proof 
                                    (zen.forall _p_B_T 
                                       (v_Vxc:(zen.term _p_B_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal x v_Vxc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal v_Vxc x)))))) =>
                                 zen.Rall _p_B_T 
                                   (v_Vxc:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (_p_B_equal x v_Vxc))) 
                                      (zen.triangle 
                                         (focal.is_true (_p_B_equal v_Vxc x)))) 
                                   (abst_second_term (abst_second y)) 
                                   (v_Vfd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal x 
                                                   (abst_second_term 
                                                      (abst_second y))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (abst_second_term 
                                                      (abst_second y)) x))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal x 
                                               (abst_second_term 
                                                  (abst_second y))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term 
                                                  (abst_second y)) x))) 
                                      (v_Vgd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal x 
                                                      (abst_second_term 
                                                         (abst_second y))))))) =>
                                       zen.Rcut 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T x x))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x x))))) 
                                         (v_Vhd:
                                          (zen.proof 
                                             (zen.and 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T x x))) 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x x)))))) =>
                                          zen.Rand 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T x x))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x x)))) 
                                            (v_Vid:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T x x)))) =>
                                             v_Vjd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x x))))) =>
                                             zen.Rnoteq _p_B_T x v_Vid) v_Vhd) 
                                         (v_Vkd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.and 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_B_T x 
                                                            x))) 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal x x))))))) =>
                                          zen.Rcut 
                                            (zen.triangle 
                                               (zen.equal _p_B_T y 
                                                  (abst_second_term 
                                                     (abst_second y)))) 
                                            (v_Vld:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T y 
                                                      (abst_second_term 
                                                         (abst_second y))))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vmd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vmd)) 
                                               (_p_B_equal x y) 
                                               (_p_B_equal x 
                                                  (abst_second_term 
                                                     (abst_second y))) 
                                               (v_Vnd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_B_equal x y) 
                                                            (_p_B_equal x 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    y))))))) =>
                                                zen.Rsubst _p_B_T 
                                                  (v_Vod:(zen.term _p_B_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal v_Vod 
                                                              y) 
                                                           (_p_B_equal x 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)))))) 
                                                  x x 
                                                  (v_Vid:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T x x)))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              x x))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal x x)))) 
                                                     (v_Vpd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_B_T x 
                                                                    x))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              x x)) 
                                                        (v_Vqd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_B_T x x))) =>
                                                         zen.Rcut 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T x x)) 
                                                           (v_Vqd0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_B_T x 
                                                                    x))) =>
                                                            zen.Rsubst 
                                                              _p_B_T 
                                                              (v_Vrd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    v_Vrd x)) 
                                                              x x 
                                                              (v_Vid0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T x 
                                                                    x)) 
                                                                 v_Vqd0 
                                                                 v_Vid0) 
                                                              (v_Vqd0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x))) =>
                                                               zen.Rsubst 
                                                                 _p_B_T 
                                                                 (v_Vsd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T x 
                                                                    v_Vsd)) 
                                                                 x x 
                                                                 (v_Vid0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)))) =>
                                                                  zen.Rnoteq 
                                                                    _p_B_T x 
                                                                    v_Vid0) 
                                                                 (v_Vqd0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)) 
                                                                    v_Vqd0 
                                                                    v_Vid) 
                                                                 v_Vqd0) 
                                                              v_Vqd0) 
                                                           (v_Vid0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)))) =>
                                                            zen.Rnoteq 
                                                              _p_B_T x v_Vid0)) 
                                                        v_Vpd) 
                                                     (v_Vtd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x)))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal x x))) 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    x x)))) =>
                                                         zen.Rall _p_B_T 
                                                           (v_Vwc:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vxc:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                           x 
                                                           (v_Vwd:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  _p_B_T 
                                                                  (v_Vxc:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd)))))))) =>
                                                            zen.Rall _p_B_T 
                                                              (v_Vxc:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vxc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd)))))) 
                                                              x 
                                                              (v_Vxd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))))))) =>
                                                               zen.Rall 
                                                                 _p_B_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))))) 
                                                                 y 
                                                                 (v_Vyd:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y)))) 
                                                                    (
                                                                    v_Vjd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    v_Vud 
                                                                    v_Vjd) 
                                                                    (
                                                                    v_Vzd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) H 
                                                                    v_Vae) 
                                                                    (H0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vmd)) 
                                                                    (_p_B_equal 
                                                                    x y) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (v_Vnd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x y) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vod:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vod y) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) 
                                                                    x x 
                                                                    (v_Vid0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T x 
                                                                    v_Vid0) 
                                                                    (v_Vnd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x y) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x v_Vbe) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))) 
                                                                    v_Vld 
                                                                    v_Vce) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    v_Vde) 
                                                                    v_Vnd0) 
                                                                    v_Vnd0) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    v_Vee 
                                                                    v_Vgd) H0) 
                                                                    v_Vzd) 
                                                                    v_Vyd) 
                                                                 v_Vxd) v_Vwd) 
                                                           _p_B_equal_transitive) 
                                                        v_Vtd) v_Vkd) 
                                                  (v_Vnd0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_B_equal x 
                                                                  y) 
                                                               (_p_B_equal x 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                   zen.Rsubst _p_B_T 
                                                     (v_Vbe:
                                                      (zen.term _p_B_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal x 
                                                                 v_Vbe) 
                                                              (_p_B_equal x 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)))))) 
                                                     y 
                                                     (abst_second_term 
                                                        (abst_second y)) 
                                                     (v_Vce:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_B_T y 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              y 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)))) 
                                                        v_Vld v_Vce) 
                                                     (v_Vde:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                  (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (_p_B_equal x 
                                                           (abst_second_term 
                                                              (abst_second y))) 
                                                        v_Vde) v_Vnd0) v_Vnd) 
                                               (v_Vee:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x 
                                                            (abst_second_term 
                                                               (abst_second y)))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal x 
                                                           (abst_second_term 
                                                              (abst_second y))))) 
                                                  v_Vee v_Vgd) H) 
                                            (v_Vce:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T y 
                                                         (abst_second_term 
                                                            (abst_second y)))))) =>
                                             zen.Rcut 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal y 
                                                        (abst_second_term 
                                                           (abst_second y))))) 
                                               (__C_1_2_LEMMA0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal y 
                                                            (abst_second_term 
                                                               (abst_second y)))))) =>
                                                zen.Rall _p_B_T 
                                                  (v_Vwc:(zen.term _p_B_T) =>
                                                   zen.forall _p_B_T 
                                                     (v_Vxc:
                                                      (zen.term _p_B_T) =>
                                                      zen.forall _p_B_T 
                                                        (v_Vvd:
                                                         (zen.term _p_B_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                  x 
                                                  (v_Vwd:
                                                   (zen.proof 
                                                      (zen.forall _p_B_T 
                                                         (v_Vxc:
                                                          (zen.term _p_B_T) =>
                                                          zen.forall _p_B_T 
                                                            (v_Vvd:
                                                             (zen.term _p_B_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vxc))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd)))))))) =>
                                                   zen.Rall _p_B_T 
                                                     (v_Vxc:
                                                      (zen.term _p_B_T) =>
                                                      zen.forall _p_B_T 
                                                        (v_Vvd:
                                                         (zen.term _p_B_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    x v_Vxc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    x v_Vvd)))))) 
                                                     y 
                                                     (v_Vfe:
                                                      (zen.proof 
                                                         (zen.forall _p_B_T 
                                                            (v_Vvd:
                                                             (zen.term _p_B_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y v_Vvd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))))))) =>
                                                      zen.Rall _p_B_T 
                                                        (v_Vvd:
                                                         (zen.term _p_B_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    x y))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    y v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    x v_Vvd))))) 
                                                        (abst_second_term 
                                                           (abst_second y)) 
                                                        (v_Vge:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    x y))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) 
                                                           (v_Vae:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x y))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    x y))) H 
                                                              v_Vae) 
                                                           (v_Vhe:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                              (v_Vie:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                 __C_1_2_LEMMA0 
                                                                 v_Vie) 
                                                              (v_Vee:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                               zen.Rsubst 
                                                                 basics.bool__t 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    basics.bool__t) =>
                                                                  zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    v_Vmd)) 
                                                                 (_p_B_equal 
                                                                    x 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                 (_p_B_equal 
                                                                    x 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                 (v_Vde:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                  zen.Rsubst 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vje:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vje 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) 
                                                                    x x 
                                                                    (
                                                                    v_Vid:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x)))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T x 
                                                                    x v_Vqd 
                                                                    v_Vid) 
                                                                    v_Vpd) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x)))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vwc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                                    x 
                                                                    (v_Vwd0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd)))))) 
                                                                    x 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))))) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x x))) 
                                                                    v_Vud 
                                                                    v_Vjd) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    (v_Vgd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    v_Vee 
                                                                    v_Vgd0) 
                                                                    (v_Vee0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    v_Vee0 
                                                                    v_Vgd) 
                                                                    v_Vle) 
                                                                    v_Vke) 
                                                                    v_Vxd) 
                                                                    v_Vwd0) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Vtd) 
                                                                    v_Vkd) 
                                                                    (
                                                                    v_Vde0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x v_Vbe) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vme) 
                                                                    (v_Vde0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    v_Vde0) 
                                                                    v_Vde0) 
                                                                    v_Vde) 
                                                                 (v_Vee0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    v_Vee0 
                                                                    v_Vgd) 
                                                                 v_Vee) v_Vhe) 
                                                           v_Vge) v_Vfe) 
                                                     v_Vwd) 
                                                  _p_B_equal_transitive) 
                                               (v_Vie:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal y 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    y))))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal y 
                                                           (abst_second_term 
                                                              (abst_second y))))) 
                                                  __C_1_2_LEMMA v_Vie)))) 
                                      (v_Vne:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (abst_second_term 
                                                      (abst_second y)) x)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second_term 
                                                     (abst_second y)) x))) 
                                         v_Vne v_Vdd) v_Vfd) v_Ved) 
                                _p_B_equal_symmetric) v_Vbd) 
                          (v_Voe:
                           (zen.proof 
                              (zen.not 
                                 (zen.and 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_B_T 
                                             (abst_second_term 
                                                (abst_second y)) x))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (abst_second_term 
                                                   (abst_second y)) x))))))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (zen.equal _p_B_T 
                                   (abst_second_term (abst_second x)) 
                                   (abst_second_term (abst_second x)))) 
                             (v_Vpe:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal _p_B_T 
                                       (abst_second_term (abst_second x)) 
                                       (abst_second_term (abst_second x))))) =>
                              zen.Rsubst basics.bool__t 
                                (v_Vmd:(zen.term basics.bool__t) =>
                                 zen.triangle (focal.is_true v_Vmd)) 
                                (_p_B_equal x 
                                   (abst_second_term (abst_second x))) 
                                (_p_B_equal 
                                   (abst_second_term (abst_second y)) 
                                   (abst_second_term (abst_second x))) 
                                (v_Vqe:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_B_equal x 
                                                (abst_second_term 
                                                   (abst_second x))) 
                                             (_p_B_equal 
                                                (abst_second_term 
                                                   (abst_second y)) 
                                                (abst_second_term 
                                                   (abst_second x))))))) =>
                                 zen.Rsubst _p_B_T 
                                   (v_Vre:(zen.term _p_B_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_B_equal v_Vre 
                                               (abst_second_term 
                                                  (abst_second x))) 
                                            (_p_B_equal 
                                               (abst_second_term 
                                                  (abst_second y)) 
                                               (abst_second_term 
                                                  (abst_second x)))))) x 
                                   (abst_second_term (abst_second y)) 
                                   (v_Vse:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_B_T x 
                                                (abst_second_term 
                                                   (abst_second y)))))) =>
                                    zen.Rnotand 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_second_term 
                                                  (abst_second y)) x))) 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second_term 
                                                     (abst_second y)) x)))) 
                                      (v_Vte:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (abst_second_term 
                                                         (abst_second y)) x))))) =>
                                       zen.Rnotnot 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_second_term 
                                                  (abst_second y)) x)) 
                                         (v_Vue:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_B_T 
                                                   (abst_second_term 
                                                      (abst_second y)) x))) =>
                                          zen.Rcut 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second_term 
                                                     (abst_second y)) 
                                                  (abst_second_term 
                                                     (abst_second y)))) 
                                            (v_Vve:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (abst_second_term 
                                                         (abst_second y)) 
                                                      (abst_second_term 
                                                         (abst_second y))))) =>
                                             zen.Rsubst _p_B_T 
                                               (v_Vwe:(zen.term _p_B_T) =>
                                                zen.triangle 
                                                  (zen.equal _p_B_T v_Vwe 
                                                     (abst_second_term 
                                                        (abst_second y)))) 
                                               (abst_second_term 
                                                  (abst_second y)) x 
                                               (v_Vcd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_B_T 
                                                            (abst_second_term 
                                                               (abst_second y)) 
                                                            x)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second_term 
                                                           (abst_second y)) x)) 
                                                  v_Vue v_Vcd) 
                                               (v_Vxe:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T x 
                                                         (abst_second_term 
                                                            (abst_second y))))) =>
                                                zen.Rsubst _p_B_T 
                                                  (v_Vsd:(zen.term _p_B_T) =>
                                                   zen.triangle 
                                                     (zen.equal _p_B_T x 
                                                        v_Vsd)) 
                                                  (abst_second_term 
                                                     (abst_second y)) 
                                                  (abst_second_term 
                                                     (abst_second y)) 
                                                  (v_Vme:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    y)) 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    y)))))) =>
                                                   zen.Rnoteq _p_B_T 
                                                     (abst_second_term 
                                                        (abst_second y)) 
                                                     v_Vme) 
                                                  (v_Vxe0:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal _p_B_T x 
                                                            (abst_second_term 
                                                               (abst_second y))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T x 
                                                           (abst_second_term 
                                                              (abst_second y)))) 
                                                     v_Vxe0 v_Vse) v_Vxe) 
                                               v_Vve) 
                                            (v_Vme:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T 
                                                         (abst_second_term 
                                                            (abst_second y)) 
                                                         (abst_second_term 
                                                            (abst_second y)))))) =>
                                             zen.Rnoteq _p_B_T 
                                               (abst_second_term 
                                                  (abst_second y)) v_Vme)) 
                                         v_Vte) 
                                      (v_Vye:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (abst_second_term 
                                                            (abst_second y)) 
                                                         x)))))) =>
                                       zen.Rnotnot 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second_term 
                                                     (abst_second y)) x))) 
                                         (v_Vne:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (abst_second_term 
                                                         (abst_second y)) x)))) =>
                                          zen.Rall _p_B_T 
                                            (v_Vwc:(zen.term _p_B_T) =>
                                             zen.forall _p_B_T 
                                               (v_Vxc:(zen.term _p_B_T) =>
                                                zen.forall _p_B_T 
                                                  (v_Vvd:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal v_Vwc 
                                                              v_Vxc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vxc v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vwc v_Vvd))))))) 
                                            (abst_second_term (abst_second y)) 
                                            (v_Vze:
                                             (zen.proof 
                                                (zen.forall _p_B_T 
                                                   (v_Vxc:
                                                    (zen.term _p_B_T) =>
                                                    zen.forall _p_B_T 
                                                      (v_Vvd:
                                                       (zen.term _p_B_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vxc))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd)))))))) =>
                                             zen.Rall _p_B_T 
                                               (v_Vxc:(zen.term _p_B_T) =>
                                                zen.forall _p_B_T 
                                                  (v_Vvd:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) v_Vxc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vxc v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) v_Vvd)))))) 
                                               x 
                                               (v_Vaf:
                                                (zen.proof 
                                                   (zen.forall _p_B_T 
                                                      (v_Vvd:
                                                       (zen.term _p_B_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    x v_Vvd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd))))))) =>
                                                zen.Rall _p_B_T 
                                                  (v_Vvd:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) x))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal x 
                                                                 v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) v_Vvd))))) 
                                                  (abst_second_term 
                                                     (abst_second x)) 
                                                  (v_Vbf:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) x))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal x 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)))))) 
                                                     (v_Vdd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) x))) 
                                                        v_Vne v_Vdd) 
                                                     (v_Vcf:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal x 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))))) 
                                                        (v_Vdf:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    x 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                           __C_1_1_LEMMA 
                                                           v_Vdf) 
                                                        (v_Vef:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                         zen.Rsubst 
                                                           basics.bool__t 
                                                           (v_Vmd:
                                                            (zen.term 
                                                               basics.bool__t) =>
                                                            zen.triangle 
                                                              (focal.is_true 
                                                                 v_Vmd)) 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x))) 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x))) 
                                                           (v_Vff:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                            zen.Rsubst 
                                                              _p_B_T 
                                                              (v_Vre:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vre 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) 
                                                              (v_Vme:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                               zen.Rnoteq 
                                                                 _p_B_T 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) v_Vme) 
                                                              (v_Vff0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                               zen.Rsubst 
                                                                 _p_B_T 
                                                                 (v_Vgf:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vgf) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) 
                                                                 (v_Vhf:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))) 
                                                                    v_Vpe 
                                                                    v_Vhf) 
                                                                 (v_Vff0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                                  zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                                    v_Vff0) 
                                                                 v_Vff0) 
                                                              v_Vff) 
                                                           (v_Vef0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                              v_Vef0 v_Vad) 
                                                           v_Vef) v_Vcf) 
                                                     v_Vbf) v_Vaf) v_Vze) 
                                            _p_B_equal_transitive) v_Vye) 
                                      v_Voe) 
                                   (v_Vff:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_B_equal 
                                                   (abst_second_term 
                                                      (abst_second y)) 
                                                   (abst_second_term 
                                                      (abst_second x))) 
                                                (_p_B_equal 
                                                   (abst_second_term 
                                                      (abst_second y)) 
                                                   (abst_second_term 
                                                      (abst_second x))))))) =>
                                    zen.Rsubst _p_B_T 
                                      (v_Vgf:(zen.term _p_B_T) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_B_equal 
                                                  (abst_second_term 
                                                     (abst_second y)) v_Vgf) 
                                               (_p_B_equal 
                                                  (abst_second_term 
                                                     (abst_second y)) 
                                                  (abst_second_term 
                                                     (abst_second x)))))) 
                                      (abst_second_term (abst_second x)) 
                                      (abst_second_term (abst_second x)) 
                                      (v_Vhf:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_B_T 
                                                   (abst_second_term 
                                                      (abst_second x)) 
                                                   (abst_second_term 
                                                      (abst_second x)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_second_term 
                                                  (abst_second x)) 
                                               (abst_second_term 
                                                  (abst_second x)))) v_Vpe 
                                         v_Vhf) 
                                      (v_Vff0:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_B_equal 
                                                      (abst_second_term 
                                                         (abst_second y)) 
                                                      (abst_second_term 
                                                         (abst_second x))) 
                                                   (_p_B_equal 
                                                      (abst_second_term 
                                                         (abst_second y)) 
                                                      (abst_second_term 
                                                         (abst_second x))))))) =>
                                       zen.Rnoteq basics.bool__t 
                                         (_p_B_equal 
                                            (abst_second_term (abst_second y)) 
                                            (abst_second_term (abst_second x))) 
                                         v_Vff0) v_Vff) v_Vqe) 
                                (v_Vef:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_B_equal 
                                             (abst_second_term 
                                                (abst_second y)) 
                                             (abst_second_term 
                                                (abst_second x)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term (abst_second y)) 
                                            (abst_second_term (abst_second x))))) 
                                   v_Vef v_Vad) __C_1_1_LEMMA) 
                             (v_Vhf:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_B_T 
                                          (abst_second_term (abst_second x)) 
                                          (abst_second_term (abst_second x)))))) =>
                              zen.Rcut 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal 
                                         (abst_second_term (abst_second x)) 
                                         (abst_second_term (abst_second x))))) 
                                (v_Vif:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_B_equal 
                                             (abst_second_term 
                                                (abst_second x)) 
                                             (abst_second_term 
                                                (abst_second x)))))) =>
                                 zen.Rall _p_B_T 
                                   (v_Vwc:(zen.term _p_B_T) =>
                                    zen.forall _p_B_T 
                                      (v_Vxc:(zen.term _p_B_T) =>
                                       zen.forall _p_B_T 
                                         (v_Vvd:(zen.term _p_B_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal v_Vwc v_Vxc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal v_Vxc v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal v_Vwc v_Vvd))))))) 
                                   x 
                                   (v_Vwd:
                                    (zen.proof 
                                       (zen.forall _p_B_T 
                                          (v_Vxc:(zen.term _p_B_T) =>
                                           zen.forall _p_B_T 
                                             (v_Vvd:(zen.term _p_B_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal x v_Vxc))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal v_Vxc 
                                                            v_Vvd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x v_Vvd)))))))) =>
                                    zen.Rall _p_B_T 
                                      (v_Vxc:(zen.term _p_B_T) =>
                                       zen.forall _p_B_T 
                                         (v_Vvd:(zen.term _p_B_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal x v_Vxc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal v_Vxc v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x v_Vvd)))))) 
                                      (abst_second_term (abst_second x)) 
                                      (v_Vjf:
                                       (zen.proof 
                                          (zen.forall _p_B_T 
                                             (v_Vvd:(zen.term _p_B_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal x 
                                                         (abst_second_term 
                                                            (abst_second x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (abst_second_term 
                                                               (abst_second x)) 
                                                            v_Vvd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x v_Vvd))))))) =>
                                       zen.Rall _p_B_T 
                                         (v_Vvd:(zen.term _p_B_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal x 
                                                     (abst_second_term 
                                                        (abst_second x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x v_Vvd))))) 
                                         (abst_second_term (abst_second x)) 
                                         (v_Vkf:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal x 
                                                         (abst_second_term 
                                                            (abst_second x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (abst_second_term 
                                                               (abst_second x)) 
                                                            (abst_second_term 
                                                               (abst_second x))))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x 
                                                            (abst_second_term 
                                                               (abst_second x)))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal x 
                                                     (abst_second_term 
                                                        (abst_second x))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        (abst_second_term 
                                                           (abst_second x))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x 
                                                        (abst_second_term 
                                                           (abst_second x)))))) 
                                            (v_Vdf:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x 
                                                            (abst_second_term 
                                                               (abst_second x))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x 
                                                        (abst_second_term 
                                                           (abst_second x))))) 
                                               __C_1_1_LEMMA v_Vdf) 
                                            (v_Vlf:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (abst_second_term 
                                                               (abst_second x)) 
                                                            (abst_second_term 
                                                               (abst_second x))))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x 
                                                            (abst_second_term 
                                                               (abst_second x))))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        (abst_second_term 
                                                           (abst_second x))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x 
                                                        (abst_second_term 
                                                           (abst_second x))))) 
                                               (v_Vmf:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    x)) 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    x))))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              (abst_second x)) 
                                                           (abst_second_term 
                                                              (abst_second x))))) 
                                                  v_Vif v_Vmf) 
                                               (__C_1_1_LEMMA0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal x 
                                                            (abst_second_term 
                                                               (abst_second x)))))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vmd:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vmd)) 
                                                  (_p_B_equal x 
                                                     (abst_second_term 
                                                        (abst_second x))) 
                                                  (_p_B_equal 
                                                     (abst_second_term 
                                                        (abst_second y)) 
                                                     (abst_second_term 
                                                        (abst_second x))) 
                                                  (v_Vqe:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_B_equal x 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                               (_p_B_equal 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                   zen.Rsubst _p_B_T 
                                                     (v_Vre:
                                                      (zen.term _p_B_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 v_Vre 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))) 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)))))) 
                                                     x 
                                                     (abst_second_term 
                                                        (abst_second y)) 
                                                     (v_Vse:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_B_T x 
                                                                  (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                      zen.Rnotand 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) x))) 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y)) x)))) 
                                                        (v_Vte:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))))) =>
                                                         zen.Rnotnot 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    y)) x)) 
                                                           (v_Vue:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) =>
                                                            zen.Reqsym 
                                                              _p_B_T 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) x 
                                                              v_Vue v_Vse) 
                                                           v_Vte) 
                                                        (v_Vye:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x)))))) =>
                                                         zen.Rnotnot 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                           (v_Vne:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x)))) =>
                                                            zen.Rall _p_B_T 
                                                              (v_Vwc:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vxc:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.forall 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) 
                                                              (v_Vze:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd)))))))) =>
                                                               zen.Rall 
                                                                 _p_B_T 
                                                                 (v_Vxc:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.forall 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd)))))) 
                                                                 x 
                                                                 (v_Vaf:
                                                                  (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd))))))) =>
                                                                  zen.Rall 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd))))) 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (
                                                                    v_Vbf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) 
                                                                    (v_Vdd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) x))) 
                                                                    v_Vne 
                                                                    v_Vdd) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    x 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    __C_1_1_LEMMA0 
                                                                    v_Vdf) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    v_Vef 
                                                                    v_Vad) 
                                                                    v_Vcf) 
                                                                    v_Vbf) 
                                                                    v_Vaf) 
                                                                 v_Vze) 
                                                              _p_B_equal_transitive) 
                                                           v_Vye) v_Voe) 
                                                     (v_Vff:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                                  (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                      zen.Rsubst _p_B_T 
                                                        (v_Vgf:
                                                         (zen.term _p_B_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vgf) 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        (v_Vhf0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                         zen.Rnoteq _p_B_T 
                                                           (abst_second_term 
                                                              (abst_second x)) 
                                                           v_Vhf0) 
                                                        (v_Vff0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x))) 
                                                           v_Vff0) v_Vff) 
                                                     v_Vqe) 
                                                  (v_Vef:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    y)) 
                                                               (abst_second_term 
                                                                  (abst_second 
                                                                    x)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x))))) 
                                                     v_Vef v_Vad) 
                                                  __C_1_1_LEMMA0) v_Vlf) 
                                            v_Vkf) v_Vjf) v_Vwd) 
                                   _p_B_equal_transitive) 
                                (v_Vmf:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (abst_second_term 
                                                   (abst_second x)) 
                                                (abst_second_term 
                                                   (abst_second x))))))) =>
                                 zen.Rnoteq _p_B_T 
                                   (abst_second_term (abst_second x)) v_Vhf)))) 
                       (v_Vnf:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term (abst_second x)) 
                                    (abst_second_term (abst_second y)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_second_term (abst_second x)) 
                                   (abst_second_term (abst_second y))))) 
                          v_Vnf v_Vvc) v_Vzc) v_Vyc) _p_B_equal_symmetric))) 
          (zen.nnpp 
             (zen.triangle (focal.is_true (abst_second_case (abst_second y)))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_second_case (abst_second y)))))) =>
              zen.Rall _p_B_T 
                (v_Vac:(zen.term _p_B_T) =>
                 zen.triangle 
                   (focal.is_true (abst_second_case (abst_second v_Vac)))) y 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_second_case (abst_second y))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true (abst_second_case (abst_second y)))) 
                   v_Vbc v_Vzb) abst_second_has_case))) 
         (zen.nnpp 
            (zen.triangle (focal.is_true (abst_second_case (abst_second x)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (abst_second_case (abst_second x)))))) =>
             zen.Rall _p_B_T 
               (v_Vac:(zen.term _p_B_T) =>
                zen.triangle 
                  (focal.is_true (abst_second_case (abst_second v_Vac)))) x 
               (v_Vbc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true (abst_second_case (abst_second x))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true (abst_second_case (abst_second x)))) 
                  v_Vbc v_Vzb) abst_second_has_case))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (_p_B_equal y (abst_second_term (abst_second y))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_B_equal y (abst_second_term (abst_second y))))))) =>
            zen.Rall _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.triangle 
                 (focal.is_true 
                    (_p_B_equal (abst_second_term (abst_second v_Vac)) v_Vac))) 
              y 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_B_equal (abst_second_term (abst_second y)) y)))) =>
               zen.Rall _p_B_T 
                 (v_Vac:(zen.term _p_B_T) =>
                  zen.forall _p_B_T 
                    (v_Vcc:(zen.term _p_B_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_B_equal v_Vac v_Vcc))) 
                       (zen.triangle (focal.is_true (_p_B_equal v_Vcc v_Vac))))) 
                 (abst_second_term (abst_second y)) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.forall _p_B_T 
                        (v_Vcc:(zen.term _p_B_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term (abst_second y)) v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal v_Vcc 
                                    (abst_second_term (abst_second y)))))))) =>
                  zen.Rall _p_B_T 
                    (v_Vcc:(zen.term _p_B_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second_term (abst_second y)) 
                                v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal v_Vcc 
                                (abst_second_term (abst_second y)))))) y 
                    (v_Vec:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term (abst_second y)) y))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal y 
                                    (abst_second_term (abst_second y))))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second_term (abst_second y)) y))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal y (abst_second_term (abst_second y))))) 
                       (v_Vfc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term (abst_second y)) y))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_second_term (abst_second y)) y))) 
                          v_Vbc v_Vfc) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal y 
                                    (abst_second_term (abst_second y)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal y 
                                   (abst_second_term (abst_second y))))) 
                          v_Vgc v_Vzb) v_Vec) v_Vdc) _p_B_equal_symmetric) 
              abst_second_reverses_term))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (_p_B_equal x (abst_second_term (abst_second x))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal x (abst_second_term (abst_second x))))))) =>
           zen.Rall _p_B_T 
             (v_Vac:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second_term (abst_second v_Vac)) v_Vac))) 
             x 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_second_term (abst_second x)) x)))) =>
              zen.Rall _p_B_T 
                (v_Vac:(zen.term _p_B_T) =>
                 zen.forall _p_B_T 
                   (v_Vcc:(zen.term _p_B_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vac v_Vcc))) 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vcc v_Vac))))) 
                (abst_second_term (abst_second x)) 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall _p_B_T 
                       (v_Vcc:(zen.term _p_B_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_second_term (abst_second x)) v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal v_Vcc 
                                   (abst_second_term (abst_second x)))))))) =>
                 zen.Rall _p_B_T 
                   (v_Vcc:(zen.term _p_B_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term (abst_second x)) 
                               v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal v_Vcc 
                               (abst_second_term (abst_second x)))))) x 
                   (v_Vec:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (abst_second_term (abst_second x)) x))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal x 
                                   (abst_second_term (abst_second x))))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second_term (abst_second x)) x))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal x (abst_second_term (abst_second x))))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_second_term (abst_second x)) x))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_second_term (abst_second x)) x))) 
                         v_Vbc v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal x 
                                   (abst_second_term (abst_second x)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal x 
                                  (abst_second_term (abst_second x))))) 
                         v_Vgc v_Vzb) v_Vec) v_Vdc) _p_B_equal_symmetric) 
             abst_second_reverses_term))).

def Sum_set__equal_reflexive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_complete:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.or (dk_logic.ebP (abst_first_case x)) 
                              (dk_logic.ebP (abst_second_case x))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_complete:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.or (dk_logic.ebP (abst_first_case x)) 
           (dk_logic.ebP (abst_second_case x))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac)))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle (focal.is_true (abst_equal v_Vac v_Vac)))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))))) =>
        zen.Rall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv 
                (zen.triangle (focal.is_true (abst_equal v_Vac v_Vec))) 
                (zen.or 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vac))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term v_Vac) 
                                  (abst_first_term v_Vec)))))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vac))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second_term v_Vac) 
                                  (abst_second_term v_Vec))))))))) v_Vcc 
          (v_Vfc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vec:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vec)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vcc) 
                                      (abst_second_term v_Vec)))))))))) =>
           zen.Rall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                (zen.or 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vec)))))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vec))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vec)))))))) v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vcc)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vcc) 
                                      (abst_second_term v_Vcc))))))))) =>
              zen.Requiv 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                (zen.or 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vcc)))))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vcc))))))) 
                (v_Vdc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))))) =>
                 v_Vhc:
                 (zen.proof 
                    (zen.not 
                       (zen.or 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vcc)))))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal (abst_second_term v_Vcc) 
                                         (abst_second_term v_Vcc))))))))) =>
                 zen.Rnotor 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vcc)))))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second_term v_Vcc) 
                                  (abst_second_term v_Vcc)))))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vcc)))))))) =>
                    v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal (abst_second_term v_Vcc) 
                                         (abst_second_term v_Vcc)))))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vcc))))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))))) =>
                       zen.Rnotand 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vcc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vcc))))) 
                         (v_Vlc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vcc))))) =>
                          zen.Rall abst_T 
                            (v_Vac:(zen.term abst_T) =>
                             zen.or 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vac))) 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vac)))) 
                            v_Vcc 
                            (v_Vmc:
                             (zen.proof 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vcc))))) =>
                             zen.Ror 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vcc))) 
                               (v_Vnc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vcc)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  v_Vnc v_Vkc) 
                               (v_Voc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vcc)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vcc))) 
                                  v_Voc v_Vlc) v_Vmc) abst_case_complete) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vcc))))))) =>
                          zen.Rnotand 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal (abst_second_term v_Vcc) 
                                     (abst_second_term v_Vcc)))) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vcc))))) =>
                             zen.Rall abst_T 
                               (v_Vac:(zen.term abst_T) =>
                                zen.or 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vac))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vac)))) 
                               v_Vcc 
                               (v_Vmc:
                                (zen.proof 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc))))) =>
                                zen.Ror 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vcc))) 
                                  (v_Vnc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vcc))) v_Vnc 
                                     v_Vkc) 
                                  (v_Voc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) v_Voc 
                                     v_Vlc) v_Vmc) abst_case_complete) 
                            (v_Vqc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vcc)))))) =>
                             zen.Rall _p_B_T 
                               (v_Vrc:(zen.term _p_B_T) =>
                                zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vrc v_Vrc))) 
                               (abst_second_term v_Vcc) 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vcc) 
                                            (abst_second_term v_Vcc))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal (abst_second_term v_Vcc) 
                                           (abst_second_term v_Vcc)))) v_Vsc 
                                  v_Vqc) _p_B_equal_reflexive) v_Vpc) v_Vjc) 
                      (v_Vtc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vcc))))))) =>
                       zen.Rnotand 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term v_Vcc) 
                                  (abst_first_term v_Vcc)))) 
                         (v_Vkc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case v_Vcc))))) =>
                          zen.Rnotand 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vcc))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second_term v_Vcc) 
                                        (abst_second_term v_Vcc))))) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vcc))))) =>
                             zen.Rall abst_T 
                               (v_Vac:(zen.term abst_T) =>
                                zen.or 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vac))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vac)))) 
                               v_Vcc 
                               (v_Vmc:
                                (zen.proof 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc))))) =>
                                zen.Ror 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vcc))) 
                                  (v_Vnc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vcc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vcc))) v_Vnc 
                                     v_Vkc) 
                                  (v_Voc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) v_Voc 
                                     v_Vlc) v_Vmc) abst_case_complete) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vcc))))))) =>
                             zen.Rnotand 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second_term v_Vcc) 
                                        (abst_second_term v_Vcc)))) 
                               (v_Vlc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vcc))))) =>
                                zen.Rall abst_T 
                                  (v_Vac:(zen.term abst_T) =>
                                   zen.or 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vac))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vac)))) v_Vcc 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc))))) =>
                                   zen.Ror 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vcc))) 
                                     (v_Vnc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vcc)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vcc))) 
                                        v_Vnc v_Vkc) 
                                     (v_Voc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vcc)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vcc))) 
                                        v_Voc v_Vlc) v_Vmc) 
                                  abst_case_complete) 
                               (v_Vqc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vcc)))))) =>
                                zen.Rall _p_B_T 
                                  (v_Vrc:(zen.term _p_B_T) =>
                                   zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vrc v_Vrc))) 
                                  (abst_second_term v_Vcc) 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vcc) 
                                               (abst_second_term v_Vcc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second_term v_Vcc) 
                                              (abst_second_term v_Vcc)))) 
                                     v_Vsc v_Vqc) _p_B_equal_reflexive) v_Vpc) 
                            v_Vjc) 
                         (v_Vuc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vcc)))))) =>
                          zen.Rall _p_A_T 
                            (v_Vvc:(zen.term _p_A_T) =>
                             zen.triangle 
                               (focal.is_true (_p_A_equal v_Vvc v_Vvc))) 
                            (abst_first_term v_Vcc) 
                            (v_Vwc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first_term v_Vcc) 
                                         (abst_first_term v_Vcc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_first_term v_Vcc) 
                                        (abst_first_term v_Vcc)))) v_Vwc 
                               v_Vuc) _p_A_equal_reflexive) v_Vtc) v_Vic) 
                   v_Vhc) 
                (v_Vxc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc)))) =>
                 v_Vyc:
                 (zen.proof 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vcc) 
                                      (abst_first_term v_Vcc)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vcc) 
                                      (abst_second_term v_Vcc)))))))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                   v_Vxc v_Vdc) v_Vgc) v_Vfc) abst_equal_spec) v_Vbc).

def Sum_set__equal_symmetric :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_equal y x)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc)))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))))))) =>
        zen.Rnotall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) 
          (v_Vgc:(zen.term abst_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec))) 
             (v_Vic:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc)))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_first_case v_Vbc))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_first_term v_Vbc) 
                                        (abst_first_term v_Vcc)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vbc))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second_term v_Vbc) 
                                        (abst_second_term v_Vcc))))))))) 
                v_Vec 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vcc))) 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case v_Vec))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first_term v_Vec) 
                                            (abst_first_term v_Vcc)))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vec))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vec) 
                                            (abst_second_term v_Vcc)))))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_first_case v_Vec))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_first_term v_Vec) 
                                        (abst_first_term v_Vcc)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vec))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second_term v_Vec) 
                                        (abst_second_term v_Vcc)))))))) 
                   v_Vgc 
                   (v_Vlc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vgc))) 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case v_Vec))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vgc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first_term v_Vec) 
                                            (abst_first_term v_Vgc)))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vec))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vgc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vec) 
                                            (abst_second_term v_Vgc))))))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_first_case v_Vec))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_first_term v_Vec) 
                                        (abst_first_term v_Vgc)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vec))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second_term v_Vec) 
                                        (abst_second_term v_Vgc))))))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vec v_Vgc))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.or 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vec))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vgc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_first_term v_Vec) 
                                               (abst_first_term v_Vgc)))))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vec))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vgc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term v_Vec) 
                                               (abst_second_term v_Vgc))))))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vec v_Vgc))) v_Vic 
                         v_Vmc) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vgc)))) =>
                       v_Voc:
                       (zen.proof 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case v_Vec))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vgc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first_term v_Vec) 
                                            (abst_first_term v_Vgc)))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case v_Vec))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vgc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term v_Vec) 
                                            (abst_second_term v_Vgc)))))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                               (zen.or 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vbc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term v_Vbc) 
                                                 (abst_first_term v_Vcc)))))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vbc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second_term v_Vbc) 
                                                 (abst_second_term v_Vcc))))))))) 
                         v_Vgc 
                         (v_Vpc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vcc:(zen.term abst_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vgc v_Vcc))) 
                                   (zen.or 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vgc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vcc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first_term v_Vgc) 
                                                     (abst_first_term v_Vcc)))))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vgc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vcc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second_term v_Vgc) 
                                                     (abst_second_term v_Vcc)))))))))) =>
                          zen.Rall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vgc v_Vcc))) 
                               (zen.or 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vgc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term v_Vgc) 
                                                 (abst_first_term v_Vcc)))))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vgc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second_term v_Vgc) 
                                                 (abst_second_term v_Vcc)))))))) 
                            v_Vec 
                            (v_Vqc:
                             (zen.proof 
                                (zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vgc v_Vec))) 
                                   (zen.or 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vgc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first_term v_Vgc) 
                                                     (abst_first_term v_Vec)))))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vgc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second_term v_Vgc) 
                                                     (abst_second_term v_Vec))))))))) =>
                             zen.Requiv 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vgc v_Vec))) 
                               (zen.or 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vgc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term v_Vgc) 
                                                 (abst_first_term v_Vec)))))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vgc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second_term v_Vgc) 
                                                 (abst_second_term v_Vec))))))) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vec))))) =>
                                v_Vrc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.or 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vgc))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           v_Vgc) 
                                                        (abst_first_term 
                                                           v_Vec)))))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vgc))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           v_Vgc) 
                                                        (abst_second_term 
                                                           v_Vec))))))))) =>
                                zen.Rnotor 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vgc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term v_Vgc) 
                                                 (abst_first_term v_Vec)))))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vgc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second_term v_Vgc) 
                                                 (abst_second_term v_Vec)))))) 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vgc))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           v_Vgc) 
                                                        (abst_first_term 
                                                           v_Vec)))))))) =>
                                   v_Vtc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vgc))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           v_Vgc) 
                                                        (abst_second_term 
                                                           v_Vec)))))))) =>
                                   zen.Rnotand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vgc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term v_Vgc) 
                                                 (abst_first_term v_Vec))))) 
                                     (v_Vuc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vgc))))) =>
                                      zen.Rnotand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vgc))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vec))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term v_Vgc) 
                                                    (abst_second_term v_Vec))))) 
                                        (v_Vvc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case v_Vgc))))) =>
                                         zen.Ror 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_first_case v_Vec))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vgc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first_term 
                                                             v_Vec) 
                                                          (abst_first_term 
                                                             v_Vgc)))))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vec))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vgc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second_term 
                                                             v_Vec) 
                                                          (abst_second_term 
                                                             v_Vgc)))))) 
                                           (v_Vwc:
                                            (zen.proof 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_first_case 
                                                           v_Vec))) 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vgc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 v_Vec) 
                                                              (abst_first_term 
                                                                 v_Vgc))))))) =>
                                            zen.Rand 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_first_case v_Vec))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vgc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first_term 
                                                             v_Vec) 
                                                          (abst_first_term 
                                                             v_Vgc))))) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_first_case 
                                                           v_Vec)))) =>
                                               v_Vyc:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vgc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 v_Vec) 
                                                              (abst_first_term 
                                                                 v_Vgc)))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vgc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first_term 
                                                             v_Vec) 
                                                          (abst_first_term 
                                                             v_Vgc)))) 
                                                 (v_Vzc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vgc)))) =>
                                                  v_Vad:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 v_Vec) 
                                                              (abst_first_term 
                                                                 v_Vgc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) v_Vzc 
                                                    v_Vuc) v_Vyc) v_Vwc) 
                                           (v_Vbd:
                                            (zen.proof 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vec))) 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vgc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vec) 
                                                              (abst_second_term 
                                                                 v_Vgc))))))) =>
                                            zen.Rand 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vec))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vgc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second_term 
                                                             v_Vec) 
                                                          (abst_second_term 
                                                             v_Vgc))))) 
                                              (v_Vcd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vec)))) =>
                                               v_Vdd:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vgc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vec) 
                                                              (abst_second_term 
                                                                 v_Vgc)))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vgc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second_term 
                                                             v_Vec) 
                                                          (abst_second_term 
                                                             v_Vgc)))) 
                                                 (v_Ved:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vgc)))) =>
                                                  v_Vfd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vec) 
                                                              (abst_second_term 
                                                                 v_Vgc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) v_Ved 
                                                    v_Vvc) v_Vdd) v_Vbd) 
                                           v_Voc) 
                                        (v_Vgd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vec))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              v_Vgc) 
                                                           (abst_second_term 
                                                              v_Vec))))))) =>
                                         zen.Rnotand 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vec))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term v_Vgc) 
                                                    (abst_second_term v_Vec)))) 
                                           (v_Vhd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vec))))) =>
                                            zen.Ror 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))))) 
                                              (v_Vwc:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc))))) 
                                                 (v_Vxc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec)))) =>
                                                  v_Vyc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))) 
                                                    (v_Vzc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc)))) =>
                                                     v_Vad:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       v_Vzc v_Vuc) v_Vyc) 
                                                 v_Vwc) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc))))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec)))) =>
                                                  v_Vdd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc)))) =>
                                                     v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vec))) 
                                                       v_Vcd v_Vhd) v_Vdd) 
                                                 v_Vbd) v_Voc) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              v_Vgc) 
                                                           (abst_second_term 
                                                              v_Vec)))))) =>
                                            zen.Ror 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))))) 
                                              (v_Vwc:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc))))) 
                                                 (v_Vxc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec)))) =>
                                                  v_Vyc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))) 
                                                    (v_Vzc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc)))) =>
                                                     v_Vad:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       v_Vzc v_Vuc) v_Vyc) 
                                                 v_Vwc) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc))))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec)))) =>
                                                  v_Vdd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc)))) =>
                                                     v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vjd:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vkd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vjd 
                                                                    v_Vkd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vjd))))) 
                                                       (abst_second_term 
                                                          v_Vec) 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vkd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    v_Vkd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    (abst_second_term 
                                                                    v_Vec))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vkd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    v_Vkd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vkd 
                                                                    (abst_second_term 
                                                                    v_Vec))))) 
                                                          (abst_second_term 
                                                             v_Vgc) 
                                                          (v_Vmd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))) 
                                                             (v_Vnd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                v_Vfd v_Vnd) 
                                                             (v_Vod:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))) 
                                                                v_Vod v_Vid) 
                                                             v_Vmd) v_Vld) 
                                                       _p_B_equal_symmetric) 
                                                    v_Vdd) v_Vbd) v_Voc) 
                                           v_Vgd) v_Vtc) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           v_Vgc) 
                                                        (abst_first_term 
                                                           v_Vec))))))) =>
                                      zen.Rnotand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term v_Vgc) 
                                                 (abst_first_term v_Vec)))) 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case v_Vec))))) =>
                                         zen.Rnotand 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vgc))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vec))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          v_Vgc) 
                                                       (abst_second_term 
                                                          v_Vec))))) 
                                           (v_Vvc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vgc))))) =>
                                            zen.Ror 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))))) 
                                              (v_Vwc:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc))))) 
                                                 (v_Vxc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec)))) =>
                                                  v_Vyc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))) 
                                                    (v_Vzc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc)))) =>
                                                     v_Vad:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vec))) 
                                                       v_Vxc v_Vqd) v_Vyc) 
                                                 v_Vwc) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc))))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec)))) =>
                                                  v_Vdd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc)))) =>
                                                     v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       v_Ved v_Vvc) v_Vdd) 
                                                 v_Vbd) v_Voc) 
                                           (v_Vgd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vgc) 
                                                              (abst_second_term 
                                                                 v_Vec))))))) =>
                                            zen.Rnotand 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vec))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          v_Vgc) 
                                                       (abst_second_term 
                                                          v_Vec)))) 
                                              (v_Vhd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))))) =>
                                               zen.Ror 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))))) 
                                                 (v_Vwc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc))))) 
                                                    (v_Vxc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec)))) =>
                                                     v_Vyc:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))) 
                                                       (v_Vzc:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc)))) =>
                                                        v_Vad:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_first_case 
                                                                   v_Vec))) 
                                                          v_Vxc v_Vqd) v_Vyc) 
                                                    v_Vwc) 
                                                 (v_Vbd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc))))) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec)))) =>
                                                     v_Vdd:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))) 
                                                       (v_Ved:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc)))) =>
                                                        v_Vfd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_second_case 
                                                                   v_Vec))) 
                                                          v_Vcd v_Vhd) v_Vdd) 
                                                    v_Vbd) v_Voc) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vgc) 
                                                              (abst_second_term 
                                                                 v_Vec)))))) =>
                                               zen.Ror 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))))) 
                                                 (v_Vwc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc))))) 
                                                    (v_Vxc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec)))) =>
                                                     v_Vyc:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))) 
                                                       (v_Vzc:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc)))) =>
                                                        v_Vad:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_first_case 
                                                                   v_Vec))) 
                                                          v_Vxc v_Vqd) v_Vyc) 
                                                    v_Vwc) 
                                                 (v_Vbd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc))))) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec)))) =>
                                                     v_Vdd:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))) 
                                                       (v_Ved:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc)))) =>
                                                        v_Vfd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vjd:
                                                           (zen.term _p_B_T) =>
                                                           zen.forall _p_B_T 
                                                             (v_Vkd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vjd 
                                                                    v_Vkd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vjd))))) 
                                                          (abst_second_term 
                                                             v_Vec) 
                                                          (v_Vld:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vkd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    v_Vkd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    (abst_second_term 
                                                                    v_Vec))))))) =>
                                                           zen.Rall _p_B_T 
                                                             (v_Vkd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    v_Vkd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    (abst_second_term 
                                                                    v_Vec))))) 
                                                             (abst_second_term 
                                                                v_Vgc) 
                                                             (v_Vmd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))) 
                                                                (v_Vnd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                   v_Vfd 
                                                                   v_Vnd) 
                                                                (v_Vod:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))) 
                                                                   v_Vod 
                                                                   v_Vid) 
                                                                v_Vmd) v_Vld) 
                                                          _p_B_equal_symmetric) 
                                                       v_Vdd) v_Vbd) v_Voc) 
                                              v_Vgd) v_Vtc) 
                                        (v_Vrd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           v_Vgc) 
                                                        (abst_first_term 
                                                           v_Vec)))))) =>
                                         zen.Rnotand 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vgc))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vec))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          v_Vgc) 
                                                       (abst_second_term 
                                                          v_Vec))))) 
                                           (v_Vvc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vgc))))) =>
                                            zen.Ror 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))))) 
                                              (zen.and 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))))) 
                                              (v_Vwc:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_first_case v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc))))) 
                                                 (v_Vxc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vec)))) =>
                                                  v_Vyc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                v_Vec) 
                                                             (abst_first_term 
                                                                v_Vgc)))) 
                                                    (v_Vzc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vgc)))) =>
                                                     v_Vad:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    v_Vec) 
                                                                 (abst_first_term 
                                                                    v_Vgc))))) =>
                                                     zen.Rall _p_A_T 
                                                       (v_Vsd:
                                                        (zen.term _p_A_T) =>
                                                        zen.forall _p_A_T 
                                                          (v_Vtd:
                                                           (zen.term _p_A_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    v_Vsd 
                                                                    v_Vtd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    v_Vtd 
                                                                    v_Vsd))))) 
                                                       (abst_first_term v_Vec) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_A_T 
                                                              (v_Vtd:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    v_Vtd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vtd 
                                                                    (abst_first_term 
                                                                    v_Vec))))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vtd:
                                                           (zen.term _p_A_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    v_Vtd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    v_Vtd 
                                                                    (abst_first_term 
                                                                    v_Vec))))) 
                                                          (abst_first_term 
                                                             v_Vgc) 
                                                          (v_Vvd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))) 
                                                             (v_Vwd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                v_Vad v_Vwd) 
                                                             (v_Vxd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))) 
                                                                v_Vxd v_Vrd) 
                                                             v_Vvd) v_Vud) 
                                                       _p_A_equal_symmetric) 
                                                    v_Vyc) v_Vwc) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))))) =>
                                               zen.Rand 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_second_case 
                                                          v_Vec))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc))))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec)))) =>
                                                  v_Vdd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc)))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vgc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                v_Vec) 
                                                             (abst_second_term 
                                                                v_Vgc)))) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vgc)))) =>
                                                     v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    v_Vec) 
                                                                 (abst_second_term 
                                                                    v_Vgc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       v_Ved v_Vvc) v_Vdd) 
                                                 v_Vbd) v_Voc) 
                                           (v_Vgd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vgc) 
                                                              (abst_second_term 
                                                                 v_Vec))))))) =>
                                            zen.Rnotand 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vec))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          v_Vgc) 
                                                       (abst_second_term 
                                                          v_Vec)))) 
                                              (v_Vhd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vec))))) =>
                                               zen.Ror 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))))) 
                                                 (v_Vwc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc))))) 
                                                    (v_Vxc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec)))) =>
                                                     v_Vyc:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))) 
                                                       (v_Vzc:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc)))) =>
                                                        v_Vad:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vsd:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vsd 
                                                                    v_Vtd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vtd 
                                                                    v_Vsd))))) 
                                                          (abst_first_term 
                                                             v_Vec) 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vtd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    v_Vtd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vtd 
                                                                    (abst_first_term 
                                                                    v_Vec))))))) =>
                                                           zen.Rall _p_A_T 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    v_Vtd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vtd 
                                                                    (abst_first_term 
                                                                    v_Vec))))) 
                                                             (abst_first_term 
                                                                v_Vgc) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                   v_Vad 
                                                                   v_Vwd) 
                                                                (v_Vxd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))) 
                                                                   v_Vxd 
                                                                   v_Vrd) 
                                                                v_Vvd) v_Vud) 
                                                          _p_A_equal_symmetric) 
                                                       v_Vyc) v_Vwc) 
                                                 (v_Vbd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc))))) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec)))) =>
                                                     v_Vdd:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))) 
                                                       (v_Ved:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc)))) =>
                                                        v_Vfd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_second_case 
                                                                   v_Vec))) 
                                                          v_Vcd v_Vhd) v_Vdd) 
                                                    v_Vbd) v_Voc) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vgc) 
                                                              (abst_second_term 
                                                                 v_Vec)))))) =>
                                               zen.Ror 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))))) 
                                                 (v_Vwc:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc))))) 
                                                    (v_Vxc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vec)))) =>
                                                     v_Vyc:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vec) 
                                                                (abst_first_term 
                                                                   v_Vgc)))) 
                                                       (v_Vzc:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vgc)))) =>
                                                        v_Vad:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vgc))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vsd:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vsd 
                                                                    v_Vtd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vtd 
                                                                    v_Vsd))))) 
                                                          (abst_first_term 
                                                             v_Vec) 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vtd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    v_Vtd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vtd 
                                                                    (abst_first_term 
                                                                    v_Vec))))))) =>
                                                           zen.Rall _p_A_T 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    v_Vtd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vtd 
                                                                    (abst_first_term 
                                                                    v_Vec))))) 
                                                             (abst_first_term 
                                                                v_Vgc) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vec) 
                                                                    (abst_first_term 
                                                                    v_Vgc)))) 
                                                                   v_Vad 
                                                                   v_Vwd) 
                                                                (v_Vxd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vgc) 
                                                                    (abst_first_term 
                                                                    v_Vec)))) 
                                                                   v_Vxd 
                                                                   v_Vrd) 
                                                                v_Vvd) v_Vud) 
                                                          _p_A_equal_symmetric) 
                                                       v_Vyc) v_Vwc) 
                                                 (v_Vbd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))))) =>
                                                  zen.Rand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vec))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc))))) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vec)))) =>
                                                     v_Vdd:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc)))))) =>
                                                     zen.Rand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vgc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vec) 
                                                                (abst_second_term 
                                                                   v_Vgc)))) 
                                                       (v_Ved:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vgc)))) =>
                                                        v_Vfd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vec) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vgc))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vjd:
                                                           (zen.term _p_B_T) =>
                                                           zen.forall _p_B_T 
                                                             (v_Vkd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vjd 
                                                                    v_Vkd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vjd))))) 
                                                          (abst_second_term 
                                                             v_Vec) 
                                                          (v_Vld:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vkd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    v_Vkd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    (abst_second_term 
                                                                    v_Vec))))))) =>
                                                           zen.Rall _p_B_T 
                                                             (v_Vkd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    v_Vkd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    (abst_second_term 
                                                                    v_Vec))))) 
                                                             (abst_second_term 
                                                                v_Vgc) 
                                                             (v_Vmd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))) 
                                                                (v_Vnd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vec) 
                                                                    (abst_second_term 
                                                                    v_Vgc)))) 
                                                                   v_Vfd 
                                                                   v_Vnd) 
                                                                (v_Vod:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vgc) 
                                                                    (abst_second_term 
                                                                    v_Vec)))) 
                                                                   v_Vod 
                                                                   v_Vid) 
                                                                v_Vmd) v_Vld) 
                                                          _p_B_equal_symmetric) 
                                                       v_Vdd) v_Vbd) v_Voc) 
                                              v_Vgd) v_Vtc) v_Vpd) v_Vsc) 
                                  v_Vrc) 
                               (v_Vyd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vgc v_Vec)))) =>
                                v_Vzd:
                                (zen.proof 
                                   (zen.or 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vgc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first_term v_Vgc) 
                                                     (abst_first_term v_Vec)))))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vgc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second_term v_Vgc) 
                                                     (abst_second_term v_Vec)))))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vgc v_Vec))) 
                                  v_Vyd v_Vjc) v_Vqc) v_Vpc) abst_equal_spec) 
                      v_Vlc) v_Vkc) abst_equal_spec) v_Vhc) v_Vfc) v_Vdc).

def Sum_set__equal_transitive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                   (dk_logic.ebP (abst_equal x z)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vqe:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vre:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vse:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vqe v_Vre))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vre v_Vse))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vqe v_Vse)))))))) 
    (v_Vte:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vqe:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vre:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vse:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vqe v_Vre))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vre v_Vse))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vqe v_Vse)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vqe:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vre:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vse:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vqe v_Vre))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vre v_Vse))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vqe v_Vse))))))) 
       (v_Vue:(zen.term abst_T) =>
        v_Vve:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vre:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vse:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vue v_Vre))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vre v_Vse))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vue v_Vse))))))))) =>
        zen.Rnotall abst_T 
          (v_Vre:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vse:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vue v_Vre))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vre v_Vse))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vue v_Vse)))))) 
          (v_Vwe:(zen.term abst_T) =>
           v_Vxe:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vse:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vue v_Vwe))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vwe v_Vse))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vue v_Vse)))))))) =>
           zen.Rnotall abst_T 
             (v_Vse:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vue v_Vwe))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vwe v_Vse))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vue v_Vse))))) 
             (v_Vye:(zen.term abst_T) =>
              v_Vze:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vue v_Vwe))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vwe v_Vye))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vue v_Vye))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_equal v_Vue v_Vwe))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vwe v_Vye))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vue v_Vye)))) 
                (v_Vaf:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vue v_Vwe)))) =>
                 v_Vbf:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vwe v_Vye))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vue v_Vye)))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_equal v_Vwe v_Vye))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vue v_Vye))) 
                   (v_Vcf:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vwe v_Vye)))) =>
                    v_Vdf:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vue v_Vye))))) =>
                    zen.Rall abst_T 
                      (v_Vqe:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vre:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vqe v_Vre))) 
                            (zen.or 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vqe))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vre))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first_term v_Vqe) 
                                              (abst_first_term v_Vre)))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vqe))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vre))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second_term v_Vqe) 
                                              (abst_second_term v_Vre))))))))) 
                      v_Vue 
                      (v_Vef:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vre:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vue v_Vre))) 
                                (zen.or 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vue))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vre))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first_term v_Vue) 
                                                  (abst_first_term v_Vre)))))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vue))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vre))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second_term v_Vue) 
                                                  (abst_second_term v_Vre)))))))))) =>
                       zen.Rall abst_T 
                         (v_Vre:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vue v_Vre))) 
                            (zen.or 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vue))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vre))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first_term v_Vue) 
                                              (abst_first_term v_Vre)))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vue))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vre))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second_term v_Vue) 
                                              (abst_second_term v_Vre)))))))) 
                         v_Vwe 
                         (v_Vff:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vue v_Vwe))) 
                                (zen.or 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vue))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vwe))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first_term v_Vue) 
                                                  (abst_first_term v_Vwe)))))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vue))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vwe))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second_term v_Vue) 
                                                  (abst_second_term v_Vwe))))))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vue v_Vwe))) 
                            (zen.or 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vue))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case v_Vwe))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first_term v_Vue) 
                                              (abst_first_term v_Vwe)))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vue))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case v_Vwe))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second_term v_Vue) 
                                              (abst_second_term v_Vwe))))))) 
                            (v_Vgf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vue v_Vwe))))) =>
                             v_Vhf:
                             (zen.proof 
                                (zen.not 
                                   (zen.or 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vue))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case v_Vwe))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first_term v_Vue) 
                                                     (abst_first_term v_Vwe)))))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vue))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case v_Vwe))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second_term v_Vue) 
                                                     (abst_second_term v_Vwe))))))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vue v_Vwe))) 
                               v_Vaf v_Vgf) 
                            (v_Vaf:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vue v_Vwe)))) =>
                             v_Vif:
                             (zen.proof 
                                (zen.or 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case v_Vue))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_first_case v_Vwe))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first_term v_Vue) 
                                                  (abst_first_term v_Vwe)))))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case v_Vue))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_second_case v_Vwe))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second_term v_Vue) 
                                                  (abst_second_term v_Vwe)))))))) =>
                             zen.Rall abst_T 
                               (v_Vqe:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vre:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vqe v_Vre))) 
                                     (zen.or 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_first_case v_Vqe))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_first_case v_Vre))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first_term v_Vqe) 
                                                       (abst_first_term v_Vre)))))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vqe))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vre))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          v_Vqe) 
                                                       (abst_second_term 
                                                          v_Vre))))))))) 
                               v_Vwe 
                               (v_Vjf:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vre:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vwe v_Vre))) 
                                         (zen.or 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case v_Vwe))) 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_first_case 
                                                           v_Vre))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              v_Vwe) 
                                                           (abst_first_term 
                                                              v_Vre)))))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case v_Vwe))) 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vre))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              v_Vwe) 
                                                           (abst_second_term 
                                                              v_Vre)))))))))) =>
                                zen.Rall abst_T 
                                  (v_Vre:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vwe v_Vre))) 
                                     (zen.or 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_first_case v_Vwe))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_first_case v_Vre))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first_term v_Vwe) 
                                                       (abst_first_term v_Vre)))))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vwe))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vre))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          v_Vwe) 
                                                       (abst_second_term 
                                                          v_Vre)))))))) 
                                  v_Vye 
                                  (v_Vkf:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vwe v_Vye))) 
                                         (zen.or 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case v_Vwe))) 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_first_case 
                                                           v_Vye))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              v_Vwe) 
                                                           (abst_first_term 
                                                              v_Vye)))))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case v_Vwe))) 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vye))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              v_Vwe) 
                                                           (abst_second_term 
                                                              v_Vye))))))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vwe v_Vye))) 
                                     (zen.or 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_first_case v_Vwe))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_first_case v_Vye))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first_term v_Vwe) 
                                                       (abst_first_term v_Vye)))))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vwe))) 
                                           (zen.and 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_second_case v_Vye))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          v_Vwe) 
                                                       (abst_second_term 
                                                          v_Vye))))))) 
                                     (v_Vlf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vwe v_Vye))))) =>
                                      v_Vmf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.or 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_first_case 
                                                           v_Vwe))) 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_first_case 
                                                              v_Vye))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 v_Vwe) 
                                                              (abst_first_term 
                                                                 v_Vye)))))) 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vwe))) 
                                                  (zen.and 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_second_case 
                                                              v_Vye))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 v_Vwe) 
                                                              (abst_second_term 
                                                                 v_Vye))))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vwe v_Vye))) 
                                        v_Vcf v_Vlf) 
                                     (v_Vcf:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vwe v_Vye)))) =>
                                      v_Vnf:
                                      (zen.proof 
                                         (zen.or 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case v_Vwe))) 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_first_case 
                                                           v_Vye))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              v_Vwe) 
                                                           (abst_first_term 
                                                              v_Vye)))))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case v_Vwe))) 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_second_case 
                                                           v_Vye))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              v_Vwe) 
                                                           (abst_second_term 
                                                              v_Vye)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vqe:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vre:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vqe v_Vre))) 
                                              (zen.or 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vqe))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vre))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vqe) 
                                                                (abst_first_term 
                                                                   v_Vre)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vqe))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vre))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vqe) 
                                                                (abst_second_term 
                                                                   v_Vre))))))))) 
                                        v_Vue 
                                        (v_Vef:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vre:(zen.term abst_T) =>
                                                zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vue 
                                                           v_Vre))) 
                                                  (zen.or 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vue))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vre))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vue) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vre)))))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vue))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vre))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vue) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vre)))))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vre:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vue v_Vre))) 
                                              (zen.or 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vue))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vre))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vue) 
                                                                (abst_first_term 
                                                                   v_Vre)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vue))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vre))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vue) 
                                                                (abst_second_term 
                                                                   v_Vre)))))))) 
                                           v_Vye 
                                           (v_Vof:
                                            (zen.proof 
                                               (zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vue 
                                                           v_Vye))) 
                                                  (zen.or 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vue))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vye))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vue) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vye)))))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vue))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vye))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vue) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vye))))))))) =>
                                            zen.Requiv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vue v_Vye))) 
                                              (zen.or 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vue))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vye))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vue) 
                                                                (abst_first_term 
                                                                   v_Vye)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vue))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vye))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vue) 
                                                                (abst_second_term 
                                                                   v_Vye))))))) 
                                              (v_Vdf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vue 
                                                              v_Vye))))) =>
                                               v_Vpf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.or 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vue))) 
                                                           (zen.and 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_first_case 
                                                                    v_Vye))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vue))) 
                                                           (zen.and 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_second_case 
                                                                    v_Vye))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))))) =>
                                               zen.Rnotor 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vue))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vye))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vue) 
                                                                (abst_first_term 
                                                                   v_Vye)))))) 
                                                 (zen.and 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_second_case 
                                                             v_Vue))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vye))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   v_Vue) 
                                                                (abst_second_term 
                                                                   v_Vye)))))) 
                                                 (v_Vqf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vue))) 
                                                           (zen.and 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_first_case 
                                                                    v_Vye))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))))) =>
                                                  v_Vrf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vue))) 
                                                           (zen.and 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_second_case 
                                                                    v_Vye))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))))) =>
                                                  zen.Rnotand 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_first_case 
                                                             v_Vue))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vye))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vue) 
                                                                (abst_first_term 
                                                                   v_Vye))))) 
                                                    (v_Vsf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vue))))) =>
                                                     zen.Rnotand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_second_case 
                                                                v_Vue))) 
                                                       (zen.and 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_second_case 
                                                                   v_Vye))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    v_Vue) 
                                                                   (abst_second_term 
                                                                    v_Vye))))) 
                                                       (v_Vtf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_second_case 
                                                                    v_Vue))))) =>
                                                        zen.Ror 
                                                          (zen.and 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_first_case 
                                                                    v_Vwe))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                          (zen.and 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_second_case 
                                                                    v_Vwe))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                          (v_Vuf:
                                                           (zen.proof 
                                                              (zen.and 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                           zen.Rand 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_first_case 
                                                                    v_Vwe))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                             (v_Vvf:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                              v_Vwf:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                (v_Vxf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                 v_Vyf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                 zen.Ror 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                   (v_Vzf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    v_Vag 
                                                                    v_Vsf) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                   (v_Vdg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                   v_Vif) 
                                                                v_Vwf) v_Vuf) 
                                                          (v_Vlg:
                                                           (zen.proof 
                                                              (zen.and 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                           zen.Rand 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_second_case 
                                                                    v_Vwe))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                             (v_Vgg:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                              v_Vmg:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                (v_Vng:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                 v_Vog:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                 zen.Ror 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                   (v_Vzf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                   (v_Vdg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    v_Veg 
                                                                    v_Vtf) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                   v_Vif) 
                                                                v_Vmg) v_Vlg) 
                                                          v_Vnf) 
                                                       (v_Vpg:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.and 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                        zen.Rnotand 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_second_case 
                                                                   v_Vye))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    v_Vue) 
                                                                   (abst_second_term 
                                                                    v_Vye)))) 
                                                          (v_Vqg:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))))) =>
                                                           zen.Ror 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                             (v_Vuf:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                (v_Vvf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vwf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                   (v_Vxf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    v_Vag 
                                                                    v_Vsf) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                   v_Vwf) 
                                                                v_Vuf) 
                                                             (v_Vlg:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                (v_Vgg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vmg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                   (v_Vng:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    v_Vng 
                                                                    v_Vqg) 
                                                                   v_Vmg) 
                                                                v_Vlg) v_Vnf) 
                                                          (v_Vrg:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                           zen.Ror 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                             (v_Vuf:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                (v_Vvf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vwf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                   (v_Vxf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    v_Vag 
                                                                    v_Vsf) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                   v_Vwf) 
                                                                v_Vuf) 
                                                             (v_Vlg:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                (v_Vgg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vmg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                   (v_Vng:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rcut 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) 
                                                                    (v_Vsg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    v_Vug:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    v_Vsg) 
                                                                    (v_Vvg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    (v_Vwg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxg:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxg)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vzg:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vzg 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vah:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vch:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    v_Vch 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vdh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vdh)) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    v_Vbh) 
                                                                    v_Vbh) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg)) 
                                                                    v_Vah) 
                                                                    (v_Veh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (v_Vfh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vkh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (v_Vlh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vug:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    v_Vfh 
                                                                    v_Vug) 
                                                                    (v_Vmh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vnh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    v_Vhg 
                                                                    v_Vnh) 
                                                                    (v_Vhg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxg:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxg)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vzg:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vzg 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Voh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Voh) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    v_Vwg 
                                                                    v_Vph) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vyg) 
                                                                    v_Vyg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vhg) 
                                                                    v_Vmh) 
                                                                    v_Vlh) 
                                                                    v_Vkh) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Veh) 
                                                                    v_Vvg) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vsh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vsh) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    v_Vwg 
                                                                    v_Vph) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vyg) 
                                                                    v_Vyg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vhg) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vog:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (v_Vth:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vuh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (v_Vnh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    v_Vhg 
                                                                    v_Vnh) 
                                                                    (v_Vvh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vwh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vog 
                                                                    v_Vwh) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vyh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vyh 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vah:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    v_Vah) 
                                                                    (v_Veh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (v_Vfh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vkh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vzh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (v_Vug:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    v_Vfh 
                                                                    v_Vug) 
                                                                    (v_Vai:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vrg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vai) 
                                                                    v_Vzh) 
                                                                    v_Vkh) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Veh) 
                                                                    v_Vvg) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vsh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vsh) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vbi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    v_Vbi) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vqh) 
                                                                    v_Vqh) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vrh) 
                                                                    v_Vvh) 
                                                                    v_Vuh) 
                                                                    v_Vth) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    (v_Vwh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vog 
                                                                    v_Vwh)))) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                   v_Vmg) 
                                                                v_Vlg) v_Vnf) 
                                                          v_Vpg) v_Vrf) 
                                                    (v_Vci:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.and 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_first_case 
                                                                    v_Vye))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                     zen.Rnotand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_first_case 
                                                                v_Vye))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   v_Vue) 
                                                                (abst_first_term 
                                                                   v_Vye)))) 
                                                       (v_Vdi:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_first_case 
                                                                    v_Vye))))) =>
                                                        zen.Rnotand 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_second_case 
                                                                   v_Vue))) 
                                                          (zen.and 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_second_case 
                                                                    v_Vye))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                          (v_Vtf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))))) =>
                                                           zen.Ror 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                             (v_Vuf:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                (v_Vvf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vwf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                   (v_Vxf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    v_Vxf 
                                                                    v_Vdi) 
                                                                   v_Vwf) 
                                                                v_Vuf) 
                                                             (v_Vlg:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                (v_Vgg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vmg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                   (v_Vng:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    v_Veg 
                                                                    v_Vtf) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                   v_Vmg) 
                                                                v_Vlg) v_Vnf) 
                                                          (v_Vpg:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                           zen.Rnotand 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_second_case 
                                                                    v_Vye))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                             (v_Vqg:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))))) =>
                                                              zen.Ror 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                                (v_Vuf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                   (v_Vvf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vwf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    v_Vxf 
                                                                    v_Vdi) 
                                                                    v_Vwf) 
                                                                   v_Vuf) 
                                                                (v_Vlg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                   (v_Vgg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vmg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vng:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    v_Vng 
                                                                    v_Vqg) 
                                                                    v_Vmg) 
                                                                   v_Vlg) 
                                                                v_Vnf) 
                                                             (v_Vrg:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                              zen.Ror 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                                (v_Vuf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                   (v_Vvf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vwf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    v_Vxf 
                                                                    v_Vdi) 
                                                                    v_Vwf) 
                                                                   v_Vuf) 
                                                                (v_Vlg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                   (v_Vgg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vmg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vng:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rcut 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) 
                                                                    (v_Vsg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    v_Vug:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    v_Vsg) 
                                                                    (v_Vvg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    (v_Vwg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vei:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vei 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vah:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vfi:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    v_Vfi 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vgi:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vgi)) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    v_Vbh) 
                                                                    v_Vbh) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg)) 
                                                                    v_Vah) 
                                                                    (v_Veh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (v_Vfh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vkh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (v_Vlh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vug:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    v_Vfh 
                                                                    v_Vug) 
                                                                    (v_Vmh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vnh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    v_Vhg 
                                                                    v_Vnh) 
                                                                    (v_Vhg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vei:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vei 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vsh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vsh) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    v_Vwg 
                                                                    v_Vph) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vyg) 
                                                                    v_Vyg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vhg) 
                                                                    v_Vmh) 
                                                                    v_Vlh) 
                                                                    v_Vkh) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Veh) 
                                                                    v_Vvg) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vsh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vsh) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    v_Vwg 
                                                                    v_Vph) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vyg) 
                                                                    v_Vyg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vhg) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vog:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (v_Vth:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vuh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (v_Vnh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    v_Vhg 
                                                                    v_Vnh) 
                                                                    (v_Vvh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vwh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vog 
                                                                    v_Vwh) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vyh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vyh 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vah:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    v_Vah) 
                                                                    (v_Veh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (v_Vfh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vkh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vzh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (v_Vug:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    v_Vfh 
                                                                    v_Vug) 
                                                                    (v_Vai:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vrg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vai) 
                                                                    v_Vzh) 
                                                                    v_Vkh) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Veh) 
                                                                    v_Vvg) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vsh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vsh) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vbi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    v_Vbi) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vqh) 
                                                                    v_Vqh) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vrh) 
                                                                    v_Vvh) 
                                                                    v_Vuh) 
                                                                    v_Vth) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    (v_Vwh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vog 
                                                                    v_Vwh)))) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                    v_Vmg) 
                                                                   v_Vlg) 
                                                                v_Vnf) v_Vpg) 
                                                          v_Vrf) 
                                                       (v_Vhi:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                        zen.Rnotand 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_second_case 
                                                                   v_Vue))) 
                                                          (zen.and 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_second_case 
                                                                    v_Vye))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                          (v_Vtf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))))) =>
                                                           zen.Ror 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                             (zen.and 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                             (v_Vuf:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                (v_Vvf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vwf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                   (v_Vxf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rcut 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) 
                                                                    (v_Vii:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    v_Vki:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    v_Vii) 
                                                                    (v_Vli:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    (v_Vmi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Voi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Voi 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vpi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vri:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    v_Vri 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vsi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vsi)) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    v_Vqi) 
                                                                    v_Vqi) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji)) 
                                                                    v_Vpi) 
                                                                    (v_Vti:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (v_Vui:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vzi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (v_Vaj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vki:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    v_Vui 
                                                                    v_Vki) 
                                                                    (v_Vbj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vcj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    v_Vcg 
                                                                    v_Vcj) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Voi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Voi 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    v_Vmi 
                                                                    v_Vej) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vni) 
                                                                    v_Vni) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vcg) 
                                                                    v_Vbj) 
                                                                    v_Vaj) 
                                                                    v_Vzi) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vti) 
                                                                    v_Vli) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    v_Vmi 
                                                                    v_Vej) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vni) 
                                                                    v_Vni) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vcg) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vyf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (v_Vhj:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vij:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (v_Vcj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    v_Vcg 
                                                                    v_Vcj) 
                                                                    (v_Vjj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vkj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vyf 
                                                                    v_Vkj) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vlj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vlj 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vpi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    v_Vpi) 
                                                                    (v_Vti:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (v_Vui:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vzi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vmj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (v_Vki:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    v_Vui 
                                                                    v_Vki) 
                                                                    (v_Vnj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vhi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vnj) 
                                                                    v_Vmj) 
                                                                    v_Vzi) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vti) 
                                                                    v_Vli) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Voj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    v_Voj) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vfj) 
                                                                    v_Vfj) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vgj) 
                                                                    v_Vjj) 
                                                                    v_Vij) 
                                                                    v_Vhj) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    (v_Vkj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vyf 
                                                                    v_Vkj)))) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                   v_Vwf) 
                                                                v_Vuf) 
                                                             (v_Vlg:
                                                              (zen.proof 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                              zen.Rand 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                (v_Vgg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                 v_Vmg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                   (v_Vng:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    v_Veg 
                                                                    v_Vtf) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                   v_Vmg) 
                                                                v_Vlg) v_Vnf) 
                                                          (v_Vpg:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.and 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                           zen.Rnotand 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_second_case 
                                                                    v_Vye))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                             (v_Vqg:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))))) =>
                                                              zen.Ror 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                                (v_Vuf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                   (v_Vvf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vwf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rcut 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) 
                                                                    (v_Vii:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    v_Vki:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    v_Vii) 
                                                                    (v_Vli:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    (v_Vmi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Voi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Voi 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vpi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vri:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    v_Vri 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vsi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vsi)) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    v_Vqi) 
                                                                    v_Vqi) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji)) 
                                                                    v_Vpi) 
                                                                    (v_Vti:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (v_Vui:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vzi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (v_Vaj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vki:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    v_Vui 
                                                                    v_Vki) 
                                                                    (v_Vbj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vcj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    v_Vcg 
                                                                    v_Vcj) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Voi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Voi 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    v_Vmi 
                                                                    v_Vej) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vni) 
                                                                    v_Vni) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vcg) 
                                                                    v_Vbj) 
                                                                    v_Vaj) 
                                                                    v_Vzi) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vti) 
                                                                    v_Vli) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    v_Vmi 
                                                                    v_Vej) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vni) 
                                                                    v_Vni) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vcg) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vyf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (v_Vhj:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vij:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (v_Vcj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    v_Vcg 
                                                                    v_Vcj) 
                                                                    (v_Vjj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vkj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vyf 
                                                                    v_Vkj) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vlj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vlj 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vpi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    v_Vpi) 
                                                                    (v_Vti:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (v_Vui:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vzi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vmj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (v_Vki:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    v_Vui 
                                                                    v_Vki) 
                                                                    (v_Vnj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vhi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vnj) 
                                                                    v_Vmj) 
                                                                    v_Vzi) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vti) 
                                                                    v_Vli) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Voj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    v_Voj) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vfj) 
                                                                    v_Vfj) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vgj) 
                                                                    v_Vjj) 
                                                                    v_Vij) 
                                                                    v_Vhj) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    (v_Vkj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vyf 
                                                                    v_Vkj)))) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                    v_Vwf) 
                                                                   v_Vuf) 
                                                                (v_Vlg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                   (v_Vgg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vmg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vng:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    v_Vng 
                                                                    v_Vqg) 
                                                                    v_Vmg) 
                                                                   v_Vlg) 
                                                                v_Vnf) 
                                                             (v_Vrg:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                              zen.Ror 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) 
                                                                (zen.and 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) 
                                                                (v_Vuf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                   (v_Vvf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vwf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vye)))) =>
                                                                    v_Vyf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rcut 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) 
                                                                    (v_Vii:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    v_Vki:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    v_Vii) 
                                                                    (v_Vli:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    (v_Vmi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Voi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Voi 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vpi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vri:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    v_Vri 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vsi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vsi)) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    v_Vqi) 
                                                                    v_Vqi) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji)) 
                                                                    v_Vpi) 
                                                                    (v_Vti:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (v_Vui:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vzi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (v_Vaj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vki:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    v_Vui 
                                                                    v_Vki) 
                                                                    (v_Vbj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vcj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    v_Vcg 
                                                                    v_Vcj) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Voi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Voi 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vji) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    v_Vmi 
                                                                    v_Vej) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vni) 
                                                                    v_Vni) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vcg) 
                                                                    v_Vbj) 
                                                                    v_Vaj) 
                                                                    v_Vzi) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vti) 
                                                                    v_Vli) 
                                                                    (v_Vni:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))) 
                                                                    v_Vmi 
                                                                    v_Vej) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vni) 
                                                                    v_Vni) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vcg) 
                                                                    (v_Vej:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vyf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (v_Vhj:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vij:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (v_Vcj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    v_Vcg 
                                                                    v_Vcj) 
                                                                    (v_Vjj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vkj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vyf 
                                                                    v_Vkj) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vxh:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vxh)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vlj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vlj 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vji:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) 
                                                                    (v_Vpi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))) 
                                                                    (v_Vqi:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vqi 
                                                                    v_Vji) 
                                                                    v_Vpi) 
                                                                    (v_Vti:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (v_Vui:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vvi 
                                                                    v_Vxi))))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vyi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vwi))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwi 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi)))))) 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (v_Vzi:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxi:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vxi))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Vmj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (v_Vki:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vue)))) 
                                                                    v_Vui 
                                                                    v_Vki) 
                                                                    (v_Vnj:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    (v_Vhi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vnj) 
                                                                    v_Vmj) 
                                                                    v_Vzi) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vti) 
                                                                    v_Vli) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vdj:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    v_Vdj) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (v_Voj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    v_Vye) 
                                                                    v_Voj) 
                                                                    (v_Vfj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)) 
                                                                    v_Vfj) 
                                                                    v_Vfj) 
                                                                    v_Vfj) 
                                                                    (v_Vgj:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vgj 
                                                                    v_Vhi) 
                                                                    v_Vgj) 
                                                                    v_Vjj) 
                                                                    v_Vij) 
                                                                    v_Vhj) 
                                                                    v_Vyi) 
                                                                    _p_A_equal_transitive) 
                                                                    (v_Vkj:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vwe) 
                                                                    (abst_first_term 
                                                                    v_Vye)))) 
                                                                    v_Vyf 
                                                                    v_Vkj)))) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                    v_Vwf) 
                                                                   v_Vuf) 
                                                                (v_Vlg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                 zen.Rand 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                   (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                   (v_Vgg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vmg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vng:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vye)))) =>
                                                                    v_Vog:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Ror 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vue)))) =>
                                                                    v_Vbg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vcg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    v_Vue) 
                                                                    (abst_first_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vqe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vqe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vqe))))) 
                                                                    v_Vwe 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_first_case 
                                                                    v_Vwe))) 
                                                                    v_Vvf 
                                                                    v_Vjg) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    v_Vig) 
                                                                    abst_case_exclusive) 
                                                                    v_Vbg) 
                                                                    v_Vzf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue))) 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vue)))) =>
                                                                    v_Vfg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.and 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rand 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_second_case 
                                                                    v_Vwe)))) =>
                                                                    v_Vhg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rcut 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) 
                                                                    (v_Vsg:
                                                                    (zen.proof 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    v_Vug:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    v_Vsg) 
                                                                    (v_Vvg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    (v_Vwg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vpj:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vpj)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vqj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vqj 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vah:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vrj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    v_Vrj 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vsj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vsj)) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    v_Vbh) 
                                                                    v_Vbh) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg)) 
                                                                    v_Vah) 
                                                                    (v_Veh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (v_Vfh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vkh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (v_Vlh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) 
                                                                    (v_Vug:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    v_Vfh 
                                                                    v_Vug) 
                                                                    (v_Vmh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (v_Vnh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    v_Vhg 
                                                                    v_Vnh) 
                                                                    (v_Vhg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vpj:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vpj)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vqj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vqj 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtg) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vtj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtj) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    v_Vwg 
                                                                    v_Vph) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vyg) 
                                                                    v_Vyg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vhg) 
                                                                    v_Vmh) 
                                                                    v_Vlh) 
                                                                    v_Vkh) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Veh) 
                                                                    v_Vvg) 
                                                                    (v_Vyg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vtj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtj) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))) 
                                                                    v_Vwg 
                                                                    v_Vph) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vyg) 
                                                                    v_Vyg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vhg) 
                                                                    (v_Vph:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vog:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (v_Vth:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vuh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (v_Vnh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vwe)))) 
                                                                    v_Vhg 
                                                                    v_Vnh) 
                                                                    (v_Vvh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vwh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vog 
                                                                    v_Vwh) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vpj:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vpj)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vuj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vuj 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vtg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) 
                                                                    (v_Vah:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))) 
                                                                    (v_Vbh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vbh 
                                                                    v_Vtg) 
                                                                    v_Vah) 
                                                                    (v_Veh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (v_Vfh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vgh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vgh 
                                                                    v_Vih))))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vjh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vhh:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vhh))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vhh 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih)))))) 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (v_Vkh:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vih:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vih))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vzh:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (v_Vug:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vue)))) 
                                                                    v_Vfh 
                                                                    v_Vug) 
                                                                    (v_Vai:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    (v_Vrg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vai) 
                                                                    v_Vzh) 
                                                                    v_Vkh) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Veh) 
                                                                    v_Vvg) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vtj:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    v_Vtj) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (v_Vbi:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    v_Vye) 
                                                                    v_Vbi) 
                                                                    (v_Vqh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)) 
                                                                    v_Vqh) 
                                                                    v_Vqh) 
                                                                    v_Vqh) 
                                                                    (v_Vrh:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vue) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vrh 
                                                                    v_Vrg) 
                                                                    v_Vrh) 
                                                                    v_Vvh) 
                                                                    v_Vuh) 
                                                                    v_Vth) 
                                                                    v_Vjh) 
                                                                    _p_B_equal_transitive) 
                                                                    (v_Vwh:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    v_Vwe) 
                                                                    (abst_second_term 
                                                                    v_Vye)))) 
                                                                    v_Vog 
                                                                    v_Vwh)))) 
                                                                    v_Vfg) 
                                                                    v_Vdg) 
                                                                    v_Vif) 
                                                                    v_Vmg) 
                                                                   v_Vlg) 
                                                                v_Vnf) v_Vpg) 
                                                          v_Vrf) v_Vci) v_Vqf) 
                                                 v_Vpf) 
                                              (v_Vvj:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vue 
                                                           v_Vye)))) =>
                                               v_Vwj:
                                               (zen.proof 
                                                  (zen.or 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_first_case 
                                                                 v_Vue))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_first_case 
                                                                    v_Vye))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vue) 
                                                                    (
                                                                    abst_first_term 
                                                                    v_Vye)))))) 
                                                     (zen.and 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_second_case 
                                                                 v_Vue))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_second_case 
                                                                    v_Vye))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vue) 
                                                                    (
                                                                    abst_second_term 
                                                                    v_Vye)))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vue 
                                                          v_Vye))) v_Vvj 
                                                 v_Vdf) v_Vof) v_Vef) 
                                        abst_equal_spec) v_Vkf) v_Vjf) 
                               abst_equal_spec) v_Vff) v_Vef) abst_equal_spec) 
                   v_Vbf) v_Vze) v_Vxe) v_Vve) v_Vte).

def Sum_set__first_case_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.imp (dk_logic.ebP (abst_first_case x)) 
                (dk_logic.ebP (abst_first_case y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  (__G_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) ->
    H_x:(dk_logic.eP (dk_logic.ebP (abst_first_case x))) ->
    dk_logic.eP (dk_logic.ebP (abst_first_case y))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
              (zen.imp 
                 (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                 (zen.triangle (focal.is_true (abst_first_case v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                     (zen.imp 
                        (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                        (zen.triangle (focal.is_true (abst_first_case v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                    (zen.triangle (focal.is_true (abst_first_case v_Vac))))))) 
        __G_1_LEMMA v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
     H_x:(dk_logic.eP (dk_logic.ebP (abst_first_case x))) =>
     (__G_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.not 
            (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
               (dk_logic.ebP (abst_second_case y))))) =>
      (__G_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
             (dk_logic.ebP (abst_first_case y)))) =>
       zen.nnpp (zen.triangle (focal.is_true (abst_first_case y))) 
         (v_Vzb:
          (zen.proof 
             (zen.not (zen.triangle (focal.is_true (abst_first_case y))))) =>
          zen.Rand (zen.triangle (focal.is_true (abst_first_case x))) 
            (zen.triangle (focal.is_true (abst_first_case y))) 
            (v_Vac:
             (zen.proof (zen.triangle (focal.is_true (abst_first_case x)))) =>
             v_Vbc:
             (zen.proof (zen.triangle (focal.is_true (abst_first_case y)))) =>
             zen.Raxiom (zen.triangle (focal.is_true (abst_first_case y))) 
               v_Vbc v_Vzb) __G_1_2_LEMMA)) 
        (zen.nnpp 
           (zen.and (zen.triangle (focal.is_true (abst_first_case x))) 
              (zen.triangle (focal.is_true (abst_first_case y)))) 
           (v_Vac:
            (zen.proof 
               (zen.not 
                  (zen.and 
                     (zen.triangle (focal.is_true (abst_first_case x))) 
                     (zen.triangle (focal.is_true (abst_first_case y)))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vbc) 
                                      (abst_first_term v_Vcc)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vbc) 
                                      (abst_second_term v_Vcc))))))))) x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle (focal.is_true (abst_equal x v_Vcc))) 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case v_Vcc))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term v_Vcc)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case v_Vcc))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term v_Vcc)))))))))) =>
               zen.Rall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal x v_Vcc))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term v_Vcc)))))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term v_Vcc)))))))) y 
                 (v_Vec:
                  (zen.proof 
                     (zen.eqv 
                        (zen.triangle (focal.is_true (abst_equal x y))) 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y))))))))) =>
                  zen.Requiv (zen.triangle (focal.is_true (abst_equal x y))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y)))))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y))))))) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal x y))))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.or 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (abst_first_case y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y)))))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (abst_second_case y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y))))))))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal x y))) H 
                       v_Vfc) 
                    (H:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_equal x y)))) =>
                     v_Vhc:
                     (zen.proof 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y)))))))) =>
                     zen.Ror 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y)))))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y)))))) 
                       (v_Vic:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y))))))) =>
                        zen.Rand 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y))))) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x)))) =>
                           v_Vkc:
                           (zen.proof 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y)))))) =>
                           zen.Rand 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y)))) 
                             (v_Vlc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y)))) =>
                              v_Vmc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y))))) =>
                              zen.Rnotand 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case x))) 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case y))) 
                                (v_Vnc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_first_case x))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case x))) 
                                   v_Vjc v_Vnc) 
                                (v_Voc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_first_case y))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case y))) 
                                   v_Vlc v_Voc) v_Vac) v_Vkc) v_Vic) 
                       (v_Vpc:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y))))))) =>
                        zen.Rand 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y))))) 
                          (v_Vqc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x)))) =>
                           v_Vrc:
                           (zen.proof 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y)))))) =>
                           zen.Rand 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y)))) 
                             (v_Vsc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y)))) =>
                              v_Vtc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y))))) =>
                              zen.Rnotand 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case x))) 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case y))) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_second_case x))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case x))) 
                                   v_Vqc v_Vuc) 
                                (v_Vvc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_second_case y))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case y))) 
                                   v_Vsc v_Vvc) __G_1_1_LEMMA) v_Vrc) v_Vpc) 
                       v_Vhc) v_Vec) v_Vdc) abst_equal_spec))) 
       (zen.nnpp 
          (zen.not 
             (zen.and (zen.triangle (focal.is_true (abst_second_case x))) 
                (zen.triangle (focal.is_true (abst_second_case y))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.not 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x))) 
                       (zen.triangle (focal.is_true (abst_second_case y))))))) =>
           zen.Rnotnot 
             (zen.and (zen.triangle (focal.is_true (abst_second_case x))) 
                (zen.triangle (focal.is_true (abst_second_case y)))) 
             (v_Vac:
              (zen.proof 
                 (zen.and 
                    (zen.triangle (focal.is_true (abst_second_case x))) 
                    (zen.triangle (focal.is_true (abst_second_case y))))) =>
              zen.Rand (zen.triangle (focal.is_true (abst_second_case x))) 
                (zen.triangle (focal.is_true (abst_second_case y))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_second_case x)))) =>
                 v_Vcc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_second_case y)))) =>
                 zen.Rall abst_T 
                   (v_Vdc:(zen.term abst_T) =>
                    zen.not 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vdc))) 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vdc))))) x 
                   (v_Vec:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x))) 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x)))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_first_case x))) 
                      (zen.triangle (focal.is_true (abst_second_case x))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_first_case x))) 
                         H_x v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_second_case x))) 
                         v_Vbc v_Vgc) v_Vec) abst_case_exclusive) v_Vac) 
             v_Vzb))).

def Sum_set__first_reverses :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_first_has_case:(dk_logic.eP 
                         (dk_logic.forall _p_A_T 
                            (x:(cc.eT _p_A_T) =>
                             dk_logic.ebP (abst_first_case (abst_first x))))) ->
  abst_first_reverses_term:(dk_logic.eP 
                              (dk_logic.forall _p_A_T 
                                 (x:(cc.eT _p_A_T) =>
                                  dk_logic.ebP 
                                    (_p_A_equal 
                                       (abst_first_term (abst_first x)) x)))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp (dk_logic.ebP (abst_first_case x)) 
          (dk_logic.exists _p_A_T 
             (x_a:(cc.eT _p_A_T) =>
              dk_logic.ebP (abst_equal (abst_first x_a) x)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_first_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_first_case (abst_first x))))) =>
  abst_first_reverses_term:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.ebP (_p_A_equal (abst_first_term (abst_first x)) x)))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  (__H_1_LEMMA:
   (x:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_first_case x))) ->
    dk_logic.eP 
      (dk_logic.ebP (abst_equal (abst_first (abst_first_term x)) x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.imp (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
           (zen.exists _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_first v_Vac) v_Vzb)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                  (zen.exists _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle 
                        (focal.is_true (abst_equal (abst_first v_Vac) v_Vzb)))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.imp (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
           (zen.exists _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_first v_Vac) v_Vzb))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.imp 
                  (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                  (zen.exists _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle 
                        (focal.is_true (abst_equal (abst_first v_Vac) v_Vcc))))))) =>
         zen.Rnotimply 
           (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
           (zen.exists _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_first v_Vac) v_Vcc)))) 
           (v_Vec:
            (zen.proof (zen.triangle (focal.is_true (abst_first_case v_Vcc)))) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.exists _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle 
                        (focal.is_true (abst_equal (abst_first v_Vac) v_Vcc)))))) =>
            zen.Rall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_first (abst_first_term v_Vzb)) v_Vzb)))) 
              v_Vcc 
              (v_Vgc:
               (zen.proof 
                  (zen.imp 
                     (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_first (abst_first_term v_Vcc)) 
                              v_Vcc))))) =>
               zen.Rimply 
                 (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_first (abst_first_term v_Vcc)) v_Vcc))) 
                 (v_Vhc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_first_case v_Vcc))))) =>
                  zen.Raxiom 
                    (zen.triangle (focal.is_true (abst_first_case v_Vcc))) 
                    v_Vec v_Vhc) 
                 (v_Vic:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_first (abst_first_term v_Vcc)) 
                              v_Vcc)))) =>
                  zen.Rnotex _p_A_T 
                    (v_Vac:(zen.term _p_A_T) =>
                     zen.triangle 
                       (focal.is_true (abst_equal (abst_first v_Vac) v_Vcc))) 
                    (abst_first_term v_Vcc) 
                    (v_Vjc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_first (abst_first_term v_Vcc)) 
                                    v_Vcc))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_first (abst_first_term v_Vcc)) v_Vcc))) 
                       v_Vic v_Vjc) v_Vfc) v_Vgc) __H_1_LEMMA) v_Vdc) v_Vbc)) 
    (x:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_first_case x))) =>
     (__H_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (_p_A_equal (abst_first_term (abst_first (abst_first_term x))) 
               (abst_first_term x)))) =>
      (__H_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (abst_first_case (abst_first (abst_first_term x))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true (abst_equal (abst_first (abst_first_term x)) x))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_first (abst_first_term x)) x))))) =>
          zen.Rall abst_T 
            (v_Vbc:(zen.term abst_T) =>
             zen.forall abst_T 
               (v_Vcc:(zen.term abst_T) =>
                zen.eqv 
                  (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                  (zen.or 
                     (zen.and 
                        (zen.triangle (focal.is_true (abst_first_case v_Vbc))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal (abst_first_term v_Vbc) 
                                    (abst_first_term v_Vcc)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (abst_second_case v_Vbc))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal (abst_second_term v_Vbc) 
                                    (abst_second_term v_Vcc))))))))) 
            (abst_first (abst_first_term x)) 
            (v_Vdc:
             (zen.proof 
                (zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_first (abst_first_term x)) 
                               v_Vcc))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case 
                                     (abst_first (abst_first_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term 
                                           (abst_first (abst_first_term x))) 
                                        (abst_first_term v_Vcc)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case 
                                     (abst_first (abst_first_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term 
                                           (abst_first (abst_first_term x))) 
                                        (abst_second_term v_Vcc)))))))))) =>
             zen.Rall abst_T 
               (v_Vcc:(zen.term abst_T) =>
                zen.eqv 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_first (abst_first_term x)) v_Vcc))) 
                  (zen.or 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_first_case 
                                 (abst_first (abst_first_term x))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_first_term v_Vcc)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_second_case 
                                 (abst_first (abst_first_term x))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_second_term v_Vcc)))))))) x 
               (v_Vec:
                (zen.proof 
                   (zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_first (abst_first_term x)) x))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case 
                                     (abst_first (abst_first_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term 
                                           (abst_first (abst_first_term x))) 
                                        (abst_first_term x)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case 
                                     (abst_first (abst_first_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term 
                                           (abst_first (abst_first_term x))) 
                                        (abst_second_term x))))))))) =>
                zen.Requiv 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_first (abst_first_term x)) x))) 
                  (zen.or 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_first_case 
                                 (abst_first (abst_first_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_first_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_first_term x)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_second_case 
                                 (abst_first (abst_first_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_second_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_second_term x))))))) 
                  (v_Vac:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_first (abst_first_term x)) x))))) =>
                   v_Vfc:
                   (zen.proof 
                      (zen.not 
                         (zen.or 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first (abst_first_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first (abst_first_term x))) 
                                           (abst_first_term x)))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_first (abst_first_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first (abst_first_term x))) 
                                           (abst_second_term x))))))))) =>
                   zen.Rnotor 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_first_case 
                                 (abst_first (abst_first_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_first_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_first_term x)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_second_case 
                                 (abst_first (abst_first_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_second_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_second_term x)))))) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first (abst_first_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first (abst_first_term x))) 
                                           (abst_first_term x)))))))) =>
                      v_Vhc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_first (abst_first_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first (abst_first_term x))) 
                                           (abst_second_term x)))))))) =>
                      zen.Rnotand 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_first_case 
                                 (abst_first (abst_first_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_first_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_first_term x))))) 
                        (v_Vic:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first (abst_first_term x))))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_first_case 
                                    (abst_first (abst_first_term x))))) 
                           __H_1_2_LEMMA v_Vic) 
                        (v_Vjc:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first (abst_first_term x))) 
                                           (abst_first_term x))))))) =>
                         zen.Rnotand 
                           (zen.triangle (focal.is_true (abst_first_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_first (abst_first_term x))) 
                                    (abst_first_term x)))) 
                           (v_Vkc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case x))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) H v_Vkc) 
                           (v_Vlc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first (abst_first_term x))) 
                                           (abst_first_term x)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term 
                                          (abst_first (abst_first_term x))) 
                                       (abst_first_term x)))) __H_1_1_LEMMA 
                              v_Vlc) v_Vjc) v_Vgc) v_Vfc) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_first (abst_first_term x)) x)))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case 
                                     (abst_first (abst_first_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term 
                                           (abst_first (abst_first_term x))) 
                                        (abst_first_term x)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case 
                                     (abst_first (abst_first_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term 
                                           (abst_first (abst_first_term x))) 
                                        (abst_second_term x)))))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_first (abst_first_term x)) x))) 
                     v_Vmc v_Vac) v_Vec) v_Vdc) abst_equal_spec)) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_first_case (abst_first (abst_first_term x))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_first_case (abst_first (abst_first_term x))))))) =>
            zen.Rall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.triangle 
                 (focal.is_true (abst_first_case (abst_first v_Vac)))) 
              (abst_first_term x) 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_first_case (abst_first (abst_first_term x)))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_first_case (abst_first (abst_first_term x))))) 
                 v_Vbc v_Vzb) abst_first_has_case))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (_p_A_equal 
                   (abst_first_term (abst_first (abst_first_term x))) 
                   (abst_first_term x)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (abst_first_term (abst_first (abst_first_term x))) 
                          (abst_first_term x)))))) =>
           zen.Rall _p_A_T 
             (v_Vac:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first_term (abst_first v_Vac)) v_Vac))) 
             (abst_first_term x) 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (abst_first_term (abst_first (abst_first_term x))) 
                          (abst_first_term x))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal 
                         (abst_first_term (abst_first (abst_first_term x))) 
                         (abst_first_term x)))) v_Vbc v_Vzb) 
             abst_first_reverses_term))).

def Sum_set__first_term_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x_1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (x_2:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_first_case x_1)) 
             (dk_logic.imp (dk_logic.ebP (abst_equal x_1 x_2)) 
                (dk_logic.ebP 
                   (_p_A_equal (abst_first_term x_1) (abst_first_term x_2)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  (__I_1_LEMMA:
   (x_1:(cc.eT abst_T) ->
    x_2:(cc.eT abst_T) ->
    H_1:(dk_logic.eP (dk_logic.ebP (abst_first_case x_1))) ->
    H_2:(dk_logic.eP (dk_logic.ebP (abst_equal x_1 x_2))) ->
    dk_logic.eP 
      (dk_logic.ebP (_p_A_equal (abst_first_term x_1) (abst_first_term x_2)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
              (zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_first_term v_Vzb) 
                          (abst_first_term v_Vac)))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_A_equal (abst_first_term v_Vzb) 
                                 (abst_first_term v_Vac)))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_first_case v_Vzb))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first_term v_Vzb) 
                             (abst_first_term v_Vac)))))))) __I_1_LEMMA v_Vbc)) 
    (x_1:(cc.eT abst_T) =>
     x_2:(cc.eT abst_T) =>
     H_1:(dk_logic.eP (dk_logic.ebP (abst_first_case x_1))) =>
     H_2:(dk_logic.eP (dk_logic.ebP (abst_equal x_1 x_2))) =>
     (__I_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.not 
            (dk_logic.and (dk_logic.ebP (abst_second_case x_1)) 
               (dk_logic.ebP (abst_second_case x_2))))) =>
      zen.nnpp 
        (zen.triangle 
           (focal.is_true 
              (_p_A_equal (abst_first_term x_1) (abst_first_term x_2)))) 
        (v_Vac:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (_p_A_equal (abst_first_term x_1) (abst_first_term x_2)))))) =>
         zen.Rall abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vcc:(zen.term abst_T) =>
               zen.eqv 
                 (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                 (zen.or 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case v_Vbc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term v_Vbc) 
                                   (abst_first_term v_Vcc)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case v_Vbc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term v_Vbc) 
                                   (abst_second_term v_Vcc))))))))) x_1 
           (v_Vdc:
            (zen.proof 
               (zen.forall abst_T 
                  (v_Vcc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle (focal.is_true (abst_equal x_1 v_Vcc))) 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case v_Vcc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term v_Vcc)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case v_Vcc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term v_Vcc)))))))))) =>
            zen.Rall abst_T 
              (v_Vcc:(zen.term abst_T) =>
               zen.eqv (zen.triangle (focal.is_true (abst_equal x_1 v_Vcc))) 
                 (zen.or 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term v_Vcc)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term v_Vcc)))))))) x_2 
              (v_Vec:
               (zen.proof 
                  (zen.eqv 
                     (zen.triangle (focal.is_true (abst_equal x_1 x_2))) 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2))))))))) =>
               zen.Requiv 
                 (zen.triangle (focal.is_true (abst_equal x_1 x_2))) 
                 (zen.or 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2))))))) 
                 (v_Vfc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_equal x_1 x_2))))) =>
                  v_Vgc:
                  (zen.proof 
                     (zen.not 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_1))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case x_2))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x_1) 
                                          (abst_first_term x_2)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_1))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case x_2))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x_1) 
                                          (abst_second_term x_2))))))))) =>
                  zen.Raxiom 
                    (zen.triangle (focal.is_true (abst_equal x_1 x_2))) H_2 
                    v_Vfc) 
                 (H_2:
                  (zen.proof 
                     (zen.triangle (focal.is_true (abst_equal x_1 x_2)))) =>
                  v_Vhc:
                  (zen.proof 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2)))))))) =>
                  zen.Ror 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2)))))) 
                    (v_Vic:
                     (zen.proof 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2))))))) =>
                     zen.Rand 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2))))) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1)))) =>
                        v_Vkc:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2)))))) =>
                        zen.Rand 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2)))) 
                          (v_Vlc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2)))) =>
                           v_Vmc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x_1) 
                                      (abst_first_term x_2)))) v_Vmc v_Vac) 
                          v_Vkc) v_Vic) 
                    (v_Vnc:
                     (zen.proof 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2))))))) =>
                     zen.Rand 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2))))) 
                       (v_Voc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1)))) =>
                        v_Vpc:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2)))))) =>
                        zen.Rand 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2)))) 
                          (v_Vqc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2)))) =>
                           v_Vrc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2))))) =>
                           zen.Rnotand 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x_1))) 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x_2))) 
                             (v_Vsc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_second_case x_1))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case x_1))) 
                                v_Voc v_Vsc) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_second_case x_2))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case x_2))) 
                                v_Vqc v_Vtc) __I_1_1_LEMMA) v_Vpc) v_Vnc) 
                    v_Vhc) v_Vec) v_Vdc) abst_equal_spec)) 
       (zen.nnpp 
          (zen.not 
             (zen.and (zen.triangle (focal.is_true (abst_second_case x_1))) 
                (zen.triangle (focal.is_true (abst_second_case x_2))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.not 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.triangle (focal.is_true (abst_second_case x_2))))))) =>
           zen.Rnotnot 
             (zen.and (zen.triangle (focal.is_true (abst_second_case x_1))) 
                (zen.triangle (focal.is_true (abst_second_case x_2)))) 
             (v_Vac:
              (zen.proof 
                 (zen.and 
                    (zen.triangle (focal.is_true (abst_second_case x_1))) 
                    (zen.triangle (focal.is_true (abst_second_case x_2))))) =>
              zen.Rand (zen.triangle (focal.is_true (abst_second_case x_1))) 
                (zen.triangle (focal.is_true (abst_second_case x_2))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_second_case x_1)))) =>
                 v_Vcc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_second_case x_2)))) =>
                 zen.Rall abst_T 
                   (v_Vdc:(zen.term abst_T) =>
                    zen.not 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vdc))) 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vdc))))) x_1 
                   (v_Vec:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x_1))) 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x_1)))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_first_case x_1))) 
                      (zen.triangle (focal.is_true (abst_second_case x_1))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x_1))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_first_case x_1))) 
                         H_1 v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x_1))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_second_case x_1))) 
                         v_Vbc v_Vgc) v_Vec) abst_case_exclusive) v_Vac) 
             v_Vzb))).

def Sum_set__second_case_subtitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.imp (dk_logic.ebP (abst_second_case x)) 
                (dk_logic.ebP (abst_second_case y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  (__J_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) ->
    H_x:(dk_logic.eP (dk_logic.ebP (abst_second_case x))) ->
    dk_logic.eP (dk_logic.ebP (abst_second_case y))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
              (zen.imp 
                 (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                 (zen.triangle (focal.is_true (abst_second_case v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_second_case v_Vzb))) 
                        (zen.triangle 
                           (focal.is_true (abst_second_case v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                    (zen.triangle (focal.is_true (abst_second_case v_Vac))))))) 
        __J_1_LEMMA v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
     H_x:(dk_logic.eP (dk_logic.ebP (abst_second_case x))) =>
     (__J_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.not 
            (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
               (dk_logic.ebP (abst_first_case y))))) =>
      (__J_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
             (dk_logic.ebP (abst_second_case y)))) =>
       zen.nnpp (zen.triangle (focal.is_true (abst_second_case y))) 
         (v_Vzb:
          (zen.proof 
             (zen.not (zen.triangle (focal.is_true (abst_second_case y))))) =>
          zen.Rand (zen.triangle (focal.is_true (abst_second_case x))) 
            (zen.triangle (focal.is_true (abst_second_case y))) 
            (v_Vac:
             (zen.proof (zen.triangle (focal.is_true (abst_second_case x)))) =>
             v_Vbc:
             (zen.proof (zen.triangle (focal.is_true (abst_second_case y)))) =>
             zen.Raxiom (zen.triangle (focal.is_true (abst_second_case y))) 
               v_Vbc v_Vzb) __J_1_2_LEMMA)) 
        (zen.nnpp 
           (zen.and (zen.triangle (focal.is_true (abst_second_case x))) 
              (zen.triangle (focal.is_true (abst_second_case y)))) 
           (v_Vac:
            (zen.proof 
               (zen.not 
                  (zen.and 
                     (zen.triangle (focal.is_true (abst_second_case x))) 
                     (zen.triangle (focal.is_true (abst_second_case y)))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term v_Vbc) 
                                      (abst_first_term v_Vcc)))))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term v_Vbc) 
                                      (abst_second_term v_Vcc))))))))) x 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle (focal.is_true (abst_equal x v_Vcc))) 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case v_Vcc))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term v_Vcc)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case v_Vcc))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term v_Vcc)))))))))) =>
               zen.Rall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal x v_Vcc))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term v_Vcc)))))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term v_Vcc)))))))) y 
                 (v_Vec:
                  (zen.proof 
                     (zen.eqv 
                        (zen.triangle (focal.is_true (abst_equal x y))) 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y))))))))) =>
                  zen.Requiv (zen.triangle (focal.is_true (abst_equal x y))) 
                    (zen.or 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y)))))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y))))))) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal x y))))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.or 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (abst_first_case y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y)))))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case x))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (abst_second_case y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y))))))))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal x y))) H 
                       v_Vfc) 
                    (H:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_equal x y)))) =>
                     v_Vhc:
                     (zen.proof 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y)))))))) =>
                     zen.Ror 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y)))))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y)))))) 
                       (v_Vic:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y))))))) =>
                        zen.Rand 
                          (zen.triangle (focal.is_true (abst_first_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y))))) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x)))) =>
                           v_Vkc:
                           (zen.proof 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y)))))) =>
                           zen.Rand 
                             (zen.triangle 
                                (focal.is_true (abst_first_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first_term x) 
                                      (abst_first_term y)))) 
                             (v_Vlc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case y)))) =>
                              v_Vmc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x) 
                                          (abst_first_term y))))) =>
                              zen.Rnotand 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case x))) 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case y))) 
                                (v_Vnc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_first_case x))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case x))) 
                                   v_Vjc v_Vnc) 
                                (v_Voc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_first_case y))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case y))) 
                                   v_Vlc v_Voc) __J_1_1_LEMMA) v_Vkc) v_Vic) 
                       (v_Vpc:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y))))))) =>
                        zen.Rand 
                          (zen.triangle (focal.is_true (abst_second_case x))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y))))) 
                          (v_Vqc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x)))) =>
                           v_Vrc:
                           (zen.proof 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y)))))) =>
                           zen.Rand 
                             (zen.triangle 
                                (focal.is_true (abst_second_case y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x) 
                                      (abst_second_term y)))) 
                             (v_Vsc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case y)))) =>
                              v_Vtc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x) 
                                          (abst_second_term y))))) =>
                              zen.Rnotand 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case x))) 
                                (zen.triangle 
                                   (focal.is_true (abst_second_case y))) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_second_case x))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case x))) 
                                   v_Vqc v_Vuc) 
                                (v_Vvc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_second_case y))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case y))) 
                                   v_Vsc v_Vvc) v_Vac) v_Vrc) v_Vpc) v_Vhc) 
                    v_Vec) v_Vdc) abst_equal_spec))) 
       (zen.nnpp 
          (zen.not 
             (zen.and (zen.triangle (focal.is_true (abst_first_case x))) 
                (zen.triangle (focal.is_true (abst_first_case y))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.not 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x))) 
                       (zen.triangle (focal.is_true (abst_first_case y))))))) =>
           zen.Rnotnot 
             (zen.and (zen.triangle (focal.is_true (abst_first_case x))) 
                (zen.triangle (focal.is_true (abst_first_case y)))) 
             (v_Vac:
              (zen.proof 
                 (zen.and (zen.triangle (focal.is_true (abst_first_case x))) 
                    (zen.triangle (focal.is_true (abst_first_case y))))) =>
              zen.Rand (zen.triangle (focal.is_true (abst_first_case x))) 
                (zen.triangle (focal.is_true (abst_first_case y))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_first_case x)))) =>
                 v_Vcc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_first_case y)))) =>
                 zen.Rall abst_T 
                   (v_Vdc:(zen.term abst_T) =>
                    zen.not 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vdc))) 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vdc))))) x 
                   (v_Vec:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x))) 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x)))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_first_case x))) 
                      (zen.triangle (focal.is_true (abst_second_case x))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_first_case x))) 
                         v_Vbc v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_second_case x))) 
                         H_x v_Vgc) v_Vec) abst_case_exclusive) v_Vac) v_Vzb))).

def Sum_set__second_reverses :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_second_has_case:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (abst_second_case (abst_second x))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_reverses_term:(dk_logic.eP 
                               (dk_logic.forall _p_B_T 
                                  (x:(cc.eT _p_B_T) =>
                                   dk_logic.ebP 
                                     (_p_B_equal 
                                        (abst_second_term (abst_second x)) x)))) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.imp (dk_logic.ebP (abst_second_case x)) 
          (dk_logic.exists _p_B_T 
             (x_b:(cc.eT _p_B_T) =>
              dk_logic.ebP (abst_equal (abst_second x_b) x)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_second_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (abst_second_case (abst_second x))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_reverses_term:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.ebP (_p_B_equal (abst_second_term (abst_second x)) x)))) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  (__K_1_LEMMA:
   (x:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_second_case x))) ->
    dk_logic.eP 
      (dk_logic.ebP (abst_equal (abst_second (abst_second_term x)) x))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.imp (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
           (zen.exists _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_second v_Vac) v_Vzb)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.imp 
                  (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                  (zen.exists _p_B_T 
                     (v_Vac:(zen.term _p_B_T) =>
                      zen.triangle 
                        (focal.is_true (abst_equal (abst_second v_Vac) v_Vzb)))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.imp (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
           (zen.exists _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_second v_Vac) v_Vzb))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.imp 
                  (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                  (zen.exists _p_B_T 
                     (v_Vac:(zen.term _p_B_T) =>
                      zen.triangle 
                        (focal.is_true (abst_equal (abst_second v_Vac) v_Vcc))))))) =>
         zen.Rnotimply 
           (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
           (zen.exists _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_second v_Vac) v_Vcc)))) 
           (v_Vec:
            (zen.proof 
               (zen.triangle (focal.is_true (abst_second_case v_Vcc)))) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.exists _p_B_T 
                     (v_Vac:(zen.term _p_B_T) =>
                      zen.triangle 
                        (focal.is_true (abst_equal (abst_second v_Vac) v_Vcc)))))) =>
            zen.Rall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_second (abst_second_term v_Vzb)) 
                          v_Vzb)))) v_Vcc 
              (v_Vgc:
               (zen.proof 
                  (zen.imp 
                     (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_second (abst_second_term v_Vcc)) v_Vcc))))) =>
               zen.Rimply 
                 (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_second (abst_second_term v_Vcc)) 
                          v_Vcc))) 
                 (v_Vhc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true (abst_second_case v_Vcc))))) =>
                  zen.Raxiom 
                    (zen.triangle (focal.is_true (abst_second_case v_Vcc))) 
                    v_Vec v_Vhc) 
                 (v_Vic:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_second (abst_second_term v_Vcc)) v_Vcc)))) =>
                  zen.Rnotex _p_B_T 
                    (v_Vac:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true (abst_equal (abst_second v_Vac) v_Vcc))) 
                    (abst_second_term v_Vcc) 
                    (v_Vjc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_second (abst_second_term v_Vcc)) 
                                    v_Vcc))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_second (abst_second_term v_Vcc)) v_Vcc))) 
                       v_Vic v_Vjc) v_Vfc) v_Vgc) __K_1_LEMMA) v_Vdc) v_Vbc)) 
    (x:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_second_case x))) =>
     (__K_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (_p_B_equal 
               (abst_second_term (abst_second (abst_second_term x))) 
               (abst_second_term x)))) =>
      (__K_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (abst_second_case (abst_second (abst_second_term x))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true (abst_equal (abst_second (abst_second_term x)) x))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_second (abst_second_term x)) x))))) =>
          zen.Rall abst_T 
            (v_Vbc:(zen.term abst_T) =>
             zen.forall abst_T 
               (v_Vcc:(zen.term abst_T) =>
                zen.eqv 
                  (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                  (zen.or 
                     (zen.and 
                        (zen.triangle (focal.is_true (abst_first_case v_Vbc))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal (abst_first_term v_Vbc) 
                                    (abst_first_term v_Vcc)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (abst_second_case v_Vbc))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal (abst_second_term v_Vbc) 
                                    (abst_second_term v_Vcc))))))))) 
            (abst_second (abst_second_term x)) 
            (v_Vdc:
             (zen.proof 
                (zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_second (abst_second_term x)) 
                               v_Vcc))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case 
                                     (abst_second (abst_second_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term 
                                           (abst_second (abst_second_term x))) 
                                        (abst_first_term v_Vcc)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case 
                                     (abst_second (abst_second_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vcc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term 
                                           (abst_second (abst_second_term x))) 
                                        (abst_second_term v_Vcc)))))))))) =>
             zen.Rall abst_T 
               (v_Vcc:(zen.term abst_T) =>
                zen.eqv 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_second (abst_second_term x)) v_Vcc))) 
                  (zen.or 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_first_case 
                                 (abst_second (abst_second_term x))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_first_term v_Vcc)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_second_case 
                                 (abst_second (abst_second_term x))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_second_term v_Vcc)))))))) x 
               (v_Vec:
                (zen.proof 
                   (zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_second (abst_second_term x)) x))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case 
                                     (abst_second (abst_second_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term 
                                           (abst_second (abst_second_term x))) 
                                        (abst_first_term x)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case 
                                     (abst_second (abst_second_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term 
                                           (abst_second (abst_second_term x))) 
                                        (abst_second_term x))))))))) =>
                zen.Requiv 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_second (abst_second_term x)) x))) 
                  (zen.or 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_first_case 
                                 (abst_second (abst_second_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_first_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_first_term x)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_second_case 
                                 (abst_second (abst_second_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_second_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_second_term x))))))) 
                  (v_Vac:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_second (abst_second_term x)) x))))) =>
                   v_Vfc:
                   (zen.proof 
                      (zen.not 
                         (zen.or 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_second (abst_second_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_second 
                                                 (abst_second_term x))) 
                                           (abst_first_term x)))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_second (abst_second_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_second 
                                                 (abst_second_term x))) 
                                           (abst_second_term x))))))))) =>
                   zen.Rnotor 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_first_case 
                                 (abst_second (abst_second_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_first_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (abst_first_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_first_term x)))))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_second_case 
                                 (abst_second (abst_second_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_second_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_second_term x)))))) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_second (abst_second_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_second 
                                                 (abst_second_term x))) 
                                           (abst_first_term x)))))))) =>
                      v_Vhc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_second (abst_second_term x))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_second 
                                                 (abst_second_term x))) 
                                           (abst_second_term x)))))))) =>
                      zen.Rnotand 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_second_case 
                                 (abst_second (abst_second_term x))))) 
                        (zen.and 
                           (zen.triangle (focal.is_true (abst_second_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_second_term x))))) 
                        (v_Vic:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_second (abst_second_term x))))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case 
                                    (abst_second (abst_second_term x))))) 
                           __K_1_2_LEMMA v_Vic) 
                        (v_Vjc:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_second 
                                                 (abst_second_term x))) 
                                           (abst_second_term x))))))) =>
                         zen.Rnotand 
                           (zen.triangle (focal.is_true (abst_second_case x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (abst_second_term 
                                       (abst_second (abst_second_term x))) 
                                    (abst_second_term x)))) 
                           (v_Vkc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case x))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x))) H 
                              v_Vkc) 
                           (v_Vlc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_second 
                                                 (abst_second_term x))) 
                                           (abst_second_term x)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term 
                                          (abst_second (abst_second_term x))) 
                                       (abst_second_term x)))) __K_1_1_LEMMA 
                              v_Vlc) v_Vjc) v_Vhc) v_Vfc) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_second (abst_second_term x)) x)))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case 
                                     (abst_second (abst_second_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term 
                                           (abst_second (abst_second_term x))) 
                                        (abst_first_term x)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case 
                                     (abst_second (abst_second_term x))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case x))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term 
                                           (abst_second (abst_second_term x))) 
                                        (abst_second_term x)))))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_second (abst_second_term x)) x))) 
                     v_Vmc v_Vac) v_Vec) v_Vdc) abst_equal_spec)) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_second_case (abst_second (abst_second_term x))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_second_case (abst_second (abst_second_term x))))))) =>
            zen.Rall _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.triangle 
                 (focal.is_true (abst_second_case (abst_second v_Vac)))) 
              (abst_second_term x) 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_second_case (abst_second (abst_second_term x)))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_second_case (abst_second (abst_second_term x))))) 
                 v_Vbc v_Vzb) abst_second_has_case))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (_p_B_equal 
                   (abst_second_term (abst_second (abst_second_term x))) 
                   (abst_second_term x)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (abst_second_term 
                             (abst_second (abst_second_term x))) 
                          (abst_second_term x)))))) =>
           zen.Rall _p_B_T 
             (v_Vac:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second_term (abst_second v_Vac)) v_Vac))) 
             (abst_second_term x) 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (abst_second_term 
                             (abst_second (abst_second_term x))) 
                          (abst_second_term x))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal 
                         (abst_second_term (abst_second (abst_second_term x))) 
                         (abst_second_term x)))) v_Vbc v_Vzb) 
             abst_second_reverses_term))).

def Sum_set__second_term_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x_1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (x_2:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_second_case x_1)) 
             (dk_logic.imp (dk_logic.ebP (abst_equal x_1 x_2)) 
                (dk_logic.ebP 
                   (_p_B_equal (abst_second_term x_1) (abst_second_term x_2)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  (__L_1_LEMMA:
   (x_1:(cc.eT abst_T) ->
    x_2:(cc.eT abst_T) ->
    H_1:(dk_logic.eP (dk_logic.ebP (abst_second_case x_1))) ->
    H_2:(dk_logic.eP (dk_logic.ebP (abst_equal x_1 x_2))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (_p_B_equal (abst_second_term x_1) (abst_second_term x_2)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
              (zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_second_term v_Vzb) 
                          (abst_second_term v_Vac)))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_second_term v_Vzb) 
                                 (abst_second_term v_Vac)))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_second_case v_Vzb))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second_term v_Vzb) 
                             (abst_second_term v_Vac)))))))) __L_1_LEMMA 
        v_Vbc)) 
    (x_1:(cc.eT abst_T) =>
     x_2:(cc.eT abst_T) =>
     H_1:(dk_logic.eP (dk_logic.ebP (abst_second_case x_1))) =>
     H_2:(dk_logic.eP (dk_logic.ebP (abst_equal x_1 x_2))) =>
     (__L_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.not 
            (dk_logic.and (dk_logic.ebP (abst_first_case x_1)) 
               (dk_logic.ebP (abst_first_case x_2))))) =>
      zen.nnpp 
        (zen.triangle 
           (focal.is_true 
              (_p_B_equal (abst_second_term x_1) (abst_second_term x_2)))) 
        (v_Vac:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal (abst_second_term x_1) 
                        (abst_second_term x_2)))))) =>
         zen.Rall abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vcc:(zen.term abst_T) =>
               zen.eqv 
                 (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                 (zen.or 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case v_Vbc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term v_Vbc) 
                                   (abst_first_term v_Vcc)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case v_Vbc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term v_Vbc) 
                                   (abst_second_term v_Vcc))))))))) x_1 
           (v_Vdc:
            (zen.proof 
               (zen.forall abst_T 
                  (v_Vcc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle (focal.is_true (abst_equal x_1 v_Vcc))) 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case v_Vcc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term v_Vcc)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case v_Vcc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term v_Vcc)))))))))) =>
            zen.Rall abst_T 
              (v_Vcc:(zen.term abst_T) =>
               zen.eqv (zen.triangle (focal.is_true (abst_equal x_1 v_Vcc))) 
                 (zen.or 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term v_Vcc)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term v_Vcc)))))))) x_2 
              (v_Vec:
               (zen.proof 
                  (zen.eqv 
                     (zen.triangle (focal.is_true (abst_equal x_1 x_2))) 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2))))))))) =>
               zen.Requiv 
                 (zen.triangle (focal.is_true (abst_equal x_1 x_2))) 
                 (zen.or 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2))))))) 
                 (v_Vfc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_equal x_1 x_2))))) =>
                  v_Vgc:
                  (zen.proof 
                     (zen.not 
                        (zen.or 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_1))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_first_case x_2))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal (abst_first_term x_1) 
                                          (abst_first_term x_2)))))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_1))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (abst_second_case x_2))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (abst_second_term x_1) 
                                          (abst_second_term x_2))))))))) =>
                  zen.Raxiom 
                    (zen.triangle (focal.is_true (abst_equal x_1 x_2))) H_2 
                    v_Vfc) 
                 (H_2:
                  (zen.proof 
                     (zen.triangle (focal.is_true (abst_equal x_1 x_2)))) =>
                  v_Vhc:
                  (zen.proof 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2)))))))) =>
                  zen.Ror 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2)))))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2)))))) 
                    (v_Vic:
                     (zen.proof 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2))))))) =>
                     zen.Rand 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2))))) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_first_case x_1)))) =>
                        v_Vkc:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2)))))) =>
                        zen.Rand 
                          (zen.triangle (focal.is_true (abst_first_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first_term x_1) 
                                   (abst_first_term x_2)))) 
                          (v_Vlc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case x_2)))) =>
                           v_Vmc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term x_1) 
                                       (abst_first_term x_2))))) =>
                           zen.Rnotand 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x_1))) 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x_2))) 
                             (v_Vnc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_first_case x_1))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case x_1))) 
                                v_Vjc v_Vnc) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_first_case x_2))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_first_case x_2))) 
                                v_Vlc v_Voc) __L_1_1_LEMMA) v_Vkc) v_Vic) 
                    (v_Vpc:
                     (zen.proof 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2))))))) =>
                     zen.Rand 
                       (zen.triangle (focal.is_true (abst_second_case x_1))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2))))) 
                       (v_Vqc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_second_case x_1)))) =>
                        v_Vrc:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2)))))) =>
                        zen.Rand 
                          (zen.triangle 
                             (focal.is_true (abst_second_case x_2))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second_term x_1) 
                                   (abst_second_term x_2)))) 
                          (v_Vsc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case x_2)))) =>
                           v_Vtc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term x_1) 
                                       (abst_second_term x_2))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second_term x_1) 
                                      (abst_second_term x_2)))) v_Vtc v_Vac) 
                          v_Vrc) v_Vpc) v_Vhc) v_Vec) v_Vdc) abst_equal_spec)) 
       (zen.nnpp 
          (zen.not 
             (zen.and (zen.triangle (focal.is_true (abst_first_case x_1))) 
                (zen.triangle (focal.is_true (abst_first_case x_2))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.not 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_first_case x_1))) 
                       (zen.triangle (focal.is_true (abst_first_case x_2))))))) =>
           zen.Rnotnot 
             (zen.and (zen.triangle (focal.is_true (abst_first_case x_1))) 
                (zen.triangle (focal.is_true (abst_first_case x_2)))) 
             (v_Vac:
              (zen.proof 
                 (zen.and 
                    (zen.triangle (focal.is_true (abst_first_case x_1))) 
                    (zen.triangle (focal.is_true (abst_first_case x_2))))) =>
              zen.Rand (zen.triangle (focal.is_true (abst_first_case x_1))) 
                (zen.triangle (focal.is_true (abst_first_case x_2))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_first_case x_1)))) =>
                 v_Vcc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_first_case x_2)))) =>
                 zen.Rall abst_T 
                   (v_Vdc:(zen.term abst_T) =>
                    zen.not 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (abst_first_case v_Vdc))) 
                         (zen.triangle 
                            (focal.is_true (abst_second_case v_Vdc))))) x_1 
                   (v_Vec:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x_1))) 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x_1)))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_first_case x_1))) 
                      (zen.triangle (focal.is_true (abst_second_case x_1))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_first_case x_1))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_first_case x_1))) 
                         v_Vbc v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_second_case x_1))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_second_case x_1))) 
                         H_1 v_Vgc) v_Vec) abst_case_exclusive) v_Vac) v_Vzb))).

def Sum_set__first_is_injective :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_first_has_case:(dk_logic.eP 
                         (dk_logic.forall _p_A_T 
                            (x:(cc.eT _p_A_T) =>
                             dk_logic.ebP (abst_first_case (abst_first x))))) ->
  abst_first_reverses_term:(dk_logic.eP 
                              (dk_logic.forall _p_A_T 
                                 (x:(cc.eT _p_A_T) =>
                                  dk_logic.ebP 
                                    (_p_A_equal 
                                       (abst_first_term (abst_first x)) x)))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x_1:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (x_2:(cc.eT abst_T) =>
                                              dk_logic.imp 
                                                (dk_logic.ebP 
                                                   (abst_first_case x_1)) 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x_1 x_2)) 
                                                   (dk_logic.ebP 
                                                      (_p_A_equal 
                                                         (abst_first_term x_1) 
                                                         (abst_first_term x_2)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall _p_A_T 
          (y:(cc.eT _p_A_T) =>
           dk_logic.imp 
             (dk_logic.ebP (abst_equal (abst_first x) (abst_first y))) 
             (dk_logic.ebP (_p_A_equal x y)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_first_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_first_case (abst_first x))))) =>
  abst_first_reverses_term:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.ebP (_p_A_equal (abst_first_term (abst_first x)) x)))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x_1:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (x_2:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_first_case x_1)) 
              (dk_logic.imp (dk_logic.ebP (abst_equal x_1 x_2)) 
                 (dk_logic.ebP 
                    (_p_A_equal (abst_first_term x_1) (abst_first_term x_2)))))))) =>
  (__M_1_LEMMA:
   (x:(cc.eT _p_A_T) ->
    y:(cc.eT _p_A_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_equal (abst_first x) (abst_first y)))) ->
    dk_logic.eP (dk_logic.ebP (_p_A_equal x y))) =>
   zen.nnpp 
     (zen.forall _p_A_T 
        (v_Vzb:(zen.term _p_A_T) =>
         zen.forall _p_A_T 
           (v_Vac:(zen.term _p_A_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_first v_Vzb) (abst_first v_Vac)))) 
              (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_A_T 
               (v_Vzb:(zen.term _p_A_T) =>
                zen.forall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_first v_Vzb) (abst_first v_Vac)))) 
                     (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac)))))))) =>
      zen.Raxiom 
        (zen.forall _p_A_T 
           (v_Vzb:(zen.term _p_A_T) =>
            zen.forall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_first v_Vzb) (abst_first v_Vac)))) 
                 (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac)))))) 
        __M_1_LEMMA v_Vbc)) 
    (x:(cc.eT _p_A_T) =>
     y:(cc.eT _p_A_T) =>
     H:
     (dk_logic.eP (dk_logic.ebP (abst_equal (abst_first x) (abst_first y)))) =>
     (__M_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (_p_A_equal (abst_first_term (abst_first x)) x))) =>
      (__M_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (_p_A_equal (abst_first_term (abst_first y)) y))) =>
       (__M_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (_p_A_equal (abst_first_term (abst_first x)) 
                 (abst_first_term (abst_first y))))) =>
        zen.nnpp (zen.triangle (focal.is_true (_p_A_equal x y))) 
          (v_Vvc:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (_p_A_equal x y))))) =>
           zen.Rall _p_A_T 
             (v_Vwc:(zen.term _p_A_T) =>
              zen.forall _p_A_T 
                (v_Vxc:(zen.term _p_A_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vwc v_Vxc))) 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vxc v_Vwc))))) 
             y 
             (v_Vyc:
              (zen.proof 
                 (zen.forall _p_A_T 
                    (v_Vxc:(zen.term _p_A_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_A_equal y v_Vxc))) 
                       (zen.triangle (focal.is_true (_p_A_equal v_Vxc y)))))) =>
              zen.Rall _p_A_T 
                (v_Vxc:(zen.term _p_A_T) =>
                 zen.imp (zen.triangle (focal.is_true (_p_A_equal y v_Vxc))) 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vxc y)))) x 
                (v_Vzc:
                 (zen.proof 
                    (zen.imp (zen.triangle (focal.is_true (_p_A_equal y x))) 
                       (zen.triangle (focal.is_true (_p_A_equal x y))))) =>
                 zen.Rimply (zen.triangle (focal.is_true (_p_A_equal y x))) 
                   (zen.triangle (focal.is_true (_p_A_equal x y))) 
                   (v_Vad:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_A_equal y x))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_A_T y 
                                  (abst_first_term (abst_first x))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal y 
                                     (abst_first_term (abst_first x))))))) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_A_T y 
                                      (abst_first_term (abst_first x))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal y 
                                         (abst_first_term (abst_first x)))))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_A_T y 
                                  (abst_first_term (abst_first x))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal y 
                                     (abst_first_term (abst_first x)))))) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_A_T y 
                                      (abst_first_term (abst_first x)))))) =>
                          v_Vdd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal y 
                                         (abst_first_term (abst_first x))))))) =>
                          zen.Rall _p_A_T 
                            (v_Vwc:(zen.term _p_A_T) =>
                             zen.forall _p_A_T 
                               (v_Vxc:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_A_equal v_Vwc v_Vxc))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_A_equal v_Vxc v_Vwc))))) 
                            (abst_first_term (abst_first x)) 
                            (v_Ved:
                             (zen.proof 
                                (zen.forall _p_A_T 
                                   (v_Vxc:(zen.term _p_A_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_first_term 
                                                  (abst_first x)) v_Vxc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Vxc 
                                               (abst_first_term 
                                                  (abst_first x)))))))) =>
                             zen.Rall _p_A_T 
                               (v_Vxc:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term (abst_first x)) 
                                           v_Vxc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal v_Vxc 
                                           (abst_first_term (abst_first x)))))) 
                               y 
                               (v_Vfd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_first_term 
                                                  (abst_first x)) y))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal y 
                                               (abst_first_term 
                                                  (abst_first x))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term (abst_first x)) y))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal y 
                                           (abst_first_term (abst_first x))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first_term 
                                                     (abst_first x)) y))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first_term 
                                                    (abst_first x)) 
                                                 (abst_first_term 
                                                    (abst_first x))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first x)) 
                                                    (abst_first_term 
                                                       (abst_first x))))))) 
                                     (v_Vhd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (abst_first_term 
                                                        (abst_first x)) 
                                                     (abst_first_term 
                                                        (abst_first x))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        (abst_first_term 
                                                           (abst_first x)))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first_term 
                                                    (abst_first x)) 
                                                 (abst_first_term 
                                                    (abst_first x))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first x)) 
                                                    (abst_first_term 
                                                       (abst_first x)))))) 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (abst_first_term 
                                                        (abst_first x)) 
                                                     (abst_first_term 
                                                        (abst_first x)))))) =>
                                         v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        (abst_first_term 
                                                           (abst_first x))))))) =>
                                         zen.Rnoteq _p_A_T 
                                           (abst_first_term (abst_first x)) 
                                           v_Vid) v_Vhd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        (abst_first_term 
                                                           (abst_first x))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              (abst_first x)) 
                                                           (abst_first_term 
                                                              (abst_first x))))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal _p_A_T 
                                              (abst_first_term (abst_first y)) 
                                              y)) 
                                        (v_Vld:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_A_T 
                                                  (abst_first_term 
                                                     (abst_first y)) y))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vmd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vmd)) 
                                           (_p_A_equal 
                                              (abst_first_term (abst_first x)) 
                                              (abst_first_term (abst_first y))) 
                                           (_p_A_equal 
                                              (abst_first_term (abst_first x)) 
                                              y) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              (abst_first x)) 
                                                           (abst_first_term 
                                                              (abst_first y))) 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              (abst_first x)) 
                                                           y))))) =>
                                            zen.Rsubst _p_A_T 
                                              (v_Vod:(zen.term _p_A_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_A_equal v_Vod 
                                                          (abst_first_term 
                                                             (abst_first y))) 
                                                       (_p_A_equal 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          y)))) 
                                              (abst_first_term (abst_first x)) 
                                              (abst_first_term (abst_first x)) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T 
                                                           (abst_first_term 
                                                              (abst_first x)) 
                                                           (abst_first_term 
                                                              (abst_first x)))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          (abst_first_term 
                                                             (abst_first x))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             (abst_first_term 
                                                                (abst_first x)))))) 
                                                 (v_Vpd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          (abst_first_term 
                                                             (abst_first x)))) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x)) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x))))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             (abst_first_term 
                                                                (abst_first x)))) 
                                                       (v_Vqd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))))) =>
                                                        zen.Rsubst _p_A_T 
                                                          (v_Vrd:
                                                           (zen.term _p_A_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                _p_A_T v_Vrd 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)))) 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)))) 
                                                             v_Vqd v_Vid) 
                                                          (v_Vqd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x))))) =>
                                                           zen.Rsubst _p_A_T 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vsd)) 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             (v_Vid:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                              zen.Rnoteq 
                                                                _p_A_T 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) v_Vid) 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))) 
                                                                v_Vqd v_Vid) 
                                                             v_Vqd) v_Vqd) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                        zen.Rnoteq _p_A_T 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          v_Vid)) v_Vpd) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             (abst_first_term 
                                                                (abst_first x))))) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)))))) =>
                                                     zen.Rall _p_A_T 
                                                       (v_Vwc:
                                                        (zen.term _p_A_T) =>
                                                        zen.forall _p_A_T 
                                                          (v_Vxc:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vvd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                       (abst_first_term 
                                                          (abst_first x)) 
                                                       (v_Vwd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_A_T 
                                                              (v_Vxc:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vxc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd)))))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vxc:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vvd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vxc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd)))))) 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          (v_Vxd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))))))) =>
                                                           zen.Rall _p_A_T 
                                                             (v_Vvd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))))) 
                                                             (abst_first_term 
                                                                (abst_first y)) 
                                                             (v_Vyd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) 
                                                                (v_Vjd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                   v_Vud 
                                                                   v_Vjd) 
                                                                (v_Vzd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                   (v_Vae:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                                    __M_1_3_LEMMA 
                                                                    v_Vae) 
                                                                   (__M_1_3_LEMMA:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vmd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vod:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vod 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (v_Vid:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vid) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vbe) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y)) 
                                                                    v_Vld 
                                                                    v_Vce) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y) 
                                                                    v_Vde) 
                                                                    v_Vnd) 
                                                                    v_Vnd) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    __M_1_3_LEMMA) 
                                                                   v_Vzd) 
                                                                v_Vyd) v_Vxd) 
                                                          v_Vwd) 
                                                       _p_A_equal_transitive) 
                                                    v_Vtd) v_Vkd) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x)) 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y))) 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x)) y))))) =>
                                               zen.Rsubst _p_A_T 
                                                 (v_Vbe:(zen.term _p_A_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             v_Vbe) 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             y)))) 
                                                 (abst_first_term 
                                                    (abst_first y)) y 
                                                 (v_Vce:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    y)) y)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first_term 
                                                             (abst_first y)) 
                                                          y)) v_Vld v_Vce) 
                                                 (v_Vde:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) y) 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) y))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (_p_A_equal 
                                                       (abst_first_term 
                                                          (abst_first x)) y) 
                                                    v_Vde) v_Vnd) v_Vnd) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) y)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first_term 
                                                          (abst_first x)) y))) 
                                              v_Vee v_Vgd) __M_1_3_LEMMA) 
                                        (v_Vce:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (abst_first_term 
                                                        (abst_first y)) y)))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first y)) y))) 
                                           (__M_1_2_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first y)) y)))) =>
                                            zen.Rall _p_A_T 
                                              (v_Vwc:(zen.term _p_A_T) =>
                                               zen.forall _p_A_T 
                                                 (v_Vxc:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vvd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                v_Vwc v_Vxc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vxc 
                                                                   v_Vvd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vwc 
                                                                   v_Vvd))))))) 
                                              (abst_first_term (abst_first x)) 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.forall _p_A_T 
                                                     (v_Vxc:
                                                      (zen.term _p_A_T) =>
                                                      zen.forall _p_A_T 
                                                        (v_Vvd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vxc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd)))))))) =>
                                               zen.Rall _p_A_T 
                                                 (v_Vxc:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vvd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) v_Vxc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vxc 
                                                                   v_Vvd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd)))))) 
                                                 (abst_first_term 
                                                    (abst_first y)) 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.forall _p_A_T 
                                                        (v_Vvd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))))))) =>
                                                  zen.Rall _p_A_T 
                                                    (v_Vvd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    y))))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    y)) v_Vvd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))))) 
                                                    y 
                                                    (v_Vge:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    y))))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) 
                                                       (v_Vae:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y))))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    y))))) 
                                                          __M_1_3_LEMMA v_Vae) 
                                                       (v_Vhe:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                          (v_Vie:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    y)) y))) 
                                                             __M_1_2_LEMMA 
                                                             v_Vie) 
                                                          (v_Vee:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vmd)) 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) y) 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) y) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                              zen.Rsubst 
                                                                _p_A_T 
                                                                (v_Vje:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vje y) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) 
                                                                (v_Vid:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) 
                                                                   (v_Vpd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    v_Vqd 
                                                                    v_Vid) 
                                                                    v_Vpd) 
                                                                   (v_Vtd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vwc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd)))))) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))))) 
                                                                    y 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    v_Vud 
                                                                    v_Vjd) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    (v_Vgd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    v_Vle) 
                                                                    v_Vke) 
                                                                    v_Vxd) 
                                                                    v_Vwd) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vtd) 
                                                                   v_Vkd) 
                                                                (v_Vde:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                                 zen.Rsubst 
                                                                   _p_A_T 
                                                                   (v_Vbe:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vbe) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) 
                                                                   y y 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T y 
                                                                    y)))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T y 
                                                                    v_Vme) 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y) 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y) 
                                                                    v_Vde) 
                                                                   v_Vde) 
                                                                v_Vde) 
                                                             (v_Vee:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) y))) 
                                                                v_Vee v_Vgd) 
                                                             v_Vee) v_Vhe) 
                                                       v_Vge) v_Vfe) v_Vwd) 
                                              _p_A_equal_transitive) 
                                           (v_Vie:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first_term 
                                                              (abst_first y)) 
                                                           y))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first_term 
                                                          (abst_first y)) y))) 
                                              __M_1_2_LEMMA v_Vie)))) 
                                  (v_Vne:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal y 
                                               (abst_first_term 
                                                  (abst_first x)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal y 
                                              (abst_first_term (abst_first x))))) 
                                     v_Vne v_Vdd) v_Vfd) v_Ved) 
                            _p_A_equal_symmetric) v_Vbd) 
                      (v_Voe:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_A_T y 
                                         (abst_first_term (abst_first x))))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal y 
                                            (abst_first_term (abst_first x))))))))) =>
                       zen.Rcut (zen.triangle (zen.equal _p_A_T x x)) 
                         (v_Vpe:
                          (zen.proof (zen.triangle (zen.equal _p_A_T x x))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vmd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vmd)) 
                            (_p_A_equal (abst_first_term (abst_first x)) x) 
                            (_p_A_equal y x) 
                            (v_Vqe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_A_equal 
                                            (abst_first_term (abst_first x)) 
                                            x) (_p_A_equal y x))))) =>
                             zen.Rsubst _p_A_T 
                               (v_Vre:(zen.term _p_A_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_A_equal v_Vre x) (_p_A_equal y x)))) 
                               (abst_first_term (abst_first x)) y 
                               (v_Vse:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_A_T 
                                            (abst_first_term (abst_first x)) 
                                            y)))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_A_T y 
                                           (abst_first_term (abst_first x))))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal y 
                                              (abst_first_term (abst_first x)))))) 
                                  (v_Vte:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_A_T y 
                                                  (abst_first_term 
                                                     (abst_first x))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal _p_A_T y 
                                           (abst_first_term (abst_first x)))) 
                                     (v_Vue:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_A_T y 
                                               (abst_first_term 
                                                  (abst_first x))))) =>
                                      zen.Rcut 
                                        (zen.triangle (zen.equal _p_A_T y y)) 
                                        (v_Vve:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_A_T y y))) =>
                                         zen.Rsubst _p_A_T 
                                           (v_Vwe:(zen.term _p_A_T) =>
                                            zen.triangle 
                                              (zen.equal _p_A_T v_Vwe y)) y 
                                           (abst_first_term (abst_first x)) 
                                           (v_Vcd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T y 
                                                        (abst_first_term 
                                                           (abst_first x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T y 
                                                    (abst_first_term 
                                                       (abst_first x)))) 
                                              v_Vue v_Vcd) 
                                           (v_Vxe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (abst_first_term 
                                                        (abst_first x)) y))) =>
                                            zen.Rsubst _p_A_T 
                                              (v_Vsd:(zen.term _p_A_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (abst_first_term 
                                                       (abst_first x)) v_Vsd)) 
                                              y y 
                                              (v_Vme:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T y y)))) =>
                                               zen.Rnoteq _p_A_T y v_Vme) 
                                              (v_Vxe:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_first_term 
                                                           (abst_first x)) y))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_A_T 
                                                       (abst_first_term 
                                                          (abst_first x)) y)) 
                                                 v_Vxe v_Vse) v_Vxe) v_Vve) 
                                        (v_Vme:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T y y)))) =>
                                         zen.Rnoteq _p_A_T y v_Vme)) v_Vte) 
                                  (v_Vye:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal y 
                                                     (abst_first_term 
                                                        (abst_first x)))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal y 
                                              (abst_first_term (abst_first x))))) 
                                     (v_Vne:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal y 
                                                  (abst_first_term 
                                                     (abst_first x)))))) =>
                                      zen.Rall _p_A_T 
                                        (v_Vwc:(zen.term _p_A_T) =>
                                         zen.forall _p_A_T 
                                           (v_Vxc:(zen.term _p_A_T) =>
                                            zen.forall _p_A_T 
                                              (v_Vvd:(zen.term _p_A_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vwc 
                                                          v_Vxc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vxc 
                                                             v_Vvd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vwc 
                                                             v_Vvd))))))) y 
                                        (v_Vze:
                                         (zen.proof 
                                            (zen.forall _p_A_T 
                                               (v_Vxc:(zen.term _p_A_T) =>
                                                zen.forall _p_A_T 
                                                  (v_Vvd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal y 
                                                              v_Vxc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vxc v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal y 
                                                                 v_Vvd)))))))) =>
                                         zen.Rall _p_A_T 
                                           (v_Vxc:(zen.term _p_A_T) =>
                                            zen.forall _p_A_T 
                                              (v_Vvd:(zen.term _p_A_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal y v_Vxc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vxc 
                                                             v_Vvd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal y v_Vvd)))))) 
                                           (abst_first_term (abst_first x)) 
                                           (v_Vaf:
                                            (zen.proof 
                                               (zen.forall _p_A_T 
                                                  (v_Vvd:(zen.term _p_A_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal y 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal y 
                                                                 v_Vvd))))))) =>
                                            zen.Rall _p_A_T 
                                              (v_Vvd:(zen.term _p_A_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal y 
                                                          (abst_first_term 
                                                             (abst_first x))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             v_Vvd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal y v_Vvd))))) 
                                              x 
                                              (v_Vbf:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal y 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) x))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal y x)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal y 
                                                          (abst_first_term 
                                                             (abst_first x))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             x))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal y x)))) 
                                                 (v_Vdd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal y 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal y 
                                                             (abst_first_term 
                                                                (abst_first x))))) 
                                                    v_Vne v_Vdd) 
                                                 (v_Vcf:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x)) x))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal y x))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             x))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal y x))) 
                                                    (v_Vdf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)) x))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)) x))) 
                                                       __M_1_1_LEMMA v_Vdf) 
                                                    (v_Vef:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal y x)))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vmd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vmd)) 
                                                       (_p_A_equal y x) 
                                                       (_p_A_equal y x) 
                                                       (v_Vff:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_A_equal 
                                                                    y x) 
                                                                    (
                                                                    _p_A_equal 
                                                                    y x))))) =>
                                                        zen.Rsubst _p_A_T 
                                                          (v_Vre:
                                                           (zen.term _p_A_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_A_equal 
                                                                    v_Vre x) 
                                                                   (_p_A_equal 
                                                                    y x)))) 
                                                          y y 
                                                          (v_Vme:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T y 
                                                                    y)))) =>
                                                           zen.Rnoteq _p_A_T 
                                                             y v_Vme) 
                                                          (v_Vff:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    y x) 
                                                                    (_p_A_equal 
                                                                    y x))))) =>
                                                           zen.Rsubst _p_A_T 
                                                             (v_Vgf:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    y v_Vgf) 
                                                                    (_p_A_equal 
                                                                    y x)))) 
                                                             x x 
                                                             (v_Vhf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T x 
                                                                    x)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_A_T x 
                                                                    x)) 
                                                                v_Vpe v_Vhf) 
                                                             (v_Vff:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    y x) 
                                                                    (_p_A_equal 
                                                                    y x))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (_p_A_equal 
                                                                   y x) v_Vff) 
                                                             v_Vff) v_Vff) 
                                                       (v_Vef:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    y x)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   y x))) 
                                                          v_Vef v_Vad) v_Vef) 
                                                    v_Vcf) v_Vbf) v_Vaf) 
                                           v_Vze) _p_A_equal_transitive) 
                                     v_Vye) v_Voe) 
                               (v_Vff:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_A_equal y x) (_p_A_equal y x))))) =>
                                zen.Rsubst _p_A_T 
                                  (v_Vgf:(zen.term _p_A_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_A_equal y v_Vgf) 
                                           (_p_A_equal y x)))) x x 
                                  (v_Vhf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle (zen.equal _p_A_T x x)))) =>
                                   zen.Raxiom 
                                     (zen.triangle (zen.equal _p_A_T x x)) 
                                     v_Vpe v_Vhf) 
                                  (v_Vff:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_A_equal y x) 
                                               (_p_A_equal y x))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (_p_A_equal y x) v_Vff) v_Vff) v_Vqe) 
                            (v_Vef:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_A_equal y x)))) =>
                             zen.Raxiom 
                               (zen.triangle (focal.is_true (_p_A_equal y x))) 
                               v_Vef v_Vad) __M_1_1_LEMMA) 
                         (v_Vhf:
                          (zen.proof 
                             (zen.not (zen.triangle (zen.equal _p_A_T x x)))) =>
                          zen.Rcut 
                            (zen.triangle (focal.is_true (_p_A_equal x x))) 
                            (v_Vif:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_A_equal x x)))) =>
                             zen.Rall _p_A_T 
                               (v_Vwc:(zen.term _p_A_T) =>
                                zen.forall _p_A_T 
                                  (v_Vxc:(zen.term _p_A_T) =>
                                   zen.forall _p_A_T 
                                     (v_Vvd:(zen.term _p_A_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal v_Vwc v_Vxc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal v_Vxc v_Vvd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal v_Vwc v_Vvd))))))) 
                               (abst_first_term (abst_first x)) 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.forall _p_A_T 
                                      (v_Vxc:(zen.term _p_A_T) =>
                                       zen.forall _p_A_T 
                                         (v_Vvd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first_term 
                                                        (abst_first x)) v_Vxc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal v_Vxc v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        v_Vvd)))))))) =>
                                zen.Rall _p_A_T 
                                  (v_Vxc:(zen.term _p_A_T) =>
                                   zen.forall _p_A_T 
                                     (v_Vvd:(zen.term _p_A_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term 
                                                    (abst_first x)) v_Vxc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal v_Vxc v_Vvd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first x)) v_Vvd)))))) 
                                  x 
                                  (v_Vjf:
                                   (zen.proof 
                                      (zen.forall _p_A_T 
                                         (v_Vvd:(zen.term _p_A_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first_term 
                                                        (abst_first x)) x))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) 
                                                        v_Vvd))))))) =>
                                   zen.Rall _p_A_T 
                                     (v_Vvd:(zen.term _p_A_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term 
                                                    (abst_first x)) x))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal x v_Vvd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first x)) v_Vvd))))) 
                                     x 
                                     (v_Vkf:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first_term 
                                                        (abst_first x)) x))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x x))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) x)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first_term 
                                                    (abst_first x)) x))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (_p_A_equal x x))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first x)) x)))) 
                                        (v_Vdf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) x))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first x)) x))) 
                                           __M_1_1_LEMMA v_Vdf) 
                                        (v_Vlf:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal x x))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) x))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true (_p_A_equal x x))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first_term 
                                                       (abst_first x)) x))) 
                                           (v_Vmf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal x x))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal x x))) v_Vif 
                                              v_Vmf) 
                                           (__M_1_1_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (abst_first_term 
                                                           (abst_first x)) x)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vmd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vmd)) 
                                              (_p_A_equal 
                                                 (abst_first_term 
                                                    (abst_first x)) x) 
                                              (_p_A_equal y x) 
                                              (v_Vqe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_A_equal 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x)) x) 
                                                           (_p_A_equal y x))))) =>
                                               zen.Rsubst _p_A_T 
                                                 (v_Vre:(zen.term _p_A_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal v_Vre x) 
                                                          (_p_A_equal y x)))) 
                                                 (abst_first_term 
                                                    (abst_first x)) y 
                                                 (v_Vse:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (abst_first_term 
                                                                 (abst_first 
                                                                    x)) y)))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             y 
                                                             (abst_first_term 
                                                                (abst_first x))))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal y 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x)))))) 
                                                    (v_Vte:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T y 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             y 
                                                             (abst_first_term 
                                                                (abst_first x)))) 
                                                       (v_Vue:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T y 
                                                                 (abst_first_term 
                                                                    (
                                                                    abst_first 
                                                                    x))))) =>
                                                        zen.Reqsym _p_A_T y 
                                                          (abst_first_term 
                                                             (abst_first x)) 
                                                          v_Vue v_Vse) v_Vte) 
                                                    (v_Vye:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal y 
                                                                (abst_first_term 
                                                                   (abst_first 
                                                                    x))))) 
                                                       (v_Vne:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    y 
                                                                    (
                                                                    abst_first_term 
                                                                    (abst_first 
                                                                    x)))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vwc:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vxc:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.forall 
                                                                _p_A_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                          y 
                                                          (v_Vze:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vxc:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.forall 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y v_Vvd)))))))) =>
                                                           zen.Rall _p_A_T 
                                                             (v_Vxc:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.forall 
                                                                _p_A_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y v_Vxc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y v_Vvd)))))) 
                                                             (abst_first_term 
                                                                (abst_first x)) 
                                                             (v_Vaf:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y v_Vvd))))))) =>
                                                              zen.Rall 
                                                                _p_A_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y v_Vvd))))) 
                                                                x 
                                                                (v_Vbf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y x)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y x)))) 
                                                                   (v_Vdd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x))))) 
                                                                    v_Vne 
                                                                    v_Vdd) 
                                                                   (v_Vcf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y x))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y x))) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first_term 
                                                                    (abst_first 
                                                                    x)) x))) 
                                                                    __M_1_1_LEMMA 
                                                                    v_Vdf) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y x)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    y x))) 
                                                                    v_Vef 
                                                                    v_Vad) 
                                                                    v_Vcf) 
                                                                   v_Vbf) 
                                                                v_Vaf) v_Vze) 
                                                          _p_A_equal_transitive) 
                                                       v_Vye) v_Voe) 
                                                 (v_Vff:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal y x) 
                                                              (_p_A_equal y x))))) =>
                                                  zen.Rsubst _p_A_T 
                                                    (v_Vgf:
                                                     (zen.term _p_A_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_A_equal y 
                                                                v_Vgf) 
                                                             (_p_A_equal y x)))) 
                                                    x x 
                                                    (v_Vhf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T x x)))) =>
                                                     zen.Rnoteq _p_A_T x 
                                                       v_Vhf) 
                                                    (v_Vff:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_A_equal 
                                                                    y x) 
                                                                 (_p_A_equal 
                                                                    y x))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_A_equal y x) v_Vff) 
                                                    v_Vff) v_Vqe) 
                                              (v_Vef:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal y x)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal y x))) 
                                                 v_Vef v_Vad) __M_1_1_LEMMA) 
                                           v_Vlf) v_Vkf) v_Vjf) v_Vwd) 
                               _p_A_equal_transitive) 
                            (v_Vmf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_A_equal x x))))) =>
                             zen.Rnoteq _p_A_T x v_Vhf)))) 
                   (v_Vnf:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_A_equal x y)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_A_equal x y))) v_Vnf 
                      v_Vvc) v_Vzc) v_Vyc) _p_A_equal_symmetric)) 
         ((__M_1_3_1_LEMMA:
           (dk_logic.eP (dk_logic.ebP (abst_first_case (abst_first x)))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first_term (abst_first x)) 
                      (abst_first_term (abst_first y))))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first_term (abst_first x)) 
                             (abst_first_term (abst_first y))))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (abst_first_case v_Vac))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term v_Vac) 
                                  (abst_first_term v_Vbc))))))) 
                (abst_first x) 
                (v_Vcc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_first_case (abst_first x)))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_first x) v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (abst_first_term (abst_first x)) 
                                      (abst_first_term v_Vbc)))))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_first_case (abst_first x)))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal (abst_first x) v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term (abst_first x)) 
                                  (abst_first_term v_Vbc)))))) 
                   (abst_first y) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_first_case (abst_first x)))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_first x) (abst_first y)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (abst_first_term (abst_first x)) 
                                      (abst_first_term (abst_first y)))))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true (abst_first_case (abst_first x)))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_first x) (abst_first y)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term (abst_first x)) 
                                  (abst_first_term (abst_first y)))))) 
                      (v_Vec:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_first_case (abst_first x)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_first_case (abst_first x)))) 
                         __M_1_3_1_LEMMA v_Vec) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_first x) (abst_first y)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (abst_first_term (abst_first x)) 
                                      (abst_first_term (abst_first y))))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_first x) (abst_first y)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first_term (abst_first x)) 
                                  (abst_first_term (abst_first y))))) 
                         (v_Vgc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_first x) 
                                         (abst_first y)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_first x) (abst_first y)))) 
                            H v_Vgc) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (abst_first_term (abst_first x)) 
                                      (abst_first_term (abst_first y)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal 
                                     (abst_first_term (abst_first x)) 
                                     (abst_first_term (abst_first y))))) 
                            v_Vhc v_Vzb) v_Vfc) v_Vdc) v_Vcc) 
                abst_first_term_substitution_rule)) 
            (zen.nnpp 
               (zen.triangle (focal.is_true (abst_first_case (abst_first x)))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true (abst_first_case (abst_first x)))))) =>
                zen.Rall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.triangle 
                     (focal.is_true (abst_first_case (abst_first v_Vac)))) x 
                  (v_Vbc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true (abst_first_case (abst_first x))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true (abst_first_case (abst_first x)))) 
                     v_Vbc v_Vzb) abst_first_has_case)))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true (_p_A_equal (abst_first_term (abst_first y)) y))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal (abst_first_term (abst_first y)) y))))) =>
            zen.Rall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.triangle 
                 (focal.is_true 
                    (_p_A_equal (abst_first_term (abst_first v_Vac)) v_Vac))) 
              y 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal (abst_first_term (abst_first y)) y)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_first_term (abst_first y)) y))) 
                 v_Vbc v_Vzb) abst_first_reverses_term))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (_p_A_equal (abst_first_term (abst_first x)) x))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_first_term (abst_first x)) x))))) =>
           zen.Rall _p_A_T 
             (v_Vac:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first_term (abst_first v_Vac)) v_Vac))) 
             x 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_first_term (abst_first x)) x)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first_term (abst_first x)) x))) 
                v_Vbc v_Vzb) abst_first_reverses_term))).

def Sum_set__second_is_injective :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_second_has_case:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (abst_second_case (abst_second x))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_reverses_term:(dk_logic.eP 
                               (dk_logic.forall _p_B_T 
                                  (x:(cc.eT _p_B_T) =>
                                   dk_logic.ebP 
                                     (_p_B_equal 
                                        (abst_second_term (abst_second x)) x)))) ->
  abst_second_term_substitution_rule:(dk_logic.eP 
                                        (dk_logic.forall abst_T 
                                           (x_1:(cc.eT abst_T) =>
                                            dk_logic.forall abst_T 
                                              (x_2:(cc.eT abst_T) =>
                                               dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (abst_second_case x_1)) 
                                                 (dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (abst_equal x_1 x_2)) 
                                                    (dk_logic.ebP 
                                                       (_p_B_equal 
                                                          (abst_second_term 
                                                             x_1) 
                                                          (abst_second_term 
                                                             x_2)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.forall _p_B_T 
          (y:(cc.eT _p_B_T) =>
           dk_logic.imp 
             (dk_logic.ebP (abst_equal (abst_second x) (abst_second y))) 
             (dk_logic.ebP (_p_B_equal x y)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_second_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (abst_second_case (abst_second x))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_reverses_term:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.ebP (_p_B_equal (abst_second_term (abst_second x)) x)))) =>
  abst_second_term_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x_1:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (x_2:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_second_case x_1)) 
              (dk_logic.imp (dk_logic.ebP (abst_equal x_1 x_2)) 
                 (dk_logic.ebP 
                    (_p_B_equal (abst_second_term x_1) (abst_second_term x_2)))))))) =>
  (__N_1_LEMMA:
   (x:(cc.eT _p_B_T) ->
    y:(cc.eT _p_B_T) ->
    H:(dk_logic.eP 
         (dk_logic.ebP (abst_equal (abst_second x) (abst_second y)))) ->
    dk_logic.eP (dk_logic.ebP (_p_B_equal x y))) =>
   zen.nnpp 
     (zen.forall _p_B_T 
        (v_Vzb:(zen.term _p_B_T) =>
         zen.forall _p_B_T 
           (v_Vac:(zen.term _p_B_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_second v_Vzb) (abst_second v_Vac)))) 
              (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_B_T 
               (v_Vzb:(zen.term _p_B_T) =>
                zen.forall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_second v_Vzb) 
                              (abst_second v_Vac)))) 
                     (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac)))))))) =>
      zen.Raxiom 
        (zen.forall _p_B_T 
           (v_Vzb:(zen.term _p_B_T) =>
            zen.forall _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_second v_Vzb) (abst_second v_Vac)))) 
                 (zen.triangle (focal.is_true (_p_B_equal v_Vzb v_Vac)))))) 
        __N_1_LEMMA v_Vbc)) 
    (x:(cc.eT _p_B_T) =>
     y:(cc.eT _p_B_T) =>
     H:
     (dk_logic.eP (dk_logic.ebP (abst_equal (abst_second x) (abst_second y)))) =>
     (__N_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (_p_B_equal (abst_second_term (abst_second x)) x))) =>
      (__N_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (_p_B_equal (abst_second_term (abst_second y)) y))) =>
       (__N_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (_p_B_equal (abst_second_term (abst_second x)) 
                 (abst_second_term (abst_second y))))) =>
        zen.nnpp (zen.triangle (focal.is_true (_p_B_equal x y))) 
          (v_Vvc:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (_p_B_equal x y))))) =>
           zen.Rall _p_B_T 
             (v_Vwc:(zen.term _p_B_T) =>
              zen.forall _p_B_T 
                (v_Vxc:(zen.term _p_B_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vwc v_Vxc))) 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vxc v_Vwc))))) 
             y 
             (v_Vyc:
              (zen.proof 
                 (zen.forall _p_B_T 
                    (v_Vxc:(zen.term _p_B_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_B_equal y v_Vxc))) 
                       (zen.triangle (focal.is_true (_p_B_equal v_Vxc y)))))) =>
              zen.Rall _p_B_T 
                (v_Vxc:(zen.term _p_B_T) =>
                 zen.imp (zen.triangle (focal.is_true (_p_B_equal y v_Vxc))) 
                   (zen.triangle (focal.is_true (_p_B_equal v_Vxc y)))) x 
                (v_Vzc:
                 (zen.proof 
                    (zen.imp (zen.triangle (focal.is_true (_p_B_equal y x))) 
                       (zen.triangle (focal.is_true (_p_B_equal x y))))) =>
                 zen.Rimply (zen.triangle (focal.is_true (_p_B_equal y x))) 
                   (zen.triangle (focal.is_true (_p_B_equal x y))) 
                   (v_Vad:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_B_equal y x))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_B_T y 
                                  (abst_second_term (abst_second x))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal y 
                                     (abst_second_term (abst_second x))))))) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T y 
                                      (abst_second_term (abst_second x))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal y 
                                         (abst_second_term (abst_second x)))))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_B_T y 
                                  (abst_second_term (abst_second x))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal y 
                                     (abst_second_term (abst_second x)))))) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T y 
                                      (abst_second_term (abst_second x)))))) =>
                          v_Vdd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal y 
                                         (abst_second_term (abst_second x))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vwc:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vxc:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vwc v_Vxc))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vxc v_Vwc))))) 
                            (abst_second_term (abst_second x)) 
                            (v_Ved:
                             (zen.proof 
                                (zen.forall _p_B_T 
                                   (v_Vxc:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term 
                                                  (abst_second x)) v_Vxc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vxc 
                                               (abst_second_term 
                                                  (abst_second x)))))))) =>
                             zen.Rall _p_B_T 
                               (v_Vxc:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term (abst_second x)) 
                                           v_Vxc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal v_Vxc 
                                           (abst_second_term (abst_second x)))))) 
                               y 
                               (v_Vfd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term 
                                                  (abst_second x)) y))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal y 
                                               (abst_second_term 
                                                  (abst_second x))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term (abst_second x)) 
                                           y))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal y 
                                           (abst_second_term (abst_second x))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second_term 
                                                     (abst_second x)) y))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_second_term 
                                                    (abst_second x)) 
                                                 (abst_second_term 
                                                    (abst_second x))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second x)) 
                                                    (abst_second_term 
                                                       (abst_second x))))))) 
                                     (v_Vhd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second_term 
                                                        (abst_second x)) 
                                                     (abst_second_term 
                                                        (abst_second x))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        (abst_second_term 
                                                           (abst_second x)))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_second_term 
                                                    (abst_second x)) 
                                                 (abst_second_term 
                                                    (abst_second x))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second x)) 
                                                    (abst_second_term 
                                                       (abst_second x)))))) 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second_term 
                                                        (abst_second x)) 
                                                     (abst_second_term 
                                                        (abst_second x)))))) =>
                                         v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        (abst_second_term 
                                                           (abst_second x))))))) =>
                                         zen.Rnoteq _p_B_T 
                                           (abst_second_term (abst_second x)) 
                                           v_Vid) v_Vhd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        (abst_second_term 
                                                           (abst_second x))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              (abst_second x)) 
                                                           (abst_second_term 
                                                              (abst_second x))))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_second_term 
                                                 (abst_second y)) y)) 
                                        (v_Vld:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second_term 
                                                     (abst_second y)) y))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vmd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vmd)) 
                                           (_p_B_equal 
                                              (abst_second_term 
                                                 (abst_second x)) 
                                              (abst_second_term 
                                                 (abst_second y))) 
                                           (_p_B_equal 
                                              (abst_second_term 
                                                 (abst_second x)) y) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              (abst_second x)) 
                                                           (abst_second_term 
                                                              (abst_second y))) 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              (abst_second x)) 
                                                           y))))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vod:(zen.term _p_B_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_B_equal v_Vod 
                                                          (abst_second_term 
                                                             (abst_second y))) 
                                                       (_p_B_equal 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          y)))) 
                                              (abst_second_term 
                                                 (abst_second x)) 
                                              (abst_second_term 
                                                 (abst_second x)) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_second_term 
                                                              (abst_second x)) 
                                                           (abst_second_term 
                                                              (abst_second x)))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_B_T 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          (abst_second_term 
                                                             (abst_second x))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)))))) 
                                                 (v_Vpd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal _p_B_T 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          (abst_second_term 
                                                             (abst_second x)))) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x)) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x))))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)))) 
                                                       (v_Vqd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))))) =>
                                                        zen.Rsubst _p_B_T 
                                                          (v_Vrd:
                                                           (zen.term _p_B_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T v_Vrd 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)))) 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_B_T 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)))) 
                                                             v_Vqd v_Vid) 
                                                          (v_Vqd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x))))) =>
                                                           zen.Rsubst _p_B_T 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   _p_B_T 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vsd)) 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) 
                                                             (v_Vid:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                              zen.Rnoteq 
                                                                _p_B_T 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) v_Vid) 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))) 
                                                                v_Vqd v_Vid) 
                                                             v_Vqd) v_Vqd) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                        zen.Rnoteq _p_B_T 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          v_Vid)) v_Vpd) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x))))) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vwc:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vxc:
                                                           (zen.term _p_B_T) =>
                                                           zen.forall _p_B_T 
                                                             (v_Vvd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                       (abst_second_term 
                                                          (abst_second x)) 
                                                       (v_Vwd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vxc:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vxc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd)))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vxc:
                                                           (zen.term _p_B_T) =>
                                                           zen.forall _p_B_T 
                                                             (v_Vvd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vxc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd)))))) 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          (v_Vxd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vvd:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))))))) =>
                                                           zen.Rall _p_B_T 
                                                             (v_Vvd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))))) 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   y)) 
                                                             (v_Vyd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) 
                                                                (v_Vjd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                   v_Vud 
                                                                   v_Vjd) 
                                                                (v_Vzd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                   (v_Vae:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                                    __N_1_3_LEMMA 
                                                                    v_Vae) 
                                                                   (__N_1_3_LEMMA:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vmd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vod:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vod 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (v_Vid:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vid) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vbe) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y)) 
                                                                    v_Vld 
                                                                    v_Vce) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y) 
                                                                    v_Vde) 
                                                                    v_Vnd) 
                                                                    v_Vnd) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    __N_1_3_LEMMA) 
                                                                   v_Vzd) 
                                                                v_Vyd) v_Vxd) 
                                                          v_Vwd) 
                                                       _p_B_equal_transitive) 
                                                    v_Vtd) v_Vkd) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x)) 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y))) 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x)) y))))) =>
                                               zen.Rsubst _p_B_T 
                                                 (v_Vbe:(zen.term _p_B_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) v_Vbe) 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) y)))) 
                                                 (abst_second_term 
                                                    (abst_second y)) y 
                                                 (v_Vce:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    y)) y)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_B_T 
                                                          (abst_second_term 
                                                             (abst_second y)) 
                                                          y)) v_Vld v_Vce) 
                                                 (v_Vde:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) y) 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) y))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          (abst_second x)) y) 
                                                    v_Vde) v_Vnd) v_Vnd) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) y)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          (abst_second x)) y))) 
                                              v_Vee v_Vgd) __N_1_3_LEMMA) 
                                        (v_Vce:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second_term 
                                                        (abst_second y)) y)))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second y)) y))) 
                                           (__N_1_2_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second y)) y)))) =>
                                            zen.Rall _p_B_T 
                                              (v_Vwc:(zen.term _p_B_T) =>
                                               zen.forall _p_B_T 
                                                 (v_Vxc:(zen.term _p_B_T) =>
                                                  zen.forall _p_B_T 
                                                    (v_Vvd:
                                                     (zen.term _p_B_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vwc v_Vxc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   v_Vxc 
                                                                   v_Vvd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   v_Vwc 
                                                                   v_Vvd))))))) 
                                              (abst_second_term 
                                                 (abst_second x)) 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.forall _p_B_T 
                                                     (v_Vxc:
                                                      (zen.term _p_B_T) =>
                                                      zen.forall _p_B_T 
                                                        (v_Vvd:
                                                         (zen.term _p_B_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vxc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd)))))))) =>
                                               zen.Rall _p_B_T 
                                                 (v_Vxc:(zen.term _p_B_T) =>
                                                  zen.forall _p_B_T 
                                                    (v_Vvd:
                                                     (zen.term _p_B_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) v_Vxc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   v_Vxc 
                                                                   v_Vvd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd)))))) 
                                                 (abst_second_term 
                                                    (abst_second y)) 
                                                 (v_Vfe:
                                                  (zen.proof 
                                                     (zen.forall _p_B_T 
                                                        (v_Vvd:
                                                         (zen.term _p_B_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vvd:
                                                     (zen.term _p_B_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    y))))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    y)) v_Vvd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))))) 
                                                    y 
                                                    (v_Vge:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    y))))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) 
                                                       (v_Vae:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y))))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    y))))) 
                                                          __N_1_3_LEMMA v_Vae) 
                                                       (v_Vhe:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                          (v_Vie:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    y)) y))) 
                                                             __N_1_2_LEMMA 
                                                             v_Vie) 
                                                          (v_Vee:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vmd)) 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) y) 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) y) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                              zen.Rsubst 
                                                                _p_B_T 
                                                                (v_Vje:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vje y) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) 
                                                                (v_Vid:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) 
                                                                   (v_Vpd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    v_Vqd 
                                                                    v_Vid) 
                                                                    v_Vpd) 
                                                                   (v_Vtd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vwc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vxc:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd)))))) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))))) 
                                                                    y 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    v_Vud 
                                                                    v_Vjd) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    (v_Vgd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                    v_Vee 
                                                                    v_Vgd) 
                                                                    v_Vle) 
                                                                    v_Vke) 
                                                                    v_Vxd) 
                                                                    v_Vwd) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Vtd) 
                                                                   v_Vkd) 
                                                                (v_Vde:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                                 zen.Rsubst 
                                                                   _p_B_T 
                                                                   (v_Vbe:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vbe) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) 
                                                                   y y 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T y 
                                                                    y)))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T y 
                                                                    v_Vme) 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y) 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y) 
                                                                    v_Vde) 
                                                                   v_Vde) 
                                                                v_Vde) 
                                                             (v_Vee:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) y))) 
                                                                v_Vee v_Vgd) 
                                                             v_Vee) v_Vhe) 
                                                       v_Vge) v_Vfe) v_Vwd) 
                                              _p_B_equal_transitive) 
                                           (v_Vie:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second_term 
                                                              (abst_second y)) 
                                                           y))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second_term 
                                                          (abst_second y)) y))) 
                                              __N_1_2_LEMMA v_Vie)))) 
                                  (v_Vne:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal y 
                                               (abst_second_term 
                                                  (abst_second x)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal y 
                                              (abst_second_term 
                                                 (abst_second x))))) v_Vne 
                                     v_Vdd) v_Vfd) v_Ved) 
                            _p_B_equal_symmetric) v_Vbd) 
                      (v_Voe:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_B_T y 
                                         (abst_second_term (abst_second x))))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal y 
                                            (abst_second_term (abst_second x))))))))) =>
                       zen.Rcut (zen.triangle (zen.equal _p_B_T x x)) 
                         (v_Vpe:
                          (zen.proof (zen.triangle (zen.equal _p_B_T x x))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vmd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vmd)) 
                            (_p_B_equal (abst_second_term (abst_second x)) x) 
                            (_p_B_equal y x) 
                            (v_Vqe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_B_equal 
                                            (abst_second_term (abst_second x)) 
                                            x) (_p_B_equal y x))))) =>
                             zen.Rsubst _p_B_T 
                               (v_Vre:(zen.term _p_B_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_B_equal v_Vre x) (_p_B_equal y x)))) 
                               (abst_second_term (abst_second x)) y 
                               (v_Vse:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_second_term (abst_second x)) 
                                            y)))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_B_T y 
                                           (abst_second_term (abst_second x))))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal y 
                                              (abst_second_term 
                                                 (abst_second x)))))) 
                                  (v_Vte:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T y 
                                                  (abst_second_term 
                                                     (abst_second x))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal _p_B_T y 
                                           (abst_second_term (abst_second x)))) 
                                     (v_Vue:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_B_T y 
                                               (abst_second_term 
                                                  (abst_second x))))) =>
                                      zen.Rcut 
                                        (zen.triangle (zen.equal _p_B_T y y)) 
                                        (v_Vve:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_B_T y y))) =>
                                         zen.Rsubst _p_B_T 
                                           (v_Vwe:(zen.term _p_B_T) =>
                                            zen.triangle 
                                              (zen.equal _p_B_T v_Vwe y)) y 
                                           (abst_second_term (abst_second x)) 
                                           (v_Vcd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T y 
                                                        (abst_second_term 
                                                           (abst_second x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_B_T y 
                                                    (abst_second_term 
                                                       (abst_second x)))) 
                                              v_Vue v_Vcd) 
                                           (v_Vxe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second_term 
                                                        (abst_second x)) y))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vsd:(zen.term _p_B_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_B_T 
                                                    (abst_second_term 
                                                       (abst_second x)) v_Vsd)) 
                                              y y 
                                              (v_Vme:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T y y)))) =>
                                               zen.Rnoteq _p_B_T y v_Vme) 
                                              (v_Vxe:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second_term 
                                                           (abst_second x)) y))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_second_term 
                                                          (abst_second x)) y)) 
                                                 v_Vxe v_Vse) v_Vxe) v_Vve) 
                                        (v_Vme:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T y y)))) =>
                                         zen.Rnoteq _p_B_T y v_Vme)) v_Vte) 
                                  (v_Vye:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal y 
                                                     (abst_second_term 
                                                        (abst_second x)))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal y 
                                              (abst_second_term 
                                                 (abst_second x))))) 
                                     (v_Vne:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal y 
                                                  (abst_second_term 
                                                     (abst_second x)))))) =>
                                      zen.Rall _p_B_T 
                                        (v_Vwc:(zen.term _p_B_T) =>
                                         zen.forall _p_B_T 
                                           (v_Vxc:(zen.term _p_B_T) =>
                                            zen.forall _p_B_T 
                                              (v_Vvd:(zen.term _p_B_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vwc 
                                                          v_Vxc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vxc 
                                                             v_Vvd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vwc 
                                                             v_Vvd))))))) y 
                                        (v_Vze:
                                         (zen.proof 
                                            (zen.forall _p_B_T 
                                               (v_Vxc:(zen.term _p_B_T) =>
                                                zen.forall _p_B_T 
                                                  (v_Vvd:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal y 
                                                              v_Vxc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vxc v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal y 
                                                                 v_Vvd)))))))) =>
                                         zen.Rall _p_B_T 
                                           (v_Vxc:(zen.term _p_B_T) =>
                                            zen.forall _p_B_T 
                                              (v_Vvd:(zen.term _p_B_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal y v_Vxc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vxc 
                                                             v_Vvd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal y v_Vvd)))))) 
                                           (abst_second_term (abst_second x)) 
                                           (v_Vaf:
                                            (zen.proof 
                                               (zen.forall _p_B_T 
                                                  (v_Vvd:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal y 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) v_Vvd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal y 
                                                                 v_Vvd))))))) =>
                                            zen.Rall _p_B_T 
                                              (v_Vvd:(zen.term _p_B_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal y 
                                                          (abst_second_term 
                                                             (abst_second x))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) v_Vvd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal y v_Vvd))))) 
                                              x 
                                              (v_Vbf:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal y 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) x))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal y x)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal y 
                                                          (abst_second_term 
                                                             (abst_second x))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) x))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal y x)))) 
                                                 (v_Vdd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal y 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal y 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x))))) 
                                                    v_Vne v_Vdd) 
                                                 (v_Vcf:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x)) x))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal y x))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) x))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal y x))) 
                                                    (v_Vdf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)) x))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)) x))) 
                                                       __N_1_1_LEMMA v_Vdf) 
                                                    (v_Vef:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal y x)))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vmd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vmd)) 
                                                       (_p_B_equal y x) 
                                                       (_p_B_equal y x) 
                                                       (v_Vff:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_B_equal 
                                                                    y x) 
                                                                    (
                                                                    _p_B_equal 
                                                                    y x))))) =>
                                                        zen.Rsubst _p_B_T 
                                                          (v_Vre:
                                                           (zen.term _p_B_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_B_equal 
                                                                    v_Vre x) 
                                                                   (_p_B_equal 
                                                                    y x)))) 
                                                          y y 
                                                          (v_Vme:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T y 
                                                                    y)))) =>
                                                           zen.Rnoteq _p_B_T 
                                                             y v_Vme) 
                                                          (v_Vff:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    y x) 
                                                                    (_p_B_equal 
                                                                    y x))))) =>
                                                           zen.Rsubst _p_B_T 
                                                             (v_Vgf:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    y v_Vgf) 
                                                                    (_p_B_equal 
                                                                    y x)))) 
                                                             x x 
                                                             (v_Vhf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T x 
                                                                    x)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_B_T x 
                                                                    x)) 
                                                                v_Vpe v_Vhf) 
                                                             (v_Vff:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    y x) 
                                                                    (_p_B_equal 
                                                                    y x))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (_p_B_equal 
                                                                   y x) v_Vff) 
                                                             v_Vff) v_Vff) 
                                                       (v_Vef:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    y x)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   y x))) 
                                                          v_Vef v_Vad) v_Vef) 
                                                    v_Vcf) v_Vbf) v_Vaf) 
                                           v_Vze) _p_B_equal_transitive) 
                                     v_Vye) v_Voe) 
                               (v_Vff:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_B_equal y x) (_p_B_equal y x))))) =>
                                zen.Rsubst _p_B_T 
                                  (v_Vgf:(zen.term _p_B_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_B_equal y v_Vgf) 
                                           (_p_B_equal y x)))) x x 
                                  (v_Vhf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle (zen.equal _p_B_T x x)))) =>
                                   zen.Raxiom 
                                     (zen.triangle (zen.equal _p_B_T x x)) 
                                     v_Vpe v_Vhf) 
                                  (v_Vff:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_B_equal y x) 
                                               (_p_B_equal y x))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (_p_B_equal y x) v_Vff) v_Vff) v_Vqe) 
                            (v_Vef:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_B_equal y x)))) =>
                             zen.Raxiom 
                               (zen.triangle (focal.is_true (_p_B_equal y x))) 
                               v_Vef v_Vad) __N_1_1_LEMMA) 
                         (v_Vhf:
                          (zen.proof 
                             (zen.not (zen.triangle (zen.equal _p_B_T x x)))) =>
                          zen.Rcut 
                            (zen.triangle (focal.is_true (_p_B_equal x x))) 
                            (v_Vif:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_B_equal x x)))) =>
                             zen.Rall _p_B_T 
                               (v_Vwc:(zen.term _p_B_T) =>
                                zen.forall _p_B_T 
                                  (v_Vxc:(zen.term _p_B_T) =>
                                   zen.forall _p_B_T 
                                     (v_Vvd:(zen.term _p_B_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal v_Vwc v_Vxc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal v_Vxc v_Vvd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal v_Vwc v_Vvd))))))) 
                               (abst_second_term (abst_second x)) 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.forall _p_B_T 
                                      (v_Vxc:(zen.term _p_B_T) =>
                                       zen.forall _p_B_T 
                                         (v_Vvd:(zen.term _p_B_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second_term 
                                                        (abst_second x)) 
                                                     v_Vxc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal v_Vxc v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        v_Vvd)))))))) =>
                                zen.Rall _p_B_T 
                                  (v_Vxc:(zen.term _p_B_T) =>
                                   zen.forall _p_B_T 
                                     (v_Vvd:(zen.term _p_B_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second_term 
                                                    (abst_second x)) v_Vxc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal v_Vxc v_Vvd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second x)) v_Vvd)))))) 
                                  x 
                                  (v_Vjf:
                                   (zen.proof 
                                      (zen.forall _p_B_T 
                                         (v_Vvd:(zen.term _p_B_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second_term 
                                                        (abst_second x)) x))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x v_Vvd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) 
                                                        v_Vvd))))))) =>
                                   zen.Rall _p_B_T 
                                     (v_Vvd:(zen.term _p_B_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second_term 
                                                    (abst_second x)) x))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal x v_Vvd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second x)) v_Vvd))))) 
                                     x 
                                     (v_Vkf:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second_term 
                                                        (abst_second x)) x))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x x))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) x)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second_term 
                                                    (abst_second x)) x))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (_p_B_equal x x))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second x)) x)))) 
                                        (v_Vdf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) x))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second x)) x))) 
                                           __N_1_1_LEMMA v_Vdf) 
                                        (v_Vlf:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal x x))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) x))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true (_p_B_equal x x))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second_term 
                                                       (abst_second x)) x))) 
                                           (v_Vmf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal x x))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal x x))) v_Vif 
                                              v_Vmf) 
                                           (__N_1_1_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second_term 
                                                           (abst_second x)) x)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vmd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vmd)) 
                                              (_p_B_equal 
                                                 (abst_second_term 
                                                    (abst_second x)) x) 
                                              (_p_B_equal y x) 
                                              (v_Vqe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x)) x) 
                                                           (_p_B_equal y x))))) =>
                                               zen.Rsubst _p_B_T 
                                                 (v_Vre:(zen.term _p_B_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_B_equal v_Vre x) 
                                                          (_p_B_equal y x)))) 
                                                 (abst_second_term 
                                                    (abst_second x)) y 
                                                 (v_Vse:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second_term 
                                                                 (abst_second 
                                                                    x)) y)))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             y 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x))))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal y 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x)))))) 
                                                    (v_Vte:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T y 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             y 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)))) 
                                                       (v_Vue:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T y 
                                                                 (abst_second_term 
                                                                    (
                                                                    abst_second 
                                                                    x))))) =>
                                                        zen.Reqsym _p_B_T y 
                                                          (abst_second_term 
                                                             (abst_second x)) 
                                                          v_Vue v_Vse) v_Vte) 
                                                    (v_Vye:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal y 
                                                                (abst_second_term 
                                                                   (abst_second 
                                                                    x))))) 
                                                       (v_Vne:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    y 
                                                                    (
                                                                    abst_second_term 
                                                                    (abst_second 
                                                                    x)))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vwc:
                                                           (zen.term _p_B_T) =>
                                                           zen.forall _p_B_T 
                                                             (v_Vxc:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.forall 
                                                                _p_B_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vxc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vwc 
                                                                    v_Vvd))))))) 
                                                          y 
                                                          (v_Vze:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vxc:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.forall 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y v_Vxc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y v_Vvd)))))))) =>
                                                           zen.Rall _p_B_T 
                                                             (v_Vxc:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.forall 
                                                                _p_B_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y v_Vxc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vxc 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y v_Vvd)))))) 
                                                             (abst_second_term 
                                                                (abst_second 
                                                                   x)) 
                                                             (v_Vaf:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y v_Vvd))))))) =>
                                                              zen.Rall 
                                                                _p_B_T 
                                                                (v_Vvd:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y v_Vvd))))) 
                                                                x 
                                                                (v_Vbf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y x)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y x)))) 
                                                                   (v_Vdd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x))))) 
                                                                    v_Vne 
                                                                    v_Vdd) 
                                                                   (v_Vcf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y x))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y x))) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second_term 
                                                                    (abst_second 
                                                                    x)) x))) 
                                                                    __N_1_1_LEMMA 
                                                                    v_Vdf) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y x)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    y x))) 
                                                                    v_Vef 
                                                                    v_Vad) 
                                                                    v_Vcf) 
                                                                   v_Vbf) 
                                                                v_Vaf) v_Vze) 
                                                          _p_B_equal_transitive) 
                                                       v_Vye) v_Voe) 
                                                 (v_Vff:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal y x) 
                                                              (_p_B_equal y x))))) =>
                                                  zen.Rsubst _p_B_T 
                                                    (v_Vgf:
                                                     (zen.term _p_B_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_B_equal y 
                                                                v_Vgf) 
                                                             (_p_B_equal y x)))) 
                                                    x x 
                                                    (v_Vhf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T x x)))) =>
                                                     zen.Rnoteq _p_B_T x 
                                                       v_Vhf) 
                                                    (v_Vff:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    y x) 
                                                                 (_p_B_equal 
                                                                    y x))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_B_equal y x) v_Vff) 
                                                    v_Vff) v_Vqe) 
                                              (v_Vef:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal y x)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal y x))) 
                                                 v_Vef v_Vad) __N_1_1_LEMMA) 
                                           v_Vlf) v_Vkf) v_Vjf) v_Vwd) 
                               _p_B_equal_transitive) 
                            (v_Vmf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_B_equal x x))))) =>
                             zen.Rnoteq _p_B_T x v_Vhf)))) 
                   (v_Vnf:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_B_equal x y)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_B_equal x y))) v_Vnf 
                      v_Vvc) v_Vzc) v_Vyc) _p_B_equal_symmetric)) 
         ((__N_1_3_1_LEMMA:
           (dk_logic.eP (dk_logic.ebP (abst_second_case (abst_second x)))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second_term (abst_second x)) 
                      (abst_second_term (abst_second y))))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second_term (abst_second x)) 
                             (abst_second_term (abst_second y))))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (abst_second_case v_Vac))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vac v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second_term v_Vac) 
                                  (abst_second_term v_Vbc))))))) 
                (abst_second x) 
                (v_Vcc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_second_case (abst_second x)))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_second x) v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_second_term (abst_second x)) 
                                      (abst_second_term v_Vbc)))))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true (abst_second_case (abst_second x)))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true (abst_equal (abst_second x) v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_second_term (abst_second x)) 
                                  (abst_second_term v_Vbc)))))) 
                   (abst_second y) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_second_case (abst_second x)))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_second x) 
                                      (abst_second y)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_second_term (abst_second x)) 
                                      (abst_second_term (abst_second y)))))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true (abst_second_case (abst_second x)))) 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_second x) (abst_second y)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_second_term (abst_second x)) 
                                  (abst_second_term (abst_second y)))))) 
                      (v_Vec:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_second_case (abst_second x)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_second_case (abst_second x)))) 
                         __N_1_3_1_LEMMA v_Vec) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_second x) 
                                      (abst_second y)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_second_term (abst_second x)) 
                                      (abst_second_term (abst_second y))))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_second x) (abst_second y)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_second_term (abst_second x)) 
                                  (abst_second_term (abst_second y))))) 
                         (v_Vgc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_second x) 
                                         (abst_second y)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_second x) (abst_second y)))) 
                            H v_Vgc) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_second_term (abst_second x)) 
                                      (abst_second_term (abst_second y)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal 
                                     (abst_second_term (abst_second x)) 
                                     (abst_second_term (abst_second y))))) 
                            v_Vhc v_Vzb) v_Vfc) v_Vdc) v_Vcc) 
                abst_second_term_substitution_rule)) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true (abst_second_case (abst_second x)))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true (abst_second_case (abst_second x)))))) =>
                zen.Rall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.triangle 
                     (focal.is_true (abst_second_case (abst_second v_Vac)))) 
                  x 
                  (v_Vbc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true (abst_second_case (abst_second x))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true (abst_second_case (abst_second x)))) 
                     v_Vbc v_Vzb) abst_second_has_case)))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (_p_B_equal (abst_second_term (abst_second y)) y))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_B_equal (abst_second_term (abst_second y)) y))))) =>
            zen.Rall _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.triangle 
                 (focal.is_true 
                    (_p_B_equal (abst_second_term (abst_second v_Vac)) v_Vac))) 
              y 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_B_equal (abst_second_term (abst_second y)) y)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_second_term (abst_second y)) y))) 
                 v_Vbc v_Vzb) abst_second_reverses_term))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true (_p_B_equal (abst_second_term (abst_second x)) x))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_second_term (abst_second x)) x))))) =>
           zen.Rall _p_B_T 
             (v_Vac:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second_term (abst_second v_Vac)) v_Vac))) 
             x 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_second_term (abst_second x)) x)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second_term (abst_second x)) x))) 
                v_Vbc v_Vzb) abst_second_reverses_term))).

def Categorical_sum_property__morph :
  _p_AX_T:cc.uT ->
  _p_BX_T:cc.uT ->
  _p_E_T:cc.uT ->
  _p_S_T:cc.uT ->
  _p_M_a_morph:((cc.eT _p_AX_T) -> cc.eT _p_E_T) ->
  _p_M_b_morph:((cc.eT _p_BX_T) -> cc.eT _p_E_T) ->
  _p_S_first_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_first_term:((cc.eT _p_S_T) -> cc.eT _p_AX_T) ->
  _p_S_second_term:((cc.eT _p_S_T) -> cc.eT _p_BX_T) ->
  x:(cc.eT _p_S_T) -> cc.eT _p_E_T
  :=
  _p_AX_T:cc.uT =>
  _p_BX_T:cc.uT =>
  _p_E_T:cc.uT =>
  _p_S_T:cc.uT =>
  _p_M_a_morph:((cc.eT _p_AX_T) -> cc.eT _p_E_T) =>
  _p_M_b_morph:((cc.eT _p_BX_T) -> cc.eT _p_E_T) =>
  _p_S_first_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_first_term:((cc.eT _p_S_T) -> cc.eT _p_AX_T) =>
  _p_S_second_term:((cc.eT _p_S_T) -> cc.eT _p_BX_T) =>
  x:(cc.eT _p_S_T) =>
  dk_bool.ite _p_E_T (_p_S_first_case x) (_p_M_a_morph (_p_S_first_term x)) 
    (_p_M_b_morph (_p_S_second_term x)).

def Categorical_sum_property__morph_first_substitution_rule :
  _p_AX_T:cc.uT ->
  _p_BX_T:cc.uT ->
  _p_E_T:cc.uT ->
  _p_S_T:cc.uT ->
  _p_AX_equal:((cc.eT _p_AX_T) -> (cc.eT _p_AX_T) -> cc.eT basics.bool__t) ->
  _p_BX_equal:((cc.eT _p_BX_T) -> (cc.eT _p_BX_T) -> cc.eT basics.bool__t) ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_M_a_morph:((cc.eT _p_AX_T) -> cc.eT _p_E_T) ->
  _p_M_a_morph_substitution_rule:(dk_logic.eP 
                                    (dk_logic.forall _p_AX_T 
                                       (x:(cc.eT _p_AX_T) =>
                                        dk_logic.forall _p_AX_T 
                                          (y:(cc.eT _p_AX_T) =>
                                           dk_logic.imp 
                                             (dk_logic.ebP (_p_AX_equal x y)) 
                                             (dk_logic.ebP 
                                                (_p_E_equal (_p_M_a_morph x) 
                                                   (_p_M_a_morph y))))))) ->
  _p_M_b_morph:((cc.eT _p_BX_T) -> cc.eT _p_E_T) ->
  _p_S_first_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_first_term:((cc.eT _p_S_T) -> cc.eT _p_AX_T) ->
  _p_S_second_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_second_term:((cc.eT _p_S_T) -> cc.eT _p_BX_T) ->
  _p_S_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall _p_S_T 
                            (x:(cc.eT _p_S_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (_p_S_first_case x)) 
                                  (dk_logic.ebP (_p_S_second_case x)))))) ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_spec:(dk_logic.eP 
                     (dk_logic.forall _p_S_T 
                        (x:(cc.eT _p_S_T) =>
                         dk_logic.forall _p_S_T 
                           (y:(cc.eT _p_S_T) =>
                            dk_logic.eqv (dk_logic.ebP (_p_S_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (_p_S_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (_p_S_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_AX_equal (_p_S_first_term x) 
                                             (_p_S_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (_p_S_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (_p_S_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_BX_equal (_p_S_second_term x) 
                                             (_p_S_second_term y)))))))))) ->
  _p_S_first_term_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall _p_S_T 
                                          (x_1:(cc.eT _p_S_T) =>
                                           dk_logic.forall _p_S_T 
                                             (x_2:(cc.eT _p_S_T) =>
                                              dk_logic.imp 
                                                (dk_logic.ebP 
                                                   (_p_S_first_case x_1)) 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (_p_S_equal x_1 x_2)) 
                                                   (dk_logic.ebP 
                                                      (_p_AX_equal 
                                                         (_p_S_first_term x_1) 
                                                         (_p_S_first_term x_2)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (dk_logic.imp (dk_logic.ebP (_p_S_first_case x)) 
                (dk_logic.ebP 
                   (_p_E_equal 
                      (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                         _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                         _p_S_first_case _p_S_first_term _p_S_second_term x) 
                      (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                         _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                         _p_S_first_case _p_S_first_term _p_S_second_term y)))))))
  :=
  _p_AX_T:cc.uT =>
  _p_BX_T:cc.uT =>
  _p_E_T:cc.uT =>
  _p_S_T:cc.uT =>
  _p_AX_equal:((cc.eT _p_AX_T) -> (cc.eT _p_AX_T) -> cc.eT basics.bool__t) =>
  _p_BX_equal:((cc.eT _p_BX_T) -> (cc.eT _p_BX_T) -> cc.eT basics.bool__t) =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_M_a_morph:((cc.eT _p_AX_T) -> cc.eT _p_E_T) =>
  _p_M_a_morph_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_AX_T 
        (x:(cc.eT _p_AX_T) =>
         dk_logic.forall _p_AX_T 
           (y:(cc.eT _p_AX_T) =>
            dk_logic.imp (dk_logic.ebP (_p_AX_equal x y)) 
              (dk_logic.ebP (_p_E_equal (_p_M_a_morph x) (_p_M_a_morph y))))))) =>
  _p_M_b_morph:((cc.eT _p_BX_T) -> cc.eT _p_E_T) =>
  _p_S_first_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_first_term:((cc.eT _p_S_T) -> cc.eT _p_AX_T) =>
  _p_S_second_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_second_term:((cc.eT _p_S_T) -> cc.eT _p_BX_T) =>
  _p_S_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (_p_S_first_case x)) 
              (dk_logic.ebP (_p_S_second_case x)))))) =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.eqv (dk_logic.ebP (_p_S_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (_p_S_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (_p_S_first_case y)) 
                       (dk_logic.ebP 
                          (_p_AX_equal (_p_S_first_term x) 
                             (_p_S_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (_p_S_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (_p_S_second_case y)) 
                       (dk_logic.ebP 
                          (_p_BX_equal (_p_S_second_term x) 
                             (_p_S_second_term y)))))))))) =>
  _p_S_first_term_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x_1:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (x_2:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_first_case x_1)) 
              (dk_logic.imp (dk_logic.ebP (_p_S_equal x_1 x_2)) 
                 (dk_logic.ebP 
                    (_p_AX_equal (_p_S_first_term x_1) (_p_S_first_term x_2)))))))) =>
  (__O_1_LEMMA:
   (x:(cc.eT _p_S_T) ->
    y:(cc.eT _p_S_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_S_equal x y))) ->
    H_x:(dk_logic.eP (dk_logic.ebP (_p_S_first_case x))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (_p_E_equal 
            (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T _p_S_T 
               _p_M_a_morph _p_M_b_morph _p_S_first_case _p_S_first_term 
               _p_S_second_term x) 
            (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T _p_S_T 
               _p_M_a_morph _p_M_b_morph _p_S_first_case _p_S_first_term 
               _p_S_second_term y)))) =>
   zen.nnpp 
     (zen.forall _p_S_T 
        (v_Vzb:(zen.term _p_S_T) =>
         zen.forall _p_S_T 
           (v_Vac:(zen.term _p_S_T) =>
            zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
              (zen.imp 
                 (zen.triangle (focal.is_true (_p_S_first_case v_Vzb))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal 
                          (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                             _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                             _p_S_first_case _p_S_first_term 
                             _p_S_second_term v_Vzb) 
                          (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                             _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                             _p_S_first_case _p_S_first_term 
                             _p_S_second_term v_Vac)))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_S_T 
               (v_Vzb:(zen.term _p_S_T) =>
                zen.forall _p_S_T 
                  (v_Vac:(zen.term _p_S_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                     (zen.imp 
                        (zen.triangle (focal.is_true (_p_S_first_case v_Vzb))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_E_equal 
                                 (Categorical_sum_property__morph _p_AX_T 
                                    _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                    _p_M_b_morph _p_S_first_case 
                                    _p_S_first_term _p_S_second_term v_Vzb) 
                                 (Categorical_sum_property__morph _p_AX_T 
                                    _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                    _p_M_b_morph _p_S_first_case 
                                    _p_S_first_term _p_S_second_term v_Vac)))))))))) =>
      zen.Raxiom 
        (zen.forall _p_S_T 
           (v_Vzb:(zen.term _p_S_T) =>
            zen.forall _p_S_T 
              (v_Vac:(zen.term _p_S_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_S_first_case v_Vzb))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_E_equal 
                             (Categorical_sum_property__morph _p_AX_T 
                                _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                _p_M_b_morph _p_S_first_case _p_S_first_term 
                                _p_S_second_term v_Vzb) 
                             (Categorical_sum_property__morph _p_AX_T 
                                _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                _p_M_b_morph _p_S_first_case _p_S_first_term 
                                _p_S_second_term v_Vac)))))))) __O_1_LEMMA 
        v_Vbc)) 
    (x:(cc.eT _p_S_T) =>
     y:(cc.eT _p_S_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_S_equal x y))) =>
     H_x:(dk_logic.eP (dk_logic.ebP (_p_S_first_case x))) =>
     (__O_1_1_LEMMA:(dk_logic.eP (dk_logic.ebP (_p_S_first_case y))) =>
      (__O_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
                (_p_M_a_morph (_p_S_first_term y))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (_p_E_equal 
                  (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                     _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                     _p_S_first_term _p_S_second_term x) 
                  (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                     _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                     _p_S_first_term _p_S_second_term y)))) 
         (v_Vgc:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (_p_E_equal 
                         (dk_bool.ite _p_E_T (_p_S_first_case x) 
                            (_p_M_a_morph (_p_S_first_term x)) 
                            (_p_M_b_morph (_p_S_second_term x))) 
                         (dk_bool.ite _p_E_T (_p_S_first_case y) 
                            (_p_M_a_morph (_p_S_first_term y)) 
                            (_p_M_b_morph (_p_S_second_term y)))))))) =>
          zen.Rsubst basics.bool__t 
            (v_Vhc:(zen.term basics.bool__t) =>
             zen.triangle (focal.is_true v_Vhc)) 
            (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
               (_p_M_a_morph (_p_S_first_term y))) 
            (_p_E_equal 
               (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                  _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                  _p_S_first_term _p_S_second_term x) 
               (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                  _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                  _p_S_first_term _p_S_second_term y)) 
            (v_Vic:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (zen.equal basics.bool__t 
                         (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
                            (_p_M_a_morph (_p_S_first_term y))) 
                         (_p_E_equal 
                            (dk_bool.ite _p_E_T (_p_S_first_case x) 
                               (_p_M_a_morph (_p_S_first_term x)) 
                               (_p_M_b_morph (_p_S_second_term x))) 
                            (dk_bool.ite _p_E_T (_p_S_first_case y) 
                               (_p_M_a_morph (_p_S_first_term y)) 
                               (_p_M_b_morph (_p_S_second_term y)))))))) =>
             zen.Rsubst _p_E_T 
               (v_Vjc:(zen.term _p_E_T) =>
                zen.not 
                  (zen.triangle 
                     (zen.equal basics.bool__t 
                        (_p_E_equal v_Vjc (_p_M_a_morph (_p_S_first_term y))) 
                        (_p_E_equal 
                           (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                              _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                              _p_S_first_case _p_S_first_term 
                              _p_S_second_term x) 
                           (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                              _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                              _p_S_first_case _p_S_first_term 
                              _p_S_second_term y))))) 
               (_p_M_a_morph (_p_S_first_term x)) 
               (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                  _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                  _p_S_first_term _p_S_second_term x) 
               (v_Vkc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_E_T 
                            (_p_M_a_morph (_p_S_first_term x)) 
                            (dk_bool.ite _p_E_T (_p_S_first_case x) 
                               (_p_M_a_morph (_p_S_first_term x)) 
                               (_p_M_b_morph (_p_S_second_term x))))))) =>
                focal.zenon_focal_ite_rel_nr _p_E_T _p_E_T 
                  (v_Vlc:(zen.term _p_E_T) =>
                   v_Vmc:(zen.term _p_E_T) =>
                   zen.triangle (zen.equal _p_E_T v_Vlc v_Vmc)) 
                  (_p_M_a_morph (_p_S_first_term x)) (_p_S_first_case x) 
                  (_p_M_a_morph (_p_S_first_term x)) 
                  (_p_M_b_morph (_p_S_second_term x)) 
                  (H_x0:
                   (zen.proof 
                      (zen.triangle (focal.is_true (_p_S_first_case x)))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_E_T 
                               (_p_M_a_morph (_p_S_first_term x)) 
                               (_p_M_a_morph (_p_S_first_term x)))))) =>
                   zen.Rnoteq _p_E_T (_p_M_a_morph (_p_S_first_term x)) v_Vnc) 
                  (v_Voc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle (focal.is_true (_p_S_first_case x))))) =>
                   v_Vpc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_E_T 
                               (_p_M_a_morph (_p_S_first_term x)) 
                               (_p_M_b_morph (_p_S_second_term x)))))) =>
                   zen.Raxiom 
                     (zen.triangle (focal.is_true (_p_S_first_case x))) H_x 
                     v_Voc) v_Vkc) 
               (v_Vqc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal basics.bool__t 
                            (_p_E_equal 
                               (dk_bool.ite _p_E_T (_p_S_first_case x) 
                                  (_p_M_a_morph (_p_S_first_term x)) 
                                  (_p_M_b_morph (_p_S_second_term x))) 
                               (_p_M_a_morph (_p_S_first_term y))) 
                            (_p_E_equal 
                               (dk_bool.ite _p_E_T (_p_S_first_case x) 
                                  (_p_M_a_morph (_p_S_first_term x)) 
                                  (_p_M_b_morph (_p_S_second_term x))) 
                               (dk_bool.ite _p_E_T (_p_S_first_case y) 
                                  (_p_M_a_morph (_p_S_first_term y)) 
                                  (_p_M_b_morph (_p_S_second_term y)))))))) =>
                zen.Rsubst _p_E_T 
                  (v_Vrc:(zen.term _p_E_T) =>
                   zen.not 
                     (zen.triangle 
                        (zen.equal basics.bool__t 
                           (_p_E_equal 
                              (Categorical_sum_property__morph _p_AX_T 
                                 _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                 _p_M_b_morph _p_S_first_case 
                                 _p_S_first_term _p_S_second_term x) v_Vrc) 
                           (_p_E_equal 
                              (Categorical_sum_property__morph _p_AX_T 
                                 _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                 _p_M_b_morph _p_S_first_case 
                                 _p_S_first_term _p_S_second_term x) 
                              (Categorical_sum_property__morph _p_AX_T 
                                 _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                 _p_M_b_morph _p_S_first_case 
                                 _p_S_first_term _p_S_second_term y))))) 
                  (_p_M_a_morph (_p_S_first_term y)) 
                  (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                     _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                     _p_S_first_term _p_S_second_term y) 
                  (v_Vsc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_E_T 
                               (_p_M_a_morph (_p_S_first_term y)) 
                               (dk_bool.ite _p_E_T (_p_S_first_case y) 
                                  (_p_M_a_morph (_p_S_first_term y)) 
                                  (_p_M_b_morph (_p_S_second_term y))))))) =>
                   focal.zenon_focal_ite_rel_nr _p_E_T _p_E_T 
                     (v_Vlc:(zen.term _p_E_T) =>
                      v_Vmc:(zen.term _p_E_T) =>
                      zen.triangle (zen.equal _p_E_T v_Vlc v_Vmc)) 
                     (_p_M_a_morph (_p_S_first_term y)) (_p_S_first_case y) 
                     (_p_M_a_morph (_p_S_first_term y)) 
                     (_p_M_b_morph (_p_S_second_term y)) 
                     (__O_1_1_LEMMA0:
                      (zen.proof 
                         (zen.triangle (focal.is_true (_p_S_first_case y)))) =>
                      v_Vtc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_E_T 
                                  (_p_M_a_morph (_p_S_first_term y)) 
                                  (_p_M_a_morph (_p_S_first_term y)))))) =>
                      zen.Rnoteq _p_E_T (_p_M_a_morph (_p_S_first_term y)) 
                        v_Vtc) 
                     (v_Vuc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (_p_S_first_case y))))) =>
                      v_Vvc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_E_T 
                                  (_p_M_a_morph (_p_S_first_term y)) 
                                  (_p_M_b_morph (_p_S_second_term y)))))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (_p_S_first_case y))) 
                        __O_1_1_LEMMA v_Vuc) v_Vsc) 
                  (v_Vwc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (_p_E_equal 
                                  (dk_bool.ite _p_E_T (_p_S_first_case x) 
                                     (_p_M_a_morph (_p_S_first_term x)) 
                                     (_p_M_b_morph (_p_S_second_term x))) 
                                  (dk_bool.ite _p_E_T (_p_S_first_case y) 
                                     (_p_M_a_morph (_p_S_first_term y)) 
                                     (_p_M_b_morph (_p_S_second_term y)))) 
                               (_p_E_equal 
                                  (dk_bool.ite _p_E_T (_p_S_first_case x) 
                                     (_p_M_a_morph (_p_S_first_term x)) 
                                     (_p_M_b_morph (_p_S_second_term x))) 
                                  (dk_bool.ite _p_E_T (_p_S_first_case y) 
                                     (_p_M_a_morph (_p_S_first_term y)) 
                                     (_p_M_b_morph (_p_S_second_term y)))))))) =>
                   zen.Rnoteq basics.bool__t 
                     (_p_E_equal 
                        (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                           _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                           _p_S_first_case _p_S_first_term _p_S_second_term x) 
                        (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                           _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                           _p_S_first_case _p_S_first_term _p_S_second_term y)) 
                     v_Vwc) v_Vqc) v_Vic) 
            (v_Vxc:
             (zen.proof 
                (zen.triangle 
                   (focal.is_true 
                      (_p_E_equal 
                         (dk_bool.ite _p_E_T (_p_S_first_case x) 
                            (_p_M_a_morph (_p_S_first_term x)) 
                            (_p_M_b_morph (_p_S_second_term x))) 
                         (dk_bool.ite _p_E_T (_p_S_first_case y) 
                            (_p_M_a_morph (_p_S_first_term y)) 
                            (_p_M_b_morph (_p_S_second_term y))))))) =>
             zen.Raxiom 
               (zen.triangle 
                  (focal.is_true 
                     (_p_E_equal 
                        (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                           _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                           _p_S_first_case _p_S_first_term _p_S_second_term x) 
                        (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                           _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                           _p_S_first_case _p_S_first_term _p_S_second_term y)))) 
               v_Vxc v_Vgc) __O_1_2_LEMMA)) 
        ((__O_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_AX_equal (_p_S_first_term x) (_p_S_first_term y)))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
                     (_p_M_a_morph (_p_S_first_term y))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
                            (_p_M_a_morph (_p_S_first_term y))))))) =>
             zen.Rall _p_AX_T 
               (v_Vac:(zen.term _p_AX_T) =>
                zen.forall _p_AX_T 
                  (v_Vbc:(zen.term _p_AX_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_AX_equal v_Vac v_Vbc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_E_equal (_p_M_a_morph v_Vac) 
                              (_p_M_a_morph v_Vbc)))))) (_p_S_first_term x) 
               (v_Vcc:
                (zen.proof 
                   (zen.forall _p_AX_T 
                      (v_Vbc:(zen.term _p_AX_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_AX_equal (_p_S_first_term x) v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal 
                                  (_p_M_a_morph (_p_S_first_term x)) 
                                  (_p_M_a_morph v_Vbc))))))) =>
                zen.Rall _p_AX_T 
                  (v_Vbc:(zen.term _p_AX_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_AX_equal (_p_S_first_term x) v_Vbc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
                              (_p_M_a_morph v_Vbc))))) (_p_S_first_term y) 
                  (v_Vdc:
                   (zen.proof 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_AX_equal (_p_S_first_term x) 
                                  (_p_S_first_term y)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal 
                                  (_p_M_a_morph (_p_S_first_term x)) 
                                  (_p_M_a_morph (_p_S_first_term y))))))) =>
                   zen.Rimply 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_AX_equal (_p_S_first_term x) 
                              (_p_S_first_term y)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
                              (_p_M_a_morph (_p_S_first_term y))))) 
                     (v_Vec:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_AX_equal (_p_S_first_term x) 
                                 (_p_S_first_term y)))) __O_1_2_1_LEMMA v_Vec) 
                     (v_Vfc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal 
                                  (_p_M_a_morph (_p_S_first_term x)) 
                                  (_p_M_a_morph (_p_S_first_term y)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_E_equal (_p_M_a_morph (_p_S_first_term x)) 
                                 (_p_M_a_morph (_p_S_first_term y))))) v_Vfc 
                        v_Vzb) v_Vdc) v_Vcc) _p_M_a_morph_substitution_rule)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_AX_equal (_p_S_first_term x) (_p_S_first_term y)))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_AX_equal (_p_S_first_term x) 
                              (_p_S_first_term y)))))) =>
               zen.Rall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.forall _p_S_T 
                    (v_Vbc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_S_first_case v_Vac))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_AX_equal (_p_S_first_term v_Vac) 
                                   (_p_S_first_term v_Vbc))))))) x 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall _p_S_T 
                        (v_Vbc:(zen.term _p_S_T) =>
                         zen.imp 
                           (zen.triangle (focal.is_true (_p_S_first_case x))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (_p_S_equal x v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_AX_equal (_p_S_first_term x) 
                                       (_p_S_first_term v_Vbc)))))))) =>
                  zen.Rall _p_S_T 
                    (v_Vbc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_S_first_case x))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (_p_S_equal x v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_AX_equal (_p_S_first_term x) 
                                   (_p_S_first_term v_Vbc)))))) y 
                    (v_Vdc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle (focal.is_true (_p_S_first_case x))) 
                           (zen.imp 
                              (zen.triangle (focal.is_true (_p_S_equal x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_AX_equal (_p_S_first_term x) 
                                       (_p_S_first_term y))))))) =>
                     zen.Rimply 
                       (zen.triangle (focal.is_true (_p_S_first_case x))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (_p_S_equal x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_AX_equal (_p_S_first_term x) 
                                   (_p_S_first_term y))))) 
                       (v_Vec:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (_p_S_first_case x))))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (_p_S_first_case x))) 
                          H_x v_Vec) 
                       (v_Vfc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle (focal.is_true (_p_S_equal x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_AX_equal (_p_S_first_term x) 
                                       (_p_S_first_term y)))))) =>
                        zen.Rimply 
                          (zen.triangle (focal.is_true (_p_S_equal x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_AX_equal (_p_S_first_term x) 
                                   (_p_S_first_term y)))) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (_p_S_equal x y))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (_p_S_equal x y))) 
                             H v_Vgc) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_AX_equal (_p_S_first_term x) 
                                       (_p_S_first_term y))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_AX_equal (_p_S_first_term x) 
                                      (_p_S_first_term y)))) v_Vhc v_Vzb) 
                          v_Vfc) v_Vdc) v_Vcc) 
                 _p_S_first_term_substitution_rule)))) 
       (zen.nnpp (zen.triangle (focal.is_true (_p_S_first_case y))) 
          (v_Vac:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (_p_S_first_case y))))) =>
           zen.Rall _p_S_T 
             (v_Vbc:(zen.term _p_S_T) =>
              zen.forall _p_S_T 
                (v_Vcc:(zen.term _p_S_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vcc))) 
                   (zen.or 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (_p_S_first_case v_Vbc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_first_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term v_Vbc) 
                                     (_p_S_first_term v_Vcc)))))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (_p_S_second_case v_Vbc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term v_Vbc) 
                                     (_p_S_second_term v_Vcc))))))))) x 
             (v_Vdc:
              (zen.proof 
                 (zen.forall _p_S_T 
                    (v_Vcc:(zen.term _p_S_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (_p_S_equal x v_Vcc))) 
                       (zen.or 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term v_Vcc)))))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term v_Vcc)))))))))) =>
              zen.Rall _p_S_T 
                (v_Vcc:(zen.term _p_S_T) =>
                 zen.eqv (zen.triangle (focal.is_true (_p_S_equal x v_Vcc))) 
                   (zen.or 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_first_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term v_Vcc)))))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term v_Vcc)))))))) y 
                (v_Vec:
                 (zen.proof 
                    (zen.eqv (zen.triangle (focal.is_true (_p_S_equal x y))) 
                       (zen.or 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y)))))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y))))))))) =>
                 zen.Requiv (zen.triangle (focal.is_true (_p_S_equal x y))) 
                   (zen.or 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y)))))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y))))))) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_S_equal x y))))) =>
                    v_Vgc:
                    (zen.proof 
                       (zen.not 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (_p_S_first_case y))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_AX_equal (_p_S_first_term x) 
                                            (_p_S_first_term y)))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (_p_S_second_case y))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_BX_equal (_p_S_second_term x) 
                                            (_p_S_second_term y))))))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_S_equal x y))) H v_Vfc) 
                   (H0:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_S_equal x y)))) =>
                    v_Vhc:
                    (zen.proof 
                       (zen.or 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y)))))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y)))))))) =>
                    zen.Ror 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y)))))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y)))))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y))))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y))))) 
                         (H_x0:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x)))) =>
                          v_Vjc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y)))))) =>
                          zen.Rand 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y)))) 
                            (v_Vkc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y)))) =>
                             v_Vlc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_S_first_case y))) v_Vkc 
                               v_Vac) v_Vjc) v_Vic) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y))))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y))))) 
                         (v_Vnc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x)))) =>
                          v_Voc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y)))))) =>
                          zen.Rand 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y)))) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y)))) =>
                             v_Vqc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y))))) =>
                             zen.Rall _p_S_T 
                               (v_Vbc:(zen.term _p_S_T) =>
                                zen.not 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S_first_case v_Vbc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S_second_case v_Vbc))))) x 
                               (v_Vrc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_first_case x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_second_case x)))))) =>
                                zen.Rnotand 
                                  (zen.triangle 
                                     (focal.is_true (_p_S_first_case x))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S_second_case x))) 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_first_case x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (_p_S_first_case x))) 
                                     H_x v_Vsc) 
                                  (v_Vtc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_second_case x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (_p_S_second_case x))) 
                                     v_Vnc v_Vtc) v_Vrc) _p_S_case_exclusive) 
                            v_Voc) v_Vmc) v_Vhc) v_Vec) v_Vdc) 
             _p_S_equal_spec))).

def Categorical_sum_property__morph_second_substitution_rule :
  _p_AX_T:cc.uT ->
  _p_BX_T:cc.uT ->
  _p_E_T:cc.uT ->
  _p_S_T:cc.uT ->
  _p_AX_equal:((cc.eT _p_AX_T) -> (cc.eT _p_AX_T) -> cc.eT basics.bool__t) ->
  _p_BX_equal:((cc.eT _p_BX_T) -> (cc.eT _p_BX_T) -> cc.eT basics.bool__t) ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_M_a_morph:((cc.eT _p_AX_T) -> cc.eT _p_E_T) ->
  _p_M_b_morph:((cc.eT _p_BX_T) -> cc.eT _p_E_T) ->
  _p_M_b_morph_substitution_rule:(dk_logic.eP 
                                    (dk_logic.forall _p_BX_T 
                                       (x:(cc.eT _p_BX_T) =>
                                        dk_logic.forall _p_BX_T 
                                          (y:(cc.eT _p_BX_T) =>
                                           dk_logic.imp 
                                             (dk_logic.ebP (_p_BX_equal x y)) 
                                             (dk_logic.ebP 
                                                (_p_E_equal (_p_M_b_morph x) 
                                                   (_p_M_b_morph y))))))) ->
  _p_S_first_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_first_term:((cc.eT _p_S_T) -> cc.eT _p_AX_T) ->
  _p_S_second_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_second_term:((cc.eT _p_S_T) -> cc.eT _p_BX_T) ->
  _p_S_case_complete:(dk_logic.eP 
                        (dk_logic.forall _p_S_T 
                           (x:(cc.eT _p_S_T) =>
                            dk_logic.or (dk_logic.ebP (_p_S_first_case x)) 
                              (dk_logic.ebP (_p_S_second_case x))))) ->
  _p_S_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall _p_S_T 
                            (x:(cc.eT _p_S_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (_p_S_first_case x)) 
                                  (dk_logic.ebP (_p_S_second_case x)))))) ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_spec:(dk_logic.eP 
                     (dk_logic.forall _p_S_T 
                        (x:(cc.eT _p_S_T) =>
                         dk_logic.forall _p_S_T 
                           (y:(cc.eT _p_S_T) =>
                            dk_logic.eqv (dk_logic.ebP (_p_S_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (_p_S_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (_p_S_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_AX_equal (_p_S_first_term x) 
                                             (_p_S_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (_p_S_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (_p_S_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_BX_equal (_p_S_second_term x) 
                                             (_p_S_second_term y)))))))))) ->
  _p_S_second_term_substitution_rule:(dk_logic.eP 
                                        (dk_logic.forall _p_S_T 
                                           (x_1:(cc.eT _p_S_T) =>
                                            dk_logic.forall _p_S_T 
                                              (x_2:(cc.eT _p_S_T) =>
                                               dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (_p_S_second_case x_1)) 
                                                 (dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (_p_S_equal x_1 x_2)) 
                                                    (dk_logic.ebP 
                                                       (_p_BX_equal 
                                                          (_p_S_second_term 
                                                             x_1) 
                                                          (_p_S_second_term 
                                                             x_2)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (dk_logic.imp (dk_logic.ebP (_p_S_second_case x)) 
                (dk_logic.ebP 
                   (_p_E_equal 
                      (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                         _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                         _p_S_first_case _p_S_first_term _p_S_second_term x) 
                      (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                         _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                         _p_S_first_case _p_S_first_term _p_S_second_term y)))))))
  :=
  _p_AX_T:cc.uT =>
  _p_BX_T:cc.uT =>
  _p_E_T:cc.uT =>
  _p_S_T:cc.uT =>
  _p_AX_equal:((cc.eT _p_AX_T) -> (cc.eT _p_AX_T) -> cc.eT basics.bool__t) =>
  _p_BX_equal:((cc.eT _p_BX_T) -> (cc.eT _p_BX_T) -> cc.eT basics.bool__t) =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_M_a_morph:((cc.eT _p_AX_T) -> cc.eT _p_E_T) =>
  _p_M_b_morph:((cc.eT _p_BX_T) -> cc.eT _p_E_T) =>
  _p_M_b_morph_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_BX_T 
        (x:(cc.eT _p_BX_T) =>
         dk_logic.forall _p_BX_T 
           (y:(cc.eT _p_BX_T) =>
            dk_logic.imp (dk_logic.ebP (_p_BX_equal x y)) 
              (dk_logic.ebP (_p_E_equal (_p_M_b_morph x) (_p_M_b_morph y))))))) =>
  _p_S_first_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_first_term:((cc.eT _p_S_T) -> cc.eT _p_AX_T) =>
  _p_S_second_case:((cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_second_term:((cc.eT _p_S_T) -> cc.eT _p_BX_T) =>
  _p_S_case_complete:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.or (dk_logic.ebP (_p_S_first_case x)) 
           (dk_logic.ebP (_p_S_second_case x))))) =>
  _p_S_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (_p_S_first_case x)) 
              (dk_logic.ebP (_p_S_second_case x)))))) =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.eqv (dk_logic.ebP (_p_S_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (_p_S_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (_p_S_first_case y)) 
                       (dk_logic.ebP 
                          (_p_AX_equal (_p_S_first_term x) 
                             (_p_S_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (_p_S_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (_p_S_second_case y)) 
                       (dk_logic.ebP 
                          (_p_BX_equal (_p_S_second_term x) 
                             (_p_S_second_term y)))))))))) =>
  _p_S_second_term_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x_1:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (x_2:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_second_case x_1)) 
              (dk_logic.imp (dk_logic.ebP (_p_S_equal x_1 x_2)) 
                 (dk_logic.ebP 
                    (_p_BX_equal (_p_S_second_term x_1) 
                       (_p_S_second_term x_2)))))))) =>
  (__P_1_LEMMA:
   (x:(cc.eT _p_S_T) ->
    y:(cc.eT _p_S_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_S_equal x y))) ->
    H_x:(dk_logic.eP (dk_logic.ebP (_p_S_second_case x))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (_p_E_equal 
            (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T _p_S_T 
               _p_M_a_morph _p_M_b_morph _p_S_first_case _p_S_first_term 
               _p_S_second_term x) 
            (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T _p_S_T 
               _p_M_a_morph _p_M_b_morph _p_S_first_case _p_S_first_term 
               _p_S_second_term y)))) =>
   zen.nnpp 
     (zen.forall _p_S_T 
        (v_Vzb:(zen.term _p_S_T) =>
         zen.forall _p_S_T 
           (v_Vac:(zen.term _p_S_T) =>
            zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
              (zen.imp 
                 (zen.triangle (focal.is_true (_p_S_second_case v_Vzb))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_E_equal 
                          (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                             _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                             _p_S_first_case _p_S_first_term 
                             _p_S_second_term v_Vzb) 
                          (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                             _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                             _p_S_first_case _p_S_first_term 
                             _p_S_second_term v_Vac)))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_S_T 
               (v_Vzb:(zen.term _p_S_T) =>
                zen.forall _p_S_T 
                  (v_Vac:(zen.term _p_S_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (_p_S_second_case v_Vzb))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_E_equal 
                                 (Categorical_sum_property__morph _p_AX_T 
                                    _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                    _p_M_b_morph _p_S_first_case 
                                    _p_S_first_term _p_S_second_term v_Vzb) 
                                 (Categorical_sum_property__morph _p_AX_T 
                                    _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                    _p_M_b_morph _p_S_first_case 
                                    _p_S_first_term _p_S_second_term v_Vac)))))))))) =>
      zen.Raxiom 
        (zen.forall _p_S_T 
           (v_Vzb:(zen.term _p_S_T) =>
            zen.forall _p_S_T 
              (v_Vac:(zen.term _p_S_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_S_second_case v_Vzb))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_E_equal 
                             (Categorical_sum_property__morph _p_AX_T 
                                _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                _p_M_b_morph _p_S_first_case _p_S_first_term 
                                _p_S_second_term v_Vzb) 
                             (Categorical_sum_property__morph _p_AX_T 
                                _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                _p_M_b_morph _p_S_first_case _p_S_first_term 
                                _p_S_second_term v_Vac)))))))) __P_1_LEMMA 
        v_Vbc)) 
    (x:(cc.eT _p_S_T) =>
     y:(cc.eT _p_S_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_S_equal x y))) =>
     H_x:(dk_logic.eP (dk_logic.ebP (_p_S_second_case x))) =>
     (__P_1_1_LEMMA:(dk_logic.eP (dk_logic.ebP (_p_S_second_case y))) =>
      (__P_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_E_equal (_p_M_b_morph (_p_S_second_term x)) 
                (_p_M_b_morph (_p_S_second_term y))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (_p_E_equal 
                  (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                     _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                     _p_S_first_term _p_S_second_term x) 
                  (Categorical_sum_property__morph _p_AX_T _p_BX_T _p_E_T 
                     _p_S_T _p_M_a_morph _p_M_b_morph _p_S_first_case 
                     _p_S_first_term _p_S_second_term y)))) 
         (v_Vgc:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (_p_E_equal 
                         (dk_bool.ite _p_E_T (_p_S_first_case x) 
                            (_p_M_a_morph (_p_S_first_term x)) 
                            (_p_M_b_morph (_p_S_second_term x))) 
                         (dk_bool.ite _p_E_T (_p_S_first_case y) 
                            (_p_M_a_morph (_p_S_first_term y)) 
                            (_p_M_b_morph (_p_S_second_term y)))))))) =>
          zen.Rall _p_S_T 
            (v_Vhc:(zen.term _p_S_T) =>
             zen.not 
               (zen.and 
                  (zen.triangle (focal.is_true (_p_S_first_case v_Vhc))) 
                  (zen.triangle (focal.is_true (_p_S_second_case v_Vhc))))) 
            x 
            (v_Vic:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.triangle (focal.is_true (_p_S_first_case x))) 
                      (zen.triangle (focal.is_true (_p_S_second_case x)))))) =>
             zen.Rnotand (zen.triangle (focal.is_true (_p_S_first_case x))) 
               (zen.triangle (focal.is_true (_p_S_second_case x))) 
               (v_Vjc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle (focal.is_true (_p_S_first_case x))))) =>
                zen.Rall _p_S_T 
                  (v_Vhc:(zen.term _p_S_T) =>
                   zen.not 
                     (zen.and 
                        (zen.triangle (focal.is_true (_p_S_first_case v_Vhc))) 
                        (zen.triangle 
                           (focal.is_true (_p_S_second_case v_Vhc))))) y 
                  (v_Vkc:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y)))))) =>
                   zen.Rnotand 
                     (zen.triangle (focal.is_true (_p_S_first_case y))) 
                     (zen.triangle (focal.is_true (_p_S_second_case y))) 
                     (v_Vlc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (_p_S_first_case y))))) =>
                      zen.Rsubst basics.bool__t 
                        (v_Vmc:(zen.term basics.bool__t) =>
                         zen.triangle (focal.is_true v_Vmc)) 
                        (_p_E_equal (_p_M_b_morph (_p_S_second_term x)) 
                           (_p_M_b_morph (_p_S_second_term y))) 
                        (_p_E_equal 
                           (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                              _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                              _p_S_first_case _p_S_first_term 
                              _p_S_second_term x) 
                           (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                              _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                              _p_S_first_case _p_S_first_term 
                              _p_S_second_term y)) 
                        (v_Vnc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_E_equal 
                                        (_p_M_b_morph (_p_S_second_term x)) 
                                        (_p_M_b_morph (_p_S_second_term y))) 
                                     (_p_E_equal 
                                        (dk_bool.ite _p_E_T 
                                           (_p_S_first_case x) 
                                           (_p_M_a_morph (_p_S_first_term x)) 
                                           (_p_M_b_morph (_p_S_second_term x))) 
                                        (dk_bool.ite _p_E_T 
                                           (_p_S_first_case y) 
                                           (_p_M_a_morph (_p_S_first_term y)) 
                                           (_p_M_b_morph (_p_S_second_term y)))))))) =>
                         zen.Rsubst _p_E_T 
                           (v_Voc:(zen.term _p_E_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_E_equal v_Voc 
                                       (_p_M_b_morph (_p_S_second_term y))) 
                                    (_p_E_equal 
                                       (Categorical_sum_property__morph 
                                          _p_AX_T _p_BX_T _p_E_T _p_S_T 
                                          _p_M_a_morph _p_M_b_morph 
                                          _p_S_first_case _p_S_first_term 
                                          _p_S_second_term x) 
                                       (Categorical_sum_property__morph 
                                          _p_AX_T _p_BX_T _p_E_T _p_S_T 
                                          _p_M_a_morph _p_M_b_morph 
                                          _p_S_first_case _p_S_first_term 
                                          _p_S_second_term y))))) 
                           (_p_M_b_morph (_p_S_second_term x)) 
                           (Categorical_sum_property__morph _p_AX_T _p_BX_T 
                              _p_E_T _p_S_T _p_M_a_morph _p_M_b_morph 
                              _p_S_first_case _p_S_first_term 
                              _p_S_second_term x) 
                           (v_Vpc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_E_T 
                                        (_p_M_b_morph (_p_S_second_term x)) 
                                        (dk_bool.ite _p_E_T 
                                           (_p_S_first_case x) 
                                           (_p_M_a_morph (_p_S_first_term x)) 
                                           (_p_M_b_morph (_p_S_second_term x))))))) =>
                            focal.zenon_focal_ite_rel_nr _p_E_T _p_E_T 
                              (v_Vqc:(zen.term _p_E_T) =>
                               v_Vrc:(zen.term _p_E_T) =>
                               zen.triangle (zen.equal _p_E_T v_Vqc v_Vrc)) 
                              (_p_M_b_morph (_p_S_second_term x)) 
                              (_p_S_first_case x) 
                              (_p_M_a_morph (_p_S_first_term x)) 
                              (_p_M_b_morph (_p_S_second_term x)) 
                              (v_Vsc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true (_p_S_first_case x)))) =>
                               v_Vtc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_E_T 
                                           (_p_M_b_morph (_p_S_second_term x)) 
                                           (_p_M_a_morph (_p_S_first_term x)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true (_p_S_first_case x))) 
                                 v_Vsc v_Vjc) 
                              (v_Vjc0:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true (_p_S_first_case x))))) =>
                               v_Vuc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_E_T 
                                           (_p_M_b_morph (_p_S_second_term x)) 
                                           (_p_M_b_morph (_p_S_second_term x)))))) =>
                               zen.Rnoteq _p_E_T 
                                 (_p_M_b_morph (_p_S_second_term x)) v_Vuc) 
                              v_Vpc) 
                           (v_Vvc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_E_equal 
                                           (dk_bool.ite _p_E_T 
                                              (_p_S_first_case x) 
                                              (_p_M_a_morph 
                                                 (_p_S_first_term x)) 
                                              (_p_M_b_morph 
                                                 (_p_S_second_term x))) 
                                           (_p_M_b_morph (_p_S_second_term y))) 
                                        (_p_E_equal 
                                           (dk_bool.ite _p_E_T 
                                              (_p_S_first_case x) 
                                              (_p_M_a_morph 
                                                 (_p_S_first_term x)) 
                                              (_p_M_b_morph 
                                                 (_p_S_second_term x))) 
                                           (dk_bool.ite _p_E_T 
                                              (_p_S_first_case y) 
                                              (_p_M_a_morph 
                                                 (_p_S_first_term y)) 
                                              (_p_M_b_morph 
                                                 (_p_S_second_term y)))))))) =>
                            zen.Rsubst _p_E_T 
                              (v_Vwc:(zen.term _p_E_T) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_E_equal 
                                          (Categorical_sum_property__morph 
                                             _p_AX_T _p_BX_T _p_E_T _p_S_T 
                                             _p_M_a_morph _p_M_b_morph 
                                             _p_S_first_case _p_S_first_term 
                                             _p_S_second_term x) v_Vwc) 
                                       (_p_E_equal 
                                          (Categorical_sum_property__morph 
                                             _p_AX_T _p_BX_T _p_E_T _p_S_T 
                                             _p_M_a_morph _p_M_b_morph 
                                             _p_S_first_case _p_S_first_term 
                                             _p_S_second_term x) 
                                          (Categorical_sum_property__morph 
                                             _p_AX_T _p_BX_T _p_E_T _p_S_T 
                                             _p_M_a_morph _p_M_b_morph 
                                             _p_S_first_case _p_S_first_term 
                                             _p_S_second_term y))))) 
                              (_p_M_b_morph (_p_S_second_term y)) 
                              (Categorical_sum_property__morph _p_AX_T 
                                 _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                 _p_M_b_morph _p_S_first_case 
                                 _p_S_first_term _p_S_second_term y) 
                              (v_Vxc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_E_T 
                                           (_p_M_b_morph (_p_S_second_term y)) 
                                           (dk_bool.ite _p_E_T 
                                              (_p_S_first_case y) 
                                              (_p_M_a_morph 
                                                 (_p_S_first_term y)) 
                                              (_p_M_b_morph 
                                                 (_p_S_second_term y))))))) =>
                               focal.zenon_focal_ite_rel_nr _p_E_T _p_E_T 
                                 (v_Vqc:(zen.term _p_E_T) =>
                                  v_Vrc:(zen.term _p_E_T) =>
                                  zen.triangle (zen.equal _p_E_T v_Vqc v_Vrc)) 
                                 (_p_M_b_morph (_p_S_second_term y)) 
                                 (_p_S_first_case y) 
                                 (_p_M_a_morph (_p_S_first_term y)) 
                                 (_p_M_b_morph (_p_S_second_term y)) 
                                 (v_Vyc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (_p_S_first_case y)))) =>
                                  v_Vzc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_E_T 
                                              (_p_M_b_morph 
                                                 (_p_S_second_term y)) 
                                              (_p_M_a_morph 
                                                 (_p_S_first_term y)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (_p_S_first_case y))) 
                                    v_Vyc v_Vlc) 
                                 (v_Vlc0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true (_p_S_first_case y))))) =>
                                  v_Vad:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_E_T 
                                              (_p_M_b_morph 
                                                 (_p_S_second_term y)) 
                                              (_p_M_b_morph 
                                                 (_p_S_second_term y)))))) =>
                                  zen.Rnoteq _p_E_T 
                                    (_p_M_b_morph (_p_S_second_term y)) v_Vad) 
                                 v_Vxc) 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_E_equal 
                                              (dk_bool.ite _p_E_T 
                                                 (_p_S_first_case x) 
                                                 (_p_M_a_morph 
                                                    (_p_S_first_term x)) 
                                                 (_p_M_b_morph 
                                                    (_p_S_second_term x))) 
                                              (dk_bool.ite _p_E_T 
                                                 (_p_S_first_case y) 
                                                 (_p_M_a_morph 
                                                    (_p_S_first_term y)) 
                                                 (_p_M_b_morph 
                                                    (_p_S_second_term y)))) 
                                           (_p_E_equal 
                                              (dk_bool.ite _p_E_T 
                                                 (_p_S_first_case x) 
                                                 (_p_M_a_morph 
                                                    (_p_S_first_term x)) 
                                                 (_p_M_b_morph 
                                                    (_p_S_second_term x))) 
                                              (dk_bool.ite _p_E_T 
                                                 (_p_S_first_case y) 
                                                 (_p_M_a_morph 
                                                    (_p_S_first_term y)) 
                                                 (_p_M_b_morph 
                                                    (_p_S_second_term y)))))))) =>
                               zen.Rnoteq basics.bool__t 
                                 (_p_E_equal 
                                    (Categorical_sum_property__morph _p_AX_T 
                                       _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                       _p_M_b_morph _p_S_first_case 
                                       _p_S_first_term _p_S_second_term x) 
                                    (Categorical_sum_property__morph _p_AX_T 
                                       _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                       _p_M_b_morph _p_S_first_case 
                                       _p_S_first_term _p_S_second_term y)) 
                                 v_Vbd) v_Vvc) v_Vnc) 
                        (v_Vcd:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_E_equal 
                                     (dk_bool.ite _p_E_T (_p_S_first_case x) 
                                        (_p_M_a_morph (_p_S_first_term x)) 
                                        (_p_M_b_morph (_p_S_second_term x))) 
                                     (dk_bool.ite _p_E_T (_p_S_first_case y) 
                                        (_p_M_a_morph (_p_S_first_term y)) 
                                        (_p_M_b_morph (_p_S_second_term y))))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_E_equal 
                                    (Categorical_sum_property__morph _p_AX_T 
                                       _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                       _p_M_b_morph _p_S_first_case 
                                       _p_S_first_term _p_S_second_term x) 
                                    (Categorical_sum_property__morph _p_AX_T 
                                       _p_BX_T _p_E_T _p_S_T _p_M_a_morph 
                                       _p_M_b_morph _p_S_first_case 
                                       _p_S_first_term _p_S_second_term y)))) 
                           v_Vcd v_Vgc) __P_1_2_LEMMA) 
                     (v_Vdd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (_p_S_second_case y))) 
                        __P_1_1_LEMMA v_Vdd) v_Vkc) _p_S_case_exclusive) 
               (v_Ved:
                (zen.proof 
                   (zen.not 
                      (zen.triangle (focal.is_true (_p_S_second_case x))))) =>
                zen.Raxiom 
                  (zen.triangle (focal.is_true (_p_S_second_case x))) H_x 
                  v_Ved) v_Vic) _p_S_case_exclusive)) 
        ((__P_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_BX_equal (_p_S_second_term x) (_p_S_second_term y)))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_E_equal (_p_M_b_morph (_p_S_second_term x)) 
                     (_p_M_b_morph (_p_S_second_term y))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_E_equal (_p_M_b_morph (_p_S_second_term x)) 
                            (_p_M_b_morph (_p_S_second_term y))))))) =>
             zen.Rall _p_BX_T 
               (v_Vac:(zen.term _p_BX_T) =>
                zen.forall _p_BX_T 
                  (v_Vbc:(zen.term _p_BX_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_BX_equal v_Vac v_Vbc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_E_equal (_p_M_b_morph v_Vac) 
                              (_p_M_b_morph v_Vbc)))))) (_p_S_second_term x) 
               (v_Vcc:
                (zen.proof 
                   (zen.forall _p_BX_T 
                      (v_Vbc:(zen.term _p_BX_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_BX_equal (_p_S_second_term x) v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal 
                                  (_p_M_b_morph (_p_S_second_term x)) 
                                  (_p_M_b_morph v_Vbc))))))) =>
                zen.Rall _p_BX_T 
                  (v_Vbc:(zen.term _p_BX_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_BX_equal (_p_S_second_term x) v_Vbc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_E_equal (_p_M_b_morph (_p_S_second_term x)) 
                              (_p_M_b_morph v_Vbc))))) (_p_S_second_term y) 
                  (v_Vdc:
                   (zen.proof 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_BX_equal (_p_S_second_term x) 
                                  (_p_S_second_term y)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal 
                                  (_p_M_b_morph (_p_S_second_term x)) 
                                  (_p_M_b_morph (_p_S_second_term y))))))) =>
                   zen.Rimply 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_BX_equal (_p_S_second_term x) 
                              (_p_S_second_term y)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_E_equal (_p_M_b_morph (_p_S_second_term x)) 
                              (_p_M_b_morph (_p_S_second_term y))))) 
                     (v_Vec:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_BX_equal (_p_S_second_term x) 
                                 (_p_S_second_term y)))) __P_1_2_1_LEMMA 
                        v_Vec) 
                     (v_Vfc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_E_equal 
                                  (_p_M_b_morph (_p_S_second_term x)) 
                                  (_p_M_b_morph (_p_S_second_term y)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_E_equal 
                                 (_p_M_b_morph (_p_S_second_term x)) 
                                 (_p_M_b_morph (_p_S_second_term y))))) 
                        v_Vfc v_Vzb) v_Vdc) v_Vcc) 
               _p_M_b_morph_substitution_rule)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_BX_equal (_p_S_second_term x) (_p_S_second_term y)))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_BX_equal (_p_S_second_term x) 
                              (_p_S_second_term y)))))) =>
               zen.Rall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.forall _p_S_T 
                    (v_Vbc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_S_second_case v_Vac))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_BX_equal (_p_S_second_term v_Vac) 
                                   (_p_S_second_term v_Vbc))))))) x 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall _p_S_T 
                        (v_Vbc:(zen.term _p_S_T) =>
                         zen.imp 
                           (zen.triangle (focal.is_true (_p_S_second_case x))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (_p_S_equal x v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_BX_equal (_p_S_second_term x) 
                                       (_p_S_second_term v_Vbc)))))))) =>
                  zen.Rall _p_S_T 
                    (v_Vbc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (_p_S_second_case x))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (_p_S_equal x v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_BX_equal (_p_S_second_term x) 
                                   (_p_S_second_term v_Vbc)))))) y 
                    (v_Vdc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle (focal.is_true (_p_S_second_case x))) 
                           (zen.imp 
                              (zen.triangle (focal.is_true (_p_S_equal x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_BX_equal (_p_S_second_term x) 
                                       (_p_S_second_term y))))))) =>
                     zen.Rimply 
                       (zen.triangle (focal.is_true (_p_S_second_case x))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (_p_S_equal x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_BX_equal (_p_S_second_term x) 
                                   (_p_S_second_term y))))) 
                       (v_Vec:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (_p_S_second_case x))))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (_p_S_second_case x))) 
                          H_x v_Vec) 
                       (v_Vfc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle (focal.is_true (_p_S_equal x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_BX_equal (_p_S_second_term x) 
                                       (_p_S_second_term y)))))) =>
                        zen.Rimply 
                          (zen.triangle (focal.is_true (_p_S_equal x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_BX_equal (_p_S_second_term x) 
                                   (_p_S_second_term y)))) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (_p_S_equal x y))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (_p_S_equal x y))) 
                             H v_Vgc) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_BX_equal (_p_S_second_term x) 
                                       (_p_S_second_term y))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_BX_equal (_p_S_second_term x) 
                                      (_p_S_second_term y)))) v_Vhc v_Vzb) 
                          v_Vfc) v_Vdc) v_Vcc) 
                 _p_S_second_term_substitution_rule)))) 
       (zen.nnpp (zen.triangle (focal.is_true (_p_S_second_case y))) 
          (v_Vac:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (_p_S_second_case y))))) =>
           zen.Rall _p_S_T 
             (v_Vbc:(zen.term _p_S_T) =>
              zen.forall _p_S_T 
                (v_Vcc:(zen.term _p_S_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vcc))) 
                   (zen.or 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (_p_S_first_case v_Vbc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_first_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term v_Vbc) 
                                     (_p_S_first_term v_Vcc)))))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true (_p_S_second_case v_Vbc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term v_Vbc) 
                                     (_p_S_second_term v_Vcc))))))))) x 
             (v_Vdc:
              (zen.proof 
                 (zen.forall _p_S_T 
                    (v_Vcc:(zen.term _p_S_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (_p_S_equal x v_Vcc))) 
                       (zen.or 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term v_Vcc)))))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term v_Vcc)))))))))) =>
              zen.Rall _p_S_T 
                (v_Vcc:(zen.term _p_S_T) =>
                 zen.eqv (zen.triangle (focal.is_true (_p_S_equal x v_Vcc))) 
                   (zen.or 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_first_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term v_Vcc)))))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term v_Vcc)))))))) y 
                (v_Vec:
                 (zen.proof 
                    (zen.eqv (zen.triangle (focal.is_true (_p_S_equal x y))) 
                       (zen.or 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y)))))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y))))))))) =>
                 zen.Requiv (zen.triangle (focal.is_true (_p_S_equal x y))) 
                   (zen.or 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y)))))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y))))))) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_S_equal x y))))) =>
                    v_Vgc:
                    (zen.proof 
                       (zen.not 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (_p_S_first_case y))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_AX_equal (_p_S_first_term x) 
                                            (_p_S_first_term y)))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (_p_S_second_case y))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_BX_equal (_p_S_second_term x) 
                                            (_p_S_second_term y))))))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_S_equal x y))) H v_Vfc) 
                   (H0:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_S_equal x y)))) =>
                    v_Vhc:
                    (zen.proof 
                       (zen.or 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y)))))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y)))))))) =>
                    zen.Ror 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y)))))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y)))))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y))))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (_p_S_first_case x))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y))))) 
                         (v_Vjc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_S_first_case x)))) =>
                          v_Vkc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y)))))) =>
                          zen.Rand 
                            (zen.triangle (focal.is_true (_p_S_first_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_AX_equal (_p_S_first_term x) 
                                     (_p_S_first_term y)))) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_S_first_case y)))) =>
                             v_Vmc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_AX_equal (_p_S_first_term x) 
                                         (_p_S_first_term y))))) =>
                             zen.Rall _p_S_T 
                               (v_Vbc:(zen.term _p_S_T) =>
                                zen.not 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S_first_case v_Vbc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S_second_case v_Vbc))))) x 
                               (v_Vnc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_first_case x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_second_case x)))))) =>
                                zen.Rnotand 
                                  (zen.triangle 
                                     (focal.is_true (_p_S_first_case x))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S_second_case x))) 
                                  (v_Voc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_first_case x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (_p_S_first_case x))) 
                                     v_Vjc v_Voc) 
                                  (v_Vpc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_second_case x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (_p_S_second_case x))) 
                                     H_x v_Vpc) v_Vnc) _p_S_case_exclusive) 
                            v_Vkc) v_Vic) 
                      (v_Vqc:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y))))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (_p_S_second_case x))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y))))) 
                         (H_x0:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_S_second_case x)))) =>
                          v_Vrc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y)))))) =>
                          zen.Rand 
                            (zen.triangle 
                               (focal.is_true (_p_S_second_case y))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_BX_equal (_p_S_second_term x) 
                                     (_p_S_second_term y)))) 
                            (v_Vsc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_S_second_case y)))) =>
                             v_Vtc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_BX_equal (_p_S_second_term x) 
                                         (_p_S_second_term y))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_S_second_case y))) 
                               v_Vsc v_Vac) v_Vrc) v_Vqc) v_Vhc) v_Vec) v_Vdc) 
             _p_S_equal_spec))).

def Disjoint_sum__sum_is_non_trivial :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_first_has_case:(dk_logic.eP 
                         (dk_logic.forall _p_A_T 
                            (x:(cc.eT _p_A_T) =>
                             dk_logic.ebP (abst_first_case (abst_first x))))) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_second_has_case:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (abst_second_case (abst_second x))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall _p_B_T 
          (y:(cc.eT _p_B_T) =>
           dk_logic.not 
             (dk_logic.ebP (abst_equal (abst_first x) (abst_second y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_first_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_first_case (abst_first x))))) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_second_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (abst_second_case (abst_second x))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  zen.nnpp 
    (zen.forall _p_A_T 
       (v_Vac:(zen.term _p_A_T) =>
        zen.forall _p_B_T 
          (v_Vbc:(zen.term _p_B_T) =>
           zen.not 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_first v_Vac) (abst_second v_Vbc))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.forall _p_B_T 
                 (v_Vbc:(zen.term _p_B_T) =>
                  zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_first v_Vac) (abst_second v_Vbc))))))))) =>
     zen.Rnotall _p_A_T 
       (v_Vac:(zen.term _p_A_T) =>
        zen.forall _p_B_T 
          (v_Vbc:(zen.term _p_B_T) =>
           zen.not 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_first v_Vac) (abst_second v_Vbc)))))) 
       (v_Vdc:(zen.term _p_A_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall _p_B_T 
                 (v_Vbc:(zen.term _p_B_T) =>
                  zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_first v_Vdc) (abst_second v_Vbc)))))))) =>
        zen.Rnotall _p_B_T 
          (v_Vbc:(zen.term _p_B_T) =>
           zen.not 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_first v_Vdc) (abst_second v_Vbc))))) 
          (v_Vfc:(zen.term _p_B_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_first v_Vdc) (abst_second v_Vfc))))))) =>
           zen.Rnotnot 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_first v_Vdc) (abst_second v_Vfc)))) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_first v_Vdc) (abst_second v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vic:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vjc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vic v_Vjc))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_first_case v_Vic))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vjc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_first_term v_Vic) 
                                        (abst_first_term v_Vjc)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (abst_second_case v_Vic))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vjc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second_term v_Vic) 
                                        (abst_second_term v_Vjc))))))))) 
                (abst_first v_Vdc) 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vjc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_first v_Vdc) v_Vjc))) 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_first_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_first_case v_Vjc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_first_term 
                                               (abst_first v_Vdc)) 
                                            (abst_first_term v_Vjc)))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_second_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_second_case v_Vjc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term 
                                               (abst_first v_Vdc)) 
                                            (abst_second_term v_Vjc)))))))))) =>
                 zen.Rall abst_T 
                   (v_Vjc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true (abst_equal (abst_first v_Vdc) v_Vjc))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_first_case v_Vjc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term (abst_first v_Vdc)) 
                                        (abst_first_term v_Vjc)))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_second_case v_Vjc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term (abst_first v_Vdc)) 
                                        (abst_second_term v_Vjc)))))))) 
                   (abst_second v_Vfc) 
                   (v_Vlc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_first v_Vdc) 
                                   (abst_second v_Vfc)))) 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_first_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_first_case (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_first_term 
                                               (abst_first v_Vdc)) 
                                            (abst_first_term 
                                               (abst_second v_Vfc))))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_second_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_second_case 
                                            (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term 
                                               (abst_first v_Vdc)) 
                                            (abst_second_term 
                                               (abst_second v_Vfc)))))))))) =>
                    zen.Requiv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_first v_Vdc) 
                               (abst_second v_Vfc)))) 
                      (zen.or 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term (abst_first v_Vdc)) 
                                        (abst_first_term (abst_second v_Vfc))))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term (abst_first v_Vdc)) 
                                        (abst_second_term (abst_second v_Vfc)))))))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_first v_Vdc) 
                                      (abst_second v_Vfc)))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.or 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_first_case (abst_first v_Vdc)))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_first_case 
                                               (abst_second v_Vfc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (abst_first_term 
                                                  (abst_first v_Vdc)) 
                                               (abst_first_term 
                                                  (abst_second v_Vfc))))))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_second_case (abst_first v_Vdc)))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case 
                                               (abst_second v_Vfc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second_term 
                                                  (abst_first v_Vdc)) 
                                               (abst_second_term 
                                                  (abst_second v_Vfc)))))))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_first v_Vdc) 
                                  (abst_second v_Vfc)))) v_Vhc v_Vmc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_first v_Vdc) 
                                   (abst_second v_Vfc))))) =>
                       v_Voc:
                       (zen.proof 
                          (zen.or 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_first_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_first_case (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_first_term 
                                               (abst_first v_Vdc)) 
                                            (abst_first_term 
                                               (abst_second v_Vfc))))))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_second_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_second_case 
                                            (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term 
                                               (abst_first v_Vdc)) 
                                            (abst_second_term 
                                               (abst_second v_Vfc))))))))) =>
                       zen.Ror 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term (abst_first v_Vdc)) 
                                        (abst_first_term (abst_second v_Vfc))))))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term (abst_first v_Vdc)) 
                                        (abst_second_term (abst_second v_Vfc))))))) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_first_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_first_case (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_first_term 
                                               (abst_first v_Vdc)) 
                                            (abst_first_term 
                                               (abst_second v_Vfc)))))))) =>
                          zen.Rand 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_first_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term (abst_first v_Vdc)) 
                                        (abst_first_term (abst_second v_Vfc)))))) 
                            (v_Vqc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_first_case (abst_first v_Vdc))))) =>
                             v_Vrc:
                             (zen.proof 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_first_case (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_first_term 
                                               (abst_first v_Vdc)) 
                                            (abst_first_term 
                                               (abst_second v_Vfc))))))) =>
                             zen.Rand 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (abst_first_term (abst_first v_Vdc)) 
                                        (abst_first_term (abst_second v_Vfc))))) 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_first_case (abst_second v_Vfc))))) =>
                                v_Vtc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (abst_first_term 
                                               (abst_first v_Vdc)) 
                                            (abst_first_term 
                                               (abst_second v_Vfc)))))) =>
                                zen.Rall _p_B_T 
                                  (v_Vuc:(zen.term _p_B_T) =>
                                   zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case (abst_second v_Vuc)))) 
                                  v_Vfc 
                                  (v_Vvc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_second_case 
                                               (abst_second v_Vfc))))) =>
                                   zen.Rall abst_T 
                                     (v_Vic:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_first_case v_Vic))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case v_Vic))))) 
                                     (abst_second v_Vfc) 
                                     (v_Vwc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case 
                                                        (abst_second v_Vfc)))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case 
                                                        (abst_second v_Vfc))))))) =>
                                      zen.Rnotand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case 
                                                 (abst_second v_Vfc)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case 
                                                 (abst_second v_Vfc)))) 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_first_case 
                                                        (abst_second v_Vfc)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_first_case 
                                                    (abst_second v_Vfc)))) 
                                           v_Vsc v_Vxc) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_second_case 
                                                        (abst_second v_Vfc)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_second_case 
                                                    (abst_second v_Vfc)))) 
                                           v_Vvc v_Vyc) v_Vwc) 
                                     abst_case_exclusive) 
                                  abst_second_has_case) v_Vrc) v_Vpc) 
                         (v_Vzc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_second_case (abst_first v_Vdc)))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_second_case 
                                            (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term 
                                               (abst_first v_Vdc)) 
                                            (abst_second_term 
                                               (abst_second v_Vfc)))))))) =>
                          zen.Rand 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_second_case (abst_first v_Vdc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term (abst_first v_Vdc)) 
                                        (abst_second_term (abst_second v_Vfc)))))) 
                            (v_Vad:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_second_case (abst_first v_Vdc))))) =>
                             v_Vbd:
                             (zen.proof 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_second_case 
                                            (abst_second v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term 
                                               (abst_first v_Vdc)) 
                                            (abst_second_term 
                                               (abst_second v_Vfc))))))) =>
                             zen.Rand 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case (abst_second v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second_term (abst_first v_Vdc)) 
                                        (abst_second_term (abst_second v_Vfc))))) 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_second_case 
                                            (abst_second v_Vfc))))) =>
                                v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second_term 
                                               (abst_first v_Vdc)) 
                                            (abst_second_term 
                                               (abst_second v_Vfc)))))) =>
                                zen.Rall abst_T 
                                  (v_Vic:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case v_Vic))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case v_Vic))))) 
                                  (abst_first v_Vdc) 
                                  (v_Vdd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case 
                                                     (abst_first v_Vdc)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case 
                                                     (abst_first v_Vdc))))))) =>
                                   zen.Rnotand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case 
                                              (abst_first v_Vdc)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case 
                                              (abst_first v_Vdc)))) 
                                     (v_Ved:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case 
                                                     (abst_first v_Vdc)))))) =>
                                      zen.Rall _p_A_T 
                                        (v_Vac:(zen.term _p_A_T) =>
                                         zen.triangle 
                                           (focal.is_true 
                                              (abst_first_case 
                                                 (abst_first v_Vac)))) v_Vdc 
                                        (v_Vqc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_first_case 
                                                     (abst_first v_Vdc))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_first_case 
                                                    (abst_first v_Vdc)))) 
                                           v_Vqc v_Ved) abst_first_has_case) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_second_case 
                                                     (abst_first v_Vdc)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_second_case 
                                                 (abst_first v_Vdc)))) v_Vad 
                                        v_Vfd) v_Vdd) abst_case_exclusive) 
                               v_Vbd) v_Vzc) v_Voc) v_Vlc) v_Vkc) 
                abst_equal_spec) v_Vgc) v_Vec) v_Vcc).

def Disjoint_sum__sum_has_distinct :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_element:(cc.eT _p_B_T) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) ->
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_first_has_case:(dk_logic.eP 
                         (dk_logic.forall _p_A_T 
                            (x:(cc.eT _p_A_T) =>
                             dk_logic.ebP (abst_first_case (abst_first x))))) ->
  abst_case_exclusive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.not 
                               (dk_logic.and 
                                  (dk_logic.ebP (abst_first_case x)) 
                                  (dk_logic.ebP (abst_second_case x)))))) ->
  abst_second_has_case:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (abst_second_case (abst_second x))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_spec:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                              (dk_logic.or 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_first_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_first_case y)) 
                                       (dk_logic.ebP 
                                          (_p_A_equal (abst_first_term x) 
                                             (abst_first_term y))))) 
                                 (dk_logic.and 
                                    (dk_logic.ebP (abst_second_case x)) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (abst_second_case y)) 
                                       (dk_logic.ebP 
                                          (_p_B_equal (abst_second_term x) 
                                             (abst_second_term y)))))))))) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  dk_logic.eP 
    (dk_logic.exists abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.exists abst_T 
          (y:(cc.eT abst_T) => dk_logic.ebP (abst_different x y))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_element:(cc.eT _p_B_T) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT _p_A_T) -> cc.eT abst_T) =>
  abst_first_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_first_term:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second_case:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_second_term:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_first_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_first_case (abst_first x))))) =>
  abst_case_exclusive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.not 
           (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
              (dk_logic.ebP (abst_second_case x)))))) =>
  abst_second_has_case:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (abst_second_case (abst_second x))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.or 
                 (dk_logic.and (dk_logic.ebP (abst_first_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_first_case y)) 
                       (dk_logic.ebP 
                          (_p_A_equal (abst_first_term x) (abst_first_term y))))) 
                 (dk_logic.and (dk_logic.ebP (abst_second_case x)) 
                    (dk_logic.and (dk_logic.ebP (abst_second_case y)) 
                       (dk_logic.ebP 
                          (_p_B_equal (abst_second_term x) 
                             (abst_second_term y)))))))))) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  (__R_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.not 
         (dk_logic.ebP 
            (abst_equal (abst_first _p_A_element) (abst_second _p_B_element))))) =>
   zen.nnpp 
     (zen.exists abst_T 
        (v_Vac:(zen.term abst_T) =>
         zen.exists abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.triangle (focal.is_true (abst_different v_Vac v_Vbc))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.exists abst_T 
               (v_Vac:(zen.term abst_T) =>
                zen.exists abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.triangle (focal.is_true (abst_different v_Vac v_Vbc))))))) =>
      zen.Rnotex abst_T 
        (v_Vac:(zen.term abst_T) =>
         zen.exists abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.triangle (focal.is_true (abst_different v_Vac v_Vbc)))) 
        (abst_first _p_A_element) 
        (v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.exists abst_T 
                  (v_Vbc:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (abst_different (abst_first _p_A_element) v_Vbc)))))) =>
         zen.Rnotex abst_T 
           (v_Vbc:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true (abst_different (abst_first _p_A_element) v_Vbc))) 
           (abst_second _p_B_element) 
           (v_Vec:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_different (abst_first _p_A_element) 
                           (abst_second _p_B_element)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vac v_Vbc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
              (abst_first _p_A_element) 
              (v_Vfc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_different (abst_first _p_A_element) v_Vbc))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_first _p_A_element) v_Vbc))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_different (abst_first _p_A_element) v_Vbc))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_first _p_A_element) v_Vbc))))) 
                 (abst_second _p_B_element) 
                 (v_Vgc:
                  (zen.proof 
                     (zen.eqv 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_different (abst_first _p_A_element) 
                                 (abst_second _p_B_element)))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_first _p_A_element) 
                                    (abst_second _p_B_element))))))) =>
                  zen.Requiv 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_different (abst_first _p_A_element) 
                             (abst_second _p_B_element)))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_first _p_A_element) 
                                (abst_second _p_B_element))))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_different (abst_first _p_A_element) 
                                    (abst_second _p_B_element)))))) =>
                     v_Vhc:
                     (zen.proof 
                        (zen.not 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_first _p_A_element) 
                                       (abst_second _p_B_element))))))) =>
                     zen.Raxiom 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_first _p_A_element) 
                                   (abst_second _p_B_element))))) 
                       __R_1_LEMMA v_Vhc) 
                    (v_Vic:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_different (abst_first _p_A_element) 
                                 (abst_second _p_B_element))))) =>
                     __R_1_LEMMA:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_first _p_A_element) 
                                    (abst_second _p_B_element)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_different (abst_first _p_A_element) 
                                (abst_second _p_B_element)))) v_Vic v_Vec) 
                    v_Vgc) v_Vfc) abst_same_is_not_different) v_Vdc) v_Vcc)) 
    ((__R_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.not 
            (dk_logic.ebP (abst_second_case (abst_first _p_A_element))))) =>
      (__R_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.not 
             (dk_logic.ebP (abst_first_case (abst_second _p_B_element))))) =>
       zen.nnpp 
         (zen.not 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_first _p_A_element) 
                     (abst_second _p_B_element))))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_first _p_A_element) 
                            (abst_second _p_B_element))))))) =>
          zen.Rnotnot 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_first _p_A_element) 
                     (abst_second _p_B_element)))) 
            (v_Vbc:
             (zen.proof 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_first _p_A_element) 
                         (abst_second _p_B_element))))) =>
             zen.Rall abst_T 
               (v_Vcc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vdc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_first_case v_Vcc))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case v_Vdc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal (abst_first_term v_Vcc) 
                                       (abst_first_term v_Vdc)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true (abst_second_case v_Vcc))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case v_Vdc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (abst_second_term v_Vcc) 
                                       (abst_second_term v_Vdc))))))))) 
               (abst_first _p_A_element) 
               (v_Vec:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vdc:(zen.term abst_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_first _p_A_element) v_Vdc))) 
                         (zen.or 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_first_case v_Vdc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first _p_A_element)) 
                                           (abst_first_term v_Vdc)))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_second_case v_Vdc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first _p_A_element)) 
                                           (abst_second_term v_Vdc)))))))))) =>
                zen.Rall abst_T 
                  (v_Vdc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_first _p_A_element) v_Vdc))) 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_first_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_first_case v_Vdc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term 
                                          (abst_first _p_A_element)) 
                                       (abst_first_term v_Vdc)))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (abst_second_case v_Vdc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term 
                                          (abst_first _p_A_element)) 
                                       (abst_second_term v_Vdc)))))))) 
                  (abst_second _p_B_element) 
                  (v_Vfc:
                   (zen.proof 
                      (zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_first _p_A_element) 
                                  (abst_second _p_B_element)))) 
                         (zen.or 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first _p_A_element)) 
                                           (abst_first_term 
                                              (abst_second _p_B_element))))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first _p_A_element)) 
                                           (abst_second_term 
                                              (abst_second _p_B_element)))))))))) =>
                   zen.Requiv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_first _p_A_element) 
                              (abst_second _p_B_element)))) 
                     (zen.or 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_first_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_first_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term 
                                          (abst_first _p_A_element)) 
                                       (abst_first_term 
                                          (abst_second _p_B_element))))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_second_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term 
                                          (abst_first _p_A_element)) 
                                       (abst_second_term 
                                          (abst_second _p_B_element)))))))) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_first _p_A_element) 
                                     (abst_second _p_B_element)))))) =>
                      v_Vhc:
                      (zen.proof 
                         (zen.not 
                            (zen.or 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case 
                                           (abst_first _p_A_element)))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_first_case 
                                              (abst_second _p_B_element)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first_term 
                                                 (abst_first _p_A_element)) 
                                              (abst_first_term 
                                                 (abst_second _p_B_element))))))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case 
                                           (abst_first _p_A_element)))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_second_case 
                                              (abst_second _p_B_element)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second_term 
                                                 (abst_first _p_A_element)) 
                                              (abst_second_term 
                                                 (abst_second _p_B_element)))))))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_first _p_A_element) 
                                 (abst_second _p_B_element)))) v_Vbc v_Vgc) 
                     (v_Vbc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_first _p_A_element) 
                                  (abst_second _p_B_element))))) =>
                      v_Vic:
                      (zen.proof 
                         (zen.or 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first _p_A_element)) 
                                           (abst_first_term 
                                              (abst_second _p_B_element))))))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first _p_A_element)) 
                                           (abst_second_term 
                                              (abst_second _p_B_element))))))))) =>
                      zen.Ror 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_first_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_first_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term 
                                          (abst_first _p_A_element)) 
                                       (abst_first_term 
                                          (abst_second _p_B_element))))))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_second_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term 
                                          (abst_first _p_A_element)) 
                                       (abst_second_term 
                                          (abst_second _p_B_element))))))) 
                        (v_Vjc:
                         (zen.proof 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first _p_A_element)) 
                                           (abst_first_term 
                                              (abst_second _p_B_element)))))))) =>
                         zen.Rand 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_first_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_first_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term 
                                          (abst_first _p_A_element)) 
                                       (abst_first_term 
                                          (abst_second _p_B_element)))))) 
                           (v_Vkc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_first_case 
                                        (abst_first _p_A_element))))) =>
                            v_Vlc:
                            (zen.proof 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first _p_A_element)) 
                                           (abst_first_term 
                                              (abst_second _p_B_element))))))) =>
                            zen.Rand 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_first_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first_term 
                                          (abst_first _p_A_element)) 
                                       (abst_first_term 
                                          (abst_second _p_B_element))))) 
                              (v_Vmc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_first_case 
                                           (abst_second _p_B_element))))) =>
                               v_Vnc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first_term 
                                              (abst_first _p_A_element)) 
                                           (abst_first_term 
                                              (abst_second _p_B_element)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_first_case 
                                          (abst_second _p_B_element)))) 
                                 v_Vmc __R_1_2_LEMMA) v_Vlc) v_Vjc) 
                        (v_Voc:
                         (zen.proof 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_first _p_A_element)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first _p_A_element)) 
                                           (abst_second_term 
                                              (abst_second _p_B_element)))))))) =>
                         zen.Rand 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_second_case (abst_first _p_A_element)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_second_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term 
                                          (abst_first _p_A_element)) 
                                       (abst_second_term 
                                          (abst_second _p_B_element)))))) 
                           (v_Vpc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_second_case 
                                        (abst_first _p_A_element))))) =>
                            v_Vqc:
                            (zen.proof 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case 
                                           (abst_second _p_B_element)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first _p_A_element)) 
                                           (abst_second_term 
                                              (abst_second _p_B_element))))))) =>
                            zen.Rand 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_second_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (abst_second_term 
                                          (abst_first _p_A_element)) 
                                       (abst_second_term 
                                          (abst_second _p_B_element))))) 
                              (v_Vrc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_second_case 
                                           (abst_second _p_B_element))))) =>
                               v_Vsc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second_term 
                                              (abst_first _p_A_element)) 
                                           (abst_second_term 
                                              (abst_second _p_B_element)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_second_case 
                                          (abst_first _p_A_element)))) v_Vpc 
                                 __R_1_1_LEMMA) v_Vqc) v_Voc) v_Vic) v_Vfc) 
                  v_Vec) abst_equal_spec) v_Vac)) 
        (zen.nnpp 
           (zen.not 
              (zen.triangle 
                 (focal.is_true (abst_first_case (abst_second _p_B_element))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_first_case (abst_second _p_B_element))))))) =>
            zen.Rnotnot 
              (zen.triangle 
                 (focal.is_true (abst_first_case (abst_second _p_B_element)))) 
              (v_Vac:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_first_case (abst_second _p_B_element))))) =>
               zen.Rall _p_B_T 
                 (v_Vbc:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true (abst_second_case (abst_second v_Vbc)))) 
                 _p_B_element 
                 (v_Vcc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_second_case (abst_second _p_B_element))))) =>
                  zen.Rall abst_T 
                    (v_Vdc:(zen.term abst_T) =>
                     zen.not 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_first_case v_Vdc))) 
                          (zen.triangle 
                             (focal.is_true (abst_second_case v_Vdc))))) 
                    (abst_second _p_B_element) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_first_case 
                                       (abst_second _p_B_element)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_second_case 
                                       (abst_second _p_B_element))))))) =>
                     zen.Rnotand 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_first_case (abst_second _p_B_element)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_second_case (abst_second _p_B_element)))) 
                       (v_Vfc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_first_case 
                                       (abst_second _p_B_element)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_first_case (abst_second _p_B_element)))) 
                          v_Vac v_Vfc) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_second_case 
                                       (abst_second _p_B_element)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_second_case (abst_second _p_B_element)))) 
                          v_Vcc v_Vgc) v_Vec) abst_case_exclusive) 
                 abst_second_has_case) v_Vzb))) 
       (zen.nnpp 
          (zen.not 
             (zen.triangle 
                (focal.is_true (abst_second_case (abst_first _p_A_element))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_second_case (abst_first _p_A_element))))))) =>
           zen.Rnotnot 
             (zen.triangle 
                (focal.is_true (abst_second_case (abst_first _p_A_element)))) 
             (v_Vac:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_second_case (abst_first _p_A_element))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.not 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_first_case v_Vbc))) 
                      (zen.triangle (focal.is_true (abst_second_case v_Vbc))))) 
                (abst_first _p_A_element) 
                (v_Vcc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_first_case (abst_first _p_A_element)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_second_case (abst_first _p_A_element))))))) =>
                 zen.Rnotand 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_first_case (abst_first _p_A_element)))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_second_case (abst_first _p_A_element)))) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_first_case (abst_first _p_A_element)))))) =>
                    zen.Rall _p_A_T 
                      (v_Vec:(zen.term _p_A_T) =>
                       zen.triangle 
                         (focal.is_true (abst_first_case (abst_first v_Vec)))) 
                      _p_A_element 
                      (v_Vfc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_first_case (abst_first _p_A_element))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_first_case (abst_first _p_A_element)))) 
                         v_Vfc v_Vdc) abst_first_has_case) 
                   (v_Vgc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_second_case (abst_first _p_A_element)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_second_case (abst_first _p_A_element)))) 
                      v_Vac v_Vgc) v_Vcc) abst_case_exclusive) v_Vzb))).

__simple_variant__t : __var_a:cc.uT -> __var_b:cc.uT -> Type.

def simple_variant__t : __var_a:cc.uT -> __var_b:cc.uT -> cc.uT.

[__var_b, __var_a]
  cc.eT (simple_variant__t __var_a __var_b)
  -->
  __simple_variant__t __var_a __var_b.

First :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  (cc.eT __var_a) -> cc.eT (simple_variant__t __var_a __var_b).

Second :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  (cc.eT __var_b) -> cc.eT (simple_variant__t __var_a __var_b).

def match__First :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (simple_variant__t __var_a __var_b)) ->
  ((cc.eT __var_a) -> cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, x_0_, Ret_type, __var_b, __var_a]
  match__First __var_a __var_b Ret_type (First __var_a __var_b x_0_) pattern 
    default
  -->
  pattern x_0_.

[default, pattern, x_0_, Ret_type, __var_b, __var_a]
  match__First __var_a __var_b Ret_type (Second __var_a __var_b x_0_) 
    pattern default
  -->
  default.

def match__Second :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (simple_variant__t __var_a __var_b)) ->
  ((cc.eT __var_b) -> cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, x_0_, Ret_type, __var_b, __var_a]
  match__Second __var_a __var_b Ret_type (First __var_a __var_b x_0_) 
    pattern default
  -->
  default.

[default, pattern, x_0_, Ret_type, __var_b, __var_a]
  match__Second __var_a __var_b Ret_type (Second __var_a __var_b x_0_) 
    pattern default
  -->
  pattern x_0_.

def call_by_value_simple_variant__t :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  R:cc.uT ->
  ((cc.eT (simple_variant__t __var_a __var_b)) -> cc.eT R) ->
  (cc.eT (simple_variant__t __var_a __var_b)) -> cc.eT R.

[x_0_, f, R, __var_b, __var_a]
  dk_builtins.call_by_value (simple_variant__t __var_a __var_b) R f (First _ 
    _ x_0_)
  -->
  f (First __var_a __var_b x_0_).

[x_0_, f, R, __var_b, __var_a]
  dk_builtins.call_by_value (simple_variant__t __var_a __var_b) R f 
    (Second _ _ x_0_)
  -->
  f (Second __var_a __var_b x_0_).

Variant_sum__me_as_species :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) -> Type.

Variant_sum__mk_record :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  Variant_sum__rf_T:cc.uT ->
  Variant_sum__rf_first:((cc.eT A_T) -> cc.eT Variant_sum__rf_T) ->
  Variant_sum__rf_first_case:((cc.eT Variant_sum__rf_T) ->
                              cc.eT basics.bool__t) ->
  Variant_sum__rf_first_term:((cc.eT Variant_sum__rf_T) -> cc.eT A_T) ->
  Variant_sum__rf_parse:((cc.eT basics.string__t) -> cc.eT Variant_sum__rf_T) ->
  Variant_sum__rf_print:((cc.eT Variant_sum__rf_T) -> cc.eT basics.string__t) ->
  Variant_sum__rf_second:((cc.eT B_T) -> cc.eT Variant_sum__rf_T) ->
  Variant_sum__rf_second_case:((cc.eT Variant_sum__rf_T) ->
                               cc.eT basics.bool__t) ->
  Variant_sum__rf_second_term:((cc.eT Variant_sum__rf_T) -> cc.eT B_T) ->
  Variant_sum__rf_element:(cc.eT Variant_sum__rf_T) ->
  Variant_sum__rf_first_has_case:(dk_logic.eP 
                                    (dk_logic.forall A_T 
                                       (x:(cc.eT A_T) =>
                                        dk_logic.ebP 
                                          (Variant_sum__rf_first_case 
                                             (Variant_sum__rf_first x))))) ->
  Variant_sum__rf_first_reverses_term:(dk_logic.eP 
                                         (dk_logic.forall A_T 
                                            (x:(cc.eT A_T) =>
                                             dk_logic.ebP 
                                               (_p_A_equal 
                                                  (Variant_sum__rf_first_term 
                                                     (Variant_sum__rf_first x)) 
                                                  x)))) ->
  Variant_sum__rf_case_complete:(dk_logic.eP 
                                   (dk_logic.forall Variant_sum__rf_T 
                                      (x:(cc.eT Variant_sum__rf_T) =>
                                       dk_logic.or 
                                         (dk_logic.ebP 
                                            (Variant_sum__rf_first_case x)) 
                                         (dk_logic.ebP 
                                            (Variant_sum__rf_second_case x))))) ->
  Variant_sum__rf_case_exclusive:(dk_logic.eP 
                                    (dk_logic.forall Variant_sum__rf_T 
                                       (x:(cc.eT Variant_sum__rf_T) =>
                                        dk_logic.not 
                                          (dk_logic.and 
                                             (dk_logic.ebP 
                                                (Variant_sum__rf_first_case x)) 
                                             (dk_logic.ebP 
                                                (Variant_sum__rf_second_case 
                                                   x)))))) ->
  Variant_sum__rf_second_has_case:(dk_logic.eP 
                                     (dk_logic.forall B_T 
                                        (x:(cc.eT B_T) =>
                                         dk_logic.ebP 
                                           (Variant_sum__rf_second_case 
                                              (Variant_sum__rf_second x))))) ->
  Variant_sum__rf_equal:((cc.eT Variant_sum__rf_T) ->
                         (cc.eT Variant_sum__rf_T) -> cc.eT basics.bool__t) ->
  Variant_sum__rf_second_reverses_term:(dk_logic.eP 
                                          (dk_logic.forall B_T 
                                             (x:(cc.eT B_T) =>
                                              dk_logic.ebP 
                                                (_p_B_equal 
                                                   (Variant_sum__rf_second_term 
                                                      (Variant_sum__rf_second 
                                                         x)) x)))) ->
  Variant_sum__rf_different:((cc.eT Variant_sum__rf_T) ->
                             (cc.eT Variant_sum__rf_T) ->
                             cc.eT basics.bool__t) ->
  Variant_sum__rf_equal_spec:(dk_logic.eP 
                                (dk_logic.forall Variant_sum__rf_T 
                                   (x:(cc.eT Variant_sum__rf_T) =>
                                    dk_logic.forall Variant_sum__rf_T 
                                      (y:(cc.eT Variant_sum__rf_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP 
                                            (Variant_sum__rf_equal x y)) 
                                         (dk_logic.or 
                                            (dk_logic.and 
                                               (dk_logic.ebP 
                                                  (Variant_sum__rf_first_case 
                                                     x)) 
                                               (dk_logic.and 
                                                  (dk_logic.ebP 
                                                     (Variant_sum__rf_first_case 
                                                        y)) 
                                                  (dk_logic.ebP 
                                                     (_p_A_equal 
                                                        (Variant_sum__rf_first_term 
                                                           x) 
                                                        (Variant_sum__rf_first_term 
                                                           y))))) 
                                            (dk_logic.and 
                                               (dk_logic.ebP 
                                                  (Variant_sum__rf_second_case 
                                                     x)) 
                                               (dk_logic.and 
                                                  (dk_logic.ebP 
                                                     (Variant_sum__rf_second_case 
                                                        y)) 
                                                  (dk_logic.ebP 
                                                     (_p_B_equal 
                                                        (Variant_sum__rf_second_term 
                                                           x) 
                                                        (Variant_sum__rf_second_term 
                                                           y)))))))))) ->
  Variant_sum__rf_first_substitution_rule:(dk_logic.eP 
                                             (dk_logic.forall A_T 
                                                (x:(cc.eT A_T) =>
                                                 dk_logic.forall A_T 
                                                   (y:(cc.eT A_T) =>
                                                    dk_logic.imp 
                                                      (dk_logic.ebP 
                                                         (_p_A_equal x y)) 
                                                      (dk_logic.ebP 
                                                         (Variant_sum__rf_equal 
                                                            (Variant_sum__rf_first 
                                                               x) 
                                                            (Variant_sum__rf_first 
                                                               y))))))) ->
  Variant_sum__rf_second_substitution_rule:(dk_logic.eP 
                                              (dk_logic.forall B_T 
                                                 (x:(cc.eT B_T) =>
                                                  dk_logic.forall B_T 
                                                    (y:(cc.eT B_T) =>
                                                     dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (_p_B_equal x y)) 
                                                       (dk_logic.ebP 
                                                          (Variant_sum__rf_equal 
                                                             (Variant_sum__rf_second 
                                                                x) 
                                                             (Variant_sum__rf_second 
                                                                y))))))) ->
  Variant_sum__rf_same_is_not_different:(dk_logic.eP 
                                           (dk_logic.forall 
                                              Variant_sum__rf_T 
                                              (x:(cc.eT Variant_sum__rf_T) =>
                                               dk_logic.forall 
                                                 Variant_sum__rf_T 
                                                 (y:
                                                  (cc.eT Variant_sum__rf_T) =>
                                                  dk_logic.eqv 
                                                    (dk_logic.ebP 
                                                       (Variant_sum__rf_different 
                                                          x y)) 
                                                    (dk_logic.not 
                                                       (dk_logic.ebP 
                                                          (Variant_sum__rf_equal 
                                                             x y))))))) ->
  Variant_sum__rf_equal_reflexive:(dk_logic.eP 
                                     (dk_logic.forall Variant_sum__rf_T 
                                        (x:(cc.eT Variant_sum__rf_T) =>
                                         dk_logic.ebP 
                                           (Variant_sum__rf_equal x x)))) ->
  Variant_sum__rf_equal_symmetric:(dk_logic.eP 
                                     (dk_logic.forall Variant_sum__rf_T 
                                        (x:(cc.eT Variant_sum__rf_T) =>
                                         dk_logic.forall Variant_sum__rf_T 
                                           (y:(cc.eT Variant_sum__rf_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (Variant_sum__rf_equal x y)) 
                                              (dk_logic.ebP 
                                                 (Variant_sum__rf_equal y x)))))) ->
  Variant_sum__rf_equal_transitive:(dk_logic.eP 
                                      (dk_logic.forall Variant_sum__rf_T 
                                         (x:(cc.eT Variant_sum__rf_T) =>
                                          dk_logic.forall Variant_sum__rf_T 
                                            (y:(cc.eT Variant_sum__rf_T) =>
                                             dk_logic.forall 
                                               Variant_sum__rf_T 
                                               (z:
                                                (cc.eT Variant_sum__rf_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (Variant_sum__rf_equal 
                                                        x y)) 
                                                  (dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (Variant_sum__rf_equal 
                                                           y z)) 
                                                     (dk_logic.ebP 
                                                        (Variant_sum__rf_equal 
                                                           x z)))))))) ->
  Variant_sum__rf_first_case_substitution_rule:(dk_logic.eP 
                                                  (dk_logic.forall 
                                                     Variant_sum__rf_T 
                                                     (x:
                                                      (cc.eT 
                                                         Variant_sum__rf_T) =>
                                                      dk_logic.forall 
                                                        Variant_sum__rf_T 
                                                        (y:
                                                         (cc.eT 
                                                            Variant_sum__rf_T) =>
                                                         dk_logic.imp 
                                                           (dk_logic.ebP 
                                                              (Variant_sum__rf_equal 
                                                                 x y)) 
                                                           (dk_logic.imp 
                                                              (dk_logic.ebP 
                                                                 (Variant_sum__rf_first_case 
                                                                    x)) 
                                                              (dk_logic.ebP 
                                                                 (Variant_sum__rf_first_case 
                                                                    y))))))) ->
  Variant_sum__rf_first_reverses:(dk_logic.eP 
                                    (dk_logic.forall Variant_sum__rf_T 
                                       (x:(cc.eT Variant_sum__rf_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP 
                                             (Variant_sum__rf_first_case x)) 
                                          (dk_logic.exists A_T 
                                             (x_a:(cc.eT A_T) =>
                                              dk_logic.ebP 
                                                (Variant_sum__rf_equal 
                                                   (Variant_sum__rf_first x_a) 
                                                   x)))))) ->
  Variant_sum__rf_first_term_substitution_rule:(dk_logic.eP 
                                                  (dk_logic.forall 
                                                     Variant_sum__rf_T 
                                                     (x_1:
                                                      (cc.eT 
                                                         Variant_sum__rf_T) =>
                                                      dk_logic.forall 
                                                        Variant_sum__rf_T 
                                                        (x_2:
                                                         (cc.eT 
                                                            Variant_sum__rf_T) =>
                                                         dk_logic.imp 
                                                           (dk_logic.ebP 
                                                              (Variant_sum__rf_first_case 
                                                                 x_1)) 
                                                           (dk_logic.imp 
                                                              (dk_logic.ebP 
                                                                 (Variant_sum__rf_equal 
                                                                    x_1 x_2)) 
                                                              (dk_logic.ebP 
                                                                 (_p_A_equal 
                                                                    (
                                                                    Variant_sum__rf_first_term 
                                                                    x_1) 
                                                                    (
                                                                    Variant_sum__rf_first_term 
                                                                    x_2)))))))) ->
  Variant_sum__rf_second_case_subtitution_rule:(dk_logic.eP 
                                                  (dk_logic.forall 
                                                     Variant_sum__rf_T 
                                                     (x:
                                                      (cc.eT 
                                                         Variant_sum__rf_T) =>
                                                      dk_logic.forall 
                                                        Variant_sum__rf_T 
                                                        (y:
                                                         (cc.eT 
                                                            Variant_sum__rf_T) =>
                                                         dk_logic.imp 
                                                           (dk_logic.ebP 
                                                              (Variant_sum__rf_equal 
                                                                 x y)) 
                                                           (dk_logic.imp 
                                                              (dk_logic.ebP 
                                                                 (Variant_sum__rf_second_case 
                                                                    x)) 
                                                              (dk_logic.ebP 
                                                                 (Variant_sum__rf_second_case 
                                                                    y))))))) ->
  Variant_sum__rf_second_reverses:(dk_logic.eP 
                                     (dk_logic.forall Variant_sum__rf_T 
                                        (x:(cc.eT Variant_sum__rf_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (Variant_sum__rf_second_case x)) 
                                           (dk_logic.exists B_T 
                                              (x_b:(cc.eT B_T) =>
                                               dk_logic.ebP 
                                                 (Variant_sum__rf_equal 
                                                    (Variant_sum__rf_second 
                                                       x_b) x)))))) ->
  Variant_sum__rf_second_term_substitution_rule:(dk_logic.eP 
                                                   (dk_logic.forall 
                                                      Variant_sum__rf_T 
                                                      (x_1:
                                                       (cc.eT 
                                                          Variant_sum__rf_T) =>
                                                       dk_logic.forall 
                                                         Variant_sum__rf_T 
                                                         (x_2:
                                                          (cc.eT 
                                                             Variant_sum__rf_T) =>
                                                          dk_logic.imp 
                                                            (dk_logic.ebP 
                                                               (Variant_sum__rf_second_case 
                                                                  x_1)) 
                                                            (dk_logic.imp 
                                                               (dk_logic.ebP 
                                                                  (Variant_sum__rf_equal 
                                                                    x_1 x_2)) 
                                                               (dk_logic.ebP 
                                                                  (_p_B_equal 
                                                                    (Variant_sum__rf_second_term 
                                                                    x_1) 
                                                                    (Variant_sum__rf_second_term 
                                                                    x_2)))))))) ->
  Variant_sum__rf_different_is_irreflexive:(dk_logic.eP 
                                              (dk_logic.forall 
                                                 Variant_sum__rf_T 
                                                 (x:
                                                  (cc.eT Variant_sum__rf_T) =>
                                                  dk_logic.not 
                                                    (dk_logic.ebP 
                                                       (Variant_sum__rf_different 
                                                          x x))))) ->
  Variant_sum__rf_different_is_symmetric:(dk_logic.eP 
                                            (dk_logic.forall 
                                               Variant_sum__rf_T 
                                               (x:
                                                (cc.eT Variant_sum__rf_T) =>
                                                dk_logic.forall 
                                                  Variant_sum__rf_T 
                                                  (y:
                                                   (cc.eT Variant_sum__rf_T) =>
                                                   dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (Variant_sum__rf_different 
                                                           x y)) 
                                                     (dk_logic.ebP 
                                                        (Variant_sum__rf_different 
                                                           y x)))))) ->
  Variant_sum__rf_different_is_complete:(dk_logic.eP 
                                           (dk_logic.forall 
                                              Variant_sum__rf_T 
                                              (x:(cc.eT Variant_sum__rf_T) =>
                                               dk_logic.forall 
                                                 Variant_sum__rf_T 
                                                 (y:
                                                  (cc.eT Variant_sum__rf_T) =>
                                                  dk_logic.forall 
                                                    Variant_sum__rf_T 
                                                    (z:
                                                     (cc.eT Variant_sum__rf_T) =>
                                                     dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (Variant_sum__rf_different 
                                                             x y)) 
                                                       (dk_logic.or 
                                                          (dk_logic.ebP 
                                                             (Variant_sum__rf_different 
                                                                x z)) 
                                                          (dk_logic.ebP 
                                                             (Variant_sum__rf_different 
                                                                y z)))))))) ->
  Variant_sum__rf_first_is_injective:(dk_logic.eP 
                                        (dk_logic.forall A_T 
                                           (x:(cc.eT A_T) =>
                                            dk_logic.forall A_T 
                                              (y:(cc.eT A_T) =>
                                               dk_logic.imp 
                                                 (dk_logic.ebP 
                                                    (Variant_sum__rf_equal 
                                                       (Variant_sum__rf_first 
                                                          x) 
                                                       (Variant_sum__rf_first 
                                                          y))) 
                                                 (dk_logic.ebP 
                                                    (_p_A_equal x y)))))) ->
  Variant_sum__rf_second_is_injective:(dk_logic.eP 
                                         (dk_logic.forall B_T 
                                            (x:(cc.eT B_T) =>
                                             dk_logic.forall B_T 
                                               (y:(cc.eT B_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (Variant_sum__rf_equal 
                                                        (Variant_sum__rf_second 
                                                           x) 
                                                        (Variant_sum__rf_second 
                                                           y))) 
                                                  (dk_logic.ebP 
                                                     (_p_B_equal x y)))))) ->
  Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal.

def proj_Variant_sum__rf_T :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) -> cc.uT.

[Variant_sum__rf_T]
  proj_Variant_sum__rf_T _ _ _ _ (Variant_sum__mk_record _ _ _ _ 
    Variant_sum__rf_T _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_T.

def proj_Variant_sum__rf_first :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT A_T) ->
  cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record).

[Variant_sum__rf_first]
  proj_Variant_sum__rf_first _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ 
    Variant_sum__rf_first _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_first.

def proj_Variant_sum__rf_first_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.bool__t.

[Variant_sum__rf_first_case]
  proj_Variant_sum__rf_first_case _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ 
    _ Variant_sum__rf_first_case _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_first_case.

def proj_Variant_sum__rf_first_term :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT A_T.

[Variant_sum__rf_first_term]
  proj_Variant_sum__rf_first_term _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ 
    _ _ Variant_sum__rf_first_term _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_first_term.

def proj_Variant_sum__rf_parse :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT basics.string__t) ->
  cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record).

[Variant_sum__rf_parse]
  proj_Variant_sum__rf_parse _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ _ _ _ 
    Variant_sum__rf_parse _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Variant_sum__rf_parse.

def proj_Variant_sum__rf_print :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.string__t.

[Variant_sum__rf_print]
  proj_Variant_sum__rf_print _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ _ _ _ 
    _ Variant_sum__rf_print _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Variant_sum__rf_print.

def proj_Variant_sum__rf_second :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT B_T) ->
  cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record).

[Variant_sum__rf_second]
  proj_Variant_sum__rf_second _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ _ _ 
    _ _ _ Variant_sum__rf_second _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_second.

def proj_Variant_sum__rf_second_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.bool__t.

[Variant_sum__rf_second_case]
  proj_Variant_sum__rf_second_case _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ Variant_sum__rf_second_case _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_second_case.

def proj_Variant_sum__rf_second_term :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT B_T.

[Variant_sum__rf_second_term]
  proj_Variant_sum__rf_second_term _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ Variant_sum__rf_second_term _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_second_term.

def proj_Variant_sum__rf_element :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record).

[Variant_sum__rf_element]
  proj_Variant_sum__rf_element _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ _ _ 
    _ _ _ _ _ _ Variant_sum__rf_element _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_element.

def proj_Variant_sum__rf_first_has_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.ebP 
          (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal _p_B_equal 
             record 
             (proj_Variant_sum__rf_first A_T B_T _p_A_equal _p_B_equal 
                record x)))).

[Variant_sum__rf_first_has_case]
  proj_Variant_sum__rf_first_has_case _ _ _ _ (Variant_sum__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_first_has_case _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_first_has_case.

def proj_Variant_sum__rf_first_reverses_term :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.ebP 
          (_p_A_equal 
             (proj_Variant_sum__rf_first_term A_T B_T _p_A_equal _p_B_equal 
                record 
                (proj_Variant_sum__rf_first A_T B_T _p_A_equal _p_B_equal 
                   record x)) x))).

[Variant_sum__rf_first_reverses_term]
  proj_Variant_sum__rf_first_reverses_term _ _ _ _ (Variant_sum__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_first_reverses_term _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_first_reverses_term.

def proj_Variant_sum__rf_case_complete :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.or 
          (dk_logic.ebP 
             (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal _p_B_equal 
                record x)) 
          (dk_logic.ebP 
             (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal _p_B_equal 
                record x)))).

[Variant_sum__rf_case_complete]
  proj_Variant_sum__rf_case_complete _ _ _ _ (Variant_sum__mk_record _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_case_complete _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_case_complete.

def proj_Variant_sum__rf_case_exclusive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.not 
          (dk_logic.and 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal 
                   _p_B_equal record x)) 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal 
                   _p_B_equal record x))))).

[Variant_sum__rf_case_exclusive]
  proj_Variant_sum__rf_case_exclusive _ _ _ _ (Variant_sum__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_case_exclusive _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_case_exclusive.

def proj_Variant_sum__rf_second_has_case :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall B_T 
       (x:(cc.eT B_T) =>
        dk_logic.ebP 
          (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal _p_B_equal 
             record 
             (proj_Variant_sum__rf_second A_T B_T _p_A_equal _p_B_equal 
                record x)))).

[Variant_sum__rf_second_has_case]
  proj_Variant_sum__rf_second_has_case _ _ _ _ (Variant_sum__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_second_has_case _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_second_has_case.

def proj_Variant_sum__rf_equal :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.bool__t.

[Variant_sum__rf_equal]
  proj_Variant_sum__rf_equal _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_equal _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Variant_sum__rf_equal.

def proj_Variant_sum__rf_second_reverses_term :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall B_T 
       (x:(cc.eT B_T) =>
        dk_logic.ebP 
          (_p_B_equal 
             (proj_Variant_sum__rf_second_term A_T B_T _p_A_equal _p_B_equal 
                record 
                (proj_Variant_sum__rf_second A_T B_T _p_A_equal _p_B_equal 
                   record x)) x))).

[Variant_sum__rf_second_reverses_term]
  proj_Variant_sum__rf_second_reverses_term _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_second_reverses_term _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Variant_sum__rf_second_reverses_term.

def proj_Variant_sum__rf_different :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.bool__t.

[Variant_sum__rf_different]
  proj_Variant_sum__rf_different _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_different _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_different.

def proj_Variant_sum__rf_equal_spec :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record x y)) 
             (dk_logic.or 
                (dk_logic.and 
                   (dk_logic.ebP 
                      (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal 
                         _p_B_equal record x)) 
                   (dk_logic.and 
                      (dk_logic.ebP 
                         (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal 
                            _p_B_equal record y)) 
                      (dk_logic.ebP 
                         (_p_A_equal 
                            (proj_Variant_sum__rf_first_term A_T B_T 
                               _p_A_equal _p_B_equal record x) 
                            (proj_Variant_sum__rf_first_term A_T B_T 
                               _p_A_equal _p_B_equal record y))))) 
                (dk_logic.and 
                   (dk_logic.ebP 
                      (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal 
                         _p_B_equal record x)) 
                   (dk_logic.and 
                      (dk_logic.ebP 
                         (proj_Variant_sum__rf_second_case A_T B_T 
                            _p_A_equal _p_B_equal record y)) 
                      (dk_logic.ebP 
                         (_p_B_equal 
                            (proj_Variant_sum__rf_second_term A_T B_T 
                               _p_A_equal _p_B_equal record x) 
                            (proj_Variant_sum__rf_second_term A_T B_T 
                               _p_A_equal _p_B_equal record y))))))))).

[Variant_sum__rf_equal_spec]
  proj_Variant_sum__rf_equal_spec _ _ _ _ (Variant_sum__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_equal_spec _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_equal_spec.

def proj_Variant_sum__rf_first_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.forall A_T 
          (y:(cc.eT A_T) =>
           dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record 
                   (proj_Variant_sum__rf_first A_T B_T _p_A_equal _p_B_equal 
                      record x) 
                   (proj_Variant_sum__rf_first A_T B_T _p_A_equal _p_B_equal 
                      record y)))))).

[Variant_sum__rf_first_substitution_rule]
  proj_Variant_sum__rf_first_substitution_rule _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_first_substitution_rule _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_first_substitution_rule.

def proj_Variant_sum__rf_second_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall B_T 
       (x:(cc.eT B_T) =>
        dk_logic.forall B_T 
          (y:(cc.eT B_T) =>
           dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record 
                   (proj_Variant_sum__rf_second A_T B_T _p_A_equal 
                      _p_B_equal record x) 
                   (proj_Variant_sum__rf_second A_T B_T _p_A_equal 
                      _p_B_equal record y)))))).

[Variant_sum__rf_second_substitution_rule]
  proj_Variant_sum__rf_second_substitution_rule _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_second_substitution_rule _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_second_substitution_rule.

def proj_Variant_sum__rf_same_is_not_different :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_different A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.not 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                      record x y)))))).

[Variant_sum__rf_same_is_not_different]
  proj_Variant_sum__rf_same_is_not_different _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ Variant_sum__rf_same_is_not_different _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_same_is_not_different.

def proj_Variant_sum__rf_equal_reflexive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.ebP 
          (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal record x 
             x))).

[Variant_sum__rf_equal_reflexive]
  proj_Variant_sum__rf_equal_reflexive _ _ _ _ (Variant_sum__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_equal_reflexive _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_equal_reflexive.

def proj_Variant_sum__rf_equal_symmetric :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record x y)) 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record y x))))).

[Variant_sum__rf_equal_symmetric]
  proj_Variant_sum__rf_equal_symmetric _ _ _ _ (Variant_sum__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_equal_symmetric _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_equal_symmetric.

def proj_Variant_sum__rf_equal_transitive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.forall 
             (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
             (z:
              (cc.eT 
                 (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                      record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Variant_sum__rf_equal A_T B_T _p_A_equal 
                         _p_B_equal record y z)) 
                   (dk_logic.ebP 
                      (proj_Variant_sum__rf_equal A_T B_T _p_A_equal 
                         _p_B_equal record x z))))))).

[Variant_sum__rf_equal_transitive]
  proj_Variant_sum__rf_equal_transitive _ _ _ _ (Variant_sum__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_equal_transitive _ _ _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_equal_transitive.

def proj_Variant_sum__rf_first_case_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record x y)) 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal 
                      _p_B_equal record x)) 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal 
                      _p_B_equal record y)))))).

[Variant_sum__rf_first_case_substitution_rule]
  proj_Variant_sum__rf_first_case_substitution_rule _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ Variant_sum__rf_first_case_substitution_rule _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Variant_sum__rf_first_case_substitution_rule.

def proj_Variant_sum__rf_first_reverses :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal _p_B_equal 
                record x)) 
          (dk_logic.exists A_T 
             (x_a:(cc.eT A_T) =>
              dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record 
                   (proj_Variant_sum__rf_first A_T B_T _p_A_equal _p_B_equal 
                      record x_a) x))))).

[Variant_sum__rf_first_reverses]
  proj_Variant_sum__rf_first_reverses _ _ _ _ (Variant_sum__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_first_reverses _ _ _ _ _ _ _ _ _)
  -->
  Variant_sum__rf_first_reverses.

def proj_Variant_sum__rf_first_term_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x_1:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (x_2:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_first_case A_T B_T _p_A_equal 
                   _p_B_equal record x_1)) 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                      record x_1 x_2)) 
                (dk_logic.ebP 
                   (_p_A_equal 
                      (proj_Variant_sum__rf_first_term A_T B_T _p_A_equal 
                         _p_B_equal record x_1) 
                      (proj_Variant_sum__rf_first_term A_T B_T _p_A_equal 
                         _p_B_equal record x_2))))))).

[Variant_sum__rf_first_term_substitution_rule]
  proj_Variant_sum__rf_first_term_substitution_rule _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ Variant_sum__rf_first_term_substitution_rule _ _ _ _ _ _ _ 
    _)
  -->
  Variant_sum__rf_first_term_substitution_rule.

def proj_Variant_sum__rf_second_case_subtitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record x y)) 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal 
                      _p_B_equal record x)) 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal 
                      _p_B_equal record y)))))).

[Variant_sum__rf_second_case_subtitution_rule]
  proj_Variant_sum__rf_second_case_subtitution_rule _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ Variant_sum__rf_second_case_subtitution_rule _ _ _ _ _ _ 
    _)
  -->
  Variant_sum__rf_second_case_subtitution_rule.

def proj_Variant_sum__rf_second_reverses :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal _p_B_equal 
                record x)) 
          (dk_logic.exists B_T 
             (x_b:(cc.eT B_T) =>
              dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record 
                   (proj_Variant_sum__rf_second A_T B_T _p_A_equal 
                      _p_B_equal record x_b) x))))).

[Variant_sum__rf_second_reverses]
  proj_Variant_sum__rf_second_reverses _ _ _ _ (Variant_sum__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Variant_sum__rf_second_reverses _ _ _ _ _ _)
  -->
  Variant_sum__rf_second_reverses.

def proj_Variant_sum__rf_second_term_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x_1:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (x_2:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_second_case A_T B_T _p_A_equal 
                   _p_B_equal record x_1)) 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                      record x_1 x_2)) 
                (dk_logic.ebP 
                   (_p_B_equal 
                      (proj_Variant_sum__rf_second_term A_T B_T _p_A_equal 
                         _p_B_equal record x_1) 
                      (proj_Variant_sum__rf_second_term A_T B_T _p_A_equal 
                         _p_B_equal record x_2))))))).

[Variant_sum__rf_second_term_substitution_rule]
  proj_Variant_sum__rf_second_term_substitution_rule _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_second_term_substitution_rule _ _ _ 
    _ _)
  -->
  Variant_sum__rf_second_term_substitution_rule.

def proj_Variant_sum__rf_different_is_irreflexive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.not 
          (dk_logic.ebP 
             (proj_Variant_sum__rf_different A_T B_T _p_A_equal _p_B_equal 
                record x x)))).

[Variant_sum__rf_different_is_irreflexive]
  proj_Variant_sum__rf_different_is_irreflexive _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_different_is_irreflexive _ _ _ _)
  -->
  Variant_sum__rf_different_is_irreflexive.

def proj_Variant_sum__rf_different_is_symmetric :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_different A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_different A_T B_T _p_A_equal 
                   _p_B_equal record y x))))).

[Variant_sum__rf_different_is_symmetric]
  proj_Variant_sum__rf_different_is_symmetric _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_different_is_symmetric _ _ _)
  -->
  Variant_sum__rf_different_is_symmetric.

def proj_Variant_sum__rf_different_is_complete :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
           dk_logic.forall 
             (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record) 
             (z:
              (cc.eT 
                 (proj_Variant_sum__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Variant_sum__rf_different A_T B_T _p_A_equal 
                      _p_B_equal record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP 
                      (proj_Variant_sum__rf_different A_T B_T _p_A_equal 
                         _p_B_equal record x z)) 
                   (dk_logic.ebP 
                      (proj_Variant_sum__rf_different A_T B_T _p_A_equal 
                         _p_B_equal record y z))))))).

[Variant_sum__rf_different_is_complete]
  proj_Variant_sum__rf_different_is_complete _ _ _ _ 
    (Variant_sum__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ Variant_sum__rf_different_is_complete _ _)
  -->
  Variant_sum__rf_different_is_complete.

def proj_Variant_sum__rf_first_is_injective :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.forall A_T 
          (y:(cc.eT A_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record 
                   (proj_Variant_sum__rf_first A_T B_T _p_A_equal _p_B_equal 
                      record x) 
                   (proj_Variant_sum__rf_first A_T B_T _p_A_equal _p_B_equal 
                      record y))) (dk_logic.ebP (_p_A_equal x y))))).

[Variant_sum__rf_first_is_injective]
  proj_Variant_sum__rf_first_is_injective _ _ _ _ (Variant_sum__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ Variant_sum__rf_first_is_injective _)
  -->
  Variant_sum__rf_first_is_injective.

def proj_Variant_sum__rf_second_is_injective :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Variant_sum__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall B_T 
       (x:(cc.eT B_T) =>
        dk_logic.forall B_T 
          (y:(cc.eT B_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Variant_sum__rf_equal A_T B_T _p_A_equal _p_B_equal 
                   record 
                   (proj_Variant_sum__rf_second A_T B_T _p_A_equal 
                      _p_B_equal record x) 
                   (proj_Variant_sum__rf_second A_T B_T _p_A_equal 
                      _p_B_equal record y))) (dk_logic.ebP (_p_B_equal x y))))).

[Variant_sum__rf_second_is_injective]
  proj_Variant_sum__rf_second_is_injective _ _ _ _ (Variant_sum__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ Variant_sum__rf_second_is_injective)
  -->
  Variant_sum__rf_second_is_injective.

def Variant_sum__first :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT -> x:(cc.eT _p_A_T) -> cc.eT (simple_variant__t _p_A_T _p_B_T)
  :=
  _p_A_T:cc.uT => _p_B_T:cc.uT => x:(cc.eT _p_A_T) => First _p_A_T _p_B_T x.

def Variant_sum__first_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) -> cc.eT basics.bool__t
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
  match__First _p_A_T _p_B_T basics.bool__t x 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     (_x:(cc.eT _p_A_T) => dk_bool.true) pattern_var_0_) 
    (match__Second _p_A_T _p_B_T basics.bool__t x 
       (pattern_var_0_:(cc.eT _p_B_T) =>
        (_x:(cc.eT _p_B_T) => dk_bool.false) pattern_var_0_) 
       (dk_fail.fail basics.bool__t)).

def Variant_sum__first_term :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) -> cc.eT _p_A_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
  match__First _p_A_T _p_B_T _p_A_T x 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     (x0:(cc.eT _p_A_T) => x0) pattern_var_0_) 
    (match__Second _p_A_T _p_B_T _p_A_T x 
       (pattern_var_0_:(cc.eT _p_B_T) =>
        (_x:(cc.eT _p_B_T) => _p_A_element) pattern_var_0_) 
       (dk_fail.fail _p_A_T)).

def Variant_sum__second :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT -> x:(cc.eT _p_B_T) -> cc.eT (simple_variant__t _p_A_T _p_B_T)
  :=
  _p_A_T:cc.uT => _p_B_T:cc.uT => x:(cc.eT _p_B_T) => Second _p_A_T _p_B_T x.

def Variant_sum__second_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) -> cc.eT basics.bool__t
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
  match__Second _p_A_T _p_B_T basics.bool__t x 
    (pattern_var_0_:(cc.eT _p_B_T) =>
     (_x:(cc.eT _p_B_T) => dk_bool.true) pattern_var_0_) 
    (match__First _p_A_T _p_B_T basics.bool__t x 
       (pattern_var_0_:(cc.eT _p_A_T) =>
        (_x:(cc.eT _p_A_T) => dk_bool.false) pattern_var_0_) 
       (dk_fail.fail basics.bool__t)).

def Variant_sum__second_term :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_element:(cc.eT _p_B_T) ->
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) -> cc.eT _p_B_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_element:(cc.eT _p_B_T) =>
  x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
  match__Second _p_A_T _p_B_T _p_B_T x 
    (pattern_var_0_:(cc.eT _p_B_T) =>
     (x0:(cc.eT _p_B_T) => x0) pattern_var_0_) 
    (match__First _p_A_T _p_B_T _p_B_T x 
       (pattern_var_0_:(cc.eT _p_A_T) =>
        (_x:(cc.eT _p_A_T) => _p_B_element) pattern_var_0_) 
       (dk_fail.fail _p_B_T)).

def Variant_sum__first_has_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (Variant_sum__first_case _p_A_T _p_B_T 
             (Variant_sum__first _p_A_T _p_B_T x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (Variant_sum__first_case _p_A_T _p_B_T 
             (Variant_sum__first _p_A_T _p_B_T x)))).

def Variant_sum__first_reverses_term :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (_p_A_equal 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element 
                (Variant_sum__first _p_A_T _p_B_T x)) x)))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (_p_A_equal 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element 
                (Variant_sum__first _p_A_T _p_B_T x)) x))).

def Variant_sum__case_complete :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall (simple_variant__t _p_A_T _p_B_T) 
       (x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
        dk_logic.or (dk_logic.ebP (Variant_sum__first_case _p_A_T _p_B_T x)) 
          (dk_logic.ebP (Variant_sum__second_case _p_A_T _p_B_T x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall (simple_variant__t _p_A_T _p_B_T) 
       (x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
        dk_logic.or (dk_logic.ebP (Variant_sum__first_case _p_A_T _p_B_T x)) 
          (dk_logic.ebP (Variant_sum__second_case _p_A_T _p_B_T x)))).

def Variant_sum__case_exclusive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall (simple_variant__t _p_A_T _p_B_T) 
       (x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
        dk_logic.not 
          (dk_logic.and 
             (dk_logic.ebP (Variant_sum__first_case _p_A_T _p_B_T x)) 
             (dk_logic.ebP (Variant_sum__second_case _p_A_T _p_B_T x)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall (simple_variant__t _p_A_T _p_B_T) 
       (x:(cc.eT (simple_variant__t _p_A_T _p_B_T)) =>
        dk_logic.not 
          (dk_logic.and 
             (dk_logic.ebP (Variant_sum__first_case _p_A_T _p_B_T x)) 
             (dk_logic.ebP (Variant_sum__second_case _p_A_T _p_B_T x))))).

def Variant_sum__second_has_case :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.ebP 
          (Variant_sum__second_case _p_A_T _p_B_T 
             (Variant_sum__second _p_A_T _p_B_T x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.ebP 
          (Variant_sum__second_case _p_A_T _p_B_T 
             (Variant_sum__second _p_A_T _p_B_T x)))).

def Variant_sum__second_reverses_term :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_element:(cc.eT _p_B_T) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.ebP 
          (_p_B_equal 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element 
                (Variant_sum__second _p_A_T _p_B_T x)) x)))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_element:(cc.eT _p_B_T) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.ebP 
          (_p_B_equal 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element 
                (Variant_sum__second _p_A_T _p_B_T x)) x))).

def Variant_sum__collection_create
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_element:(cc.eT _p_B_T) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  Variant_sum__mk_record _p_A_T _p_B_T _p_A_equal _p_B_equal 
    (simple_variant__t _p_A_T _p_B_T) (Variant_sum__first _p_A_T _p_B_T) 
    (Variant_sum__first_case _p_A_T _p_B_T) 
    (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
    (basics.Basic_object__parse (simple_variant__t _p_A_T _p_B_T)) 
    (basics.Basic_object__print (simple_variant__t _p_A_T _p_B_T)) 
    (Variant_sum__second _p_A_T _p_B_T) 
    (Variant_sum__second_case _p_A_T _p_B_T) 
    (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
    (Sum_set__element _p_A_T _p_A_element (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first _p_A_T _p_B_T)) 
    (Variant_sum__first_has_case _p_A_T _p_B_T) 
    (Variant_sum__first_reverses_term _p_A_T _p_B_T _p_A_element _p_A_equal 
       _p_A_equal_reflexive) (Variant_sum__case_complete _p_A_T _p_B_T) 
    (Variant_sum__case_exclusive _p_A_T _p_B_T) 
    (Variant_sum__second_has_case _p_A_T _p_B_T) 
    (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
       (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
    (Variant_sum__second_reverses_term _p_A_T _p_B_T _p_B_element _p_B_equal 
       _p_B_equal_reflexive) 
    (sets.Setoid__different (simple_variant__t _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element))) 
    (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
       (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_exclusive _p_A_T _p_B_T)) 
    (Sum_set__first_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_symmetric _p_A_equal_transitive _p_B_equal 
       (simple_variant__t _p_A_T _p_B_T) (Variant_sum__first _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__first_has_case _p_A_T _p_B_T) 
       (Variant_sum__first_reverses_term _p_A_T _p_B_T _p_A_element 
          _p_A_equal _p_A_equal_reflexive)) 
    (Sum_set__second_substitution_rule _p_A_T _p_B_T _p_A_equal _p_B_equal 
       _p_B_equal_symmetric _p_B_equal_transitive 
       (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second _p_A_T _p_B_T) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_complete _p_A_T _p_B_T) 
       (Variant_sum__case_exclusive _p_A_T _p_B_T) 
       (Variant_sum__second_has_case _p_A_T _p_B_T) 
       (Variant_sum__second_reverses_term _p_A_T _p_B_T _p_B_element 
          _p_B_equal _p_B_equal_reflexive)) 
    (sets.Setoid__same_is_not_different (simple_variant__t _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element))) 
    (Sum_set__equal_reflexive _p_A_T _p_B_T _p_A_equal _p_A_equal_reflexive 
       _p_B_equal _p_B_equal_reflexive (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_complete _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__equal_symmetric _p_A_T _p_B_T _p_A_equal _p_A_equal_symmetric 
       _p_B_equal _p_B_equal_symmetric (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__equal_transitive _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_transitive _p_B_equal _p_B_equal_transitive 
       (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_exclusive _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__first_case_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_B_equal (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_exclusive _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__first_reverses _p_A_T _p_B_T _p_A_equal _p_B_equal 
       (simple_variant__t _p_A_T _p_B_T) (Variant_sum__first _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__first_has_case _p_A_T _p_B_T) 
       (Variant_sum__first_reverses_term _p_A_T _p_B_T _p_A_element 
          _p_A_equal _p_A_equal_reflexive) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__first_term_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_B_equal (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_exclusive _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__second_case_subtitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_B_equal (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_exclusive _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__second_reverses _p_A_T _p_B_T _p_A_equal _p_B_equal 
       (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second _p_A_T _p_B_T) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__second_has_case _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Variant_sum__second_reverses_term _p_A_T _p_B_T _p_B_element 
          _p_B_equal _p_B_equal_reflexive) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (Sum_set__second_term_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_B_equal (simple_variant__t _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__case_exclusive _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
    (sets.Setoid__different_is_irreflexive (simple_variant__t _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (sets.Setoid__different (simple_variant__t _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element))) 
       (Sum_set__equal_reflexive _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive _p_B_equal _p_B_equal_reflexive 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_complete _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
          (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
             (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
       (sets.Setoid__same_is_not_different (simple_variant__t _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)))) 
    (sets.Setoid__different_is_symmetric (simple_variant__t _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (sets.Setoid__different (simple_variant__t _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element))) 
       (Sum_set__equal_symmetric _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_symmetric _p_B_equal _p_B_equal_symmetric 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
          (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
             (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
       (sets.Setoid__same_is_not_different (simple_variant__t _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)))) 
    (sets.Setoid__different_is_complete (simple_variant__t _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (sets.Setoid__different (simple_variant__t _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element))) 
       (Sum_set__equal_reflexive _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive _p_B_equal _p_B_equal_reflexive 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_complete _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
          (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
             (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
       (Sum_set__equal_symmetric _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_symmetric _p_B_equal _p_B_equal_symmetric 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
          (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
             (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
       (Sum_set__equal_transitive _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_transitive _p_B_equal _p_B_equal_transitive 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
          (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
             (Variant_sum__case_exclusive _p_A_T _p_B_T))) 
       (sets.Setoid__same_is_not_different (simple_variant__t _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)))) 
    (Sum_set__first_is_injective _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_reflexive _p_A_equal_symmetric _p_A_equal_transitive 
       (simple_variant__t _p_A_T _p_B_T) (Variant_sum__first _p_A_T _p_B_T) 
       (Variant_sum__first_case _p_A_T _p_B_T) 
       (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
       (Variant_sum__first_has_case _p_A_T _p_B_T) 
       (Variant_sum__first_reverses_term _p_A_T _p_B_T _p_A_element 
          _p_A_equal _p_A_equal_reflexive) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Sum_set__first_term_substitution_rule _p_A_T _p_B_T _p_A_equal 
          _p_B_equal (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
          (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
             (Variant_sum__case_exclusive _p_A_T _p_B_T)))) 
    (Sum_set__second_is_injective _p_A_T _p_B_T _p_B_equal 
       _p_B_equal_reflexive _p_B_equal_symmetric _p_B_equal_transitive 
       (simple_variant__t _p_A_T _p_B_T) (Variant_sum__second _p_A_T _p_B_T) 
       (Variant_sum__second_case _p_A_T _p_B_T) 
       (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
       (Variant_sum__second_has_case _p_A_T _p_B_T) 
       (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
       (Variant_sum__second_reverses_term _p_A_T _p_B_T _p_B_element 
          _p_B_equal _p_B_equal_reflexive) 
       (Sum_set__second_term_substitution_rule _p_A_T _p_B_T _p_A_equal 
          _p_B_equal (simple_variant__t _p_A_T _p_B_T) 
          (Variant_sum__first_case _p_A_T _p_B_T) 
          (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
          (Variant_sum__second_case _p_A_T _p_B_T) 
          (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
          (Variant_sum__case_exclusive _p_A_T _p_B_T) 
          (Sum_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element)) 
          (Sum_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (simple_variant__t _p_A_T _p_B_T) 
             (Variant_sum__first_case _p_A_T _p_B_T) 
             (Variant_sum__first_term _p_A_T _p_B_T _p_A_element) 
             (Variant_sum__second_case _p_A_T _p_B_T) 
             (Variant_sum__second_term _p_A_T _p_B_T _p_B_element) 
             (Variant_sum__case_exclusive _p_A_T _p_B_T)))).

