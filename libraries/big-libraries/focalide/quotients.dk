#NAME quotients.

def Represented_by__parse :
  _p_S_T:cc.uT ->
  _p_S_parse:((cc.eT basics.string__t) -> cc.eT _p_S_T) ->
  abst_T:cc.uT ->
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT abst_T) ->
  p:(cc.eT basics.string__t) -> cc.eT abst_T
  :=
  _p_S_T:cc.uT =>
  _p_S_parse:((cc.eT basics.string__t) -> cc.eT _p_S_T) =>
  abst_T:cc.uT =>
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT abst_T) =>
  p:(cc.eT basics.string__t) => abst_from_rep (_p_S_parse p).

def Represented_by__to_rep :
  _p_S_T:cc.uT -> x:(cc.eT _p_S_T) -> cc.eT _p_S_T
  :=
  _p_S_T:cc.uT => x:(cc.eT _p_S_T) => x.

def Represented_by__correct_representation :
  _p_S_T:cc.uT ->
  abst_T:cc.uT ->
  abst_represents_some_self:((cc.eT _p_S_T) -> dk_logic.Prop) ->
  abst_to_rep:((cc.eT abst_T) -> cc.eT _p_S_T) ->
  x:(cc.eT abst_T) -> dk_logic.Prop
  :=
  _p_S_T:cc.uT =>
  abst_T:cc.uT =>
  abst_represents_some_self:((cc.eT _p_S_T) -> dk_logic.Prop) =>
  abst_to_rep:((cc.eT abst_T) -> cc.eT _p_S_T) =>
  x:(cc.eT abst_T) => abst_represents_some_self (abst_to_rep x).

def Represented_by__print :
  _p_S_T:cc.uT ->
  _p_S_print:((cc.eT _p_S_T) -> cc.eT basics.string__t) ->
  abst_T:cc.uT ->
  abst_to_rep:((cc.eT abst_T) -> cc.eT _p_S_T) ->
  x:(cc.eT abst_T) -> cc.eT basics.string__t
  :=
  _p_S_T:cc.uT =>
  _p_S_print:((cc.eT _p_S_T) -> cc.eT basics.string__t) =>
  abst_T:cc.uT =>
  abst_to_rep:((cc.eT abst_T) -> cc.eT _p_S_T) =>
  x:(cc.eT abst_T) => _p_S_print (abst_to_rep x).

def Represented_by__correct_rep_spec :
  _p_S_T:cc.uT ->
  abst_T:cc.uT ->
  abst_represents_some_self:((cc.eT _p_S_T) -> dk_logic.Prop) ->
  abst_to_rep:((cc.eT abst_T) -> cc.eT _p_S_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.eqv 
          (Represented_by__correct_representation _p_S_T abst_T 
             abst_represents_some_self abst_to_rep x) 
          (abst_represents_some_self (abst_to_rep x))))
  :=
  _p_S_T:cc.uT =>
  abst_T:cc.uT =>
  abst_represents_some_self:((cc.eT _p_S_T) -> dk_logic.Prop) =>
  abst_to_rep:((cc.eT abst_T) -> cc.eT _p_S_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.eqv 
          (zen.triangle 
             (Represented_by__correct_representation _p_S_T abst_T 
                abst_represents_some_self abst_to_rep v_Vzb)) 
          (zen.triangle (abst_represents_some_self (abst_to_rep v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.eqv 
                 (zen.triangle 
                    (Represented_by__correct_representation _p_S_T abst_T 
                       abst_represents_some_self abst_to_rep v_Vzb)) 
                 (zen.triangle 
                    (abst_represents_some_self (abst_to_rep v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.eqv 
          (zen.triangle 
             (Represented_by__correct_representation _p_S_T abst_T 
                abst_represents_some_self abst_to_rep v_Vzb)) 
          (zen.triangle (abst_represents_some_self (abst_to_rep v_Vzb)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.eqv 
                 (zen.triangle 
                    (Represented_by__correct_representation _p_S_T abst_T 
                       abst_represents_some_self abst_to_rep v_Vbc)) 
                 (zen.triangle 
                    (abst_represents_some_self (abst_to_rep v_Vbc)))))) =>
        zen.Rnotequiv 
          (zen.triangle 
             (Represented_by__correct_representation _p_S_T abst_T 
                abst_represents_some_self abst_to_rep v_Vbc)) 
          (zen.triangle (abst_represents_some_self (abst_to_rep v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (abst_represents_some_self (abst_to_rep v_Vbc))))) =>
           v_Vec:
           (zen.proof 
              (zen.triangle (abst_represents_some_self (abst_to_rep v_Vbc)))) =>
           zen.Raxiom 
             (zen.triangle (abst_represents_some_self (abst_to_rep v_Vbc))) 
             v_Vec v_Vdc) 
          (v_Vec:
           (zen.proof 
              (zen.triangle (abst_represents_some_self (abst_to_rep v_Vbc)))) =>
           v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (abst_represents_some_self (abst_to_rep v_Vbc))))) =>
           zen.Raxiom 
             (zen.triangle (abst_represents_some_self (abst_to_rep v_Vbc))) 
             v_Vec v_Vdc) v_Vcc) v_Vac).

def Represented_by__from_rep_is_surjective :
  _p_S_T:cc.uT ->
  abst_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT _p_S_T) ->
  abst_to_rep_reverses:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.ebP 
                                (abst_equal 
                                   (abst_from_rep 
                                      (Represented_by__to_rep _p_S_T x)) x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.exists _p_S_T 
          (y:(cc.eT _p_S_T) => dk_logic.ebP (abst_equal (abst_from_rep y) x))))
  :=
  _p_S_T:cc.uT =>
  abst_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  abst_to_rep_reverses:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.ebP 
           (abst_equal (abst_from_rep (Represented_by__to_rep _p_S_T x)) x)))) =>
  (__B_1_LEMMA:
   (x:(cc.eT _p_S_T) ->
    dk_logic.eP (dk_logic.ebP (abst_equal (abst_from_rep x) x))) =>
   zen.nnpp 
     (zen.forall _p_S_T 
        (v_Vzb:(zen.term _p_S_T) =>
         zen.exists _p_S_T 
           (v_Vac:(zen.term _p_S_T) =>
            zen.triangle 
              (focal.is_true (abst_equal (abst_from_rep v_Vac) v_Vzb))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_S_T 
               (v_Vzb:(zen.term _p_S_T) =>
                zen.exists _p_S_T 
                  (v_Vac:(zen.term _p_S_T) =>
                   zen.triangle 
                     (focal.is_true (abst_equal (abst_from_rep v_Vac) v_Vzb))))))) =>
      zen.Rnotall _p_S_T 
        (v_Vzb:(zen.term _p_S_T) =>
         zen.exists _p_S_T 
           (v_Vac:(zen.term _p_S_T) =>
            zen.triangle 
              (focal.is_true (abst_equal (abst_from_rep v_Vac) v_Vzb)))) 
        (v_Vcc:(zen.term _p_S_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.exists _p_S_T 
                  (v_Vac:(zen.term _p_S_T) =>
                   zen.triangle 
                     (focal.is_true (abst_equal (abst_from_rep v_Vac) v_Vcc)))))) =>
         zen.Rall _p_S_T 
           (v_Vzb:(zen.term _p_S_T) =>
            zen.triangle 
              (focal.is_true (abst_equal (abst_from_rep v_Vzb) v_Vzb))) 
           v_Vcc 
           (v_Vec:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true (abst_equal (abst_from_rep v_Vcc) v_Vcc)))) =>
            zen.Rnotex _p_S_T 
              (v_Vac:(zen.term _p_S_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_from_rep v_Vac) v_Vcc))) 
              v_Vcc 
              (v_Vfc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_from_rep v_Vcc) v_Vcc))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_from_rep v_Vcc) v_Vcc))) 
                 v_Vec v_Vfc) v_Vdc) __B_1_LEMMA) v_Vbc)) 
    (x:(cc.eT _p_S_T) =>
     zen.nnpp 
       (zen.triangle (focal.is_true (abst_equal (abst_from_rep x) x))) 
       (v_Vzb:
        (zen.proof 
           (zen.not 
              (zen.triangle (focal.is_true (abst_equal (abst_from_rep x) x))))) =>
        zen.Rall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.triangle 
             (focal.is_true 
                (abst_equal 
                   (abst_from_rep (Represented_by__to_rep _p_S_T v_Vac)) 
                   v_Vac))) x 
          (v_Vbc:
           (zen.proof 
              (zen.triangle (focal.is_true (abst_equal (abst_from_rep x) x)))) =>
           zen.Raxiom 
             (zen.triangle (focal.is_true (abst_equal (abst_from_rep x) x))) 
             v_Vbc v_Vzb) abst_to_rep_reverses)).

def Equivalence_relation__equiv_reflexive :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.ebP (_p_S_equal x x)))) ->
  abst_equiv:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> dk_logic.Prop) ->
  abst_equal_refines_equiv:(dk_logic.eP 
                              (dk_logic.forall _p_S_T 
                                 (x:(cc.eT _p_S_T) =>
                                  dk_logic.forall _p_S_T 
                                    (y:(cc.eT _p_S_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_S_equal x y)) 
                                       (abst_equiv x y))))) ->
  dk_logic.eP (dk_logic.forall _p_S_T (x:(cc.eT _p_S_T) => abst_equiv x x))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) => dk_logic.ebP (_p_S_equal x x)))) =>
  abst_equiv:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> dk_logic.Prop) =>
  abst_equal_refines_equiv:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) (abst_equiv x y))))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) => zen.triangle (abst_equiv v_Vzb v_Vzb))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.triangle (abst_equiv v_Vzb v_Vzb))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) => zen.triangle (abst_equiv v_Vzb v_Vzb)) 
       (v_Vbc:(zen.term _p_S_T) =>
        v_Vcc:
        (zen.proof (zen.not (zen.triangle (abst_equiv v_Vbc v_Vbc)))) =>
        zen.Rall _p_S_T 
          (v_Vzb:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vdc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vdc))) 
                (zen.triangle (abst_equiv v_Vzb v_Vdc)))) v_Vbc 
          (v_Vec:
           (zen.proof 
              (zen.forall _p_S_T 
                 (v_Vdc:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vdc))) 
                    (zen.triangle (abst_equiv v_Vbc v_Vdc))))) =>
           zen.Rall _p_S_T 
             (v_Vdc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vdc))) 
                (zen.triangle (abst_equiv v_Vbc v_Vdc))) v_Vbc 
             (v_Vfc:
              (zen.proof 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))) 
                    (zen.triangle (abst_equiv v_Vbc v_Vbc)))) =>
              zen.Rimply 
                (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))) 
                (zen.triangle (abst_equiv v_Vbc v_Vbc)) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))))) =>
                 zen.Rall _p_S_T 
                   (v_Vzb:(zen.term _p_S_T) =>
                    zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vzb))) 
                   v_Vbc 
                   (v_Vhc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))) 
                      v_Vhc v_Vgc) _p_S_equal_reflexive) 
                (v_Vic:(zen.proof (zen.triangle (abst_equiv v_Vbc v_Vbc))) =>
                 zen.Raxiom (zen.triangle (abst_equiv v_Vbc v_Vbc)) v_Vic 
                   v_Vcc) v_Vfc) v_Vec) abst_equal_refines_equiv) v_Vac).

def Setoid_morphism__equiv :
  _p_S_T:cc.uT ->
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) ->
  e1:(cc.eT _p_S_T) -> e2:(cc.eT _p_S_T) -> dk_logic.Prop
  :=
  _p_S_T:cc.uT =>
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) =>
  e1:(cc.eT _p_S_T) =>
  e2:(cc.eT _p_S_T) =>
  dk_logic.ebP (_p_T_equal (abst_morph e1) (abst_morph e2)).

def Setoid_morphism__equiv_symmetric :
  _p_S_T:cc.uT ->
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_T_T 
                             (x:(cc.eT _p_T_T) =>
                              dk_logic.forall _p_T_T 
                                (y:(cc.eT _p_T_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_T_equal x y)) 
                                   (dk_logic.ebP (_p_T_equal y x)))))) ->
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.imp 
             (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph x y) 
             (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph y x))))
  :=
  _p_S_T:cc.uT =>
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
              (dk_logic.ebP (_p_T_equal y x)))))) =>
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vzb v_Vac)) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vac v_Vzb))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vzb v_Vac)) 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vac v_Vzb))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vzb v_Vac)) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vac v_Vzb)))) 
       (v_Vcc:(zen.term _p_S_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vcc v_Vac)) 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vac v_Vcc)))))) =>
        zen.Rnotall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vcc v_Vac)) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vac v_Vcc))) 
          (v_Vec:(zen.term _p_S_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vcc v_Vec)) 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vec v_Vcc))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vcc v_Vec)) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vec v_Vcc)) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_T_equal (abst_morph v_Vcc) (abst_morph v_Vec))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_T_equal (abst_morph v_Vec) (abst_morph v_Vcc)))))) =>
              zen.Rall _p_T_T 
                (v_Vic:(zen.term _p_T_T) =>
                 zen.forall _p_T_T 
                   (v_Vjc:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vic v_Vjc))) 
                      (zen.triangle (focal.is_true (_p_T_equal v_Vjc v_Vic))))) 
                (abst_morph v_Vcc) 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall _p_T_T 
                       (v_Vjc:(zen.term _p_T_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Vcc) v_Vjc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal v_Vjc (abst_morph v_Vcc))))))) =>
                 zen.Rall _p_T_T 
                   (v_Vjc:(zen.term _p_T_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true (_p_T_equal (abst_morph v_Vcc) v_Vjc))) 
                      (zen.triangle 
                         (focal.is_true (_p_T_equal v_Vjc (abst_morph v_Vcc))))) 
                   (abst_morph v_Vec) 
                   (v_Vlc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Vcc) 
                                   (abst_morph v_Vec)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Vec) 
                                   (abst_morph v_Vcc)))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_T_equal (abst_morph v_Vcc) (abst_morph v_Vec)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_T_equal (abst_morph v_Vec) (abst_morph v_Vcc)))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_T_equal (abst_morph v_Vcc) 
                                      (abst_morph v_Vec)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_T_equal (abst_morph v_Vcc) 
                                  (abst_morph v_Vec)))) v_Vgc v_Vmc) 
                      (v_Vnc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Vec) 
                                   (abst_morph v_Vcc))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_T_equal (abst_morph v_Vec) 
                                  (abst_morph v_Vcc)))) v_Vnc v_Vhc) v_Vlc) 
                   v_Vkc) _p_T_equal_symmetric) v_Vfc) v_Vdc) v_Vbc).

def Setoid_morphism__equiv_transitive :
  _p_S_T:cc.uT ->
  _p_T_T:cc.uT ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  _p_T_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_T_T 
                              (x:(cc.eT _p_T_T) =>
                               dk_logic.forall _p_T_T 
                                 (y:(cc.eT _p_T_T) =>
                                  dk_logic.forall _p_T_T 
                                    (z:(cc.eT _p_T_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_T_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_T_equal y z)) 
                                          (dk_logic.ebP (_p_T_equal x z)))))))) ->
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.forall _p_S_T 
             (z:(cc.eT _p_S_T) =>
              dk_logic.imp 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   x y) 
                (dk_logic.imp 
                   (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                      abst_morph y z) 
                   (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                      abst_morph x z))))))
  :=
  _p_S_T:cc.uT =>
  _p_T_T:cc.uT =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  _p_T_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_T_T 
        (x:(cc.eT _p_T_T) =>
         dk_logic.forall _p_T_T 
           (y:(cc.eT _p_T_T) =>
            dk_logic.forall _p_T_T 
              (z:(cc.eT _p_T_T) =>
               dk_logic.imp (dk_logic.ebP (_p_T_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_T_equal y z)) 
                    (dk_logic.ebP (_p_T_equal x z)))))))) =>
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vkc:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vlc:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                      abst_morph v_Vkc v_Vlc)) 
                (zen.imp 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vlc v_Vmc)) 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vkc v_Vmc))))))) 
    (v_Vnc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vkc:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vlc:(zen.term _p_S_T) =>
                  zen.forall _p_S_T 
                    (v_Vmc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle 
                          (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                             abst_morph v_Vkc v_Vlc)) 
                       (zen.imp 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Vlc v_Vmc)) 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Vkc v_Vmc))))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vkc:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vlc:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                      abst_morph v_Vkc v_Vlc)) 
                (zen.imp 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vlc v_Vmc)) 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vkc v_Vmc)))))) 
       (v_Voc:(zen.term _p_S_T) =>
        v_Vpc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vlc:(zen.term _p_S_T) =>
                  zen.forall _p_S_T 
                    (v_Vmc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle 
                          (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                             abst_morph v_Voc v_Vlc)) 
                       (zen.imp 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Vlc v_Vmc)) 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Voc v_Vmc)))))))) =>
        zen.Rnotall _p_S_T 
          (v_Vlc:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                      abst_morph v_Voc v_Vlc)) 
                (zen.imp 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vlc v_Vmc)) 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Voc v_Vmc))))) 
          (v_Vqc:(zen.term _p_S_T) =>
           v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_S_T 
                    (v_Vmc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle 
                          (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                             abst_morph v_Voc v_Vqc)) 
                       (zen.imp 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Vqc v_Vmc)) 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Voc v_Vmc))))))) =>
           zen.Rnotall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                      abst_morph v_Voc v_Vqc)) 
                (zen.imp 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vqc v_Vmc)) 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Voc v_Vmc)))) 
             (v_Vsc:(zen.term _p_S_T) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                             abst_morph v_Voc v_Vqc)) 
                       (zen.imp 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Vqc v_Vsc)) 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Voc v_Vsc)))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                      abst_morph v_Voc v_Vqc)) 
                (zen.imp 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vqc v_Vsc)) 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Voc v_Vsc))) 
                (v_Vuc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_T_equal (abst_morph v_Voc) (abst_morph v_Vqc))))) =>
                 v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Vqc v_Vsc)) 
                          (zen.triangle 
                             (Setoid_morphism__equiv _p_S_T _p_T_T 
                                _p_T_equal abst_morph v_Voc v_Vsc))))) =>
                 zen.Rnotimply 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Vqc v_Vsc)) 
                   (zen.triangle 
                      (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                         abst_morph v_Voc v_Vsc)) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_T_equal (abst_morph v_Vqc) 
                                (abst_morph v_Vsc))))) =>
                    v_Vxc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Voc) 
                                   (abst_morph v_Vsc)))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_T_T (abst_morph v_Voc) 
                                  (abst_morph v_Voc)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_T_equal (abst_morph v_Voc) 
                                     (abst_morph v_Voc)))))) 
                      (v_Vyc:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_T_T (abst_morph v_Voc) 
                                      (abst_morph v_Voc)))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_T_equal (abst_morph v_Voc) 
                                         (abst_morph v_Voc))))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_T_T (abst_morph v_Voc) 
                                  (abst_morph v_Voc)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_T_equal (abst_morph v_Voc) 
                                     (abst_morph v_Voc))))) 
                         (v_Vzc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_T_T (abst_morph v_Voc) 
                                      (abst_morph v_Voc))))) =>
                          v_Vad:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_T_equal (abst_morph v_Voc) 
                                         (abst_morph v_Voc)))))) =>
                          zen.Rnoteq _p_T_T (abst_morph v_Voc) v_Vzc) v_Vyc) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_T_T (abst_morph v_Voc) 
                                         (abst_morph v_Voc)))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_T_equal (abst_morph v_Voc) 
                                            (abst_morph v_Voc)))))))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (zen.equal _p_T_T (abst_morph v_Vqc) 
                               (abst_morph v_Vsc))) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.triangle 
                                (zen.equal _p_T_T (abst_morph v_Vqc) 
                                   (abst_morph v_Vsc)))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vdd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vdd)) 
                            (_p_T_equal (abst_morph v_Voc) (abst_morph v_Vqc)) 
                            (_p_T_equal (abst_morph v_Voc) (abst_morph v_Vsc)) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_T_equal (abst_morph v_Voc) 
                                            (abst_morph v_Vqc)) 
                                         (_p_T_equal (abst_morph v_Voc) 
                                            (abst_morph v_Vsc)))))) =>
                             zen.Rsubst _p_T_T 
                               (v_Vfd:(zen.term _p_T_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_T_equal v_Vfd (abst_morph v_Vqc)) 
                                        (_p_T_equal (abst_morph v_Voc) 
                                           (abst_morph v_Vsc))))) 
                               (abst_morph v_Voc) (abst_morph v_Voc) 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_T_T 
                                            (abst_morph v_Voc) 
                                            (abst_morph v_Voc))))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_T_T (abst_morph v_Voc) 
                                           (abst_morph v_Voc)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_T_equal (abst_morph v_Voc) 
                                              (abst_morph v_Voc))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_T_T 
                                                  (abst_morph v_Voc) 
                                                  (abst_morph v_Voc)))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal _p_T_T (abst_morph v_Voc) 
                                           (abst_morph v_Voc))) 
                                     (v_Vhd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_T_T 
                                               (abst_morph v_Voc) 
                                               (abst_morph v_Voc)))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal _p_T_T 
                                              (abst_morph v_Voc) 
                                              (abst_morph v_Voc))) 
                                        (v_Vhd0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_T_T 
                                                  (abst_morph v_Voc) 
                                                  (abst_morph v_Voc)))) =>
                                         zen.Rsubst _p_T_T 
                                           (v_Vid:(zen.term _p_T_T) =>
                                            zen.triangle 
                                              (zen.equal _p_T_T v_Vid 
                                                 (abst_morph v_Voc))) 
                                           (abst_morph v_Voc) 
                                           (abst_morph v_Voc) 
                                           (v_Vzc0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_T_T 
                                                        (abst_morph v_Voc) 
                                                        (abst_morph v_Voc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_T_T 
                                                    (abst_morph v_Voc) 
                                                    (abst_morph v_Voc))) 
                                              v_Vhd0 v_Vzc0) 
                                           (v_Vhd0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_T_T 
                                                     (abst_morph v_Voc) 
                                                     (abst_morph v_Voc)))) =>
                                            zen.Rsubst _p_T_T 
                                              (v_Vjd:(zen.term _p_T_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_T_T 
                                                    (abst_morph v_Voc) v_Vjd)) 
                                              (abst_morph v_Voc) 
                                              (abst_morph v_Voc) 
                                              (v_Vzc0:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_T_T 
                                                           (abst_morph v_Voc) 
                                                           (abst_morph v_Voc))))) =>
                                               zen.Rnoteq _p_T_T 
                                                 (abst_morph v_Voc) v_Vzc0) 
                                              (v_Vhd0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_T_T 
                                                        (abst_morph v_Voc) 
                                                        (abst_morph v_Voc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_T_T 
                                                       (abst_morph v_Voc) 
                                                       (abst_morph v_Voc))) 
                                                 v_Vhd0 v_Vzc) v_Vhd0) v_Vhd0) 
                                        (v_Vzc0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_T_T 
                                                     (abst_morph v_Voc) 
                                                     (abst_morph v_Voc))))) =>
                                         zen.Rnoteq _p_T_T 
                                           (abst_morph v_Voc) v_Vzc0)) v_Vgd) 
                                  (v_Vkd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal 
                                                     (abst_morph v_Voc) 
                                                     (abst_morph v_Voc))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_T_equal (abst_morph v_Voc) 
                                              (abst_morph v_Voc)))) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_T_equal 
                                                  (abst_morph v_Voc) 
                                                  (abst_morph v_Voc))))) =>
                                      zen.Rall _p_T_T 
                                        (v_Vmd:(zen.term _p_T_T) =>
                                         zen.forall _p_T_T 
                                           (v_Vnd:(zen.term _p_T_T) =>
                                            zen.forall _p_T_T 
                                              (v_Vod:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal v_Vmd 
                                                          v_Vnd))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vnd 
                                                             v_Vod))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vmd 
                                                             v_Vod))))))) 
                                        (abst_morph v_Voc) 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.forall _p_T_T 
                                               (v_Vnd:(zen.term _p_T_T) =>
                                                zen.forall _p_T_T 
                                                  (v_Vod:(zen.term _p_T_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal 
                                                              (abst_morph 
                                                                 v_Voc) v_Vnd))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 v_Vnd v_Vod))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 v_Vod)))))))) =>
                                         zen.Rall _p_T_T 
                                           (v_Vnd:(zen.term _p_T_T) =>
                                            zen.forall _p_T_T 
                                              (v_Vod:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal 
                                                          (abst_morph v_Voc) 
                                                          v_Vnd))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal v_Vnd 
                                                             v_Vod))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) v_Vod)))))) 
                                           (abst_morph v_Voc) 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.forall _p_T_T 
                                                  (v_Vod:(zen.term _p_T_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal 
                                                              (abst_morph 
                                                                 v_Voc) 
                                                              (abst_morph 
                                                                 v_Voc)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 v_Vod))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 v_Vod))))))) =>
                                            zen.Rall _p_T_T 
                                              (v_Vod:(zen.term _p_T_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Voc)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) v_Vod))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) v_Vod))))) 
                                              (abst_morph v_Vqc) 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_T_equal 
                                                              (abst_morph 
                                                                 v_Voc) 
                                                              (abst_morph 
                                                                 v_Voc)))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Vqc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Vqc))))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Voc)))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Vqc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Vqc))))) 
                                                 (v_Vad:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Voc)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Voc)))) 
                                                    v_Vld v_Vad) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Vqc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Vqc)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Vqc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Vqc)))) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_morph 
                                                                    v_Vqc)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                (abst_morph 
                                                                   v_Voc) 
                                                                (abst_morph 
                                                                   v_Vqc)))) 
                                                       v_Vuc v_Vtd) 
                                                    (v_Vuc0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Vqc))))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vdd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vdd)) 
                                                       (_p_T_equal 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Vqc)) 
                                                       (_p_T_equal 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Vsc)) 
                                                       (v_Ved0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vqc)) 
                                                                    (
                                                                    _p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))))) =>
                                                        zen.Rsubst _p_T_T 
                                                          (v_Vfd:
                                                           (zen.term _p_T_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_T_equal 
                                                                    v_Vfd 
                                                                    (abst_morph 
                                                                    v_Vqc)) 
                                                                   (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc))))) 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Voc) 
                                                          (v_Vzc0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_T_T 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc))))) =>
                                                           zen.Rnoteq _p_T_T 
                                                             (abst_morph 
                                                                v_Voc) v_Vzc0) 
                                                          (v_Ved0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vqc)) 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))))) =>
                                                           zen.Rsubst _p_T_T 
                                                             (v_Vud:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vud) 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc))))) 
                                                             (abst_morph 
                                                                v_Vqc) 
                                                             (abst_morph 
                                                                v_Vsc) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_T_T 
                                                                    (abst_morph 
                                                                    v_Vqc) 
                                                                    (abst_morph 
                                                                    v_Vsc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_T_T 
                                                                    (abst_morph 
                                                                    v_Vqc) 
                                                                    (abst_morph 
                                                                    v_Vsc))) 
                                                                v_Vcd v_Vvd) 
                                                             (v_Vwd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)) 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (_p_T_equal 
                                                                   (abst_morph 
                                                                    v_Voc) 
                                                                   (abst_morph 
                                                                    v_Vsc)) 
                                                                v_Vwd) v_Ved0) 
                                                          v_Ved0) 
                                                       (v_Vxd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_morph 
                                                                    v_Vsc))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_T_equal 
                                                                   (abst_morph 
                                                                    v_Voc) 
                                                                   (abst_morph 
                                                                    v_Vsc)))) 
                                                          v_Vxd v_Vxc) v_Vuc0) 
                                                    v_Vsd) v_Vrd) v_Vqd) 
                                           v_Vpd) _p_T_equal_transitive) 
                                     v_Vkd) v_Vbd) 
                               (v_Ved0:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_T_equal (abst_morph v_Voc) 
                                               (abst_morph v_Vqc)) 
                                            (_p_T_equal (abst_morph v_Voc) 
                                               (abst_morph v_Vsc)))))) =>
                                zen.Rsubst _p_T_T 
                                  (v_Vud:(zen.term _p_T_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_T_equal (abst_morph v_Voc) 
                                              v_Vud) 
                                           (_p_T_equal (abst_morph v_Voc) 
                                              (abst_morph v_Vsc))))) 
                                  (abst_morph v_Vqc) (abst_morph v_Vsc) 
                                  (v_Vvd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_T_T 
                                               (abst_morph v_Vqc) 
                                               (abst_morph v_Vsc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal _p_T_T (abst_morph v_Vqc) 
                                           (abst_morph v_Vsc))) v_Vcd v_Vvd) 
                                  (v_Vwd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_T_equal 
                                                  (abst_morph v_Voc) 
                                                  (abst_morph v_Vsc)) 
                                               (_p_T_equal 
                                                  (abst_morph v_Voc) 
                                                  (abst_morph v_Vsc)))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (_p_T_equal (abst_morph v_Voc) 
                                        (abst_morph v_Vsc)) v_Vwd) v_Ved0) 
                               v_Ved) 
                            (v_Vxd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_T_equal (abst_morph v_Voc) 
                                         (abst_morph v_Vsc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_T_equal (abst_morph v_Voc) 
                                        (abst_morph v_Vsc)))) v_Vxd v_Vxc) 
                            v_Vuc) 
                         (v_Vvd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_T_T (abst_morph v_Vqc) 
                                      (abst_morph v_Vsc))))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_T_equal (abst_morph v_Vqc) 
                                     (abst_morph v_Vsc)))) 
                            (v_Vwc0:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_T_equal (abst_morph v_Vqc) 
                                         (abst_morph v_Vsc))))) =>
                             zen.Rall _p_T_T 
                               (v_Vmd:(zen.term _p_T_T) =>
                                zen.forall _p_T_T 
                                  (v_Vnd:(zen.term _p_T_T) =>
                                   zen.forall _p_T_T 
                                     (v_Vod:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal v_Vmd v_Vnd))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vnd v_Vod))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vmd v_Vod))))))) 
                               (abst_morph v_Voc) 
                               (v_Vpd:
                                (zen.proof 
                                   (zen.forall _p_T_T 
                                      (v_Vnd:(zen.term _p_T_T) =>
                                       zen.forall _p_T_T 
                                         (v_Vod:(zen.term _p_T_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal 
                                                     (abst_morph v_Voc) v_Vnd))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal v_Vnd v_Vod))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Voc) 
                                                        v_Vod)))))))) =>
                                zen.Rall _p_T_T 
                                  (v_Vnd:(zen.term _p_T_T) =>
                                   zen.forall _p_T_T 
                                     (v_Vod:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal (abst_morph v_Voc) 
                                                 v_Vnd))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal v_Vnd v_Vod))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Voc) v_Vod)))))) 
                                  (abst_morph v_Vqc) 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.forall _p_T_T 
                                         (v_Vod:(zen.term _p_T_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal 
                                                     (abst_morph v_Voc) 
                                                     (abst_morph v_Vqc)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Vqc) 
                                                        v_Vod))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Voc) 
                                                        v_Vod))))))) =>
                                   zen.Rall _p_T_T 
                                     (v_Vod:(zen.term _p_T_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal (abst_morph v_Voc) 
                                                 (abst_morph v_Vqc)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Vqc) v_Vod))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Voc) v_Vod))))) 
                                     (abst_morph v_Vsc) 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_T_equal 
                                                     (abst_morph v_Voc) 
                                                     (abst_morph v_Vqc)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Vqc) 
                                                        (abst_morph v_Vsc)))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Voc) 
                                                        (abst_morph v_Vsc))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_T_equal (abst_morph v_Voc) 
                                                 (abst_morph v_Vqc)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Vqc) 
                                                    (abst_morph v_Vsc)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Voc) 
                                                    (abst_morph v_Vsc))))) 
                                        (v_Vtd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Voc) 
                                                        (abst_morph v_Vqc)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Voc) 
                                                    (abst_morph v_Vqc)))) 
                                           v_Vuc v_Vtd) 
                                        (v_Vae:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Vqc) 
                                                        (abst_morph v_Vsc)))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Voc) 
                                                        (abst_morph v_Vsc)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Vqc) 
                                                    (abst_morph v_Vsc)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_T_equal 
                                                    (abst_morph v_Voc) 
                                                    (abst_morph v_Vsc)))) 
                                           (v_Vbe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_T_equal 
                                                           (abst_morph v_Vqc) 
                                                           (abst_morph v_Vsc)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_T_equal 
                                                       (abst_morph v_Vqc) 
                                                       (abst_morph v_Vsc)))) 
                                              v_Vwc0 v_Vbe) 
                                           (v_Vxd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_T_equal 
                                                        (abst_morph v_Voc) 
                                                        (abst_morph v_Vsc))))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vdd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vdd)) 
                                              (_p_T_equal (abst_morph v_Voc) 
                                                 (abst_morph v_Vsc)) 
                                              (_p_T_equal (abst_morph v_Voc) 
                                                 (abst_morph v_Vsc)) 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_T_equal 
                                                              (abst_morph 
                                                                 v_Voc) 
                                                              (abst_morph 
                                                                 v_Vsc)) 
                                                           (_p_T_equal 
                                                              (abst_morph 
                                                                 v_Voc) 
                                                              (abst_morph 
                                                                 v_Vsc)))))) =>
                                               zen.Rsubst _p_T_T 
                                                 (v_Vce:(zen.term _p_T_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_T_equal v_Vce 
                                                             (abst_morph 
                                                                v_Vsc)) 
                                                          (_p_T_equal 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Vsc))))) 
                                                 (abst_morph v_Voc) 
                                                 (abst_morph v_Voc) 
                                                 (v_Vzc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_T_T 
                                                              (abst_morph 
                                                                 v_Voc) 
                                                              (abst_morph 
                                                                 v_Voc))))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_T_T 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Voc)))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                (abst_morph 
                                                                   v_Voc) 
                                                                (abst_morph 
                                                                   v_Voc))))) 
                                                    (v_Vgd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_T_T 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_T_T 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (abst_morph 
                                                                v_Voc))) 
                                                       (v_Vhd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_T_T 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Voc)))) =>
                                                        zen.Reqsym _p_T_T 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Voc) 
                                                          v_Vhd v_Vzc) v_Vgd) 
                                                    (v_Vkd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_T_equal 
                                                                (abst_morph 
                                                                   v_Voc) 
                                                                (abst_morph 
                                                                   v_Voc)))) 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_T_equal 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc))))) =>
                                                        zen.Rall _p_T_T 
                                                          (v_Vmd:
                                                           (zen.term _p_T_T) =>
                                                           zen.forall _p_T_T 
                                                             (v_Vnd:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.forall 
                                                                _p_T_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vmd 
                                                                    v_Vnd))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vnd 
                                                                    v_Vod))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vmd 
                                                                    v_Vod))))))) 
                                                          (abst_morph v_Voc) 
                                                          (v_Vpd0:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_T_T 
                                                                 (v_Vnd:
                                                                  (zen.term 
                                                                    _p_T_T) =>
                                                                  zen.forall 
                                                                    _p_T_T 
                                                                    (
                                                                    v_Vod:
                                                                    (
                                                                    zen.term 
                                                                    _p_T_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vnd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vnd 
                                                                    v_Vod))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vod)))))))) =>
                                                           zen.Rall _p_T_T 
                                                             (v_Vnd:
                                                              (zen.term 
                                                                 _p_T_T) =>
                                                              zen.forall 
                                                                _p_T_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vnd))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    v_Vnd 
                                                                    v_Vod))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vod)))))) 
                                                             (abst_morph 
                                                                v_Voc) 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_T_T 
                                                                    (
                                                                    v_Vod:
                                                                    (
                                                                    zen.term 
                                                                    _p_T_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vod))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vod))))))) =>
                                                              zen.Rall 
                                                                _p_T_T 
                                                                (v_Vod:
                                                                 (zen.term 
                                                                    _p_T_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vod))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    v_Vod))))) 
                                                                (abst_morph 
                                                                   v_Vsc) 
                                                                (v_Vde:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc))))) 
                                                                   (v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Voc)))) 
                                                                    v_Vld 
                                                                    v_Vad) 
                                                                   (v_Vee:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))) 
                                                                    (v_Vxc0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))) 
                                                                    v_Vxd 
                                                                    v_Vxc0) 
                                                                    (v_Vxd0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_T_equal 
                                                                    (abst_morph 
                                                                    v_Voc) 
                                                                    (abst_morph 
                                                                    v_Vsc)))) 
                                                                    v_Vxd0 
                                                                    v_Vxc) 
                                                                    v_Vee) 
                                                                   v_Vde) 
                                                                v_Vqd) v_Vpd0) 
                                                          _p_T_equal_transitive) 
                                                       v_Vkd) v_Vbd) 
                                                 (v_Vwd0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Vsc)) 
                                                              (_p_T_equal 
                                                                 (abst_morph 
                                                                    v_Voc) 
                                                                 (abst_morph 
                                                                    v_Vsc)))))) =>
                                                  zen.Rsubst _p_T_T 
                                                    (v_Vud:
                                                     (zen.term _p_T_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_T_equal 
                                                                (abst_morph 
                                                                   v_Voc) 
                                                                v_Vud) 
                                                             (_p_T_equal 
                                                                (abst_morph 
                                                                   v_Voc) 
                                                                (abst_morph 
                                                                   v_Vsc))))) 
                                                    (abst_morph v_Vsc) 
                                                    (abst_morph v_Vsc) 
                                                    (v_Vfe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_T_T 
                                                                 (abst_morph 
                                                                    v_Vsc) 
                                                                 (abst_morph 
                                                                    v_Vsc))))) =>
                                                     zen.Rnoteq _p_T_T 
                                                       (abst_morph v_Vsc) 
                                                       v_Vfe) 
                                                    (v_Vwd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_T_equal 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_morph 
                                                                    v_Vsc)) 
                                                                 (_p_T_equal 
                                                                    (
                                                                    abst_morph 
                                                                    v_Voc) 
                                                                    (
                                                                    abst_morph 
                                                                    v_Vsc)))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_T_equal 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Vsc)) 
                                                       v_Vwd0) v_Vwd0) v_Vwd) 
                                              (v_Vxd0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_T_equal 
                                                           (abst_morph v_Voc) 
                                                           (abst_morph v_Vsc))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_T_equal 
                                                          (abst_morph v_Voc) 
                                                          (abst_morph v_Vsc)))) 
                                                 v_Vxd0 v_Vxc) v_Vxd) v_Vae) 
                                        v_Vzd) v_Vyd) v_Vpd) 
                               _p_T_equal_transitive) 
                            (v_Vbe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_T_equal (abst_morph v_Vqc) 
                                            (abst_morph v_Vsc)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_T_equal (abst_morph v_Vqc) 
                                        (abst_morph v_Vsc)))) v_Vwc v_Vbe)))) 
                   v_Vvc) v_Vtc) v_Vrc) v_Vpc) v_Vnc).

def Setoid_morphism__equal_refines_equiv :
  _p_S_T:cc.uT ->
  _p_T_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) ->
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) ->
  abst_morph_substitution_rule:(dk_logic.eP 
                                  (dk_logic.forall _p_S_T 
                                     (x:(cc.eT _p_S_T) =>
                                      dk_logic.forall _p_S_T 
                                        (y:(cc.eT _p_S_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP (_p_S_equal x y)) 
                                           (dk_logic.ebP 
                                              (_p_T_equal (abst_morph x) 
                                                 (abst_morph y))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph x y))))
  :=
  _p_S_T:cc.uT =>
  _p_T_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_T_equal:((cc.eT _p_T_T) -> (cc.eT _p_T_T) -> cc.eT basics.bool__t) =>
  abst_morph:((cc.eT _p_S_T) -> cc.eT _p_T_T) =>
  abst_morph_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
              (dk_logic.ebP (_p_T_equal (abst_morph x) (abst_morph y))))))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vzb v_Vac))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vzb v_Vac))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vzb v_Vac)))) 
       (v_Vcc:(zen.term _p_S_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vcc v_Vac)))))) =>
        zen.Rnotall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vcc v_Vac))) 
          (v_Vec:(zen.term _p_S_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                    (zen.triangle 
                       (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal 
                          abst_morph v_Vcc v_Vec))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
             (zen.triangle 
                (Setoid_morphism__equiv _p_S_T _p_T_T _p_T_equal abst_morph 
                   v_Vcc v_Vec)) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_T_equal (abst_morph v_Vcc) (abst_morph v_Vec)))))) =>
              zen.Rall _p_S_T 
                (v_Vzb:(zen.term _p_S_T) =>
                 zen.forall _p_S_T 
                   (v_Vac:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_T_equal (abst_morph v_Vzb) (abst_morph v_Vac)))))) 
                v_Vcc 
                (v_Vic:
                 (zen.proof 
                    (zen.forall _p_S_T 
                       (v_Vac:(zen.term _p_S_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Vcc) 
                                   (abst_morph v_Vac))))))) =>
                 zen.Rall _p_S_T 
                   (v_Vac:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_T_equal (abst_morph v_Vcc) (abst_morph v_Vac))))) 
                   v_Vec 
                   (v_Vjc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Vcc) 
                                   (abst_morph v_Vec)))))) =>
                    zen.Rimply 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_T_equal (abst_morph v_Vcc) (abst_morph v_Vec)))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_S_equal v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_S_equal v_Vcc v_Vec))) v_Vgc 
                         v_Vkc) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_T_equal (abst_morph v_Vcc) 
                                   (abst_morph v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_T_equal (abst_morph v_Vcc) 
                                  (abst_morph v_Vec)))) v_Vlc v_Vhc) v_Vjc) 
                   v_Vic) abst_morph_substitution_rule) v_Vfc) v_Vdc) v_Vbc).

def Represented_by_setoid__equal :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT _p_S_T) -> y:(cc.eT _p_S_T) -> cc.eT basics.bool__t
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT _p_S_T) => y:(cc.eT _p_S_T) => _p_S_equal x y.

def Represented_by_setoid__represents_some_self :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT _p_S_T) ->
  x:(cc.eT _p_S_T) -> dk_logic.Prop
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  x:(cc.eT _p_S_T) => dk_logic.ebP (_p_S_equal (abst_from_rep x) x).

def Represented_by_setoid__equal_reflexive :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.ebP (_p_S_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.ebP (Represented_by_setoid__equal _p_S_T _p_S_equal x x)))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) => dk_logic.ebP (_p_S_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.triangle 
          (focal.is_true 
             (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.triangle 
                 (focal.is_true 
                    (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vzb 
                       v_Vzb)))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.triangle 
          (focal.is_true 
             (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term _p_S_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))))) =>
        zen.Rall _p_S_T 
          (v_Vzb:(zen.term _p_S_T) =>
           zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vzb))) v_Vbc 
          (v_Vdc:
           (zen.proof (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc)))) =>
           zen.Raxiom 
             (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))) v_Vdc 
             v_Vcc) _p_S_equal_reflexive) v_Vac).

def Represented_by_setoid__equal_symmetric :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.forall _p_S_T 
                                (y:(cc.eT _p_S_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_S_equal x y)) 
                                   (dk_logic.ebP (_p_S_equal y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (Represented_by_setoid__equal _p_S_T _p_S_equal x y)) 
             (dk_logic.ebP 
                (Represented_by_setoid__equal _p_S_T _p_S_equal y x)))))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
              (dk_logic.ebP (_p_S_equal y x)))))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vzb 
                      v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vac 
                      v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vac v_Vzb)))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vzb 
                      v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vac 
                      v_Vzb))))) 
       (v_Vcc:(zen.term _p_S_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vac v_Vcc))))))) =>
        zen.Rnotall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vcc 
                      v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vac 
                      v_Vcc)))) 
          (v_Vec:(zen.term _p_S_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vec v_Vcc)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vcc 
                      v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vec 
                      v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vec v_Vcc))))) =>
              zen.Rall _p_S_T 
                (v_Vzb:(zen.term _p_S_T) =>
                 zen.forall _p_S_T 
                   (v_Vac:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vac v_Vzb))))) 
                v_Vcc 
                (v_Vic:
                 (zen.proof 
                    (zen.forall _p_S_T 
                       (v_Vac:(zen.term _p_S_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vac v_Vcc)))))) =>
                 zen.Rall _p_S_T 
                   (v_Vac:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vac v_Vcc)))) 
                   v_Vec 
                   (v_Vjc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vec v_Vcc))))) =>
                    zen.Rimply 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vec v_Vcc))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_S_equal v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_S_equal v_Vcc v_Vec))) v_Vgc 
                         v_Vkc) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vec v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_S_equal v_Vec v_Vcc))) v_Vlc 
                         v_Vhc) v_Vjc) v_Vic) _p_S_equal_symmetric) v_Vfc) 
          v_Vdc) v_Vbc).

def Represented_by_setoid__equal_transitive :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_S_T 
                              (x:(cc.eT _p_S_T) =>
                               dk_logic.forall _p_S_T 
                                 (y:(cc.eT _p_S_T) =>
                                  dk_logic.forall _p_S_T 
                                    (z:(cc.eT _p_S_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_S_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_S_equal y z)) 
                                          (dk_logic.ebP (_p_S_equal x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.forall _p_S_T 
             (z:(cc.eT _p_S_T) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (Represented_by_setoid__equal _p_S_T _p_S_equal y z)) 
                   (dk_logic.ebP 
                      (Represented_by_setoid__equal _p_S_T _p_S_equal x z)))))))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.forall _p_S_T 
              (z:(cc.eT _p_S_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S_equal y z)) 
                    (dk_logic.ebP (_p_S_equal x z)))))))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vkc:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vlc:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vkc 
                         v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vkc v_Vmc)))))))) 
    (v_Vnc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vkc:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vlc:(zen.term _p_S_T) =>
                  zen.forall _p_S_T 
                    (v_Vmc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Represented_by_setoid__equal _p_S_T _p_S_equal 
                                v_Vkc v_Vlc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Vlc v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Vkc v_Vmc)))))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vkc:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vlc:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vkc 
                         v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vkc v_Vmc))))))) 
       (v_Voc:(zen.term _p_S_T) =>
        v_Vpc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vlc:(zen.term _p_S_T) =>
                  zen.forall _p_S_T 
                    (v_Vmc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Represented_by_setoid__equal _p_S_T _p_S_equal 
                                v_Voc v_Vlc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Vlc v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Voc v_Vmc))))))))) =>
        zen.Rnotall _p_S_T 
          (v_Vlc:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Represented_by_setoid__equal _p_S_T _p_S_equal v_Voc 
                         v_Vlc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vlc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Voc v_Vmc)))))) 
          (v_Vqc:(zen.term _p_S_T) =>
           v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_S_T 
                    (v_Vmc:(zen.term _p_S_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Represented_by_setoid__equal _p_S_T _p_S_equal 
                                v_Voc v_Vqc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Vqc v_Vmc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Voc v_Vmc)))))))) =>
           zen.Rnotall _p_S_T 
             (v_Vmc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Represented_by_setoid__equal _p_S_T _p_S_equal v_Voc 
                         v_Vqc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vqc v_Vmc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Voc v_Vmc))))) 
             (v_Vsc:(zen.term _p_S_T) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Represented_by_setoid__equal _p_S_T _p_S_equal 
                                v_Voc v_Vqc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Vqc v_Vsc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Voc v_Vsc))))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (Represented_by_setoid__equal _p_S_T _p_S_equal v_Voc 
                         v_Vqc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vqc v_Vsc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Voc v_Vsc)))) 
                (v_Vuc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_S_equal v_Voc v_Vqc)))) =>
                 v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Vqc v_Vsc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Represented_by_setoid__equal _p_S_T 
                                   _p_S_equal v_Voc v_Vsc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Vqc v_Vsc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Represented_by_setoid__equal _p_S_T _p_S_equal 
                            v_Voc v_Vsc))) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_S_equal v_Vqc v_Vsc)))) =>
                    v_Vxc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Voc v_Vsc))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle (zen.equal _p_S_T v_Voc v_Vqc))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (_p_S_equal v_Voc v_Vqc))))) 
                      (v_Vyc:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle (zen.equal _p_S_T v_Voc v_Vqc))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_S_equal v_Voc v_Vqc)))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle (zen.equal _p_S_T v_Voc v_Vqc))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (_p_S_equal v_Voc v_Vqc)))) 
                         (v_Vzc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal _p_S_T v_Voc v_Vqc)))) =>
                          v_Vad:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_S_equal v_Voc v_Vqc))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (_p_S_equal v_Voc v_Vqc))) 
                            v_Vuc v_Vad) v_Vyc) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_S_T v_Voc v_Vqc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_S_equal v_Voc v_Vqc))))))) =>
                       zen.Rcut 
                         (zen.triangle (zen.equal _p_S_T v_Vsc v_Vsc)) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.triangle (zen.equal _p_S_T v_Vsc v_Vsc))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vdd:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vdd)) 
                            (_p_S_equal v_Vqc v_Vsc) 
                            (_p_S_equal v_Voc v_Vsc) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_S_equal v_Vqc v_Vsc) 
                                         (_p_S_equal v_Voc v_Vsc))))) =>
                             zen.Rsubst _p_S_T 
                               (v_Vfd:(zen.term _p_S_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_S_equal v_Vfd v_Vsc) 
                                        (_p_S_equal v_Voc v_Vsc)))) v_Vqc 
                               v_Voc 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_S_T v_Vqc v_Voc)))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_S_T v_Voc v_Vqc))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S_equal v_Voc v_Vqc)))) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_S_T v_Voc v_Vqc))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal _p_S_T v_Voc v_Vqc)) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_S_T v_Voc v_Vqc))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal _p_S_T v_Voc v_Voc)) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_S_T v_Voc v_Voc))) =>
                                         zen.Rsubst _p_S_T 
                                           (v_Vkd:(zen.term _p_S_T) =>
                                            zen.triangle 
                                              (zen.equal _p_S_T v_Vkd v_Voc)) 
                                           v_Voc v_Vqc 
                                           (v_Vzc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S_T v_Voc 
                                                        v_Vqc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_S_T v_Voc 
                                                    v_Vqc)) v_Vid v_Vzc) 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_S_T v_Vqc 
                                                     v_Voc))) =>
                                            zen.Rsubst _p_S_T 
                                              (v_Vmd:(zen.term _p_S_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_S_T v_Vqc 
                                                    v_Vmd)) v_Voc v_Voc 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_S_T 
                                                           v_Voc v_Voc)))) =>
                                               zen.Rnoteq _p_S_T v_Voc v_Vnd) 
                                              (v_Vld0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_S_T v_Vqc 
                                                        v_Voc))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_S_T v_Vqc 
                                                       v_Voc)) v_Vld0 v_Vgd) 
                                              v_Vld) v_Vjd) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_S_T v_Voc 
                                                     v_Voc)))) =>
                                         zen.Rnoteq _p_S_T v_Voc v_Vnd)) 
                                     v_Vhd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S_equal v_Voc v_Vqc)))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S_equal v_Voc v_Vqc))) 
                                     (v_Vuc0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S_equal v_Voc v_Vqc)))) =>
                                      zen.Rall _p_S_T 
                                        (v_Vkc:(zen.term _p_S_T) =>
                                         zen.forall _p_S_T 
                                           (v_Vlc:(zen.term _p_S_T) =>
                                            zen.forall _p_S_T 
                                              (v_Vmc:(zen.term _p_S_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S_equal v_Vkc 
                                                          v_Vlc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Vlc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Vkc 
                                                             v_Vmc))))))) 
                                        v_Voc 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.forall _p_S_T 
                                               (v_Vlc:(zen.term _p_S_T) =>
                                                zen.forall _p_S_T 
                                                  (v_Vmc:(zen.term _p_S_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S_equal v_Voc 
                                                              v_Vlc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Vlc v_Vmc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vmc)))))))) =>
                                         zen.Rall _p_S_T 
                                           (v_Vlc:(zen.term _p_S_T) =>
                                            zen.forall _p_S_T 
                                              (v_Vmc:(zen.term _p_S_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S_equal v_Voc 
                                                          v_Vlc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Vlc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Voc 
                                                             v_Vmc)))))) 
                                           v_Vqc 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.forall _p_S_T 
                                                  (v_Vmc:(zen.term _p_S_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Vqc v_Vmc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vmc))))))) =>
                                            zen.Rall _p_S_T 
                                              (v_Vmc:(zen.term _p_S_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S_equal v_Voc 
                                                          v_Vqc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Vqc 
                                                             v_Vmc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Voc 
                                                             v_Vmc))))) 
                                              v_Vsc 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Vqc v_Vsc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vsc)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S_equal v_Voc 
                                                          v_Vqc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Vqc 
                                                             v_Vsc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Voc 
                                                             v_Vsc)))) 
                                                 (v_Vad:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vqc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Voc 
                                                             v_Vqc))) v_Vuc0 
                                                    v_Vad) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Vqc v_Vsc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vsc))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Vqc 
                                                             v_Vsc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S_equal v_Voc 
                                                             v_Vsc))) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S_equal 
                                                                v_Vqc v_Vsc))) 
                                                       v_Vwc v_Vtd) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vsc)))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vdd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vdd)) 
                                                       (_p_S_equal v_Voc 
                                                          v_Vsc) 
                                                       (_p_S_equal v_Voc 
                                                          v_Vsc) 
                                                       (v_Vvd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (
                                                                    _p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                        zen.Rsubst _p_S_T 
                                                          (v_Vfd:
                                                           (zen.term _p_S_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_S_equal 
                                                                    v_Vfd 
                                                                    v_Vsc) 
                                                                   (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                          v_Voc v_Voc 
                                                          (v_Vnd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_S_T 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                           zen.Rnoteq _p_S_T 
                                                             v_Voc v_Vnd) 
                                                          (v_Vvd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                           zen.Rsubst _p_S_T 
                                                             (v_Vwd:
                                                              (zen.term 
                                                                 _p_S_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vwd) 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                             v_Vsc v_Vsc 
                                                             (v_Vxd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S_T 
                                                                    v_Vsc 
                                                                    v_Vsc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_S_T 
                                                                    v_Vsc 
                                                                    v_Vsc)) 
                                                                v_Vcd v_Vxd) 
                                                             (v_Vvd1:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (_p_S_equal 
                                                                   v_Voc 
                                                                   v_Vsc) 
                                                                v_Vvd1) 
                                                             v_Vvd0) v_Vvd) 
                                                       (v_Vud0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S_equal 
                                                                   v_Voc 
                                                                   v_Vsc))) 
                                                          v_Vud0 v_Vxc) v_Vud) 
                                                    v_Vsd) v_Vrd) v_Vqd) 
                                           v_Vpd) _p_S_equal_transitive) 
                                     v_Vod) v_Vbd) 
                               (v_Vvd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_S_equal v_Voc v_Vsc) 
                                            (_p_S_equal v_Voc v_Vsc))))) =>
                                zen.Rsubst _p_S_T 
                                  (v_Vwd:(zen.term _p_S_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_S_equal v_Voc v_Vwd) 
                                           (_p_S_equal v_Voc v_Vsc)))) v_Vsc 
                                  v_Vsc 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_S_T v_Vsc v_Vsc)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal _p_S_T v_Vsc v_Vsc)) 
                                     v_Vcd v_Vxd) 
                                  (v_Vvd0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_S_equal v_Voc v_Vsc) 
                                               (_p_S_equal v_Voc v_Vsc))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (_p_S_equal v_Voc v_Vsc) v_Vvd0) v_Vvd) 
                               v_Ved) 
                            (v_Vud:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_S_equal v_Voc v_Vsc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_S_equal v_Voc v_Vsc))) 
                               v_Vud v_Vxc) v_Vwc) 
                         (v_Vxd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal _p_S_T v_Vsc v_Vsc)))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true (_p_S_equal v_Vsc v_Vsc))) 
                            (v_Vyd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_S_equal v_Vsc v_Vsc)))) =>
                             zen.Rall _p_S_T 
                               (v_Vkc:(zen.term _p_S_T) =>
                                zen.forall _p_S_T 
                                  (v_Vlc:(zen.term _p_S_T) =>
                                   zen.forall _p_S_T 
                                     (v_Vmc:(zen.term _p_S_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S_equal v_Vkc v_Vlc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vlc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vkc v_Vmc))))))) 
                               v_Vqc 
                               (v_Vzd:
                                (zen.proof 
                                   (zen.forall _p_S_T 
                                      (v_Vlc:(zen.term _p_S_T) =>
                                       zen.forall _p_S_T 
                                         (v_Vmc:(zen.term _p_S_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S_equal v_Vqc v_Vlc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vlc v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vqc v_Vmc)))))))) =>
                                zen.Rall _p_S_T 
                                  (v_Vlc:(zen.term _p_S_T) =>
                                   zen.forall _p_S_T 
                                     (v_Vmc:(zen.term _p_S_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S_equal v_Vqc v_Vlc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vlc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vqc v_Vmc)))))) 
                                  v_Vsc 
                                  (v_Vae:
                                   (zen.proof 
                                      (zen.forall _p_S_T 
                                         (v_Vmc:(zen.term _p_S_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S_equal v_Vqc v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vsc v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vqc v_Vmc))))))) =>
                                   zen.Rall _p_S_T 
                                     (v_Vmc:(zen.term _p_S_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S_equal v_Vqc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vsc v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vqc v_Vmc))))) 
                                     v_Vsc 
                                     (v_Vbe:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S_equal v_Vqc v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vsc v_Vsc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vqc v_Vsc)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S_equal v_Vqc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vsc v_Vsc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vqc v_Vsc)))) 
                                        (v_Vtd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vqc v_Vsc))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vqc v_Vsc))) 
                                           v_Vwc v_Vtd) 
                                        (v_Vce:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vsc v_Vsc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vqc v_Vsc))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vsc v_Vsc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S_equal v_Vqc v_Vsc))) 
                                           (v_Vde:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S_equal v_Vsc 
                                                           v_Vsc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S_equal v_Vsc v_Vsc))) 
                                              v_Vyd v_Vde) 
                                           (v_Vwc0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S_equal v_Vqc v_Vsc)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vdd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vdd)) 
                                              (_p_S_equal v_Vqc v_Vsc) 
                                              (_p_S_equal v_Voc v_Vsc) 
                                              (v_Ved:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_S_equal v_Vqc 
                                                              v_Vsc) 
                                                           (_p_S_equal v_Voc 
                                                              v_Vsc))))) =>
                                               zen.Rsubst _p_S_T 
                                                 (v_Vfd:(zen.term _p_S_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_S_equal v_Vfd 
                                                             v_Vsc) 
                                                          (_p_S_equal v_Voc 
                                                             v_Vsc)))) v_Vqc 
                                                 v_Voc 
                                                 (v_Vgd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_S_T 
                                                              v_Vqc v_Voc)))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_S_T 
                                                             v_Voc v_Vqc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S_equal 
                                                                v_Voc v_Vqc)))) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S_T 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_S_T 
                                                             v_Voc v_Vqc)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S_T 
                                                                 v_Voc v_Vqc))) =>
                                                        zen.Reqsym _p_S_T 
                                                          v_Voc v_Vqc v_Vid 
                                                          v_Vgd) v_Vhd) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S_equal 
                                                                v_Voc v_Vqc))) 
                                                       (v_Vuc0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc)))) =>
                                                        zen.Rall _p_S_T 
                                                          (v_Vkc:
                                                           (zen.term _p_S_T) =>
                                                           zen.forall _p_S_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 _p_S_T) =>
                                                              zen.forall 
                                                                _p_S_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_S_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                          v_Voc 
                                                          (v_Vpd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_S_T 
                                                                 (v_Vlc:
                                                                  (zen.term 
                                                                    _p_S_T) =>
                                                                  zen.forall 
                                                                    _p_S_T 
                                                                    (
                                                                    v_Vmc:
                                                                    (
                                                                    zen.term 
                                                                    _p_S_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))))) =>
                                                           zen.Rall _p_S_T 
                                                             (v_Vlc:
                                                              (zen.term 
                                                                 _p_S_T) =>
                                                              zen.forall 
                                                                _p_S_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_S_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))) 
                                                             v_Vqc 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_S_T 
                                                                    (
                                                                    v_Vmc:
                                                                    (
                                                                    zen.term 
                                                                    _p_S_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))))) =>
                                                              zen.Rall 
                                                                _p_S_T 
                                                                (v_Vmc:
                                                                 (zen.term 
                                                                    _p_S_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))) 
                                                                v_Vsc 
                                                                (v_Vrd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                   (v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vqc))) 
                                                                    v_Vuc0 
                                                                    v_Vad) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Vqc 
                                                                    v_Vsc))) 
                                                                    v_Vwc0 
                                                                    v_Vtd) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc) 
                                                                    v_Vsd) 
                                                                   v_Vrd) 
                                                                v_Vqd) v_Vpd) 
                                                          _p_S_equal_transitive) 
                                                       v_Vod) v_Vbd) 
                                                 (v_Vvd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vsc) 
                                                              (_p_S_equal 
                                                                 v_Voc v_Vsc))))) =>
                                                  zen.Rsubst _p_S_T 
                                                    (v_Vwd:
                                                     (zen.term _p_S_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S_equal 
                                                                v_Voc v_Vwd) 
                                                             (_p_S_equal 
                                                                v_Voc v_Vsc)))) 
                                                    v_Vsc v_Vsc 
                                                    (v_Vxd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S_T 
                                                                 v_Vsc v_Vsc)))) =>
                                                     zen.Rnoteq _p_S_T v_Vsc 
                                                       v_Vxd0) 
                                                    (v_Vvd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 (_p_S_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_S_equal v_Voc 
                                                          v_Vsc) v_Vvd0) 
                                                    v_Vvd) v_Ved) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S_equal v_Voc 
                                                           v_Vsc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S_equal v_Voc 
                                                          v_Vsc))) v_Vud 
                                                 v_Vxc) v_Vwc0) v_Vce) v_Vbe) 
                                     v_Vae) v_Vzd) _p_S_equal_transitive) 
                            (v_Vde:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_S_equal v_Vsc v_Vsc))))) =>
                             zen.Rnoteq _p_S_T v_Vsc v_Vxd)))) v_Vvc) v_Vtc) 
             v_Vrc) v_Vpc) v_Vnc).

def Represented_by_setoid__to_rep_is_injective :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (e_1:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (e_2:(cc.eT _p_S_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (_p_S_equal (Represented_by__to_rep _p_S_T e_1) 
                   (Represented_by__to_rep _p_S_T e_2))) 
             (dk_logic.ebP 
                (Represented_by_setoid__equal _p_S_T _p_S_equal e_1 e_2)))))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Represented_by__to_rep _p_S_T v_Vzb) 
                      (Represented_by__to_rep _p_S_T v_Vac)))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vzb 
                      v_Vac)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal (Represented_by__to_rep _p_S_T v_Vzb) 
                             (Represented_by__to_rep _p_S_T v_Vac)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vzb v_Vac)))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Represented_by__to_rep _p_S_T v_Vzb) 
                      (Represented_by__to_rep _p_S_T v_Vac)))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vzb 
                      v_Vac))))) 
       (v_Vcc:(zen.term _p_S_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal (Represented_by__to_rep _p_S_T v_Vcc) 
                             (Represented_by__to_rep _p_S_T v_Vac)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vcc v_Vac))))))) =>
        zen.Rnotall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Represented_by__to_rep _p_S_T v_Vcc) 
                      (Represented_by__to_rep _p_S_T v_Vac)))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vcc 
                      v_Vac)))) 
          (v_Vec:(zen.term _p_S_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal (Represented_by__to_rep _p_S_T v_Vcc) 
                             (Represented_by__to_rep _p_S_T v_Vec)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Represented_by_setoid__equal _p_S_T _p_S_equal 
                             v_Vcc v_Vec)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Represented_by__to_rep _p_S_T v_Vcc) 
                      (Represented_by__to_rep _p_S_T v_Vec)))) 
             (zen.triangle 
                (focal.is_true 
                   (Represented_by_setoid__equal _p_S_T _p_S_equal v_Vcc 
                      v_Vec))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                v_Vgc v_Vhc) v_Vfc) v_Vdc) v_Vbc).

def Represented_by_setoid__to_rep_reverses :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT _p_S_T) ->
  abst_correct_representation:((cc.eT _p_S_T) -> dk_logic.Prop) ->
  abst_correct_invariant:(dk_logic.eP 
                            (dk_logic.forall _p_S_T 
                               (x:(cc.eT _p_S_T) =>
                                abst_correct_representation x))) ->
  abst_correct_rep_spec:(dk_logic.eP 
                           (dk_logic.forall _p_S_T 
                              (x:(cc.eT _p_S_T) =>
                               dk_logic.eqv (abst_correct_representation x) 
                                 (Represented_by_setoid__represents_some_self 
                                    _p_S_T _p_S_equal abst_from_rep 
                                    (Represented_by__to_rep _p_S_T x))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.ebP 
          (Represented_by_setoid__equal _p_S_T _p_S_equal 
             (abst_from_rep (Represented_by__to_rep _p_S_T x)) x)))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  abst_from_rep:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  abst_correct_representation:((cc.eT _p_S_T) -> dk_logic.Prop) =>
  abst_correct_invariant:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) => abst_correct_representation x))) =>
  abst_correct_rep_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.eqv (abst_correct_representation x) 
           (Represented_by_setoid__represents_some_self _p_S_T _p_S_equal 
              abst_from_rep (Represented_by__to_rep _p_S_T x))))) =>
  (__K_1_LEMMA:
   (x:(cc.eT _p_S_T) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (_p_S_equal (abst_from_rep (Represented_by__to_rep _p_S_T x)) x))) =>
   zen.nnpp 
     (zen.forall _p_S_T 
        (v_Vzb:(zen.term _p_S_T) =>
         zen.triangle 
           (focal.is_true 
              (Represented_by_setoid__equal _p_S_T _p_S_equal 
                 (abst_from_rep (Represented_by__to_rep _p_S_T v_Vzb)) v_Vzb)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall _p_S_T 
               (v_Vzb:(zen.term _p_S_T) =>
                zen.triangle 
                  (focal.is_true 
                     (Represented_by_setoid__equal _p_S_T _p_S_equal 
                        (abst_from_rep (Represented_by__to_rep _p_S_T v_Vzb)) 
                        v_Vzb)))))) =>
      zen.Rnotall _p_S_T 
        (v_Vzb:(zen.term _p_S_T) =>
         zen.triangle 
           (focal.is_true 
              (Represented_by_setoid__equal _p_S_T _p_S_equal 
                 (abst_from_rep (Represented_by__to_rep _p_S_T v_Vzb)) v_Vzb))) 
        (v_Vbc:(zen.term _p_S_T) =>
         v_Vcc:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S_equal 
                        (abst_from_rep (Represented_by__to_rep _p_S_T v_Vbc)) 
                        v_Vbc))))) =>
         zen.Rall _p_S_T 
           (v_Vzb:(zen.term _p_S_T) =>
            zen.triangle 
              (focal.is_true 
                 (_p_S_equal 
                    (abst_from_rep (Represented_by__to_rep _p_S_T v_Vzb)) 
                    v_Vzb))) v_Vbc 
           (v_Vdc:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S_equal 
                        (abst_from_rep (Represented_by__to_rep _p_S_T v_Vbc)) 
                        v_Vbc)))) =>
            zen.Raxiom 
              (zen.triangle 
                 (focal.is_true 
                    (_p_S_equal 
                       (abst_from_rep (Represented_by__to_rep _p_S_T v_Vbc)) 
                       v_Vbc))) v_Vdc v_Vcc) __K_1_LEMMA) v_Vac)) 
    (x:(cc.eT _p_S_T) =>
     (__K_1_1_LEMMA:
      (dk_logic.eP (dk_logic.ebP (_p_S_equal (abst_from_rep x) x))) =>
      zen.nnpp 
        (zen.triangle 
           (focal.is_true 
              (_p_S_equal (abst_from_rep (Represented_by__to_rep _p_S_T x)) x))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.triangle (focal.is_true (_p_S_equal (abst_from_rep x) x))))) =>
         zen.Raxiom 
           (zen.triangle (focal.is_true (_p_S_equal (abst_from_rep x) x))) 
           __K_1_1_LEMMA v_Vzb)) 
       ((__K_1_1_1_LEMMA:(dk_logic.eP (abst_correct_representation x)) =>
         (__K_1_1_2_LEMMA:
          (dk_logic.eP 
             (Represented_by_setoid__represents_some_self _p_S_T _p_S_equal 
                abst_from_rep (Represented_by__to_rep _p_S_T x))) =>
          zen.nnpp 
            (zen.triangle (focal.is_true (_p_S_equal (abst_from_rep x) x))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (_p_S_equal (abst_from_rep x) x))))) =>
             zen.Raxiom 
               (zen.triangle (focal.is_true (_p_S_equal (abst_from_rep x) x))) 
               __K_1_1_2_LEMMA v_Vzb)) 
           (zen.nnpp 
              (zen.triangle 
                 (Represented_by_setoid__represents_some_self _p_S_T 
                    _p_S_equal abst_from_rep 
                    (Represented_by__to_rep _p_S_T x))) 
              (v_Vac:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (Represented_by_setoid__represents_some_self _p_S_T 
                           _p_S_equal abst_from_rep 
                           (Represented_by__to_rep _p_S_T x))))) =>
               zen.Rall _p_S_T 
                 (v_Vbc:(zen.term _p_S_T) =>
                  zen.eqv (zen.triangle (abst_correct_representation v_Vbc)) 
                    (zen.triangle 
                       (Represented_by_setoid__represents_some_self _p_S_T 
                          _p_S_equal abst_from_rep 
                          (Represented_by__to_rep _p_S_T v_Vbc)))) x 
                 (v_Vcc:
                  (zen.proof 
                     (zen.eqv (zen.triangle (abst_correct_representation x)) 
                        (zen.triangle 
                           (Represented_by_setoid__represents_some_self 
                              _p_S_T _p_S_equal abst_from_rep 
                              (Represented_by__to_rep _p_S_T x))))) =>
                  zen.Requiv (zen.triangle (abst_correct_representation x)) 
                    (zen.triangle 
                       (Represented_by_setoid__represents_some_self _p_S_T 
                          _p_S_equal abst_from_rep 
                          (Represented_by__to_rep _p_S_T x))) 
                    (v_Vdc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (abst_correct_representation x)))) =>
                     v_Vac0:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (Represented_by_setoid__represents_some_self 
                                 _p_S_T _p_S_equal abst_from_rep 
                                 (Represented_by__to_rep _p_S_T x))))) =>
                     zen.Raxiom 
                       (zen.triangle (abst_correct_representation x)) 
                       __K_1_1_1_LEMMA v_Vdc) 
                    (__K_1_1_1_LEMMA0:
                     (zen.proof 
                        (zen.triangle (abst_correct_representation x))) =>
                     v_Vec:
                     (zen.proof 
                        (zen.triangle 
                           (Represented_by_setoid__represents_some_self 
                              _p_S_T _p_S_equal abst_from_rep 
                              (Represented_by__to_rep _p_S_T x)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (Represented_by_setoid__represents_some_self 
                             _p_S_T _p_S_equal abst_from_rep 
                             (Represented_by__to_rep _p_S_T x))) v_Vec v_Vac) 
                    v_Vcc) abst_correct_rep_spec))) 
          (zen.nnpp (zen.triangle (abst_correct_representation x)) 
             (v_Vzb:
              (zen.proof 
                 (zen.not (zen.triangle (abst_correct_representation x)))) =>
              zen.Rall _p_S_T 
                (v_Vac:(zen.term _p_S_T) =>
                 zen.triangle (abst_correct_representation v_Vac)) x 
                (v_Vbc:
                 (zen.proof (zen.triangle (abst_correct_representation x))) =>
                 zen.Raxiom (zen.triangle (abst_correct_representation x)) 
                   v_Vbc v_Vzb) abst_correct_invariant)))).

def Projections__morph :
  _p_S_T:cc.uT ->
  abst_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) ->
  x:(cc.eT _p_S_T) -> cc.eT _p_S_T
  :=
  _p_S_T:cc.uT =>
  abst_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  x:(cc.eT _p_S_T) => abst_reduce x.

def Projections__morph_substitution_rule :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  abst_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) ->
  abst_reduce_substitution_rule:(dk_logic.eP 
                                   (dk_logic.forall _p_S_T 
                                      (x:(cc.eT _p_S_T) =>
                                       dk_logic.forall _p_S_T 
                                         (y:(cc.eT _p_S_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP (_p_S_equal x y)) 
                                            (dk_logic.ebP 
                                               (_p_S_equal (abst_reduce x) 
                                                  (abst_reduce y))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (dk_logic.ebP 
                (_p_S_equal (Projections__morph _p_S_T abst_reduce x) 
                   (Projections__morph _p_S_T abst_reduce y))))))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  abst_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  abst_reduce_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
              (dk_logic.ebP (_p_S_equal (abst_reduce x) (abst_reduce y))))))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Projections__morph _p_S_T abst_reduce v_Vzb) 
                      (Projections__morph _p_S_T abst_reduce v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal 
                             (Projections__morph _p_S_T abst_reduce v_Vzb) 
                             (Projections__morph _p_S_T abst_reduce v_Vac))))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Projections__morph _p_S_T abst_reduce v_Vzb) 
                      (Projections__morph _p_S_T abst_reduce v_Vac)))))) 
       (v_Vcc:(zen.term _p_S_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal 
                             (Projections__morph _p_S_T abst_reduce v_Vcc) 
                             (Projections__morph _p_S_T abst_reduce v_Vac)))))))) =>
        zen.Rnotall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Projections__morph _p_S_T abst_reduce v_Vcc) 
                      (Projections__morph _p_S_T abst_reduce v_Vac))))) 
          (v_Vec:(zen.term _p_S_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal 
                             (Projections__morph _p_S_T abst_reduce v_Vcc) 
                             (Projections__morph _p_S_T abst_reduce v_Vec))))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal (Projections__morph _p_S_T abst_reduce v_Vcc) 
                      (Projections__morph _p_S_T abst_reduce v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal (abst_reduce v_Vcc) (abst_reduce v_Vec)))))) =>
              zen.Rall _p_S_T 
                (v_Vzb:(zen.term _p_S_T) =>
                 zen.forall _p_S_T 
                   (v_Vac:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S_equal (abst_reduce v_Vzb) 
                               (abst_reduce v_Vac)))))) v_Vcc 
                (v_Vic:
                 (zen.proof 
                    (zen.forall _p_S_T 
                       (v_Vac:(zen.term _p_S_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal (abst_reduce v_Vcc) 
                                   (abst_reduce v_Vac))))))) =>
                 zen.Rall _p_S_T 
                   (v_Vac:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S_equal (abst_reduce v_Vcc) 
                               (abst_reduce v_Vac))))) v_Vec 
                   (v_Vjc:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal (abst_reduce v_Vcc) 
                                   (abst_reduce v_Vec)))))) =>
                    zen.Rimply 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S_equal (abst_reduce v_Vcc) 
                               (abst_reduce v_Vec)))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_S_equal v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_S_equal v_Vcc v_Vec))) v_Vgc 
                         v_Vkc) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal (abst_reduce v_Vcc) 
                                   (abst_reduce v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S_equal (abst_reduce v_Vcc) 
                                  (abst_reduce v_Vec)))) v_Vlc v_Vhc) v_Vjc) 
                   v_Vic) abst_reduce_substitution_rule) v_Vfc) v_Vdc) v_Vbc).

def Quotient_set__element :
  _p_S_T:cc.uT ->
  _p_S_element:(cc.eT _p_S_T) ->
  _p_Proj_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) -> cc.eT _p_S_T
  :=
  _p_S_T:cc.uT =>
  _p_S_element:(cc.eT _p_S_T) =>
  _p_Proj_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  _p_Proj_reduce _p_S_element.

def Quotient_set__from_rep :
  _p_S_T:cc.uT ->
  _p_Proj_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) ->
  x:(cc.eT _p_S_T) -> cc.eT _p_S_T
  :=
  _p_S_T:cc.uT =>
  _p_Proj_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  x:(cc.eT _p_S_T) => _p_Proj_reduce x.

def Quotient_set__sample_is_reduced :
  _p_S_T:cc.uT ->
  _p_S_element:(cc.eT _p_S_T) ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.forall _p_S_T 
                                (y:(cc.eT _p_S_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_S_equal x y)) 
                                   (dk_logic.ebP (_p_S_equal y x)))))) ->
  _p_Proj_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) ->
  _p_Proj_reduce_is_projection:(dk_logic.eP 
                                  (dk_logic.forall _p_S_T 
                                     (x:(cc.eT _p_S_T) =>
                                      dk_logic.ebP 
                                        (_p_S_equal (_p_Proj_reduce x) 
                                           (_p_Proj_reduce (_p_Proj_reduce x)))))) ->
  dk_logic.eP 
    (Represented_by__correct_representation _p_S_T _p_S_T 
       (Represented_by_setoid__represents_some_self _p_S_T _p_S_equal 
          (Quotient_set__from_rep _p_S_T _p_Proj_reduce)) 
       (Represented_by__to_rep _p_S_T) 
       (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce))
  :=
  _p_S_T:cc.uT =>
  _p_S_element:(cc.eT _p_S_T) =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
              (dk_logic.ebP (_p_S_equal y x)))))) =>
  _p_Proj_reduce:((cc.eT _p_S_T) -> cc.eT _p_S_T) =>
  _p_Proj_reduce_is_projection:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.ebP 
           (_p_S_equal (_p_Proj_reduce x) (_p_Proj_reduce (_p_Proj_reduce x)))))) =>
  (__M_1_LEMMA:
   (dk_logic.eP 
      (Represented_by_setoid__represents_some_self _p_S_T _p_S_equal 
         (Quotient_set__from_rep _p_S_T _p_Proj_reduce) 
         (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce))) =>
   zen.nnpp 
     (zen.triangle 
        (Represented_by__correct_representation _p_S_T _p_S_T 
           (Represented_by_setoid__represents_some_self _p_S_T _p_S_equal 
              (Quotient_set__from_rep _p_S_T _p_Proj_reduce)) 
           (Represented_by__to_rep _p_S_T) 
           (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce))) 
     (v_Vzb:
      (zen.proof 
         (zen.not 
            (zen.triangle 
               (Represented_by_setoid__represents_some_self _p_S_T 
                  _p_S_equal (Quotient_set__from_rep _p_S_T _p_Proj_reduce) 
                  (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce))))) =>
      zen.Raxiom 
        (zen.triangle 
           (Represented_by_setoid__represents_some_self _p_S_T _p_S_equal 
              (Quotient_set__from_rep _p_S_T _p_Proj_reduce) 
              (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce))) 
        __M_1_LEMMA v_Vzb)) 
    ((__M_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (_p_S_equal 
               (_p_Proj_reduce 
                  (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce)) 
               (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce)))) =>
      zen.nnpp 
        (zen.triangle 
           (Represented_by_setoid__represents_some_self _p_S_T _p_S_equal 
              (Quotient_set__from_rep _p_S_T _p_Proj_reduce) 
              (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S_equal 
                        (_p_Proj_reduce 
                           (Quotient_set__element _p_S_T _p_S_element 
                              _p_Proj_reduce)) 
                        (Quotient_set__element _p_S_T _p_S_element 
                           _p_Proj_reduce)))))) =>
         zen.Raxiom 
           (zen.triangle 
              (focal.is_true 
                 (_p_S_equal 
                    (_p_Proj_reduce 
                       (Quotient_set__element _p_S_T _p_S_element 
                          _p_Proj_reduce)) 
                    (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce)))) 
           __M_1_1_LEMMA v_Vzb)) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (_p_S_equal 
                   (_p_Proj_reduce 
                      (Quotient_set__element _p_S_T _p_S_element 
                         _p_Proj_reduce)) 
                   (Quotient_set__element _p_S_T _p_S_element _p_Proj_reduce)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_S_equal 
                          (_p_Proj_reduce (_p_Proj_reduce _p_S_element)) 
                          (_p_Proj_reduce _p_S_element)))))) =>
           zen.Rall _p_S_T 
             (v_Vac:(zen.term _p_S_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_S_equal (_p_Proj_reduce v_Vac) 
                      (_p_Proj_reduce (_p_Proj_reduce v_Vac))))) 
             _p_S_element 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_S_equal (_p_Proj_reduce _p_S_element) 
                          (_p_Proj_reduce (_p_Proj_reduce _p_S_element)))))) =>
              zen.Rall _p_S_T 
                (v_Vac:(zen.term _p_S_T) =>
                 zen.forall _p_S_T 
                   (v_Vcc:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vac v_Vcc))) 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))))) 
                (_p_Proj_reduce _p_S_element) 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall _p_S_T 
                       (v_Vcc:(zen.term _p_S_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal (_p_Proj_reduce _p_S_element) 
                                   v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal v_Vcc 
                                   (_p_Proj_reduce _p_S_element))))))) =>
                 zen.Rall _p_S_T 
                   (v_Vcc:(zen.term _p_S_T) =>
                    zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S_equal (_p_Proj_reduce _p_S_element) v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S_equal v_Vcc (_p_Proj_reduce _p_S_element))))) 
                   (_p_Proj_reduce (_p_Proj_reduce _p_S_element)) 
                   (v_Vec:
                    (zen.proof 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal (_p_Proj_reduce _p_S_element) 
                                   (_p_Proj_reduce 
                                      (_p_Proj_reduce _p_S_element))))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal 
                                   (_p_Proj_reduce 
                                      (_p_Proj_reduce _p_S_element)) 
                                   (_p_Proj_reduce _p_S_element)))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S_equal (_p_Proj_reduce _p_S_element) 
                               (_p_Proj_reduce (_p_Proj_reduce _p_S_element))))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S_equal 
                               (_p_Proj_reduce (_p_Proj_reduce _p_S_element)) 
                               (_p_Proj_reduce _p_S_element)))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S_equal (_p_Proj_reduce _p_S_element) 
                                      (_p_Proj_reduce 
                                         (_p_Proj_reduce _p_S_element))))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S_equal (_p_Proj_reduce _p_S_element) 
                                  (_p_Proj_reduce 
                                     (_p_Proj_reduce _p_S_element))))) v_Vbc 
                         v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S_equal 
                                   (_p_Proj_reduce 
                                      (_p_Proj_reduce _p_S_element)) 
                                   (_p_Proj_reduce _p_S_element))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S_equal 
                                  (_p_Proj_reduce 
                                     (_p_Proj_reduce _p_S_element)) 
                                  (_p_Proj_reduce _p_S_element)))) v_Vgc 
                         v_Vzb) v_Vec) v_Vdc) _p_S_equal_symmetric) 
             _p_Proj_reduce_is_projection))).

Singleton__me_as_species : Type.

Singleton__mk_record :
  Singleton__rf_T:cc.uT ->
  Singleton__rf_element:(cc.eT Singleton__rf_T) ->
  Singleton__rf_equal:((cc.eT Singleton__rf_T) ->
                       (cc.eT Singleton__rf_T) -> cc.eT basics.bool__t) ->
  Singleton__rf_parse:((cc.eT basics.string__t) -> cc.eT Singleton__rf_T) ->
  Singleton__rf_print:((cc.eT Singleton__rf_T) -> cc.eT basics.string__t) ->
  Singleton__rf_different:((cc.eT Singleton__rf_T) ->
                           (cc.eT Singleton__rf_T) -> cc.eT basics.bool__t) ->
  Singleton__rf_equal_reflexive:(dk_logic.eP 
                                   (dk_logic.forall Singleton__rf_T 
                                      (x:(cc.eT Singleton__rf_T) =>
                                       dk_logic.ebP (Singleton__rf_equal x x)))) ->
  Singleton__rf_equal_symmetric:(dk_logic.eP 
                                   (dk_logic.forall Singleton__rf_T 
                                      (x:(cc.eT Singleton__rf_T) =>
                                       dk_logic.forall Singleton__rf_T 
                                         (y:(cc.eT Singleton__rf_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP 
                                               (Singleton__rf_equal x y)) 
                                            (dk_logic.ebP 
                                               (Singleton__rf_equal y x)))))) ->
  Singleton__rf_equal_transitive:(dk_logic.eP 
                                    (dk_logic.forall Singleton__rf_T 
                                       (x:(cc.eT Singleton__rf_T) =>
                                        dk_logic.forall Singleton__rf_T 
                                          (y:(cc.eT Singleton__rf_T) =>
                                           dk_logic.forall Singleton__rf_T 
                                             (z:(cc.eT Singleton__rf_T) =>
                                              dk_logic.imp 
                                                (dk_logic.ebP 
                                                   (Singleton__rf_equal x y)) 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (Singleton__rf_equal y 
                                                         z)) 
                                                   (dk_logic.ebP 
                                                      (Singleton__rf_equal x 
                                                         z)))))))) ->
  Singleton__rf_same_is_not_different:(dk_logic.eP 
                                         (dk_logic.forall Singleton__rf_T 
                                            (x:(cc.eT Singleton__rf_T) =>
                                             dk_logic.forall Singleton__rf_T 
                                               (y:(cc.eT Singleton__rf_T) =>
                                                dk_logic.eqv 
                                                  (dk_logic.ebP 
                                                     (Singleton__rf_different 
                                                        x y)) 
                                                  (dk_logic.not 
                                                     (dk_logic.ebP 
                                                        (Singleton__rf_equal 
                                                           x y))))))) ->
  Singleton__rf_different_is_complete:(dk_logic.eP 
                                         (dk_logic.forall Singleton__rf_T 
                                            (x:(cc.eT Singleton__rf_T) =>
                                             dk_logic.forall Singleton__rf_T 
                                               (y:(cc.eT Singleton__rf_T) =>
                                                dk_logic.forall 
                                                  Singleton__rf_T 
                                                  (z:
                                                   (cc.eT Singleton__rf_T) =>
                                                   dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (Singleton__rf_different 
                                                           x y)) 
                                                     (dk_logic.or 
                                                        (dk_logic.ebP 
                                                           (Singleton__rf_different 
                                                              x z)) 
                                                        (dk_logic.ebP 
                                                           (Singleton__rf_different 
                                                              y z)))))))) ->
  Singleton__rf_different_is_irreflexive:(dk_logic.eP 
                                            (dk_logic.forall Singleton__rf_T 
                                               (x:(cc.eT Singleton__rf_T) =>
                                                dk_logic.not 
                                                  (dk_logic.ebP 
                                                     (Singleton__rf_different 
                                                        x x))))) ->
  Singleton__rf_different_is_symmetric:(dk_logic.eP 
                                          (dk_logic.forall Singleton__rf_T 
                                             (x:(cc.eT Singleton__rf_T) =>
                                              dk_logic.forall 
                                                Singleton__rf_T 
                                                (y:(cc.eT Singleton__rf_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (Singleton__rf_different 
                                                         x y)) 
                                                   (dk_logic.ebP 
                                                      (Singleton__rf_different 
                                                         y x)))))) ->
  Singleton__me_as_species.

def proj_Singleton__rf_T : record:Singleton__me_as_species -> cc.uT.

[Singleton__rf_T]
  proj_Singleton__rf_T (Singleton__mk_record Singleton__rf_T _ _ _ _ _ _ _ _ 
    _ _ _ _)
  -->
  Singleton__rf_T.

def proj_Singleton__rf_element :
  record:Singleton__me_as_species -> cc.eT (proj_Singleton__rf_T record).

[Singleton__rf_element]
  proj_Singleton__rf_element (Singleton__mk_record _ Singleton__rf_element _ 
    _ _ _ _ _ _ _ _ _ _)
  -->
  Singleton__rf_element.

def proj_Singleton__rf_equal :
  record:Singleton__me_as_species ->
  (cc.eT (proj_Singleton__rf_T record)) ->
  (cc.eT (proj_Singleton__rf_T record)) -> cc.eT basics.bool__t.

[Singleton__rf_equal]
  proj_Singleton__rf_equal (Singleton__mk_record _ _ Singleton__rf_equal _ _ 
    _ _ _ _ _ _ _ _)
  -->
  Singleton__rf_equal.

def proj_Singleton__rf_parse :
  record:Singleton__me_as_species ->
  (cc.eT basics.string__t) -> cc.eT (proj_Singleton__rf_T record).

[Singleton__rf_parse]
  proj_Singleton__rf_parse (Singleton__mk_record _ _ _ Singleton__rf_parse _ 
    _ _ _ _ _ _ _ _)
  -->
  Singleton__rf_parse.

def proj_Singleton__rf_print :
  record:Singleton__me_as_species ->
  (cc.eT (proj_Singleton__rf_T record)) -> cc.eT basics.string__t.

[Singleton__rf_print]
  proj_Singleton__rf_print (Singleton__mk_record _ _ _ _ Singleton__rf_print 
    _ _ _ _ _ _ _ _)
  -->
  Singleton__rf_print.

def proj_Singleton__rf_different :
  record:Singleton__me_as_species ->
  (cc.eT (proj_Singleton__rf_T record)) ->
  (cc.eT (proj_Singleton__rf_T record)) -> cc.eT basics.bool__t.

[Singleton__rf_different]
  proj_Singleton__rf_different (Singleton__mk_record _ _ _ _ _ 
    Singleton__rf_different _ _ _ _ _ _ _)
  -->
  Singleton__rf_different.

def proj_Singleton__rf_equal_reflexive :
  record:Singleton__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Singleton__rf_T record) 
       (x:(cc.eT (proj_Singleton__rf_T record)) =>
        dk_logic.ebP (proj_Singleton__rf_equal record x x))).

[Singleton__rf_equal_reflexive]
  proj_Singleton__rf_equal_reflexive (Singleton__mk_record _ _ _ _ _ _ 
    Singleton__rf_equal_reflexive _ _ _ _ _ _)
  -->
  Singleton__rf_equal_reflexive.

def proj_Singleton__rf_equal_symmetric :
  record:Singleton__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Singleton__rf_T record) 
       (x:(cc.eT (proj_Singleton__rf_T record)) =>
        dk_logic.forall (proj_Singleton__rf_T record) 
          (y:(cc.eT (proj_Singleton__rf_T record)) =>
           dk_logic.imp (dk_logic.ebP (proj_Singleton__rf_equal record x y)) 
             (dk_logic.ebP (proj_Singleton__rf_equal record y x))))).

[Singleton__rf_equal_symmetric]
  proj_Singleton__rf_equal_symmetric (Singleton__mk_record _ _ _ _ _ _ _ 
    Singleton__rf_equal_symmetric _ _ _ _ _)
  -->
  Singleton__rf_equal_symmetric.

def proj_Singleton__rf_equal_transitive :
  record:Singleton__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Singleton__rf_T record) 
       (x:(cc.eT (proj_Singleton__rf_T record)) =>
        dk_logic.forall (proj_Singleton__rf_T record) 
          (y:(cc.eT (proj_Singleton__rf_T record)) =>
           dk_logic.forall (proj_Singleton__rf_T record) 
             (z:(cc.eT (proj_Singleton__rf_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP (proj_Singleton__rf_equal record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP (proj_Singleton__rf_equal record y z)) 
                   (dk_logic.ebP (proj_Singleton__rf_equal record x z))))))).

[Singleton__rf_equal_transitive]
  proj_Singleton__rf_equal_transitive (Singleton__mk_record _ _ _ _ _ _ _ _ 
    Singleton__rf_equal_transitive _ _ _ _)
  -->
  Singleton__rf_equal_transitive.

def proj_Singleton__rf_same_is_not_different :
  record:Singleton__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Singleton__rf_T record) 
       (x:(cc.eT (proj_Singleton__rf_T record)) =>
        dk_logic.forall (proj_Singleton__rf_T record) 
          (y:(cc.eT (proj_Singleton__rf_T record)) =>
           dk_logic.eqv 
             (dk_logic.ebP (proj_Singleton__rf_different record x y)) 
             (dk_logic.not 
                (dk_logic.ebP (proj_Singleton__rf_equal record x y)))))).

[Singleton__rf_same_is_not_different]
  proj_Singleton__rf_same_is_not_different (Singleton__mk_record _ _ _ _ _ _ 
    _ _ _ Singleton__rf_same_is_not_different _ _ _)
  -->
  Singleton__rf_same_is_not_different.

def proj_Singleton__rf_different_is_complete :
  record:Singleton__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Singleton__rf_T record) 
       (x:(cc.eT (proj_Singleton__rf_T record)) =>
        dk_logic.forall (proj_Singleton__rf_T record) 
          (y:(cc.eT (proj_Singleton__rf_T record)) =>
           dk_logic.forall (proj_Singleton__rf_T record) 
             (z:(cc.eT (proj_Singleton__rf_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP (proj_Singleton__rf_different record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP (proj_Singleton__rf_different record x z)) 
                   (dk_logic.ebP (proj_Singleton__rf_different record y z))))))).

[Singleton__rf_different_is_complete]
  proj_Singleton__rf_different_is_complete (Singleton__mk_record _ _ _ _ _ _ 
    _ _ _ _ Singleton__rf_different_is_complete _ _)
  -->
  Singleton__rf_different_is_complete.

def proj_Singleton__rf_different_is_irreflexive :
  record:Singleton__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Singleton__rf_T record) 
       (x:(cc.eT (proj_Singleton__rf_T record)) =>
        dk_logic.not (dk_logic.ebP (proj_Singleton__rf_different record x x)))).

[Singleton__rf_different_is_irreflexive]
  proj_Singleton__rf_different_is_irreflexive (Singleton__mk_record _ _ _ _ 
    _ _ _ _ _ _ _ Singleton__rf_different_is_irreflexive _)
  -->
  Singleton__rf_different_is_irreflexive.

def proj_Singleton__rf_different_is_symmetric :
  record:Singleton__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Singleton__rf_T record) 
       (x:(cc.eT (proj_Singleton__rf_T record)) =>
        dk_logic.forall (proj_Singleton__rf_T record) 
          (y:(cc.eT (proj_Singleton__rf_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP (proj_Singleton__rf_different record x y)) 
             (dk_logic.ebP (proj_Singleton__rf_different record y x))))).

[Singleton__rf_different_is_symmetric]
  proj_Singleton__rf_different_is_symmetric (Singleton__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ Singleton__rf_different_is_symmetric)
  -->
  Singleton__rf_different_is_symmetric.

def Singleton__element : cc.eT basics.unit__t := dk_builtins.tt.

def Singleton__equal :
  abst_T:cc.uT ->
  _x:(cc.eT abst_T) -> _y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT => _x:(cc.eT abst_T) => _y:(cc.eT abst_T) => dk_bool.true.

def Singleton__equal_reflexive :
  abst_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.ebP (Singleton__equal abst_T x x)))
  :=
  abst_T:cc.uT =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle (focal.is_true (Singleton__equal abst_T v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true (Singleton__equal abst_T v_Vzb v_Vzb)))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle (focal.is_true (Singleton__equal abst_T v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:(zen.proof (zen.not zen.True)) => zen.Rnottrue v_Vcc) v_Vac).

def Singleton__equal_symmetric :
  abst_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (Singleton__equal abst_T x y)) 
             (dk_logic.ebP (Singleton__equal abst_T y x)))))
  :=
  abst_T:cc.uT =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true (Singleton__equal abst_T v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true (Singleton__equal abst_T v_Vac v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true (Singleton__equal abst_T v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true (Singleton__equal abst_T v_Vac v_Vcc))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vac v_Vcc)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true (Singleton__equal abst_T v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true (Singleton__equal abst_T v_Vec v_Vcc)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true (Singleton__equal abst_T v_Vec v_Vcc))) 
             (v_Vgc:(zen.proof zen.True) =>
              v_Vhc:(zen.proof (zen.not zen.True)) => zen.Rnottrue v_Vhc) 
             v_Vfc) v_Vdc) v_Vbc).

def Singleton__equal_transitive :
  abst_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (Singleton__equal abst_T x y)) 
                (dk_logic.imp (dk_logic.ebP (Singleton__equal abst_T y z)) 
                   (dk_logic.ebP (Singleton__equal abst_T x z)))))))
  :=
  abst_T:cc.uT =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true (Singleton__equal abst_T v_Vzb v_Vac))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vac v_Vbc))) 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vzb v_Vbc)))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Singleton__equal abst_T v_Vzb v_Vac))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vzb v_Vbc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true (Singleton__equal abst_T v_Vzb v_Vac))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vac v_Vbc))) 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vzb v_Vbc))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Singleton__equal abst_T v_Vdc v_Vac))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vdc v_Vbc))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true (Singleton__equal abst_T v_Vdc v_Vac))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vac v_Vbc))) 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vdc v_Vbc)))))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Singleton__equal abst_T v_Vdc v_Vfc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vfc v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vdc v_Vbc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true (Singleton__equal abst_T v_Vdc v_Vfc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vfc v_Vbc))) 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vdc v_Vbc))))) 
             (v_Vhc:(zen.term abst_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Singleton__equal abst_T v_Vdc v_Vfc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vfc v_Vhc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vdc v_Vhc))))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true (Singleton__equal abst_T v_Vdc v_Vfc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vfc v_Vhc))) 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vdc v_Vhc)))) 
                (v_Vjc:(zen.proof zen.True) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vfc v_Vhc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Singleton__equal abst_T v_Vdc v_Vhc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vfc v_Vhc))) 
                   (zen.triangle 
                      (focal.is_true (Singleton__equal abst_T v_Vdc v_Vhc))) 
                   (v_Vjc0:(zen.proof zen.True) =>
                    v_Vlc:(zen.proof (zen.not zen.True)) =>
                    zen.Rnottrue v_Vlc) v_Vkc) v_Vic) v_Vgc) v_Vec) v_Vcc).

def Singleton__collection_create
  :=
  Singleton__mk_record basics.unit__t Singleton__element 
    (Singleton__equal basics.unit__t) 
    (basics.Basic_object__parse basics.unit__t) 
    (basics.Basic_object__print basics.unit__t) 
    (sets.Setoid__different basics.unit__t (Singleton__equal basics.unit__t)) 
    (Singleton__equal_reflexive basics.unit__t) 
    (Singleton__equal_symmetric basics.unit__t) 
    (Singleton__equal_transitive basics.unit__t) 
    (sets.Setoid__same_is_not_different basics.unit__t 
       (Singleton__equal basics.unit__t)) 
    (sets.Setoid__different_is_complete basics.unit__t 
       (Singleton__equal basics.unit__t) 
       (sets.Setoid__different basics.unit__t 
          (Singleton__equal basics.unit__t)) 
       (Singleton__equal_reflexive basics.unit__t) 
       (Singleton__equal_symmetric basics.unit__t) 
       (Singleton__equal_transitive basics.unit__t) 
       (sets.Setoid__same_is_not_different basics.unit__t 
          (Singleton__equal basics.unit__t))) 
    (sets.Setoid__different_is_irreflexive basics.unit__t 
       (Singleton__equal basics.unit__t) 
       (sets.Setoid__different basics.unit__t 
          (Singleton__equal basics.unit__t)) 
       (Singleton__equal_reflexive basics.unit__t) 
       (sets.Setoid__same_is_not_different basics.unit__t 
          (Singleton__equal basics.unit__t))) 
    (sets.Setoid__different_is_symmetric basics.unit__t 
       (Singleton__equal basics.unit__t) 
       (sets.Setoid__different basics.unit__t 
          (Singleton__equal basics.unit__t)) 
       (Singleton__equal_symmetric basics.unit__t) 
       (sets.Setoid__same_is_not_different basics.unit__t 
          (Singleton__equal basics.unit__t))).

def Un_singleton__effective_collection := Singleton__collection_create.

def Un_singleton__me_as_carrier := basics.unit__t.

def Un_singleton__element
  :=
  proj_Singleton__rf_element Un_singleton__effective_collection.

def Un_singleton__equal
  :=
  proj_Singleton__rf_equal Un_singleton__effective_collection.

def Un_singleton__parse
  :=
  proj_Singleton__rf_parse Un_singleton__effective_collection.

def Un_singleton__print
  :=
  proj_Singleton__rf_print Un_singleton__effective_collection.

def Un_singleton__different
  :=
  proj_Singleton__rf_different Un_singleton__effective_collection.

def Un_singleton__equal_reflexive
  :=
  proj_Singleton__rf_equal_reflexive Un_singleton__effective_collection.

def Un_singleton__equal_symmetric
  :=
  proj_Singleton__rf_equal_symmetric Un_singleton__effective_collection.

def Un_singleton__equal_transitive
  :=
  proj_Singleton__rf_equal_transitive Un_singleton__effective_collection.

def Un_singleton__same_is_not_different
  :=
  proj_Singleton__rf_same_is_not_different Un_singleton__effective_collection.

def Un_singleton__different_is_complete
  :=
  proj_Singleton__rf_different_is_complete Un_singleton__effective_collection.

def Un_singleton__different_is_irreflexive
  :=
  proj_Singleton__rf_different_is_irreflexive 
    Un_singleton__effective_collection.

def Un_singleton__different_is_symmetric
  :=
  proj_Singleton__rf_different_is_symmetric 
    Un_singleton__effective_collection.

Projection_over_sample__me_as_species :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) -> Type.

Projection_over_sample__mk_record :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  Projection_over_sample__rf_T:cc.uT ->
  Projection_over_sample__rf_reduce:((cc.eT S_T) -> cc.eT S_T) ->
  Projection_over_sample__rf_morph:((cc.eT S_T) -> cc.eT S_T) ->
  Projection_over_sample__rf_reduce_is_projection:(dk_logic.eP 
                                                     (dk_logic.forall S_T 
                                                        (x:(cc.eT S_T) =>
                                                         dk_logic.ebP 
                                                           (_p_S_equal 
                                                              (Projection_over_sample__rf_reduce 
                                                                 x) 
                                                              (Projection_over_sample__rf_reduce 
                                                                 (Projection_over_sample__rf_reduce 
                                                                    x)))))) ->
  Projection_over_sample__rf_reduce_substitution_rule:(dk_logic.eP 
                                                         (dk_logic.forall 
                                                            S_T 
                                                            (x:(cc.eT S_T) =>
                                                             dk_logic.forall 
                                                               S_T 
                                                               (y:
                                                                (cc.eT S_T) =>
                                                                dk_logic.imp 
                                                                  (dk_logic.ebP 
                                                                    (_p_S_equal 
                                                                    x y)) 
                                                                  (dk_logic.ebP 
                                                                    (_p_S_equal 
                                                                    (Projection_over_sample__rf_reduce 
                                                                    x) 
                                                                    (Projection_over_sample__rf_reduce 
                                                                    y))))))) ->
  Projection_over_sample__rf_parse:((cc.eT basics.string__t) ->
                                    cc.eT Projection_over_sample__rf_T) ->
  Projection_over_sample__rf_print:((cc.eT Projection_over_sample__rf_T) ->
                                    cc.eT basics.string__t) ->
  Projection_over_sample__rf_equiv:((cc.eT S_T) ->
                                    (cc.eT S_T) -> dk_logic.Prop) ->
  Projection_over_sample__rf_morph_substitution_rule:(dk_logic.eP 
                                                        (dk_logic.forall S_T 
                                                           (x:(cc.eT S_T) =>
                                                            dk_logic.forall 
                                                              S_T 
                                                              (y:
                                                               (cc.eT S_T) =>
                                                               dk_logic.imp 
                                                                 (dk_logic.ebP 
                                                                    (
                                                                    _p_S_equal 
                                                                    x y)) 
                                                                 (dk_logic.ebP 
                                                                    (
                                                                    _p_S_equal 
                                                                    (Projection_over_sample__rf_morph 
                                                                    x) 
                                                                    (Projection_over_sample__rf_morph 
                                                                    y))))))) ->
  Projection_over_sample__rf_equiv_symmetric:(dk_logic.eP 
                                                (dk_logic.forall S_T 
                                                   (x:(cc.eT S_T) =>
                                                    dk_logic.forall S_T 
                                                      (y:(cc.eT S_T) =>
                                                       dk_logic.imp 
                                                         (Projection_over_sample__rf_equiv 
                                                            x y) 
                                                         (Projection_over_sample__rf_equiv 
                                                            y x))))) ->
  Projection_over_sample__rf_equiv_transitive:(dk_logic.eP 
                                                 (dk_logic.forall S_T 
                                                    (x:(cc.eT S_T) =>
                                                     dk_logic.forall S_T 
                                                       (y:(cc.eT S_T) =>
                                                        dk_logic.forall S_T 
                                                          (z:(cc.eT S_T) =>
                                                           dk_logic.imp 
                                                             (Projection_over_sample__rf_equiv 
                                                                x y) 
                                                             (dk_logic.imp 
                                                                (Projection_over_sample__rf_equiv 
                                                                   y z) 
                                                                (Projection_over_sample__rf_equiv 
                                                                   x z))))))) ->
  Projection_over_sample__rf_equal_refines_equiv:(dk_logic.eP 
                                                    (dk_logic.forall S_T 
                                                       (x:(cc.eT S_T) =>
                                                        dk_logic.forall S_T 
                                                          (y:(cc.eT S_T) =>
                                                           dk_logic.imp 
                                                             (dk_logic.ebP 
                                                                (_p_S_equal 
                                                                   x y)) 
                                                             (Projection_over_sample__rf_equiv 
                                                                x y))))) ->
  Projection_over_sample__rf_equiv_reflexive:(dk_logic.eP 
                                                (dk_logic.forall S_T 
                                                   (x:(cc.eT S_T) =>
                                                    Projection_over_sample__rf_equiv 
                                                      x x))) ->
  Projection_over_sample__me_as_species S_T _p_S_equal.

def proj_Projection_over_sample__rf_T :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) -> cc.uT.

[Projection_over_sample__rf_T]
  proj_Projection_over_sample__rf_T _ _ (Projection_over_sample__mk_record _ 
    _ Projection_over_sample__rf_T _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Projection_over_sample__rf_T.

def proj_Projection_over_sample__rf_reduce :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  (cc.eT S_T) -> cc.eT S_T.

[Projection_over_sample__rf_reduce]
  proj_Projection_over_sample__rf_reduce _ _ 
    (Projection_over_sample__mk_record _ _ _ 
    Projection_over_sample__rf_reduce _ _ _ _ _ _ _ _ _ _ _)
  -->
  Projection_over_sample__rf_reduce.

def proj_Projection_over_sample__rf_morph :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  (cc.eT S_T) -> cc.eT S_T.

[Projection_over_sample__rf_morph]
  proj_Projection_over_sample__rf_morph _ _ 
    (Projection_over_sample__mk_record _ _ _ _ 
    Projection_over_sample__rf_morph _ _ _ _ _ _ _ _ _ _)
  -->
  Projection_over_sample__rf_morph.

def proj_Projection_over_sample__rf_reduce_is_projection :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  dk_logic.eP 
    (dk_logic.forall S_T 
       (x:(cc.eT S_T) =>
        dk_logic.ebP 
          (_p_S_equal 
             (proj_Projection_over_sample__rf_reduce S_T _p_S_equal record x) 
             (proj_Projection_over_sample__rf_reduce S_T _p_S_equal record 
                (proj_Projection_over_sample__rf_reduce S_T _p_S_equal 
                   record x))))).

[Projection_over_sample__rf_reduce_is_projection]
  proj_Projection_over_sample__rf_reduce_is_projection _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ 
    Projection_over_sample__rf_reduce_is_projection _ _ _ _ _ _ _ _ _)
  -->
  Projection_over_sample__rf_reduce_is_projection.

def proj_Projection_over_sample__rf_reduce_substitution_rule :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  dk_logic.eP 
    (dk_logic.forall S_T 
       (x:(cc.eT S_T) =>
        dk_logic.forall S_T 
          (y:(cc.eT S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (dk_logic.ebP 
                (_p_S_equal 
                   (proj_Projection_over_sample__rf_reduce S_T _p_S_equal 
                      record x) 
                   (proj_Projection_over_sample__rf_reduce S_T _p_S_equal 
                      record y)))))).

[Projection_over_sample__rf_reduce_substitution_rule]
  proj_Projection_over_sample__rf_reduce_substitution_rule _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ 
    Projection_over_sample__rf_reduce_substitution_rule _ _ _ _ _ _ _ _)
  -->
  Projection_over_sample__rf_reduce_substitution_rule.

def proj_Projection_over_sample__rf_parse :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  (cc.eT basics.string__t) ->
  cc.eT (proj_Projection_over_sample__rf_T S_T _p_S_equal record).

[Projection_over_sample__rf_parse]
  proj_Projection_over_sample__rf_parse _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ 
    Projection_over_sample__rf_parse _ _ _ _ _ _ _)
  -->
  Projection_over_sample__rf_parse.

def proj_Projection_over_sample__rf_print :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  (cc.eT (proj_Projection_over_sample__rf_T S_T _p_S_equal record)) ->
  cc.eT basics.string__t.

[Projection_over_sample__rf_print]
  proj_Projection_over_sample__rf_print _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ _ 
    Projection_over_sample__rf_print _ _ _ _ _ _)
  -->
  Projection_over_sample__rf_print.

def proj_Projection_over_sample__rf_equiv :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  (cc.eT S_T) -> (cc.eT S_T) -> dk_logic.Prop.

[Projection_over_sample__rf_equiv]
  proj_Projection_over_sample__rf_equiv _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ _ _ 
    Projection_over_sample__rf_equiv _ _ _ _ _)
  -->
  Projection_over_sample__rf_equiv.

def proj_Projection_over_sample__rf_morph_substitution_rule :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  dk_logic.eP 
    (dk_logic.forall S_T 
       (x:(cc.eT S_T) =>
        dk_logic.forall S_T 
          (y:(cc.eT S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (dk_logic.ebP 
                (_p_S_equal 
                   (proj_Projection_over_sample__rf_morph S_T _p_S_equal 
                      record x) 
                   (proj_Projection_over_sample__rf_morph S_T _p_S_equal 
                      record y)))))).

[Projection_over_sample__rf_morph_substitution_rule]
  proj_Projection_over_sample__rf_morph_substitution_rule _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ _ _ _ 
    Projection_over_sample__rf_morph_substitution_rule _ _ _ _)
  -->
  Projection_over_sample__rf_morph_substitution_rule.

def proj_Projection_over_sample__rf_equiv_symmetric :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  dk_logic.eP 
    (dk_logic.forall S_T 
       (x:(cc.eT S_T) =>
        dk_logic.forall S_T 
          (y:(cc.eT S_T) =>
           dk_logic.imp 
             (proj_Projection_over_sample__rf_equiv S_T _p_S_equal record x y) 
             (proj_Projection_over_sample__rf_equiv S_T _p_S_equal record y x)))).

[Projection_over_sample__rf_equiv_symmetric]
  proj_Projection_over_sample__rf_equiv_symmetric _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ _ _ _ _ 
    Projection_over_sample__rf_equiv_symmetric _ _ _)
  -->
  Projection_over_sample__rf_equiv_symmetric.

def proj_Projection_over_sample__rf_equiv_transitive :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  dk_logic.eP 
    (dk_logic.forall S_T 
       (x:(cc.eT S_T) =>
        dk_logic.forall S_T 
          (y:(cc.eT S_T) =>
           dk_logic.forall S_T 
             (z:(cc.eT S_T) =>
              dk_logic.imp 
                (proj_Projection_over_sample__rf_equiv S_T _p_S_equal record 
                   x y) 
                (dk_logic.imp 
                   (proj_Projection_over_sample__rf_equiv S_T _p_S_equal 
                      record y z) 
                   (proj_Projection_over_sample__rf_equiv S_T _p_S_equal 
                      record x z)))))).

[Projection_over_sample__rf_equiv_transitive]
  proj_Projection_over_sample__rf_equiv_transitive _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ _ _ _ _ _ 
    Projection_over_sample__rf_equiv_transitive _ _)
  -->
  Projection_over_sample__rf_equiv_transitive.

def proj_Projection_over_sample__rf_equal_refines_equiv :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  dk_logic.eP 
    (dk_logic.forall S_T 
       (x:(cc.eT S_T) =>
        dk_logic.forall S_T 
          (y:(cc.eT S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (proj_Projection_over_sample__rf_equiv S_T _p_S_equal record x y)))).

[Projection_over_sample__rf_equal_refines_equiv]
  proj_Projection_over_sample__rf_equal_refines_equiv _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Projection_over_sample__rf_equal_refines_equiv _)
  -->
  Projection_over_sample__rf_equal_refines_equiv.

def proj_Projection_over_sample__rf_equiv_reflexive :
  S_T:cc.uT ->
  _p_S_equal:((cc.eT S_T) -> (cc.eT S_T) -> cc.eT basics.bool__t) ->
  record:(Projection_over_sample__me_as_species S_T _p_S_equal) ->
  dk_logic.eP 
    (dk_logic.forall S_T 
       (x:(cc.eT S_T) =>
        proj_Projection_over_sample__rf_equiv S_T _p_S_equal record x x)).

[Projection_over_sample__rf_equiv_reflexive]
  proj_Projection_over_sample__rf_equiv_reflexive _ _ 
    (Projection_over_sample__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Projection_over_sample__rf_equiv_reflexive)
  -->
  Projection_over_sample__rf_equiv_reflexive.

def Projection_over_sample__reduce :
  _p_S_T:cc.uT ->
  _p_S_element:(cc.eT _p_S_T) -> _x:(cc.eT _p_S_T) -> cc.eT _p_S_T
  :=
  _p_S_T:cc.uT =>
  _p_S_element:(cc.eT _p_S_T) => _x:(cc.eT _p_S_T) => _p_S_element.

def Projection_over_sample__reduce_is_projection :
  _p_S_T:cc.uT ->
  _p_S_element:(cc.eT _p_S_T) ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.ebP (_p_S_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.ebP 
          (_p_S_equal (Projection_over_sample__reduce _p_S_T _p_S_element x) 
             (Projection_over_sample__reduce _p_S_T _p_S_element 
                (Projection_over_sample__reduce _p_S_T _p_S_element x)))))
  :=
  _p_S_T:cc.uT =>
  _p_S_element:(cc.eT _p_S_T) =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) => dk_logic.ebP (_p_S_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.triangle 
          (focal.is_true 
             (_p_S_equal 
                (Projection_over_sample__reduce _p_S_T _p_S_element v_Vzb) 
                (Projection_over_sample__reduce _p_S_T _p_S_element 
                   (Projection_over_sample__reduce _p_S_T _p_S_element v_Vzb)))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.triangle 
                 (focal.is_true 
                    (_p_S_equal 
                       (Projection_over_sample__reduce _p_S_T _p_S_element 
                          v_Vzb) 
                       (Projection_over_sample__reduce _p_S_T _p_S_element 
                          (Projection_over_sample__reduce _p_S_T 
                             _p_S_element v_Vzb)))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.triangle 
          (focal.is_true 
             (_p_S_equal 
                (Projection_over_sample__reduce _p_S_T _p_S_element v_Vzb) 
                (Projection_over_sample__reduce _p_S_T _p_S_element 
                   (Projection_over_sample__reduce _p_S_T _p_S_element v_Vzb))))) 
       (v_Vbc:(zen.term _p_S_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true (_p_S_equal _p_S_element _p_S_element))))) =>
        zen.Rall _p_S_T 
          (v_Vzb:(zen.term _p_S_T) =>
           zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vzb))) 
          _p_S_element 
          (v_Vdc:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true (_p_S_equal _p_S_element _p_S_element)))) =>
           zen.Raxiom 
             (zen.triangle 
                (focal.is_true (_p_S_equal _p_S_element _p_S_element))) 
             v_Vdc v_Vcc) _p_S_equal_reflexive) v_Vac).

def Projection_over_sample__reduce_substitution_rule :
  _p_S_T:cc.uT ->
  _p_S_element:(cc.eT _p_S_T) ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.ebP (_p_S_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S_T 
       (x:(cc.eT _p_S_T) =>
        dk_logic.forall _p_S_T 
          (y:(cc.eT _p_S_T) =>
           dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
             (dk_logic.ebP 
                (_p_S_equal 
                   (Projection_over_sample__reduce _p_S_T _p_S_element x) 
                   (Projection_over_sample__reduce _p_S_T _p_S_element y))))))
  :=
  _p_S_T:cc.uT =>
  _p_S_element:(cc.eT _p_S_T) =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) => dk_logic.ebP (_p_S_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vzb) 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal 
                             (Projection_over_sample__reduce _p_S_T 
                                _p_S_element v_Vzb) 
                             (Projection_over_sample__reduce _p_S_T 
                                _p_S_element v_Vac))))))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) =>
        zen.forall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vzb) 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vac)))))) 
       (v_Vcc:(zen.term _p_S_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S_T 
                 (v_Vac:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal 
                             (Projection_over_sample__reduce _p_S_T 
                                _p_S_element v_Vcc) 
                             (Projection_over_sample__reduce _p_S_T 
                                _p_S_element v_Vac)))))))) =>
        zen.Rnotall _p_S_T 
          (v_Vac:(zen.term _p_S_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vcc) 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vac))))) 
          (v_Vec:(zen.term _p_S_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S_equal 
                             (Projection_over_sample__reduce _p_S_T 
                                _p_S_element v_Vcc) 
                             (Projection_over_sample__reduce _p_S_T 
                                _p_S_element v_Vec))))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S_equal 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vcc) 
                      (Projection_over_sample__reduce _p_S_T _p_S_element 
                         v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_S_equal v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (_p_S_equal _p_S_element _p_S_element))))) =>
              zen.Rall _p_S_T 
                (v_Vzb:(zen.term _p_S_T) =>
                 zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vzb))) 
                _p_S_element 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (_p_S_equal _p_S_element _p_S_element)))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true (_p_S_equal _p_S_element _p_S_element))) 
                   v_Vic v_Vhc) _p_S_equal_reflexive) v_Vfc) v_Vdc) v_Vbc).

def Projection_over_sample__collection_create
  :=
  _p_S_T:cc.uT =>
  _p_S_element:(cc.eT _p_S_T) =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) => dk_logic.ebP (_p_S_equal x x)))) =>
  _p_S_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
              (dk_logic.ebP (_p_S_equal y x)))))) =>
  _p_S_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.forall _p_S_T 
              (z:(cc.eT _p_S_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S_equal y z)) 
                    (dk_logic.ebP (_p_S_equal x z)))))))) =>
  Projection_over_sample__mk_record _p_S_T _p_S_equal basics.unit__t 
    (Projection_over_sample__reduce _p_S_T _p_S_element) 
    (Projections__morph _p_S_T 
       (Projection_over_sample__reduce _p_S_T _p_S_element)) 
    (Projection_over_sample__reduce_is_projection _p_S_T _p_S_element 
       _p_S_equal _p_S_equal_reflexive) 
    (Projection_over_sample__reduce_substitution_rule _p_S_T _p_S_element 
       _p_S_equal _p_S_equal_reflexive) 
    (basics.Basic_object__parse basics.unit__t) 
    (basics.Basic_object__print basics.unit__t) 
    (Setoid_morphism__equiv _p_S_T _p_S_T _p_S_equal 
       (Projections__morph _p_S_T 
          (Projection_over_sample__reduce _p_S_T _p_S_element))) 
    (Projections__morph_substitution_rule _p_S_T _p_S_equal 
       (Projection_over_sample__reduce _p_S_T _p_S_element) 
       (Projection_over_sample__reduce_substitution_rule _p_S_T _p_S_element 
          _p_S_equal _p_S_equal_reflexive)) 
    (Setoid_morphism__equiv_symmetric _p_S_T _p_S_T _p_S_equal 
       _p_S_equal_symmetric 
       (Projections__morph _p_S_T 
          (Projection_over_sample__reduce _p_S_T _p_S_element))) 
    (Setoid_morphism__equiv_transitive _p_S_T _p_S_T _p_S_equal 
       _p_S_equal_transitive 
       (Projections__morph _p_S_T 
          (Projection_over_sample__reduce _p_S_T _p_S_element))) 
    (Setoid_morphism__equal_refines_equiv _p_S_T _p_S_T _p_S_equal 
       _p_S_equal 
       (Projections__morph _p_S_T 
          (Projection_over_sample__reduce _p_S_T _p_S_element)) 
       (Projections__morph_substitution_rule _p_S_T _p_S_equal 
          (Projection_over_sample__reduce _p_S_T _p_S_element) 
          (Projection_over_sample__reduce_substitution_rule _p_S_T 
             _p_S_element _p_S_equal _p_S_equal_reflexive))) 
    (Equivalence_relation__equiv_reflexive _p_S_T _p_S_equal 
       _p_S_equal_reflexive 
       (Setoid_morphism__equiv _p_S_T _p_S_T _p_S_equal 
          (Projections__morph _p_S_T 
             (Projection_over_sample__reduce _p_S_T _p_S_element))) 
       (Setoid_morphism__equal_refines_equiv _p_S_T _p_S_T _p_S_equal 
          _p_S_equal 
          (Projections__morph _p_S_T 
             (Projection_over_sample__reduce _p_S_T _p_S_element)) 
          (Projections__morph_substitution_rule _p_S_T _p_S_equal 
             (Projection_over_sample__reduce _p_S_T _p_S_element) 
             (Projection_over_sample__reduce_substitution_rule _p_S_T 
                _p_S_element _p_S_equal _p_S_equal_reflexive)))).

def Trivial_projection__effective_collection
  :=
  Projection_over_sample__collection_create Un_singleton__me_as_carrier 
    Un_singleton__element Un_singleton__equal Un_singleton__equal_reflexive 
    Un_singleton__equal_symmetric Un_singleton__equal_transitive.

def Trivial_projection__me_as_carrier := basics.unit__t.

def Trivial_projection__reduce
  :=
  proj_Projection_over_sample__rf_reduce Un_singleton__me_as_carrier 
    Un_singleton__equal Trivial_projection__effective_collection.

def Trivial_projection__morph
  :=
  proj_Projection_over_sample__rf_morph Un_singleton__me_as_carrier 
    Un_singleton__equal Trivial_projection__effective_collection.

def Trivial_projection__reduce_is_projection
  :=
  proj_Projection_over_sample__rf_reduce_is_projection 
    Un_singleton__me_as_carrier Un_singleton__equal 
    Trivial_projection__effective_collection.

def Trivial_projection__reduce_substitution_rule
  :=
  proj_Projection_over_sample__rf_reduce_substitution_rule 
    Un_singleton__me_as_carrier Un_singleton__equal 
    Trivial_projection__effective_collection.

def Trivial_projection__parse
  :=
  proj_Projection_over_sample__rf_parse Un_singleton__me_as_carrier 
    Un_singleton__equal Trivial_projection__effective_collection.

def Trivial_projection__print
  :=
  proj_Projection_over_sample__rf_print Un_singleton__me_as_carrier 
    Un_singleton__equal Trivial_projection__effective_collection.

def Trivial_projection__equiv
  :=
  proj_Projection_over_sample__rf_equiv Un_singleton__me_as_carrier 
    Un_singleton__equal Trivial_projection__effective_collection.

def Trivial_projection__morph_substitution_rule
  :=
  proj_Projection_over_sample__rf_morph_substitution_rule 
    Un_singleton__me_as_carrier Un_singleton__equal 
    Trivial_projection__effective_collection.

def Trivial_projection__equiv_symmetric
  :=
  proj_Projection_over_sample__rf_equiv_symmetric 
    Un_singleton__me_as_carrier Un_singleton__equal 
    Trivial_projection__effective_collection.

def Trivial_projection__equiv_transitive
  :=
  proj_Projection_over_sample__rf_equiv_transitive 
    Un_singleton__me_as_carrier Un_singleton__equal 
    Trivial_projection__effective_collection.

def Trivial_projection__equal_refines_equiv
  :=
  proj_Projection_over_sample__rf_equal_refines_equiv 
    Un_singleton__me_as_carrier Un_singleton__equal 
    Trivial_projection__effective_collection.

def Trivial_projection__equiv_reflexive
  :=
  proj_Projection_over_sample__rf_equiv_reflexive 
    Un_singleton__me_as_carrier Un_singleton__equal 
    Trivial_projection__effective_collection.

Trivial_quotient_final__me_as_species : Type.

Trivial_quotient_final__mk_record :
  Trivial_quotient_final__rf_T:cc.uT ->
  Trivial_quotient_final__rf_element:(cc.eT Trivial_quotient_final__rf_T) ->
  Trivial_quotient_final__rf_equal:((cc.eT Trivial_quotient_final__rf_T) ->
                                    (cc.eT Trivial_quotient_final__rf_T) ->
                                    cc.eT basics.bool__t) ->
  Trivial_quotient_final__rf_from_rep:((cc.eT Un_singleton__me_as_carrier) ->
                                       cc.eT Trivial_quotient_final__rf_T) ->
  Trivial_quotient_final__rf_parse:((cc.eT basics.string__t) ->
                                    cc.eT Trivial_quotient_final__rf_T) ->
  Trivial_quotient_final__rf_print:((cc.eT Trivial_quotient_final__rf_T) ->
                                    cc.eT basics.string__t) ->
  Trivial_quotient_final__rf_to_rep:((cc.eT Trivial_quotient_final__rf_T) ->
                                     cc.eT Un_singleton__me_as_carrier) ->
  Trivial_quotient_final__rf_different:((cc.eT Trivial_quotient_final__rf_T) ->
                                        (cc.eT Trivial_quotient_final__rf_T) ->
                                        cc.eT basics.bool__t) ->
  Trivial_quotient_final__rf_equal_reflexive:(dk_logic.eP 
                                                (dk_logic.forall 
                                                   Trivial_quotient_final__rf_T 
                                                   (x:
                                                    (cc.eT 
                                                       Trivial_quotient_final__rf_T) =>
                                                    dk_logic.ebP 
                                                      (Trivial_quotient_final__rf_equal 
                                                         x x)))) ->
  Trivial_quotient_final__rf_equal_symmetric:(dk_logic.eP 
                                                (dk_logic.forall 
                                                   Trivial_quotient_final__rf_T 
                                                   (x:
                                                    (cc.eT 
                                                       Trivial_quotient_final__rf_T) =>
                                                    dk_logic.forall 
                                                      Trivial_quotient_final__rf_T 
                                                      (y:
                                                       (cc.eT 
                                                          Trivial_quotient_final__rf_T) =>
                                                       dk_logic.imp 
                                                         (dk_logic.ebP 
                                                            (Trivial_quotient_final__rf_equal 
                                                               x y)) 
                                                         (dk_logic.ebP 
                                                            (Trivial_quotient_final__rf_equal 
                                                               y x)))))) ->
  Trivial_quotient_final__rf_equal_transitive:(dk_logic.eP 
                                                 (dk_logic.forall 
                                                    Trivial_quotient_final__rf_T 
                                                    (x:
                                                     (cc.eT 
                                                        Trivial_quotient_final__rf_T) =>
                                                     dk_logic.forall 
                                                       Trivial_quotient_final__rf_T 
                                                       (y:
                                                        (cc.eT 
                                                           Trivial_quotient_final__rf_T) =>
                                                        dk_logic.forall 
                                                          Trivial_quotient_final__rf_T 
                                                          (z:
                                                           (cc.eT 
                                                              Trivial_quotient_final__rf_T) =>
                                                           dk_logic.imp 
                                                             (dk_logic.ebP 
                                                                (Trivial_quotient_final__rf_equal 
                                                                   x y)) 
                                                             (dk_logic.imp 
                                                                (dk_logic.ebP 
                                                                   (Trivial_quotient_final__rf_equal 
                                                                    y z)) 
                                                                (dk_logic.ebP 
                                                                   (Trivial_quotient_final__rf_equal 
                                                                    x z)))))))) ->
  Trivial_quotient_final__rf_represents_some_self:((cc.eT 
                                                      Un_singleton__me_as_carrier) ->
                                                   dk_logic.Prop) ->
  Trivial_quotient_final__rf_to_rep_is_injective:(dk_logic.eP 
                                                    (dk_logic.forall 
                                                       Trivial_quotient_final__rf_T 
                                                       (e_1:
                                                        (cc.eT 
                                                           Trivial_quotient_final__rf_T) =>
                                                        dk_logic.forall 
                                                          Trivial_quotient_final__rf_T 
                                                          (e_2:
                                                           (cc.eT 
                                                              Trivial_quotient_final__rf_T) =>
                                                           dk_logic.imp 
                                                             (dk_logic.ebP 
                                                                (Un_singleton__equal 
                                                                   (Trivial_quotient_final__rf_to_rep 
                                                                    e_1) 
                                                                   (Trivial_quotient_final__rf_to_rep 
                                                                    e_2))) 
                                                             (dk_logic.ebP 
                                                                (Trivial_quotient_final__rf_equal 
                                                                   e_1 e_2)))))) ->
  Trivial_quotient_final__rf_same_is_not_different:(dk_logic.eP 
                                                      (dk_logic.forall 
                                                         Trivial_quotient_final__rf_T 
                                                         (x:
                                                          (cc.eT 
                                                             Trivial_quotient_final__rf_T) =>
                                                          dk_logic.forall 
                                                            Trivial_quotient_final__rf_T 
                                                            (y:
                                                             (cc.eT 
                                                                Trivial_quotient_final__rf_T) =>
                                                             dk_logic.eqv 
                                                               (dk_logic.ebP 
                                                                  (Trivial_quotient_final__rf_different 
                                                                    x y)) 
                                                               (dk_logic.not 
                                                                  (dk_logic.ebP 
                                                                    (Trivial_quotient_final__rf_equal 
                                                                    x y))))))) ->
  Trivial_quotient_final__rf_correct_representation:((cc.eT 
                                                        Trivial_quotient_final__rf_T) ->
                                                     dk_logic.Prop) ->
  Trivial_quotient_final__rf_different_is_complete:(dk_logic.eP 
                                                      (dk_logic.forall 
                                                         Trivial_quotient_final__rf_T 
                                                         (x:
                                                          (cc.eT 
                                                             Trivial_quotient_final__rf_T) =>
                                                          dk_logic.forall 
                                                            Trivial_quotient_final__rf_T 
                                                            (y:
                                                             (cc.eT 
                                                                Trivial_quotient_final__rf_T) =>
                                                             dk_logic.forall 
                                                               Trivial_quotient_final__rf_T 
                                                               (z:
                                                                (cc.eT 
                                                                   Trivial_quotient_final__rf_T) =>
                                                                dk_logic.imp 
                                                                  (dk_logic.ebP 
                                                                    (Trivial_quotient_final__rf_different 
                                                                    x y)) 
                                                                  (dk_logic.or 
                                                                    (dk_logic.ebP 
                                                                    (Trivial_quotient_final__rf_different 
                                                                    x z)) 
                                                                    (dk_logic.ebP 
                                                                    (Trivial_quotient_final__rf_different 
                                                                    y z)))))))) ->
  Trivial_quotient_final__rf_different_is_irreflexive:(dk_logic.eP 
                                                         (dk_logic.forall 
                                                            Trivial_quotient_final__rf_T 
                                                            (x:
                                                             (cc.eT 
                                                                Trivial_quotient_final__rf_T) =>
                                                             dk_logic.not 
                                                               (dk_logic.ebP 
                                                                  (Trivial_quotient_final__rf_different 
                                                                    x x))))) ->
  Trivial_quotient_final__rf_different_is_symmetric:(dk_logic.eP 
                                                       (dk_logic.forall 
                                                          Trivial_quotient_final__rf_T 
                                                          (x:
                                                           (cc.eT 
                                                              Trivial_quotient_final__rf_T) =>
                                                           dk_logic.forall 
                                                             Trivial_quotient_final__rf_T 
                                                             (y:
                                                              (cc.eT 
                                                                 Trivial_quotient_final__rf_T) =>
                                                              dk_logic.imp 
                                                                (dk_logic.ebP 
                                                                   (Trivial_quotient_final__rf_different 
                                                                    x y)) 
                                                                (dk_logic.ebP 
                                                                   (Trivial_quotient_final__rf_different 
                                                                    y x)))))) ->
  Trivial_quotient_final__rf_correct_rep_spec:(dk_logic.eP 
                                                 (dk_logic.forall 
                                                    Trivial_quotient_final__rf_T 
                                                    (x:
                                                     (cc.eT 
                                                        Trivial_quotient_final__rf_T) =>
                                                     dk_logic.eqv 
                                                       (Trivial_quotient_final__rf_correct_representation 
                                                          x) 
                                                       (Trivial_quotient_final__rf_represents_some_self 
                                                          (Trivial_quotient_final__rf_to_rep 
                                                             x))))) ->
  Trivial_quotient_final__rf_sample_is_reduced:(dk_logic.eP 
                                                  (Trivial_quotient_final__rf_correct_representation 
                                                     Trivial_quotient_final__rf_element)) ->
  Trivial_quotient_final__rf_correct_invariant:(dk_logic.eP 
                                                  (dk_logic.forall 
                                                     Trivial_quotient_final__rf_T 
                                                     (x:
                                                      (cc.eT 
                                                         Trivial_quotient_final__rf_T) =>
                                                      Trivial_quotient_final__rf_correct_representation 
                                                        x))) ->
  Trivial_quotient_final__rf_to_rep_reverses:(dk_logic.eP 
                                                (dk_logic.forall 
                                                   Trivial_quotient_final__rf_T 
                                                   (x:
                                                    (cc.eT 
                                                       Trivial_quotient_final__rf_T) =>
                                                    dk_logic.ebP 
                                                      (Trivial_quotient_final__rf_equal 
                                                         (Trivial_quotient_final__rf_from_rep 
                                                            (Trivial_quotient_final__rf_to_rep 
                                                               x)) x)))) ->
  Trivial_quotient_final__rf_from_rep_is_surjective:(dk_logic.eP 
                                                       (dk_logic.forall 
                                                          Trivial_quotient_final__rf_T 
                                                          (x:
                                                           (cc.eT 
                                                              Trivial_quotient_final__rf_T) =>
                                                           dk_logic.exists 
                                                             Un_singleton__me_as_carrier 
                                                             (y:
                                                              (cc.eT 
                                                                 Un_singleton__me_as_carrier) =>
                                                              dk_logic.ebP 
                                                                (Trivial_quotient_final__rf_equal 
                                                                   (Trivial_quotient_final__rf_from_rep 
                                                                    y) x))))) ->
  Trivial_quotient_final__me_as_species.

def proj_Trivial_quotient_final__rf_T :
  record:Trivial_quotient_final__me_as_species -> cc.uT.

[Trivial_quotient_final__rf_T]
  proj_Trivial_quotient_final__rf_T (Trivial_quotient_final__mk_record Trivial_quotient_final__rf_T 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_T.

def proj_Trivial_quotient_final__rf_element :
  record:Trivial_quotient_final__me_as_species ->
  cc.eT (proj_Trivial_quotient_final__rf_T record).

[Trivial_quotient_final__rf_element]
  proj_Trivial_quotient_final__rf_element (Trivial_quotient_final__mk_record _ 
    Trivial_quotient_final__rf_element _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _)
  -->
  Trivial_quotient_final__rf_element.

def proj_Trivial_quotient_final__rf_equal :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT (proj_Trivial_quotient_final__rf_T record)) ->
  (cc.eT (proj_Trivial_quotient_final__rf_T record)) -> cc.eT basics.bool__t.

[Trivial_quotient_final__rf_equal]
  proj_Trivial_quotient_final__rf_equal (Trivial_quotient_final__mk_record _ 
    _ Trivial_quotient_final__rf_equal _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Trivial_quotient_final__rf_equal.

def proj_Trivial_quotient_final__rf_from_rep :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT Un_singleton__me_as_carrier) ->
  cc.eT (proj_Trivial_quotient_final__rf_T record).

[Trivial_quotient_final__rf_from_rep]
  proj_Trivial_quotient_final__rf_from_rep (Trivial_quotient_final__mk_record _ 
    _ _ Trivial_quotient_final__rf_from_rep _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _)
  -->
  Trivial_quotient_final__rf_from_rep.

def proj_Trivial_quotient_final__rf_parse :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT basics.string__t) ->
  cc.eT (proj_Trivial_quotient_final__rf_T record).

[Trivial_quotient_final__rf_parse]
  proj_Trivial_quotient_final__rf_parse (Trivial_quotient_final__mk_record _ 
    _ _ _ Trivial_quotient_final__rf_parse _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Trivial_quotient_final__rf_parse.

def proj_Trivial_quotient_final__rf_print :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT (proj_Trivial_quotient_final__rf_T record)) ->
  cc.eT basics.string__t.

[Trivial_quotient_final__rf_print]
  proj_Trivial_quotient_final__rf_print (Trivial_quotient_final__mk_record _ 
    _ _ _ _ Trivial_quotient_final__rf_print _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Trivial_quotient_final__rf_print.

def proj_Trivial_quotient_final__rf_to_rep :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT (proj_Trivial_quotient_final__rf_T record)) ->
  cc.eT Un_singleton__me_as_carrier.

[Trivial_quotient_final__rf_to_rep]
  proj_Trivial_quotient_final__rf_to_rep (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ Trivial_quotient_final__rf_to_rep _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _)
  -->
  Trivial_quotient_final__rf_to_rep.

def proj_Trivial_quotient_final__rf_different :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT (proj_Trivial_quotient_final__rf_T record)) ->
  (cc.eT (proj_Trivial_quotient_final__rf_T record)) -> cc.eT basics.bool__t.

[Trivial_quotient_final__rf_different]
  proj_Trivial_quotient_final__rf_different (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ Trivial_quotient_final__rf_different _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _)
  -->
  Trivial_quotient_final__rf_different.

def proj_Trivial_quotient_final__rf_equal_reflexive :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.ebP (proj_Trivial_quotient_final__rf_equal record x x))).

[Trivial_quotient_final__rf_equal_reflexive]
  proj_Trivial_quotient_final__rf_equal_reflexive (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ Trivial_quotient_final__rf_equal_reflexive _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_equal_reflexive.

def proj_Trivial_quotient_final__rf_equal_symmetric :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
          (y:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP (proj_Trivial_quotient_final__rf_equal record x y)) 
             (dk_logic.ebP (proj_Trivial_quotient_final__rf_equal record y x))))).

[Trivial_quotient_final__rf_equal_symmetric]
  proj_Trivial_quotient_final__rf_equal_symmetric (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ Trivial_quotient_final__rf_equal_symmetric _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_equal_symmetric.

def proj_Trivial_quotient_final__rf_equal_transitive :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
          (y:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
           dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
             (z:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Trivial_quotient_final__rf_equal record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Trivial_quotient_final__rf_equal record y z)) 
                   (dk_logic.ebP 
                      (proj_Trivial_quotient_final__rf_equal record x z))))))).

[Trivial_quotient_final__rf_equal_transitive]
  proj_Trivial_quotient_final__rf_equal_transitive (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ Trivial_quotient_final__rf_equal_transitive _ _ _ _ _ 
    _ _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_equal_transitive.

def proj_Trivial_quotient_final__rf_represents_some_self :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT Un_singleton__me_as_carrier) -> dk_logic.Prop.

[Trivial_quotient_final__rf_represents_some_self]
  proj_Trivial_quotient_final__rf_represents_some_self (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ Trivial_quotient_final__rf_represents_some_self _ _ 
    _ _ _ _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_represents_some_self.

def proj_Trivial_quotient_final__rf_to_rep_is_injective :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (e_1:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
          (e_2:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (Un_singleton__equal 
                   (proj_Trivial_quotient_final__rf_to_rep record e_1) 
                   (proj_Trivial_quotient_final__rf_to_rep record e_2))) 
             (dk_logic.ebP 
                (proj_Trivial_quotient_final__rf_equal record e_1 e_2))))).

[Trivial_quotient_final__rf_to_rep_is_injective]
  proj_Trivial_quotient_final__rf_to_rep_is_injective (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ Trivial_quotient_final__rf_to_rep_is_injective _ _ 
    _ _ _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_to_rep_is_injective.

def proj_Trivial_quotient_final__rf_same_is_not_different :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
          (y:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Trivial_quotient_final__rf_different record x y)) 
             (dk_logic.not 
                (dk_logic.ebP 
                   (proj_Trivial_quotient_final__rf_equal record x y)))))).

[Trivial_quotient_final__rf_same_is_not_different]
  proj_Trivial_quotient_final__rf_same_is_not_different (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Trivial_quotient_final__rf_same_is_not_different 
    _ _ _ _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_same_is_not_different.

def proj_Trivial_quotient_final__rf_correct_representation :
  record:Trivial_quotient_final__me_as_species ->
  (cc.eT (proj_Trivial_quotient_final__rf_T record)) -> dk_logic.Prop.

[Trivial_quotient_final__rf_correct_representation]
  proj_Trivial_quotient_final__rf_correct_representation (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_correct_representation _ _ _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_correct_representation.

def proj_Trivial_quotient_final__rf_different_is_complete :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
          (y:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
           dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
             (z:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Trivial_quotient_final__rf_different record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP 
                      (proj_Trivial_quotient_final__rf_different record x z)) 
                   (dk_logic.ebP 
                      (proj_Trivial_quotient_final__rf_different record y z))))))).

[Trivial_quotient_final__rf_different_is_complete]
  proj_Trivial_quotient_final__rf_different_is_complete (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_different_is_complete _ _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_different_is_complete.

def proj_Trivial_quotient_final__rf_different_is_irreflexive :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.not 
          (dk_logic.ebP 
             (proj_Trivial_quotient_final__rf_different record x x)))).

[Trivial_quotient_final__rf_different_is_irreflexive]
  proj_Trivial_quotient_final__rf_different_is_irreflexive (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_different_is_irreflexive _ _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_different_is_irreflexive.

def proj_Trivial_quotient_final__rf_different_is_symmetric :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
          (y:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Trivial_quotient_final__rf_different record x y)) 
             (dk_logic.ebP 
                (proj_Trivial_quotient_final__rf_different record y x))))).

[Trivial_quotient_final__rf_different_is_symmetric]
  proj_Trivial_quotient_final__rf_different_is_symmetric (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_different_is_symmetric _ _ _ _ _)
  -->
  Trivial_quotient_final__rf_different_is_symmetric.

def proj_Trivial_quotient_final__rf_correct_rep_spec :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.eqv 
          (proj_Trivial_quotient_final__rf_correct_representation record x) 
          (proj_Trivial_quotient_final__rf_represents_some_self record 
             (proj_Trivial_quotient_final__rf_to_rep record x)))).

[Trivial_quotient_final__rf_correct_rep_spec]
  proj_Trivial_quotient_final__rf_correct_rep_spec (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_correct_rep_spec _ _ _ _)
  -->
  Trivial_quotient_final__rf_correct_rep_spec.

def proj_Trivial_quotient_final__rf_sample_is_reduced :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (proj_Trivial_quotient_final__rf_correct_representation record 
       (proj_Trivial_quotient_final__rf_element record)).

[Trivial_quotient_final__rf_sample_is_reduced]
  proj_Trivial_quotient_final__rf_sample_is_reduced (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_sample_is_reduced _ _ _)
  -->
  Trivial_quotient_final__rf_sample_is_reduced.

def proj_Trivial_quotient_final__rf_correct_invariant :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        proj_Trivial_quotient_final__rf_correct_representation record x)).

[Trivial_quotient_final__rf_correct_invariant]
  proj_Trivial_quotient_final__rf_correct_invariant (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_correct_invariant _ _)
  -->
  Trivial_quotient_final__rf_correct_invariant.

def proj_Trivial_quotient_final__rf_to_rep_reverses :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.ebP 
          (proj_Trivial_quotient_final__rf_equal record 
             (proj_Trivial_quotient_final__rf_from_rep record 
                (proj_Trivial_quotient_final__rf_to_rep record x)) x))).

[Trivial_quotient_final__rf_to_rep_reverses]
  proj_Trivial_quotient_final__rf_to_rep_reverses (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_to_rep_reverses _)
  -->
  Trivial_quotient_final__rf_to_rep_reverses.

def proj_Trivial_quotient_final__rf_from_rep_is_surjective :
  record:Trivial_quotient_final__me_as_species ->
  dk_logic.eP 
    (dk_logic.forall (proj_Trivial_quotient_final__rf_T record) 
       (x:(cc.eT (proj_Trivial_quotient_final__rf_T record)) =>
        dk_logic.exists Un_singleton__me_as_carrier 
          (y:(cc.eT Un_singleton__me_as_carrier) =>
           dk_logic.ebP 
             (proj_Trivial_quotient_final__rf_equal record 
                (proj_Trivial_quotient_final__rf_from_rep record y) x)))).

[Trivial_quotient_final__rf_from_rep_is_surjective]
  proj_Trivial_quotient_final__rf_from_rep_is_surjective (Trivial_quotient_final__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Trivial_quotient_final__rf_from_rep_is_surjective)
  -->
  Trivial_quotient_final__rf_from_rep_is_surjective.

def Trivial_quotient_final__correct_invariant :
  abst_T:cc.uT ->
  abst_element:(cc.eT abst_T) ->
  abst_correct_representation:((cc.eT abst_T) -> dk_logic.Prop) ->
  abst_sample_is_reduced:(dk_logic.eP 
                            (abst_correct_representation abst_element)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => abst_correct_representation x))
  :=
  abst_T:cc.uT =>
  abst_element:(cc.eT abst_T) =>
  abst_correct_representation:((cc.eT abst_T) -> dk_logic.Prop) =>
  abst_sample_is_reduced:
  (dk_logic.eP (abst_correct_representation abst_element)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => abst_correct_representation x)).

def Trivial_quotient_final__collection_create
  :=
  Trivial_quotient_final__mk_record Un_singleton__me_as_carrier 
    (Quotient_set__element Un_singleton__me_as_carrier Un_singleton__element 
       Trivial_projection__reduce) 
    (Represented_by_setoid__equal Un_singleton__me_as_carrier 
       Un_singleton__equal) 
    (Quotient_set__from_rep Un_singleton__me_as_carrier 
       Trivial_projection__reduce) 
    (basics.Basic_object__parse Un_singleton__me_as_carrier) 
    (basics.Basic_object__print Un_singleton__me_as_carrier) 
    (Represented_by__to_rep Un_singleton__me_as_carrier) 
    (sets.Setoid__different Un_singleton__me_as_carrier 
       (Represented_by_setoid__equal Un_singleton__me_as_carrier 
          Un_singleton__equal)) 
    (Represented_by_setoid__equal_reflexive Un_singleton__me_as_carrier 
       Un_singleton__equal Un_singleton__equal_reflexive) 
    (Represented_by_setoid__equal_symmetric Un_singleton__me_as_carrier 
       Un_singleton__equal Un_singleton__equal_symmetric) 
    (Represented_by_setoid__equal_transitive Un_singleton__me_as_carrier 
       Un_singleton__equal Un_singleton__equal_transitive) 
    (Represented_by_setoid__represents_some_self Un_singleton__me_as_carrier 
       Un_singleton__equal 
       (Quotient_set__from_rep Un_singleton__me_as_carrier 
          Trivial_projection__reduce)) 
    (Represented_by_setoid__to_rep_is_injective Un_singleton__me_as_carrier 
       Un_singleton__equal) 
    (sets.Setoid__same_is_not_different Un_singleton__me_as_carrier 
       (Represented_by_setoid__equal Un_singleton__me_as_carrier 
          Un_singleton__equal)) 
    (Represented_by__correct_representation Un_singleton__me_as_carrier 
       Un_singleton__me_as_carrier 
       (Represented_by_setoid__represents_some_self 
          Un_singleton__me_as_carrier Un_singleton__equal 
          (Quotient_set__from_rep Un_singleton__me_as_carrier 
             Trivial_projection__reduce)) 
       (Represented_by__to_rep Un_singleton__me_as_carrier)) 
    (sets.Setoid__different_is_complete Un_singleton__me_as_carrier 
       (Represented_by_setoid__equal Un_singleton__me_as_carrier 
          Un_singleton__equal) 
       (sets.Setoid__different Un_singleton__me_as_carrier 
          (Represented_by_setoid__equal Un_singleton__me_as_carrier 
             Un_singleton__equal)) 
       (Represented_by_setoid__equal_reflexive Un_singleton__me_as_carrier 
          Un_singleton__equal Un_singleton__equal_reflexive) 
       (Represented_by_setoid__equal_symmetric Un_singleton__me_as_carrier 
          Un_singleton__equal Un_singleton__equal_symmetric) 
       (Represented_by_setoid__equal_transitive Un_singleton__me_as_carrier 
          Un_singleton__equal Un_singleton__equal_transitive) 
       (sets.Setoid__same_is_not_different Un_singleton__me_as_carrier 
          (Represented_by_setoid__equal Un_singleton__me_as_carrier 
             Un_singleton__equal))) 
    (sets.Setoid__different_is_irreflexive Un_singleton__me_as_carrier 
       (Represented_by_setoid__equal Un_singleton__me_as_carrier 
          Un_singleton__equal) 
       (sets.Setoid__different Un_singleton__me_as_carrier 
          (Represented_by_setoid__equal Un_singleton__me_as_carrier 
             Un_singleton__equal)) 
       (Represented_by_setoid__equal_reflexive Un_singleton__me_as_carrier 
          Un_singleton__equal Un_singleton__equal_reflexive) 
       (sets.Setoid__same_is_not_different Un_singleton__me_as_carrier 
          (Represented_by_setoid__equal Un_singleton__me_as_carrier 
             Un_singleton__equal))) 
    (sets.Setoid__different_is_symmetric Un_singleton__me_as_carrier 
       (Represented_by_setoid__equal Un_singleton__me_as_carrier 
          Un_singleton__equal) 
       (sets.Setoid__different Un_singleton__me_as_carrier 
          (Represented_by_setoid__equal Un_singleton__me_as_carrier 
             Un_singleton__equal)) 
       (Represented_by_setoid__equal_symmetric Un_singleton__me_as_carrier 
          Un_singleton__equal Un_singleton__equal_symmetric) 
       (sets.Setoid__same_is_not_different Un_singleton__me_as_carrier 
          (Represented_by_setoid__equal Un_singleton__me_as_carrier 
             Un_singleton__equal))) 
    (Represented_by__correct_rep_spec Un_singleton__me_as_carrier 
       Un_singleton__me_as_carrier 
       (Represented_by_setoid__represents_some_self 
          Un_singleton__me_as_carrier Un_singleton__equal 
          (Quotient_set__from_rep Un_singleton__me_as_carrier 
             Trivial_projection__reduce)) 
       (Represented_by__to_rep Un_singleton__me_as_carrier)) 
    (Quotient_set__sample_is_reduced Un_singleton__me_as_carrier 
       Un_singleton__element Un_singleton__equal 
       Un_singleton__equal_symmetric Trivial_projection__reduce 
       Trivial_projection__reduce_is_projection) 
    (Trivial_quotient_final__correct_invariant Un_singleton__me_as_carrier 
       (Quotient_set__element Un_singleton__me_as_carrier 
          Un_singleton__element Trivial_projection__reduce) 
       (Represented_by__correct_representation Un_singleton__me_as_carrier 
          Un_singleton__me_as_carrier 
          (Represented_by_setoid__represents_some_self 
             Un_singleton__me_as_carrier Un_singleton__equal 
             (Quotient_set__from_rep Un_singleton__me_as_carrier 
                Trivial_projection__reduce)) 
          (Represented_by__to_rep Un_singleton__me_as_carrier)) 
       (Quotient_set__sample_is_reduced Un_singleton__me_as_carrier 
          Un_singleton__element Un_singleton__equal 
          Un_singleton__equal_symmetric Trivial_projection__reduce 
          Trivial_projection__reduce_is_projection)) 
    (Represented_by_setoid__to_rep_reverses Un_singleton__me_as_carrier 
       Un_singleton__equal 
       (Quotient_set__from_rep Un_singleton__me_as_carrier 
          Trivial_projection__reduce) 
       (Represented_by__correct_representation Un_singleton__me_as_carrier 
          Un_singleton__me_as_carrier 
          (Represented_by_setoid__represents_some_self 
             Un_singleton__me_as_carrier Un_singleton__equal 
             (Quotient_set__from_rep Un_singleton__me_as_carrier 
                Trivial_projection__reduce)) 
          (Represented_by__to_rep Un_singleton__me_as_carrier)) 
       (Trivial_quotient_final__correct_invariant 
          Un_singleton__me_as_carrier 
          (Quotient_set__element Un_singleton__me_as_carrier 
             Un_singleton__element Trivial_projection__reduce) 
          (Represented_by__correct_representation 
             Un_singleton__me_as_carrier Un_singleton__me_as_carrier 
             (Represented_by_setoid__represents_some_self 
                Un_singleton__me_as_carrier Un_singleton__equal 
                (Quotient_set__from_rep Un_singleton__me_as_carrier 
                   Trivial_projection__reduce)) 
             (Represented_by__to_rep Un_singleton__me_as_carrier)) 
          (Quotient_set__sample_is_reduced Un_singleton__me_as_carrier 
             Un_singleton__element Un_singleton__equal 
             Un_singleton__equal_symmetric Trivial_projection__reduce 
             Trivial_projection__reduce_is_projection)) 
       (Represented_by__correct_rep_spec Un_singleton__me_as_carrier 
          Un_singleton__me_as_carrier 
          (Represented_by_setoid__represents_some_self 
             Un_singleton__me_as_carrier Un_singleton__equal 
             (Quotient_set__from_rep Un_singleton__me_as_carrier 
                Trivial_projection__reduce)) 
          (Represented_by__to_rep Un_singleton__me_as_carrier))) 
    (Represented_by__from_rep_is_surjective Un_singleton__me_as_carrier 
       (Represented_by_setoid__equal Un_singleton__me_as_carrier 
          Un_singleton__equal) 
       (Quotient_set__from_rep Un_singleton__me_as_carrier 
          Trivial_projection__reduce) 
       (Represented_by_setoid__to_rep_reverses Un_singleton__me_as_carrier 
          Un_singleton__equal 
          (Quotient_set__from_rep Un_singleton__me_as_carrier 
             Trivial_projection__reduce) 
          (Represented_by__correct_representation 
             Un_singleton__me_as_carrier Un_singleton__me_as_carrier 
             (Represented_by_setoid__represents_some_self 
                Un_singleton__me_as_carrier Un_singleton__equal 
                (Quotient_set__from_rep Un_singleton__me_as_carrier 
                   Trivial_projection__reduce)) 
             (Represented_by__to_rep Un_singleton__me_as_carrier)) 
          (Trivial_quotient_final__correct_invariant 
             Un_singleton__me_as_carrier 
             (Quotient_set__element Un_singleton__me_as_carrier 
                Un_singleton__element Trivial_projection__reduce) 
             (Represented_by__correct_representation 
                Un_singleton__me_as_carrier Un_singleton__me_as_carrier 
                (Represented_by_setoid__represents_some_self 
                   Un_singleton__me_as_carrier Un_singleton__equal 
                   (Quotient_set__from_rep Un_singleton__me_as_carrier 
                      Trivial_projection__reduce)) 
                (Represented_by__to_rep Un_singleton__me_as_carrier)) 
             (Quotient_set__sample_is_reduced Un_singleton__me_as_carrier 
                Un_singleton__element Un_singleton__equal 
                Un_singleton__equal_symmetric Trivial_projection__reduce 
                Trivial_projection__reduce_is_projection)) 
          (Represented_by__correct_rep_spec Un_singleton__me_as_carrier 
             Un_singleton__me_as_carrier 
             (Represented_by_setoid__represents_some_self 
                Un_singleton__me_as_carrier Un_singleton__equal 
                (Quotient_set__from_rep Un_singleton__me_as_carrier 
                   Trivial_projection__reduce)) 
             (Represented_by__to_rep Un_singleton__me_as_carrier)))).

def Trivial_quotient__effective_collection
  :=
  Trivial_quotient_final__collection_create.

def Trivial_quotient__me_as_carrier := Un_singleton__me_as_carrier.

def Trivial_quotient__element
  :=
  proj_Trivial_quotient_final__rf_element 
    Trivial_quotient__effective_collection.

def Trivial_quotient__equal
  :=
  proj_Trivial_quotient_final__rf_equal 
    Trivial_quotient__effective_collection.

def Trivial_quotient__from_rep
  :=
  proj_Trivial_quotient_final__rf_from_rep 
    Trivial_quotient__effective_collection.

def Trivial_quotient__parse
  :=
  proj_Trivial_quotient_final__rf_parse 
    Trivial_quotient__effective_collection.

def Trivial_quotient__print
  :=
  proj_Trivial_quotient_final__rf_print 
    Trivial_quotient__effective_collection.

def Trivial_quotient__to_rep
  :=
  proj_Trivial_quotient_final__rf_to_rep 
    Trivial_quotient__effective_collection.

def Trivial_quotient__different
  :=
  proj_Trivial_quotient_final__rf_different 
    Trivial_quotient__effective_collection.

def Trivial_quotient__equal_reflexive
  :=
  proj_Trivial_quotient_final__rf_equal_reflexive 
    Trivial_quotient__effective_collection.

def Trivial_quotient__equal_symmetric
  :=
  proj_Trivial_quotient_final__rf_equal_symmetric 
    Trivial_quotient__effective_collection.

def Trivial_quotient__equal_transitive
  :=
  proj_Trivial_quotient_final__rf_equal_transitive 
    Trivial_quotient__effective_collection.

def Trivial_quotient__represents_some_self
  :=
  proj_Trivial_quotient_final__rf_represents_some_self 
    Trivial_quotient__effective_collection.

def Trivial_quotient__to_rep_is_injective
  :=
  proj_Trivial_quotient_final__rf_to_rep_is_injective 
    Trivial_quotient__effective_collection.

def Trivial_quotient__same_is_not_different
  :=
  proj_Trivial_quotient_final__rf_same_is_not_different 
    Trivial_quotient__effective_collection.

def Trivial_quotient__correct_representation
  :=
  proj_Trivial_quotient_final__rf_correct_representation 
    Trivial_quotient__effective_collection.

def Trivial_quotient__different_is_complete
  :=
  proj_Trivial_quotient_final__rf_different_is_complete 
    Trivial_quotient__effective_collection.

def Trivial_quotient__different_is_irreflexive
  :=
  proj_Trivial_quotient_final__rf_different_is_irreflexive 
    Trivial_quotient__effective_collection.

def Trivial_quotient__different_is_symmetric
  :=
  proj_Trivial_quotient_final__rf_different_is_symmetric 
    Trivial_quotient__effective_collection.

def Trivial_quotient__correct_rep_spec
  :=
  proj_Trivial_quotient_final__rf_correct_rep_spec 
    Trivial_quotient__effective_collection.

def Trivial_quotient__sample_is_reduced
  :=
  proj_Trivial_quotient_final__rf_sample_is_reduced 
    Trivial_quotient__effective_collection.

def Trivial_quotient__correct_invariant
  :=
  proj_Trivial_quotient_final__rf_correct_invariant 
    Trivial_quotient__effective_collection.

def Trivial_quotient__to_rep_reverses
  :=
  proj_Trivial_quotient_final__rf_to_rep_reverses 
    Trivial_quotient__effective_collection.

def Trivial_quotient__from_rep_is_surjective
  :=
  proj_Trivial_quotient_final__rf_from_rep_is_surjective 
    Trivial_quotient__effective_collection.

