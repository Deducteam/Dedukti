#NAME tautos.

def implications :
  dk_logic.eP 
    (dk_logic.forall basics.bool__t 
       (a:(cc.eT basics.bool__t) =>
        dk_logic.forall basics.bool__t 
          (b:(cc.eT basics.bool__t) =>
           dk_logic.imp (dk_logic.ebP a) 
             (dk_logic.imp (dk_logic.ebP b) (dk_logic.ebP a)))))
  :=
  zen.nnpp 
    (zen.forall basics.bool__t 
       (v_Vzb:(zen.term basics.bool__t) =>
        zen.forall basics.bool__t 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp (zen.triangle (focal.is_true v_Vzb)) 
             (zen.imp (zen.triangle (focal.is_true v_Vac)) 
                (zen.triangle (focal.is_true v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall basics.bool__t 
              (v_Vzb:(zen.term basics.bool__t) =>
               zen.forall basics.bool__t 
                 (v_Vac:(zen.term basics.bool__t) =>
                  zen.imp (zen.triangle (focal.is_true v_Vzb)) 
                    (zen.imp (zen.triangle (focal.is_true v_Vac)) 
                       (zen.triangle (focal.is_true v_Vzb)))))))) =>
     focal.zenon_focal_not_all_bool 
       (v_Vzb:(zen.term basics.bool__t) =>
        zen.forall basics.bool__t 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp (zen.triangle (focal.is_true v_Vzb)) 
             (zen.imp (zen.triangle (focal.is_true v_Vac)) 
                (zen.triangle (focal.is_true v_Vzb))))) 
       (v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.forall basics.bool__t 
                 (v_Vac:(zen.term basics.bool__t) =>
                  zen.imp (zen.triangle (focal.is_true basics.true)) 
                    (zen.imp (zen.triangle (focal.is_true v_Vac)) 
                       (zen.triangle (focal.is_true basics.true))))))) =>
        focal.zenon_focal_not_all_bool 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp (zen.triangle (focal.is_true basics.true)) 
             (zen.imp (zen.triangle (focal.is_true v_Vac)) 
                (zen.triangle (focal.is_true basics.true)))) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true basics.true)) 
                    (zen.imp (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.true)))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true basics.true)) 
             (zen.imp (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.true))) 
             (v_Vec:(zen.proof zen.True) =>
              v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.imp (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.true))))) =>
              zen.Rnotimply (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.true)) 
                (v_Vec:(zen.proof zen.True) =>
                 v_Vgc:(zen.proof (zen.not zen.True)) => zen.Rnottrue v_Vgc) 
                v_Vfc) v_Vdc) 
          (v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true basics.true)) 
                    (zen.imp (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.true)))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true basics.true)) 
             (zen.imp (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.true))) 
             (v_Vec:(zen.proof zen.True) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.imp (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.true))))) =>
              zen.Rnotimply (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.true)) 
                (v_Vjc:(zen.proof zen.False) =>
                 v_Vgc:(zen.proof (zen.not zen.True)) => zen.Rfalse v_Vjc) 
                v_Vic) v_Vhc) v_Vcc) 
       (v_Vkc:
        (zen.proof 
           (zen.not 
              (zen.forall basics.bool__t 
                 (v_Vac:(zen.term basics.bool__t) =>
                  zen.imp (zen.triangle (focal.is_true basics.false)) 
                    (zen.imp (zen.triangle (focal.is_true v_Vac)) 
                       (zen.triangle (focal.is_true basics.false))))))) =>
        focal.zenon_focal_not_all_bool 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp (zen.triangle (focal.is_true basics.false)) 
             (zen.imp (zen.triangle (focal.is_true v_Vac)) 
                (zen.triangle (focal.is_true basics.false)))) 
          (v_Vlc:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true basics.false)) 
                    (zen.imp (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.false)))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true basics.false)) 
             (zen.imp (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.false))) 
             (v_Vjc:(zen.proof zen.False) =>
              v_Vmc:
              (zen.proof 
                 (zen.not 
                    (zen.imp (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.false))))) =>
              zen.Rnotimply (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.false)) 
                (v_Vec:(zen.proof zen.True) =>
                 v_Vnc:(zen.proof (zen.not zen.False)) => zen.Rfalse v_Vjc) 
                v_Vmc) v_Vlc) 
          (v_Voc:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true basics.false)) 
                    (zen.imp (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.false)))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true basics.false)) 
             (zen.imp (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.false))) 
             (v_Vjc:(zen.proof zen.False) =>
              v_Vpc:
              (zen.proof 
                 (zen.not 
                    (zen.imp (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.false))))) =>
              zen.Rnotimply (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.false)) 
                (v_Vjc:(zen.proof zen.False) =>
                 v_Vnc:(zen.proof (zen.not zen.False)) => zen.Rfalse v_Vjc) 
                v_Vpc) v_Voc) v_Vkc) v_Vbc).

def and_or :
  dk_logic.eP 
    (dk_logic.forall basics.bool__t 
       (a:(cc.eT basics.bool__t) =>
        dk_logic.forall basics.bool__t 
          (b:(cc.eT basics.bool__t) =>
           dk_logic.imp (dk_logic.and (dk_logic.ebP a) (dk_logic.ebP b)) 
             (dk_logic.or (dk_logic.ebP a) (dk_logic.ebP b)))))
  :=
  zen.nnpp 
    (zen.forall basics.bool__t 
       (v_Vzb:(zen.term basics.bool__t) =>
        zen.forall basics.bool__t 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp 
             (zen.and (zen.triangle (focal.is_true v_Vzb)) 
                (zen.triangle (focal.is_true v_Vac))) 
             (zen.or (zen.triangle (focal.is_true v_Vzb)) 
                (zen.triangle (focal.is_true v_Vac)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall basics.bool__t 
              (v_Vzb:(zen.term basics.bool__t) =>
               zen.forall basics.bool__t 
                 (v_Vac:(zen.term basics.bool__t) =>
                  zen.imp 
                    (zen.and (zen.triangle (focal.is_true v_Vzb)) 
                       (zen.triangle (focal.is_true v_Vac))) 
                    (zen.or (zen.triangle (focal.is_true v_Vzb)) 
                       (zen.triangle (focal.is_true v_Vac)))))))) =>
     focal.zenon_focal_not_all_bool 
       (v_Vzb:(zen.term basics.bool__t) =>
        zen.forall basics.bool__t 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp 
             (zen.and (zen.triangle (focal.is_true v_Vzb)) 
                (zen.triangle (focal.is_true v_Vac))) 
             (zen.or (zen.triangle (focal.is_true v_Vzb)) 
                (zen.triangle (focal.is_true v_Vac))))) 
       (v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.forall basics.bool__t 
                 (v_Vac:(zen.term basics.bool__t) =>
                  zen.imp 
                    (zen.and (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true v_Vac))) 
                    (zen.or (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true v_Vac))))))) =>
        focal.zenon_focal_not_all_bool 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp 
             (zen.and (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true v_Vac))) 
             (zen.or (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true v_Vac)))) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.and (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.true))) 
                    (zen.or (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.true)))))) =>
           zen.Rnotimply 
             (zen.and (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.true))) 
             (zen.or (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.true))) 
             (v_Vec:
              (zen.proof 
                 (zen.and (zen.triangle (focal.is_true basics.true)) 
                    (zen.triangle (focal.is_true basics.true)))) =>
              v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.or (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.true))))) =>
              zen.Rnotor (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.true)) 
                (v_Vgc:(zen.proof (zen.not zen.True)) =>
                 v_Vgc:(zen.proof (zen.not zen.True)) =>
                 zen.Rand (zen.triangle (focal.is_true basics.true)) 
                   (zen.triangle (focal.is_true basics.true)) 
                   (v_Vhc:(zen.proof zen.True) =>
                    v_Vhc:(zen.proof zen.True) => zen.Rnottrue v_Vgc) v_Vec) 
                v_Vfc) v_Vdc) 
          (v_Vic:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.and (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.false))) 
                    (zen.or (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.false)))))) =>
           zen.Rnotimply 
             (zen.and (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.false))) 
             (zen.or (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.false))) 
             (v_Vjc:
              (zen.proof 
                 (zen.and (zen.triangle (focal.is_true basics.true)) 
                    (zen.triangle (focal.is_true basics.false)))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.or (zen.triangle (focal.is_true basics.true)) 
                       (zen.triangle (focal.is_true basics.false))))) =>
              zen.Rnotor (zen.triangle (focal.is_true basics.true)) 
                (zen.triangle (focal.is_true basics.false)) 
                (v_Vgc:(zen.proof (zen.not zen.True)) =>
                 v_Vlc:(zen.proof (zen.not zen.False)) =>
                 zen.Rand (zen.triangle (focal.is_true basics.true)) 
                   (zen.triangle (focal.is_true basics.false)) 
                   (v_Vhc:(zen.proof zen.True) =>
                    v_Vmc:(zen.proof zen.False) => zen.Rfalse v_Vmc) v_Vjc) 
                v_Vkc) v_Vic) v_Vcc) 
       (v_Vnc:
        (zen.proof 
           (zen.not 
              (zen.forall basics.bool__t 
                 (v_Vac:(zen.term basics.bool__t) =>
                  zen.imp 
                    (zen.and (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true v_Vac))) 
                    (zen.or (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true v_Vac))))))) =>
        focal.zenon_focal_not_all_bool 
          (v_Vac:(zen.term basics.bool__t) =>
           zen.imp 
             (zen.and (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true v_Vac))) 
             (zen.or (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true v_Vac)))) 
          (v_Voc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.and (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.true))) 
                    (zen.or (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.true)))))) =>
           zen.Rnotimply 
             (zen.and (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.true))) 
             (zen.or (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.true))) 
             (v_Vpc:
              (zen.proof 
                 (zen.and (zen.triangle (focal.is_true basics.false)) 
                    (zen.triangle (focal.is_true basics.true)))) =>
              v_Vqc:
              (zen.proof 
                 (zen.not 
                    (zen.or (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.true))))) =>
              zen.Rnotor (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.true)) 
                (v_Vlc:(zen.proof (zen.not zen.False)) =>
                 v_Vgc:(zen.proof (zen.not zen.True)) =>
                 zen.Rand (zen.triangle (focal.is_true basics.false)) 
                   (zen.triangle (focal.is_true basics.true)) 
                   (v_Vmc:(zen.proof zen.False) =>
                    v_Vhc:(zen.proof zen.True) => zen.Rfalse v_Vmc) v_Vpc) 
                v_Vqc) v_Voc) 
          (v_Vrc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.and (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.false))) 
                    (zen.or (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.false)))))) =>
           zen.Rnotimply 
             (zen.and (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.false))) 
             (zen.or (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.false))) 
             (v_Vsc:
              (zen.proof 
                 (zen.and (zen.triangle (focal.is_true basics.false)) 
                    (zen.triangle (focal.is_true basics.false)))) =>
              v_Vtc:
              (zen.proof 
                 (zen.not 
                    (zen.or (zen.triangle (focal.is_true basics.false)) 
                       (zen.triangle (focal.is_true basics.false))))) =>
              zen.Rnotor (zen.triangle (focal.is_true basics.false)) 
                (zen.triangle (focal.is_true basics.false)) 
                (v_Vlc:(zen.proof (zen.not zen.False)) =>
                 v_Vlc:(zen.proof (zen.not zen.False)) =>
                 zen.Rand (zen.triangle (focal.is_true basics.false)) 
                   (zen.triangle (focal.is_true basics.false)) 
                   (v_Vmc:(zen.proof zen.False) =>
                    v_Vmc:(zen.proof zen.False) => zen.Rfalse v_Vmc) v_Vsc) 
                v_Vtc) v_Vrc) v_Vnc) v_Vbc).

