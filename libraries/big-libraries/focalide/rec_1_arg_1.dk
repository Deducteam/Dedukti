#NAME rec_1_arg_1.

def Toto__f1 :
  x:(cc.eT basics.int__t) -> cc.eT basics.bool__t
  :=
  x:(cc.eT basics.int__t) => dk_bool.true.

def Toto__obl1 :
  dk_logic.eP 
    (dk_logic.forall basics.int__t 
       (i:(cc.eT basics.int__t) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (basics._equal_ basics.int__t i (dk_int.from_nat builtins.0)))) 
          (dk_logic.ebP 
             (basics._lt_ 
                (basics._dash_ i (dk_int.from_nat (builtins.S builtins.0))) i))))
  :=
  dk_builtins.magic_prove 
    (dk_logic.forall basics.int__t 
       (i:(cc.eT basics.int__t) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (basics._equal_ basics.int__t i (dk_int.from_nat builtins.0)))) 
          (dk_logic.ebP 
             (basics._lt_ 
                (basics._dash_ i (dk_int.from_nat (builtins.S builtins.0))) i)))).

def Toto__f2 :
  abst_f1:((cc.eT basics.int__t) -> cc.eT basics.bool__t) ->
  x:(cc.eT basics.int__t) -> cc.eT basics.bool__t
  :=
  abst_f1:((cc.eT basics.int__t) -> cc.eT basics.bool__t) =>
  x:(cc.eT basics.int__t) => basics._bar__bar_ (abst_f1 x) dk_bool.true.

def Toto__intle :
  abst_f2:((cc.eT basics.int__t) -> cc.eT basics.bool__t) ->
  a:(cc.eT basics.int__t) -> b:(cc.eT basics.int__t) -> cc.eT basics.bool__t
  :=
  abst_f2:((cc.eT basics.int__t) -> cc.eT basics.bool__t) =>
  a:(cc.eT basics.int__t) =>
  b:(cc.eT basics.int__t) =>
  basics._amper__amper_ (basics._gt__equal_ b (dk_int.from_nat builtins.0)) 
    (basics._amper__amper_ (basics._lt_ a b) 
       (abst_f2 (dk_int.from_nat (builtins.S builtins.0)))).

def Toto__f :
  abst_obl1:(dk_logic.eP 
               (dk_logic.forall basics.int__t 
                  (i:(cc.eT basics.int__t) =>
                   dk_logic.imp 
                     (dk_logic.ebP 
                        (basics._tilda__tilda_ 
                           (basics._equal_ basics.int__t i 
                              (dk_int.from_nat builtins.0)))) 
                     (dk_logic.ebP 
                        (basics._lt_ 
                           (basics._dash_ i 
                              (dk_int.from_nat (builtins.S builtins.0))) i))))) ->
  abst_f2:((cc.eT basics.int__t) -> cc.eT basics.bool__t) ->
  (cc.eT basics.int__t) -> cc.eT basics.int__t.

[x, abst_f2, abst_obl1]
  Toto__f abst_obl1 abst_f2 x
  -->
  dk_bool.ite basics.int__t 
    (basics._equal_ basics.int__t x (dk_int.from_nat builtins.0)) 
    (dk_int.from_nat 
       (builtins.S 
          (builtins.S 
             (builtins.S 
                (builtins.S 
                   (builtins.S 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))) 
    ((abst_obl1:
      (dk_logic.eP 
         (dk_logic.forall basics.int__t 
            (i:(cc.eT basics.int__t) =>
             dk_logic.imp 
               (dk_logic.ebP 
                  (basics._tilda__tilda_ 
                     (basics._equal_ basics.int__t i 
                        (dk_int.from_nat builtins.0)))) 
               (dk_logic.ebP 
                  (basics._lt_ 
                     (basics._dash_ i 
                        (dk_int.from_nat (builtins.S builtins.0))) i))))) =>
      abst_f2:((cc.eT basics.int__t) -> cc.eT basics.bool__t) =>
      x:(cc.eT basics.int__t) =>
      dk_builtins.call_by_value basics.int__t basics.int__t 
        (Toto__f abst_obl1 abst_f2) x) abst_obl1 abst_f2 
       (basics._dash_ x (dk_int.from_nat (builtins.S builtins.0)))).

