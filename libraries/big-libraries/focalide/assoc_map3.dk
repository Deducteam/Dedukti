#NAME assoc_map3.

__pair_list_t__t : __var_a:cc.uT -> __var_b:cc.uT -> Type.

def pair_list_t__t : __var_a:cc.uT -> __var_b:cc.uT -> cc.uT.

[__var_b, __var_a]
  cc.eT (pair_list_t__t __var_a __var_b) --> __pair_list_t__t __var_a __var_b.

Nil :
  __var_a:cc.uT -> __var_b:cc.uT -> cc.eT (pair_list_t__t __var_a __var_b).

Node :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  (cc.eT __var_a) ->
  (cc.eT __var_b) ->
  (cc.eT (pair_list_t__t __var_a __var_b)) ->
  cc.eT (pair_list_t__t __var_a __var_b).

def match__Nil :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (pair_list_t__t __var_a __var_b)) ->
  (cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, Ret_type, __var_b, __var_a]
  match__Nil __var_a __var_b Ret_type (Nil __var_a __var_b) pattern default
  -->
  pattern.

[default, pattern, x_2_, x_1_, x_0_, Ret_type, __var_b, __var_a]
  match__Nil __var_a __var_b Ret_type (Node __var_a __var_b x_0_ x_1_ x_2_) 
    pattern default
  -->
  default.

def match__Node :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (pair_list_t__t __var_a __var_b)) ->
  ((cc.eT __var_a) ->
   (cc.eT __var_b) ->
   (cc.eT (pair_list_t__t __var_a __var_b)) -> cc.eT Ret_type) ->
  (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, Ret_type, __var_b, __var_a]
  match__Node __var_a __var_b Ret_type (Nil __var_a __var_b) pattern default
  -->
  default.

[default, pattern, x_2_, x_1_, x_0_, Ret_type, __var_b, __var_a]
  match__Node __var_a __var_b Ret_type (Node __var_a __var_b x_0_ x_1_ x_2_) 
    pattern default
  -->
  pattern x_0_ x_1_ x_2_.

def call_by_value_pair_list_t__t :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  R:cc.uT ->
  ((cc.eT (pair_list_t__t __var_a __var_b)) -> cc.eT R) ->
  (cc.eT (pair_list_t__t __var_a __var_b)) -> cc.eT R.

[f, R, __var_b, __var_a]
  dk_builtins.call_by_value (pair_list_t__t __var_a __var_b) R f (Nil _ _)
  -->
  f (Nil __var_a __var_b).

[x_2_, x_1_, x_0_, f, R, __var_b, __var_a]
  dk_builtins.call_by_value (pair_list_t__t __var_a __var_b) R f (Node _ _ 
    x_0_ x_1_ x_2_)
  -->
  f (Node __var_a __var_b x_0_ x_1_ x_2_).

__option_t__t : __var_a:cc.uT -> Type.

def option_t__t : __var_a:cc.uT -> cc.uT.

[__var_a] cc.eT (option_t__t __var_a) --> __option_t__t __var_a.

None : __var_a:cc.uT -> cc.eT (option_t__t __var_a).

Some : __var_a:cc.uT -> (cc.eT __var_a) -> cc.eT (option_t__t __var_a).

def match__None :
  __var_a:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (option_t__t __var_a)) ->
  (cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, Ret_type, __var_a]
  match__None __var_a Ret_type (None __var_a) pattern default --> pattern.

[default, pattern, x_0_, Ret_type, __var_a]
  match__None __var_a Ret_type (Some __var_a x_0_) pattern default
  -->
  default.

def match__Some :
  __var_a:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (option_t__t __var_a)) ->
  ((cc.eT __var_a) -> cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, Ret_type, __var_a]
  match__Some __var_a Ret_type (None __var_a) pattern default --> default.

[default, pattern, x_0_, Ret_type, __var_a]
  match__Some __var_a Ret_type (Some __var_a x_0_) pattern default
  -->
  pattern x_0_.

def call_by_value_option_t__t :
  __var_a:cc.uT ->
  R:cc.uT ->
  ((cc.eT (option_t__t __var_a)) -> cc.eT R) ->
  (cc.eT (option_t__t __var_a)) -> cc.eT R.

[f, R, __var_a]
  dk_builtins.call_by_value (option_t__t __var_a) R f (None _)
  -->
  f (None __var_a).

[x_0_, f, R, __var_a]
  dk_builtins.call_by_value (option_t__t __var_a) R f (Some _ x_0_)
  -->
  f (Some __var_a x_0_).

def OptComparable__eq :
  _p_C_T:cc.uT ->
  _p_C_eq:((cc.eT _p_C_T) -> (cc.eT _p_C_T) -> cc.eT basics.bool__t) ->
  ox:(cc.eT (option_t__t _p_C_T)) ->
  oy:(cc.eT (option_t__t _p_C_T)) -> cc.eT basics.bool__t
  :=
  _p_C_T:cc.uT =>
  _p_C_eq:((cc.eT _p_C_T) -> (cc.eT _p_C_T) -> cc.eT basics.bool__t) =>
  ox:(cc.eT (option_t__t _p_C_T)) =>
  oy:(cc.eT (option_t__t _p_C_T)) =>
  match__None _p_C_T basics.bool__t ox 
    (match__None _p_C_T basics.bool__t oy dk_bool.true 
       (match__Some _p_C_T basics.bool__t oy 
          (pattern_var_0_:(cc.eT _p_C_T) => dk_bool.false) 
          (dk_fail.fail basics.bool__t))) 
    (match__Some _p_C_T basics.bool__t ox 
       (pattern_var_0_:(cc.eT _p_C_T) =>
        (x:(cc.eT _p_C_T) =>
         match__None _p_C_T basics.bool__t oy dk_bool.false 
           (match__Some _p_C_T basics.bool__t oy 
              (pattern_var_0_0:(cc.eT _p_C_T) =>
               (y:(cc.eT _p_C_T) => _p_C_eq x y) pattern_var_0_0) 
              (dk_fail.fail basics.bool__t))) pattern_var_0_) 
       (dk_fail.fail basics.bool__t)).

def OptComparable__none :
  _p_C_T:cc.uT -> cc.eT (option_t__t _p_C_T)
  :=
  _p_C_T:cc.uT => None _p_C_T.

def OptComparable__some :
  _p_C_T:cc.uT -> v:(cc.eT _p_C_T) -> cc.eT (option_t__t _p_C_T)
  :=
  _p_C_T:cc.uT => v:(cc.eT _p_C_T) => Some _p_C_T v.

def OptComparable__eq_reflexive :
  _p_C_T:cc.uT ->
  abst_T:cc.uT ->
  abst_eq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => dk_logic.ebP (abst_eq x x)))
  :=
  _p_C_T:cc.uT =>
  abst_T:cc.uT =>
  abst_eq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => dk_logic.ebP (abst_eq x x))).

def OptComparable__eq_symmetric :
  _p_C_T:cc.uT ->
  abst_T:cc.uT ->
  abst_eq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_eq x y)) 
             (dk_logic.ebP (abst_eq y x)))))
  :=
  _p_C_T:cc.uT =>
  abst_T:cc.uT =>
  abst_eq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_eq x y)) 
             (dk_logic.ebP (abst_eq y x))))).

def OptComparable__eq_transitive :
  _p_C_T:cc.uT ->
  abst_T:cc.uT ->
  abst_eq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_eq x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_eq y z)) 
                   (dk_logic.ebP (abst_eq x z)))))))
  :=
  _p_C_T:cc.uT =>
  abst_T:cc.uT =>
  abst_eq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_eq x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_eq y z)) 
                   (dk_logic.ebP (abst_eq x z))))))).

AssocMap__me_as_species :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) -> Type.

AssocMap__mk_record :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  AssocMap__rf_T:cc.uT ->
  AssocMap__rf_add:((cc.eT Key_T) ->
                    (cc.eT Value_T) ->
                    (cc.eT AssocMap__rf_T) -> cc.eT AssocMap__rf_T) ->
  AssocMap__rf_empty:(cc.eT AssocMap__rf_T) ->
  AssocMap__rf_find:((cc.eT Key_T) ->
                     (cc.eT AssocMap__rf_T) -> cc.eT OptValue_T) ->
  AssocMap__rf_find_added_not_fails:(dk_logic.eP 
                                       (dk_logic.forall Key_T 
                                          (k:(cc.eT Key_T) =>
                                           dk_logic.forall Value_T 
                                             (v:(cc.eT Value_T) =>
                                              dk_logic.forall AssocMap__rf_T 
                                                (m1:(cc.eT AssocMap__rf_T) =>
                                                 dk_logic.forall 
                                                   AssocMap__rf_T 
                                                   (m2:
                                                    (cc.eT AssocMap__rf_T) =>
                                                    dk_logic.imp 
                                                      (dk_logic.ebP 
                                                         (basics._equal_ 
                                                            AssocMap__rf_T 
                                                            m2 
                                                            (AssocMap__rf_add 
                                                               k v m1))) 
                                                      (dk_logic.not 
                                                         (dk_logic.ebP 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__rf_find 
                                                                  k m2) 
                                                               _p_OptValue_none))))))))) ->
  AssocMap__rf_find_same_key_same_value:(dk_logic.eP 
                                           (dk_logic.forall Key_T 
                                              (k1:(cc.eT Key_T) =>
                                               dk_logic.forall Key_T 
                                                 (k2:(cc.eT Key_T) =>
                                                  dk_logic.forall 
                                                    AssocMap__rf_T 
                                                    (m:
                                                     (cc.eT AssocMap__rf_T) =>
                                                     dk_logic.imp 
                                                       (dk_logic.ebP 
                                                          (_p_Key_eq k1 k2)) 
                                                       (dk_logic.ebP 
                                                          (_p_OptValue_eq 
                                                             (AssocMap__rf_find 
                                                                k1 m) 
                                                             (AssocMap__rf_find 
                                                                k2 m)))))))) ->
  AssocMap__rf_find_spec:(dk_logic.eP 
                            (dk_logic.forall AssocMap__rf_T 
                               (m:(cc.eT AssocMap__rf_T) =>
                                dk_logic.forall Key_T 
                                  (s:(cc.eT Key_T) =>
                                   dk_logic.forall Key_T 
                                     (k:(cc.eT Key_T) =>
                                      dk_logic.forall Value_T 
                                        (v:(cc.eT Value_T) =>
                                         dk_logic.eqv 
                                           (dk_logic.or 
                                              (dk_logic.ebP 
                                                 (basics._equal_ OptValue_T 
                                                    (AssocMap__rf_find s m) 
                                                    (_p_OptValue_some v))) 
                                              (dk_logic.ebP (_p_Key_eq s k))) 
                                           (dk_logic.ebP 
                                              (basics._equal_ OptValue_T 
                                                 (AssocMap__rf_find s 
                                                    (AssocMap__rf_add k v m)) 
                                                 (_p_OptValue_some v))))))))) ->
  AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq _p_OptValue_eq 
    _p_OptValue_none _p_OptValue_some.

def proj_AssocMap__rf_T :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  record:(AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq 
            _p_OptValue_eq _p_OptValue_none _p_OptValue_some) ->
  cc.uT.

[AssocMap__rf_T]
  proj_AssocMap__rf_T _ _ _ _ _ _ _ (AssocMap__mk_record _ _ _ _ _ _ _ 
    AssocMap__rf_T _ _ _ _ _ _)
  -->
  AssocMap__rf_T.

def proj_AssocMap__rf_add :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  record:(AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq 
            _p_OptValue_eq _p_OptValue_none _p_OptValue_some) ->
  (cc.eT Key_T) ->
  (cc.eT Value_T) ->
  (cc.eT 
     (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq _p_OptValue_eq 
        _p_OptValue_none _p_OptValue_some record)) ->
  cc.eT 
    (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq _p_OptValue_eq 
       _p_OptValue_none _p_OptValue_some record).

[AssocMap__rf_add]
  proj_AssocMap__rf_add _ _ _ _ _ _ _ (AssocMap__mk_record _ _ _ _ _ _ _ _ 
    AssocMap__rf_add _ _ _ _ _)
  -->
  AssocMap__rf_add.

def proj_AssocMap__rf_empty :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  record:(AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq 
            _p_OptValue_eq _p_OptValue_none _p_OptValue_some) ->
  cc.eT 
    (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq _p_OptValue_eq 
       _p_OptValue_none _p_OptValue_some record).

[AssocMap__rf_empty]
  proj_AssocMap__rf_empty _ _ _ _ _ _ _ (AssocMap__mk_record _ _ _ _ _ _ _ _ 
    _ AssocMap__rf_empty _ _ _ _)
  -->
  AssocMap__rf_empty.

def proj_AssocMap__rf_find :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  record:(AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq 
            _p_OptValue_eq _p_OptValue_none _p_OptValue_some) ->
  (cc.eT Key_T) ->
  (cc.eT 
     (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq _p_OptValue_eq 
        _p_OptValue_none _p_OptValue_some record)) ->
  cc.eT OptValue_T.

[AssocMap__rf_find]
  proj_AssocMap__rf_find _ _ _ _ _ _ _ (AssocMap__mk_record _ _ _ _ _ _ _ _ 
    _ _ AssocMap__rf_find _ _ _)
  -->
  AssocMap__rf_find.

def proj_AssocMap__rf_find_added_not_fails :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  record:(AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq 
            _p_OptValue_eq _p_OptValue_none _p_OptValue_some) ->
  dk_logic.eP 
    (dk_logic.forall Key_T 
       (k:(cc.eT Key_T) =>
        dk_logic.forall Value_T 
          (v:(cc.eT Value_T) =>
           dk_logic.forall 
             (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
                _p_OptValue_eq _p_OptValue_none _p_OptValue_some record) 
             (m1:
              (cc.eT 
                 (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
                    _p_OptValue_eq _p_OptValue_none _p_OptValue_some record)) =>
              dk_logic.forall 
                (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
                   _p_OptValue_eq _p_OptValue_none _p_OptValue_some record) 
                (m2:
                 (cc.eT 
                    (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
                       _p_OptValue_eq _p_OptValue_none _p_OptValue_some 
                       record)) =>
                 dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ 
                         (proj_AssocMap__rf_T Key_T Value_T OptValue_T 
                            _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                            _p_OptValue_some record) m2 
                         (proj_AssocMap__rf_add Key_T Value_T OptValue_T 
                            _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                            _p_OptValue_some record k v m1))) 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (_p_OptValue_eq 
                            (proj_AssocMap__rf_find Key_T Value_T OptValue_T 
                               _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                               _p_OptValue_some record k m2) _p_OptValue_none)))))))).

[AssocMap__rf_find_added_not_fails]
  proj_AssocMap__rf_find_added_not_fails _ _ _ _ _ _ _ 
    (AssocMap__mk_record _ _ _ _ _ _ _ _ _ _ _ 
    AssocMap__rf_find_added_not_fails _ _)
  -->
  AssocMap__rf_find_added_not_fails.

def proj_AssocMap__rf_find_same_key_same_value :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  record:(AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq 
            _p_OptValue_eq _p_OptValue_none _p_OptValue_some) ->
  dk_logic.eP 
    (dk_logic.forall Key_T 
       (k1:(cc.eT Key_T) =>
        dk_logic.forall Key_T 
          (k2:(cc.eT Key_T) =>
           dk_logic.forall 
             (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
                _p_OptValue_eq _p_OptValue_none _p_OptValue_some record) 
             (m:
              (cc.eT 
                 (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
                    _p_OptValue_eq _p_OptValue_none _p_OptValue_some record)) =>
              dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
                (dk_logic.ebP 
                   (_p_OptValue_eq 
                      (proj_AssocMap__rf_find Key_T Value_T OptValue_T 
                         _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                         _p_OptValue_some record k1 m) 
                      (proj_AssocMap__rf_find Key_T Value_T OptValue_T 
                         _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                         _p_OptValue_some record k2 m))))))).

[AssocMap__rf_find_same_key_same_value]
  proj_AssocMap__rf_find_same_key_same_value _ _ _ _ _ _ _ 
    (AssocMap__mk_record _ _ _ _ _ _ _ _ _ _ _ _ 
    AssocMap__rf_find_same_key_same_value _)
  -->
  AssocMap__rf_find_same_key_same_value.

def proj_AssocMap__rf_find_spec :
  Key_T:cc.uT ->
  Value_T:cc.uT ->
  OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT Key_T) -> (cc.eT Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT OptValue_T) ->
                  (cc.eT OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT OptValue_T) ->
  _p_OptValue_some:((cc.eT Value_T) -> cc.eT OptValue_T) ->
  record:(AssocMap__me_as_species Key_T Value_T OptValue_T _p_Key_eq 
            _p_OptValue_eq _p_OptValue_none _p_OptValue_some) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
          _p_OptValue_eq _p_OptValue_none _p_OptValue_some record) 
       (m:
        (cc.eT 
           (proj_AssocMap__rf_T Key_T Value_T OptValue_T _p_Key_eq 
              _p_OptValue_eq _p_OptValue_none _p_OptValue_some record)) =>
        dk_logic.forall Key_T 
          (s:(cc.eT Key_T) =>
           dk_logic.forall Key_T 
             (k:(cc.eT Key_T) =>
              dk_logic.forall Value_T 
                (v:(cc.eT Value_T) =>
                 dk_logic.eqv 
                   (dk_logic.or 
                      (dk_logic.ebP 
                         (basics._equal_ OptValue_T 
                            (proj_AssocMap__rf_find Key_T Value_T OptValue_T 
                               _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                               _p_OptValue_some record s m) 
                            (_p_OptValue_some v))) 
                      (dk_logic.ebP (_p_Key_eq s k))) 
                   (dk_logic.ebP 
                      (basics._equal_ OptValue_T 
                         (proj_AssocMap__rf_find Key_T Value_T OptValue_T 
                            _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                            _p_OptValue_some record s 
                            (proj_AssocMap__rf_add Key_T Value_T OptValue_T 
                               _p_Key_eq _p_OptValue_eq _p_OptValue_none 
                               _p_OptValue_some record k v m)) 
                         (_p_OptValue_some v)))))))).

[AssocMap__rf_find_spec]
  proj_AssocMap__rf_find_spec _ _ _ _ _ _ _ (AssocMap__mk_record _ _ _ _ _ _ 
    _ _ _ _ _ _ _ AssocMap__rf_find_spec)
  -->
  AssocMap__rf_find_spec.

def AssocMap__add :
  _p_Key_T:cc.uT ->
  _p_Value_T:cc.uT ->
  k:(cc.eT _p_Key_T) ->
  v:(cc.eT _p_Value_T) ->
  m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) ->
  cc.eT (pair_list_t__t _p_Key_T _p_Value_T)
  :=
  _p_Key_T:cc.uT =>
  _p_Value_T:cc.uT =>
  k:(cc.eT _p_Key_T) =>
  v:(cc.eT _p_Value_T) =>
  m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
  Node _p_Key_T _p_Value_T k v m.

def AssocMap__empty :
  _p_Key_T:cc.uT ->
  _p_Value_T:cc.uT -> cc.eT (pair_list_t__t _p_Key_T _p_Value_T)
  :=
  _p_Key_T:cc.uT => _p_Value_T:cc.uT => Nil _p_Key_T _p_Value_T.

def AssocMap__find :
  _p_OptValue_T:cc.uT ->
  _p_Key_T:cc.uT ->
  _p_Value_T:cc.uT ->
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT _p_OptValue_T) ->
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) ->
  (cc.eT _p_Key_T) ->
  (cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) -> cc.eT _p_OptValue_T.

[m, k, _p_OptValue_some, _p_OptValue_none, _p_Key_eq, _p_Value_T, _p_Key_T, _p_OptValue_T]
  AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T _p_Key_eq 
    _p_OptValue_none _p_OptValue_some k m
  -->
  match__Nil _p_Key_T _p_Value_T _p_OptValue_T m _p_OptValue_none 
    (match__Node _p_Key_T _p_Value_T _p_OptValue_T m 
       (pattern_var_0_:(cc.eT _p_Key_T) =>
        pattern_var_1_:(cc.eT _p_Value_T) =>
        pattern_var_2_:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
        (kcur:(cc.eT _p_Key_T) =>
         (v:(cc.eT _p_Value_T) =>
          (q:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
           dk_bool.ite _p_OptValue_T (_p_Key_eq kcur k) (_p_OptValue_some v) 
             ((_p_OptValue_T:cc.uT =>
               _p_Key_T:cc.uT =>
               _p_Value_T:cc.uT =>
               _p_Key_eq:
               ((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) =>
               _p_OptValue_none:(cc.eT _p_OptValue_T) =>
               _p_OptValue_some:
               ((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) =>
               k:(cc.eT _p_Key_T) =>
               m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
               dk_builtins.call_by_value 
                 (pair_list_t__t _p_Key_T _p_Value_T) _p_OptValue_T 
                 (dk_builtins.call_by_value _p_Key_T 
                    (cc.Arrow (pair_list_t__t _p_Key_T _p_Value_T) 
                       _p_OptValue_T) 
                    (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                       _p_Key_eq _p_OptValue_none _p_OptValue_some) k) m) 
                _p_OptValue_T _p_Key_T _p_Value_T _p_Key_eq _p_OptValue_none 
                _p_OptValue_some k q)) pattern_var_2_) pattern_var_1_) 
          pattern_var_0_) (dk_fail.fail _p_OptValue_T)).

def AssocMap__find_added_not_fails :
  _p_Key_T:cc.uT ->
  _p_Value_T:cc.uT ->
  _p_OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) ->
  _p_Key_eq_reflexive:(dk_logic.eP 
                         (dk_logic.forall _p_Key_T 
                            (x:(cc.eT _p_Key_T) =>
                             dk_logic.ebP (_p_Key_eq x x)))) ->
  _p_OptValue_eq:((cc.eT _p_OptValue_T) ->
                  (cc.eT _p_OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT _p_OptValue_T) ->
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) ->
  _p_OptValue_eq_reflexive:(dk_logic.eP 
                              (dk_logic.forall _p_OptValue_T 
                                 (x:(cc.eT _p_OptValue_T) =>
                                  dk_logic.ebP (_p_OptValue_eq x x)))) ->
  _p_OptValue_eq_symmetric:(dk_logic.eP 
                              (dk_logic.forall _p_OptValue_T 
                                 (x:(cc.eT _p_OptValue_T) =>
                                  dk_logic.forall _p_OptValue_T 
                                    (y:(cc.eT _p_OptValue_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_OptValue_eq x y)) 
                                       (dk_logic.ebP (_p_OptValue_eq y x)))))) ->
  _p_OptValue_eq_transitive:(dk_logic.eP 
                               (dk_logic.forall _p_OptValue_T 
                                  (x:(cc.eT _p_OptValue_T) =>
                                   dk_logic.forall _p_OptValue_T 
                                     (y:(cc.eT _p_OptValue_T) =>
                                      dk_logic.forall _p_OptValue_T 
                                        (z:(cc.eT _p_OptValue_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP (_p_OptValue_eq x y)) 
                                           (dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (_p_OptValue_eq y z)) 
                                              (dk_logic.ebP 
                                                 (_p_OptValue_eq x z)))))))) ->
  _p_OptValue_none_different_some:(dk_logic.eP 
                                     (dk_logic.forall _p_Value_T 
                                        (v:(cc.eT _p_Value_T) =>
                                         dk_logic.not 
                                           (dk_logic.ebP 
                                              (_p_OptValue_eq 
                                                 (_p_OptValue_some v) 
                                                 _p_OptValue_none))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_Key_T 
       (k:(cc.eT _p_Key_T) =>
        dk_logic.forall _p_Value_T 
          (v:(cc.eT _p_Value_T) =>
           dk_logic.forall (pair_list_t__t _p_Key_T _p_Value_T) 
             (m1:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
              dk_logic.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                (m2:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
                 dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ (pair_list_t__t _p_Key_T _p_Value_T) 
                         m2 (AssocMap__add _p_Key_T _p_Value_T k v m1))) 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (_p_OptValue_eq 
                            (AssocMap__find _p_OptValue_T _p_Key_T 
                               _p_Value_T _p_Key_eq _p_OptValue_none 
                               _p_OptValue_some k m2) _p_OptValue_none))))))))
  :=
  _p_Key_T:cc.uT =>
  _p_Value_T:cc.uT =>
  _p_OptValue_T:cc.uT =>
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) =>
  _p_Key_eq_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_Key_T 
        (x:(cc.eT _p_Key_T) => dk_logic.ebP (_p_Key_eq x x)))) =>
  _p_OptValue_eq:
  ((cc.eT _p_OptValue_T) -> (cc.eT _p_OptValue_T) -> cc.eT basics.bool__t) =>
  _p_OptValue_none:(cc.eT _p_OptValue_T) =>
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) =>
  _p_OptValue_eq_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) => dk_logic.ebP (_p_OptValue_eq x x)))) =>
  _p_OptValue_eq_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) =>
         dk_logic.forall _p_OptValue_T 
           (y:(cc.eT _p_OptValue_T) =>
            dk_logic.imp (dk_logic.ebP (_p_OptValue_eq x y)) 
              (dk_logic.ebP (_p_OptValue_eq y x)))))) =>
  _p_OptValue_eq_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) =>
         dk_logic.forall _p_OptValue_T 
           (y:(cc.eT _p_OptValue_T) =>
            dk_logic.forall _p_OptValue_T 
              (z:(cc.eT _p_OptValue_T) =>
               dk_logic.imp (dk_logic.ebP (_p_OptValue_eq x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_OptValue_eq y z)) 
                    (dk_logic.ebP (_p_OptValue_eq x z)))))))) =>
  _p_OptValue_none_different_some:
  (dk_logic.eP 
     (dk_logic.forall _p_Value_T 
        (v:(cc.eT _p_Value_T) =>
         dk_logic.not 
           (dk_logic.ebP 
              (_p_OptValue_eq (_p_OptValue_some v) _p_OptValue_none))))) =>
  (__A_1_LEMMA:
   (k:(cc.eT _p_Key_T) ->
    v:(cc.eT _p_Value_T) ->
    m1:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) ->
    m2:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) ->
    H1:(dk_logic.eP 
          (dk_logic.ebP 
             (basics._equal_ (pair_list_t__t _p_Key_T _p_Value_T) m2 
                (AssocMap__add _p_Key_T _p_Value_T k v m1)))) ->
    dk_logic.eP 
      (dk_logic.not 
         (dk_logic.ebP 
            (_p_OptValue_eq 
               (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T _p_Key_eq 
                  _p_OptValue_none _p_OptValue_some k m2) _p_OptValue_none)))) =>
   zen.nnpp 
     (zen.forall _p_Key_T 
        (v_Vzb:(zen.term _p_Key_T) =>
         zen.forall _p_Value_T 
           (v_Vac:(zen.term _p_Value_T) =>
            zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
              (v_Vbc:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
               zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                 (v_Vcc:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ 
                             (pair_list_t__t _p_Key_T _p_Value_T) v_Vcc 
                             (AssocMap__add _p_Key_T _p_Value_T v_Vzb v_Vac 
                                v_Vbc)))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_OptValue_eq 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some v_Vzb v_Vcc) 
                                _p_OptValue_none))))))))) 
     (v_Vdc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_Key_T 
               (v_Vzb:(zen.term _p_Key_T) =>
                zen.forall _p_Value_T 
                  (v_Vac:(zen.term _p_Value_T) =>
                   zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                     (v_Vbc:
                      (zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                      zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                        (v_Vcc:
                         (zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ 
                                    (pair_list_t__t _p_Key_T _p_Value_T) 
                                    v_Vcc 
                                    (AssocMap__add _p_Key_T _p_Value_T v_Vzb 
                                       v_Vac v_Vbc)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          v_Vzb v_Vcc) _p_OptValue_none))))))))))) =>
      zen.Raxiom 
        (zen.forall _p_Key_T 
           (v_Vzb:(zen.term _p_Key_T) =>
            zen.forall _p_Value_T 
              (v_Vac:(zen.term _p_Value_T) =>
               zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                 (v_Vbc:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                  zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                    (v_Vcc:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ 
                                (pair_list_t__t _p_Key_T _p_Value_T) v_Vcc 
                                (AssocMap__add _p_Key_T _p_Value_T v_Vzb 
                                   v_Vac v_Vbc)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_OptValue_eq 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some v_Vzb v_Vcc) 
                                   _p_OptValue_none))))))))) __A_1_LEMMA 
        v_Vdc)) 
    (k:(cc.eT _p_Key_T) =>
     v:(cc.eT _p_Value_T) =>
     m1:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
     m2:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
     H1:
     (dk_logic.eP 
        (dk_logic.ebP 
           (basics._equal_ (pair_list_t__t _p_Key_T _p_Value_T) m2 
              (AssocMap__add _p_Key_T _p_Value_T k v m1)))) =>
     (__A_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (_p_OptValue_eq 
               (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T _p_Key_eq 
                  _p_OptValue_none _p_OptValue_some k m2) 
               (_p_OptValue_some v)))) =>
      (__A_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.not 
             (dk_logic.ebP 
                (_p_OptValue_eq _p_OptValue_none (_p_OptValue_some v))))) =>
       zen.nnpp 
         (zen.not 
            (zen.triangle 
               (focal.is_true 
                  (_p_OptValue_eq 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k m2) 
                     _p_OptValue_none)))) 
         (v_Vkc:
          (zen.proof 
             (zen.not 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_OptValue_eq 
                            (AssocMap__find _p_OptValue_T _p_Key_T 
                               _p_Value_T _p_Key_eq _p_OptValue_none 
                               _p_OptValue_some k m2) _p_OptValue_none)))))) =>
          zen.Rnotnot 
            (zen.triangle 
               (focal.is_true 
                  (_p_OptValue_eq 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k m2) 
                     _p_OptValue_none))) 
            (v_Vlc:
             (zen.proof 
                (zen.triangle 
                   (focal.is_true 
                      (_p_OptValue_eq 
                         (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                            _p_Key_eq _p_OptValue_none _p_OptValue_some k m2) 
                         _p_OptValue_none)))) =>
             zen.Rall _p_OptValue_T 
               (v_Vmc:(zen.term _p_OptValue_T) =>
                zen.forall _p_OptValue_T 
                  (v_Vnc:(zen.term _p_OptValue_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true (_p_OptValue_eq v_Vmc v_Vnc))) 
                     (zen.triangle 
                        (focal.is_true (_p_OptValue_eq v_Vnc v_Vmc))))) 
               (_p_OptValue_some v) 
               (v_Voc:
                (zen.proof 
                   (zen.forall _p_OptValue_T 
                      (v_Vnc:(zen.term _p_OptValue_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_OptValue_eq (_p_OptValue_some v) v_Vnc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_OptValue_eq v_Vnc (_p_OptValue_some v))))))) =>
                zen.Rall _p_OptValue_T 
                  (v_Vnc:(zen.term _p_OptValue_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_OptValue_eq (_p_OptValue_some v) v_Vnc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_OptValue_eq v_Vnc (_p_OptValue_some v))))) 
                  _p_OptValue_none 
                  (v_Vpc:
                   (zen.proof 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_OptValue_eq (_p_OptValue_some v) 
                                  _p_OptValue_none))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_OptValue_eq _p_OptValue_none 
                                  (_p_OptValue_some v)))))) =>
                   zen.Rimply 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_OptValue_eq (_p_OptValue_some v) 
                              _p_OptValue_none))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_OptValue_eq _p_OptValue_none 
                              (_p_OptValue_some v)))) 
                     (v_Vqc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_OptValue_eq (_p_OptValue_some v) 
                                     _p_OptValue_none))))) =>
                      zen.Rcut 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_OptValue_T 
                                    (_p_OptValue_some v) 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k m2)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq (_p_OptValue_some v) 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          k m2)))))) 
                        (v_Vrc:
                         (zen.proof 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_OptValue_T 
                                        (_p_OptValue_some v) 
                                        (AssocMap__find _p_OptValue_T 
                                           _p_Key_T _p_Value_T _p_Key_eq 
                                           _p_OptValue_none _p_OptValue_some 
                                           k m2)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_OptValue_eq (_p_OptValue_some v) 
                                           (AssocMap__find _p_OptValue_T 
                                              _p_Key_T _p_Value_T _p_Key_eq 
                                              _p_OptValue_none 
                                              _p_OptValue_some k m2))))))) =>
                         zen.Rand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_OptValue_T 
                                    (_p_OptValue_some v) 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k m2)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq (_p_OptValue_some v) 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          k m2))))) 
                           (v_Vsc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_OptValue_T 
                                        (_p_OptValue_some v) 
                                        (AssocMap__find _p_OptValue_T 
                                           _p_Key_T _p_Value_T _p_Key_eq 
                                           _p_OptValue_none _p_OptValue_some 
                                           k m2))))) =>
                            v_Vtc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_OptValue_eq (_p_OptValue_some v) 
                                           (AssocMap__find _p_OptValue_T 
                                              _p_Key_T _p_Value_T _p_Key_eq 
                                              _p_OptValue_none 
                                              _p_OptValue_some k m2)))))) =>
                            zen.Rall _p_OptValue_T 
                              (v_Vmc:(zen.term _p_OptValue_T) =>
                               zen.forall _p_OptValue_T 
                                 (v_Vnc:(zen.term _p_OptValue_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq v_Vmc v_Vnc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq v_Vnc v_Vmc))))) 
                              (AssocMap__find _p_OptValue_T _p_Key_T 
                                 _p_Value_T _p_Key_eq _p_OptValue_none 
                                 _p_OptValue_some k m2) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.forall _p_OptValue_T 
                                     (v_Vnc:(zen.term _p_OptValue_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_OptValue_eq 
                                                 (AssocMap__find 
                                                    _p_OptValue_T _p_Key_T 
                                                    _p_Value_T _p_Key_eq 
                                                    _p_OptValue_none 
                                                    _p_OptValue_some k m2) 
                                                 v_Vnc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_OptValue_eq v_Vnc 
                                                 (AssocMap__find 
                                                    _p_OptValue_T _p_Key_T 
                                                    _p_Value_T _p_Key_eq 
                                                    _p_OptValue_none 
                                                    _p_OptValue_some k m2))))))) =>
                               zen.Rall _p_OptValue_T 
                                 (v_Vnc:(zen.term _p_OptValue_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2) v_Vnc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq v_Vnc 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2))))) 
                                 (_p_OptValue_some v) 
                                 (v_Vvc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_OptValue_eq 
                                                 (AssocMap__find 
                                                    _p_OptValue_T _p_Key_T 
                                                    _p_Value_T _p_Key_eq 
                                                    _p_OptValue_none 
                                                    _p_OptValue_some k m2) 
                                                 (_p_OptValue_some v)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_OptValue_eq 
                                                 (_p_OptValue_some v) 
                                                 (AssocMap__find 
                                                    _p_OptValue_T _p_Key_T 
                                                    _p_Value_T _p_Key_eq 
                                                    _p_OptValue_none 
                                                    _p_OptValue_some k m2)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2) 
                                             (_p_OptValue_some v)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq 
                                             (_p_OptValue_some v) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2)))) 
                                    (v_Vwc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_OptValue_eq 
                                                    (AssocMap__find 
                                                       _p_OptValue_T 
                                                       _p_Key_T _p_Value_T 
                                                       _p_Key_eq 
                                                       _p_OptValue_none 
                                                       _p_OptValue_some k m2) 
                                                    (_p_OptValue_some v)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_OptValue_eq 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k m2) 
                                                (_p_OptValue_some v)))) 
                                       __A_1_1_LEMMA v_Vwc) 
                                    (v_Vxc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_OptValue_eq 
                                                 (_p_OptValue_some v) 
                                                 (AssocMap__find 
                                                    _p_OptValue_T _p_Key_T 
                                                    _p_Value_T _p_Key_eq 
                                                    _p_OptValue_none 
                                                    _p_OptValue_some k m2))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_OptValue_eq 
                                                (_p_OptValue_some v) 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k m2)))) 
                                       v_Vxc v_Vtc) v_Vvc) v_Vuc) 
                              _p_OptValue_eq_symmetric) v_Vrc) 
                        (v_Vyc:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_OptValue_T 
                                           (_p_OptValue_some v) 
                                           (AssocMap__find _p_OptValue_T 
                                              _p_Key_T _p_Value_T _p_Key_eq 
                                              _p_OptValue_none 
                                              _p_OptValue_some k m2)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_OptValue_eq 
                                              (_p_OptValue_some v) 
                                              (AssocMap__find _p_OptValue_T 
                                                 _p_Key_T _p_Value_T 
                                                 _p_Key_eq _p_OptValue_none 
                                                 _p_OptValue_some k m2)))))))) =>
                         zen.Rcut 
                           (zen.triangle 
                              (zen.equal _p_OptValue_T _p_OptValue_none 
                                 _p_OptValue_none)) 
                           (v_Vzc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal _p_OptValue_T _p_OptValue_none 
                                     _p_OptValue_none))) =>
                            zen.Rsubst basics.bool__t 
                              (v_Vad:(zen.term basics.bool__t) =>
                               zen.triangle (focal.is_true v_Vad)) 
                              (_p_OptValue_eq 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some k m2) _p_OptValue_none) 
                              (_p_OptValue_eq (_p_OptValue_some v) 
                                 _p_OptValue_none) 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_OptValue_eq 
                                              (AssocMap__find _p_OptValue_T 
                                                 _p_Key_T _p_Value_T 
                                                 _p_Key_eq _p_OptValue_none 
                                                 _p_OptValue_some k m2) 
                                              _p_OptValue_none) 
                                           (_p_OptValue_eq 
                                              (_p_OptValue_some v) 
                                              _p_OptValue_none))))) =>
                               zen.Rsubst _p_OptValue_T 
                                 (v_Vcd:(zen.term _p_OptValue_T) =>
                                  zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_OptValue_eq v_Vcd 
                                             _p_OptValue_none) 
                                          (_p_OptValue_eq 
                                             (_p_OptValue_some v) 
                                             _p_OptValue_none)))) 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some k m2) 
                                 (_p_OptValue_some v) 
                                 (v_Vdd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_OptValue_T 
                                              (AssocMap__find _p_OptValue_T 
                                                 _p_Key_T _p_Value_T 
                                                 _p_Key_eq _p_OptValue_none 
                                                 _p_OptValue_some k m2) 
                                              (_p_OptValue_some v))))) =>
                                  zen.Rnotand 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_OptValue_T 
                                             (_p_OptValue_some v) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_OptValue_eq 
                                                (_p_OptValue_some v) 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k m2))))) 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_OptValue_T 
                                                    (_p_OptValue_some v) 
                                                    (AssocMap__find 
                                                       _p_OptValue_T 
                                                       _p_Key_T _p_Value_T 
                                                       _p_Key_eq 
                                                       _p_OptValue_none 
                                                       _p_OptValue_some k m2)))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (zen.equal _p_OptValue_T 
                                             (_p_OptValue_some v) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2))) 
                                       (v_Vfd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_OptValue_T 
                                                 (_p_OptValue_some v) 
                                                 (AssocMap__find 
                                                    _p_OptValue_T _p_Key_T 
                                                    _p_Value_T _p_Key_eq 
                                                    _p_OptValue_none 
                                                    _p_OptValue_some k m2)))) =>
                                        zen.Rcut 
                                          (zen.triangle 
                                             (zen.equal _p_OptValue_T 
                                                (_p_OptValue_some v) 
                                                (_p_OptValue_some v))) 
                                          (v_Vgd:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal _p_OptValue_T 
                                                    (_p_OptValue_some v) 
                                                    (_p_OptValue_some v)))) =>
                                           zen.Rsubst _p_OptValue_T 
                                             (v_Vhd:
                                              (zen.term _p_OptValue_T) =>
                                              zen.triangle 
                                                (zen.equal _p_OptValue_T 
                                                   v_Vhd (_p_OptValue_some v))) 
                                             (_p_OptValue_some v) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2) 
                                             (v_Vsc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          _p_OptValue_T 
                                                          (_p_OptValue_some v) 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal _p_OptValue_T 
                                                      (_p_OptValue_some v) 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k 
                                                         m2))) v_Vfd v_Vsc) 
                                             (v_Vid:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal _p_OptValue_T 
                                                       (AssocMap__find 
                                                          _p_OptValue_T 
                                                          _p_Key_T 
                                                          _p_Value_T 
                                                          _p_Key_eq 
                                                          _p_OptValue_none 
                                                          _p_OptValue_some k 
                                                          m2) 
                                                       (_p_OptValue_some v)))) =>
                                              zen.Rsubst _p_OptValue_T 
                                                (v_Vjd:
                                                 (zen.term _p_OptValue_T) =>
                                                 zen.triangle 
                                                   (zen.equal _p_OptValue_T 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k 
                                                         m2) v_Vjd)) 
                                                (_p_OptValue_some v) 
                                                (_p_OptValue_some v) 
                                                (v_Vkd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             _p_OptValue_T 
                                                             (_p_OptValue_some 
                                                                v) 
                                                             (_p_OptValue_some 
                                                                v))))) =>
                                                 zen.Rnoteq _p_OptValue_T 
                                                   (_p_OptValue_some v) v_Vkd) 
                                                (v_Vid0:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          _p_OptValue_T 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2) 
                                                          (_p_OptValue_some v)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         _p_OptValue_T 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k m2) 
                                                         (_p_OptValue_some v))) 
                                                   v_Vid0 v_Vdd) v_Vid) v_Vgd) 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_OptValue_T 
                                                       (_p_OptValue_some v) 
                                                       (_p_OptValue_some v))))) =>
                                           zen.Rnoteq _p_OptValue_T 
                                             (_p_OptValue_some v) v_Vkd)) 
                                       v_Ved) 
                                    (v_Vld:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_OptValue_eq 
                                                       (_p_OptValue_some v) 
                                                       (AssocMap__find 
                                                          _p_OptValue_T 
                                                          _p_Key_T 
                                                          _p_Value_T 
                                                          _p_Key_eq 
                                                          _p_OptValue_none 
                                                          _p_OptValue_some k 
                                                          m2))))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_OptValue_eq 
                                                (_p_OptValue_some v) 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k m2)))) 
                                       (v_Vxc:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_OptValue_eq 
                                                    (_p_OptValue_some v) 
                                                    (AssocMap__find 
                                                       _p_OptValue_T 
                                                       _p_Key_T _p_Value_T 
                                                       _p_Key_eq 
                                                       _p_OptValue_none 
                                                       _p_OptValue_some k m2))))) =>
                                        zen.Rall _p_OptValue_T 
                                          (v_Vmc:(zen.term _p_OptValue_T) =>
                                           zen.forall _p_OptValue_T 
                                             (v_Vnc:
                                              (zen.term _p_OptValue_T) =>
                                              zen.forall _p_OptValue_T 
                                                (v_Vmd:
                                                 (zen.term _p_OptValue_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_OptValue_eq 
                                                            v_Vmc v_Vnc))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               v_Vnc v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               v_Vmc v_Vmd))))))) 
                                          (_p_OptValue_some v) 
                                          (v_Vnd:
                                           (zen.proof 
                                              (zen.forall _p_OptValue_T 
                                                 (v_Vnc:
                                                  (zen.term _p_OptValue_T) =>
                                                  zen.forall _p_OptValue_T 
                                                    (v_Vmd:
                                                     (zen.term _p_OptValue_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_OptValue_eq 
                                                                (_p_OptValue_some 
                                                                   v) v_Vnc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   v_Vnc 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) v_Vmd)))))))) =>
                                           zen.Rall _p_OptValue_T 
                                             (v_Vnc:
                                              (zen.term _p_OptValue_T) =>
                                              zen.forall _p_OptValue_T 
                                                (v_Vmd:
                                                 (zen.term _p_OptValue_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) v_Vnc))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               v_Vnc v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (_p_OptValue_some 
                                                                  v) v_Vmd)))))) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k m2) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.forall _p_OptValue_T 
                                                    (v_Vmd:
                                                     (zen.term _p_OptValue_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_OptValue_eq 
                                                                (_p_OptValue_some 
                                                                   v) 
                                                                (AssocMap__find 
                                                                   _p_OptValue_T 
                                                                   _p_Key_T 
                                                                   _p_Value_T 
                                                                   _p_Key_eq 
                                                                   _p_OptValue_none 
                                                                   _p_OptValue_some 
                                                                   k m2)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) v_Vmd))))))) =>
                                              zen.Rall _p_OptValue_T 
                                                (v_Vmd:
                                                 (zen.term _p_OptValue_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k m2)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k m2) v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (_p_OptValue_some 
                                                                  v) v_Vmd))))) 
                                                _p_OptValue_none 
                                                (v_Vpd:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_OptValue_eq 
                                                                (_p_OptValue_some 
                                                                   v) 
                                                                (AssocMap__find 
                                                                   _p_OptValue_T 
                                                                   _p_Key_T 
                                                                   _p_Value_T 
                                                                   _p_Key_eq 
                                                                   _p_OptValue_none 
                                                                   _p_OptValue_some 
                                                                   k m2)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                   _p_OptValue_none))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) 
                                                                   _p_OptValue_none)))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k m2)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k m2) 
                                                               _p_OptValue_none))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (_p_OptValue_some 
                                                                  v) 
                                                               _p_OptValue_none)))) 
                                                   (v_Vtc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) 
                                                                   (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (_p_OptValue_some 
                                                                  v) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k m2)))) 
                                                      v_Vxc v_Vtc) 
                                                   (v_Vqd:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                   _p_OptValue_none))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) 
                                                                   _p_OptValue_none))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k m2) 
                                                               _p_OptValue_none))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (_p_OptValue_some 
                                                                  v) 
                                                               _p_OptValue_none))) 
                                                      (v_Vrd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    _p_OptValue_none))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                  _p_OptValue_none))) 
                                                         v_Vlc v_Vrd) 
                                                      (v_Vsd:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) 
                                                                   _p_OptValue_none)))) =>
                                                       zen.Rsubst 
                                                         basics.bool__t 
                                                         (v_Vad:
                                                          (zen.term 
                                                             basics.bool__t) =>
                                                          zen.triangle 
                                                            (focal.is_true 
                                                               v_Vad)) 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            _p_OptValue_none) 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            _p_OptValue_none) 
                                                         (v_Vtd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none) 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))))) =>
                                                          zen.Rsubst 
                                                            _p_OptValue_T 
                                                            (v_Vcd:
                                                             (zen.term 
                                                                _p_OptValue_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    v_Vcd 
                                                                    _p_OptValue_none) 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none)))) 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            (v_Vkd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_OptValue_T 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (_p_OptValue_some 
                                                                    v))))) =>
                                                             zen.Rnoteq 
                                                               _p_OptValue_T 
                                                               (_p_OptValue_some 
                                                                  v) v_Vkd) 
                                                            (v_Vtd0:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none) 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))))) =>
                                                             zen.Rsubst 
                                                               _p_OptValue_T 
                                                               (v_Vud:
                                                                (zen.term 
                                                                   _p_OptValue_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) v_Vud) 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none)))) 
                                                               _p_OptValue_none 
                                                               _p_OptValue_none 
                                                               (v_Vvd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_OptValue_T 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_none)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_OptValue_T 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_none)) 
                                                                  v_Vzc v_Vvd) 
                                                               (v_Vtd1:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none) 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))))) =>
                                                                zen.Rnoteq 
                                                                  basics.bool__t 
                                                                  (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none) 
                                                                  v_Vtd1) 
                                                               v_Vtd0) v_Vtd) 
                                                         (v_Vsd0:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))) 
                                                            v_Vsd0 v_Vqc) 
                                                         v_Vsd) v_Vqd) v_Vpd) 
                                                v_Vod) v_Vnd) 
                                          _p_OptValue_eq_transitive) v_Vld) 
                                    v_Vyc) 
                                 (v_Vtd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_OptValue_eq 
                                                 (_p_OptValue_some v) 
                                                 _p_OptValue_none) 
                                              (_p_OptValue_eq 
                                                 (_p_OptValue_some v) 
                                                 _p_OptValue_none))))) =>
                                  zen.Rsubst _p_OptValue_T 
                                    (v_Vud:(zen.term _p_OptValue_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_OptValue_eq 
                                                (_p_OptValue_some v) v_Vud) 
                                             (_p_OptValue_eq 
                                                (_p_OptValue_some v) 
                                                _p_OptValue_none)))) 
                                    _p_OptValue_none _p_OptValue_none 
                                    (v_Vvd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_OptValue_T 
                                                 _p_OptValue_none 
                                                 _p_OptValue_none)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal _p_OptValue_T 
                                             _p_OptValue_none 
                                             _p_OptValue_none)) v_Vzc v_Vvd) 
                                    (v_Vtd0:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_OptValue_eq 
                                                    (_p_OptValue_some v) 
                                                    _p_OptValue_none) 
                                                 (_p_OptValue_eq 
                                                    (_p_OptValue_some v) 
                                                    _p_OptValue_none))))) =>
                                     zen.Rnoteq basics.bool__t 
                                       (_p_OptValue_eq (_p_OptValue_some v) 
                                          _p_OptValue_none) v_Vtd0) v_Vtd) 
                                 v_Vbd) 
                              (v_Vsd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_OptValue_eq (_p_OptValue_some v) 
                                           _p_OptValue_none)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_OptValue_eq (_p_OptValue_some v) 
                                          _p_OptValue_none))) v_Vsd v_Vqc) 
                              v_Vlc) 
                           (v_Vvd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_OptValue_T 
                                        _p_OptValue_none _p_OptValue_none)))) =>
                            zen.Rcut 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq _p_OptValue_none 
                                       _p_OptValue_none))) 
                              (v_Vwd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_OptValue_eq _p_OptValue_none 
                                           _p_OptValue_none)))) =>
                               zen.Rall _p_OptValue_T 
                                 (v_Vmc:(zen.term _p_OptValue_T) =>
                                  zen.forall _p_OptValue_T 
                                    (v_Vnc:(zen.term _p_OptValue_T) =>
                                     zen.forall _p_OptValue_T 
                                       (v_Vmd:(zen.term _p_OptValue_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq v_Vmc v_Vnc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq v_Vnc 
                                                      v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq v_Vmc 
                                                      v_Vmd))))))) 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some k m2) 
                                 (v_Vxd:
                                  (zen.proof 
                                     (zen.forall _p_OptValue_T 
                                        (v_Vnc:(zen.term _p_OptValue_T) =>
                                         zen.forall _p_OptValue_T 
                                           (v_Vmd:(zen.term _p_OptValue_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_OptValue_eq 
                                                       (AssocMap__find 
                                                          _p_OptValue_T 
                                                          _p_Key_T 
                                                          _p_Value_T 
                                                          _p_Key_eq 
                                                          _p_OptValue_none 
                                                          _p_OptValue_some k 
                                                          m2) v_Vnc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq v_Vnc 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2) v_Vmd)))))))) =>
                                  zen.Rall _p_OptValue_T 
                                    (v_Vnc:(zen.term _p_OptValue_T) =>
                                     zen.forall _p_OptValue_T 
                                       (v_Vmd:(zen.term _p_OptValue_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k m2) 
                                                   v_Vnc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq v_Vnc 
                                                      v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k 
                                                         m2) v_Vmd)))))) 
                                    _p_OptValue_none 
                                    (v_Vyd:
                                     (zen.proof 
                                        (zen.forall _p_OptValue_T 
                                           (v_Vmd:(zen.term _p_OptValue_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_OptValue_eq 
                                                       (AssocMap__find 
                                                          _p_OptValue_T 
                                                          _p_Key_T 
                                                          _p_Value_T 
                                                          _p_Key_eq 
                                                          _p_OptValue_none 
                                                          _p_OptValue_some k 
                                                          m2) 
                                                       _p_OptValue_none))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          _p_OptValue_none 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2) v_Vmd))))))) =>
                                     zen.Rall _p_OptValue_T 
                                       (v_Vmd:(zen.term _p_OptValue_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k m2) 
                                                   _p_OptValue_none))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      _p_OptValue_none v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k 
                                                         m2) v_Vmd))))) 
                                       _p_OptValue_none 
                                       (v_Vzd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_OptValue_eq 
                                                       (AssocMap__find 
                                                          _p_OptValue_T 
                                                          _p_Key_T 
                                                          _p_Value_T 
                                                          _p_Key_eq 
                                                          _p_OptValue_none 
                                                          _p_OptValue_some k 
                                                          m2) 
                                                       _p_OptValue_none))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          _p_OptValue_none 
                                                          _p_OptValue_none))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2) 
                                                          _p_OptValue_none)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k m2) 
                                                   _p_OptValue_none))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_none))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k 
                                                         m2) _p_OptValue_none)))) 
                                          (v_Vrd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2) 
                                                          _p_OptValue_none))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k 
                                                         m2) _p_OptValue_none))) 
                                             v_Vlc v_Vrd) 
                                          (v_Vae:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          _p_OptValue_none 
                                                          _p_OptValue_none))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2) 
                                                          _p_OptValue_none))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_none))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k 
                                                         m2) _p_OptValue_none))) 
                                             (v_Vbe:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_OptValue_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_none))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_none))) 
                                                v_Vwd v_Vbe) 
                                             (v_Vlc0:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_OptValue_eq 
                                                          (AssocMap__find 
                                                             _p_OptValue_T 
                                                             _p_Key_T 
                                                             _p_Value_T 
                                                             _p_Key_eq 
                                                             _p_OptValue_none 
                                                             _p_OptValue_some 
                                                             k m2) 
                                                          _p_OptValue_none)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vad:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vad)) 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k m2) 
                                                   _p_OptValue_none) 
                                                (_p_OptValue_eq 
                                                   (_p_OptValue_some v) 
                                                   _p_OptValue_none) 
                                                (v_Vbd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_OptValue_eq 
                                                                (AssocMap__find 
                                                                   _p_OptValue_T 
                                                                   _p_Key_T 
                                                                   _p_Value_T 
                                                                   _p_Key_eq 
                                                                   _p_OptValue_none 
                                                                   _p_OptValue_some 
                                                                   k m2) 
                                                                _p_OptValue_none) 
                                                             (_p_OptValue_eq 
                                                                (_p_OptValue_some 
                                                                   v) 
                                                                _p_OptValue_none))))) =>
                                                 zen.Rsubst _p_OptValue_T 
                                                   (v_Vcd:
                                                    (zen.term _p_OptValue_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_OptValue_eq 
                                                               v_Vcd 
                                                               _p_OptValue_none) 
                                                            (_p_OptValue_eq 
                                                               (_p_OptValue_some 
                                                                  v) 
                                                               _p_OptValue_none)))) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k m2) 
                                                   (_p_OptValue_some v) 
                                                   (v_Vdd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_OptValue_T 
                                                                (AssocMap__find 
                                                                   _p_OptValue_T 
                                                                   _p_Key_T 
                                                                   _p_Value_T 
                                                                   _p_Key_eq 
                                                                   _p_OptValue_none 
                                                                   _p_OptValue_some 
                                                                   k m2) 
                                                                (_p_OptValue_some 
                                                                   v))))) =>
                                                    zen.Rnotand 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_OptValue_T 
                                                               (_p_OptValue_some 
                                                                  v) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k m2)))) 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (_p_OptValue_some 
                                                                    v) 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2))))) 
                                                      (v_Ved:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_OptValue_T 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_OptValue_T 
                                                               (_p_OptValue_some 
                                                                  v) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k m2))) 
                                                         (v_Vfd:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_OptValue_T 
                                                                   (_p_OptValue_some 
                                                                    v) 
                                                                   (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))) =>
                                                          zen.Reqsym 
                                                            _p_OptValue_T 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k m2) v_Vfd 
                                                            v_Vdd) v_Ved) 
                                                      (v_Vld:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2))))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (_p_OptValue_some 
                                                                    v) 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))) 
                                                         (v_Vxc:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2))))) =>
                                                          zen.Rall 
                                                            _p_OptValue_T 
                                                            (v_Vmc:
                                                             (zen.term 
                                                                _p_OptValue_T) =>
                                                             zen.forall 
                                                               _p_OptValue_T 
                                                               (v_Vnc:
                                                                (zen.term 
                                                                   _p_OptValue_T) =>
                                                                zen.forall 
                                                                  _p_OptValue_T 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    _p_OptValue_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vmc 
                                                                    v_Vnc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vnc 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vmc 
                                                                    v_Vmd))))))) 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            (v_Vnd:
                                                             (zen.proof 
                                                                (zen.forall 
                                                                   _p_OptValue_T 
                                                                   (v_Vnc:
                                                                    (
                                                                    zen.term 
                                                                    _p_OptValue_T) =>
                                                                    zen.forall 
                                                                    _p_OptValue_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_OptValue_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) v_Vnc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vnc 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) v_Vmd)))))))) =>
                                                             zen.Rall 
                                                               _p_OptValue_T 
                                                               (v_Vnc:
                                                                (zen.term 
                                                                   _p_OptValue_T) =>
                                                                zen.forall 
                                                                  _p_OptValue_T 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    _p_OptValue_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) v_Vnc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vnc 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) v_Vmd)))))) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k m2) 
                                                               (v_Vod:
                                                                (zen.proof 
                                                                   (zen.forall 
                                                                    _p_OptValue_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_OptValue_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) v_Vmd))))))) =>
                                                                zen.Rall 
                                                                  _p_OptValue_T 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    _p_OptValue_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) v_Vmd))))) 
                                                                  _p_OptValue_none 
                                                                  (v_Vpd:
                                                                   (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    _p_OptValue_none))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none)))))) =>
                                                                   zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    _p_OptValue_none))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none)))) 
                                                                    (v_Vtc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2)))) 
                                                                    v_Vxc 
                                                                    v_Vtc) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    _p_OptValue_none))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    _p_OptValue_none))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    _p_OptValue_none))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k m2) 
                                                                    _p_OptValue_none))) 
                                                                    v_Vlc0 
                                                                    v_Vrd) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))) 
                                                                    v_Vsd 
                                                                    v_Vqc) 
                                                                    v_Vqd) 
                                                                    v_Vpd) 
                                                                  v_Vod) 
                                                               v_Vnd) 
                                                            _p_OptValue_eq_transitive) 
                                                         v_Vld) v_Vyc) 
                                                   (v_Vtd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) 
                                                                   _p_OptValue_none) 
                                                                (_p_OptValue_eq 
                                                                   (_p_OptValue_some 
                                                                    v) 
                                                                   _p_OptValue_none))))) =>
                                                    zen.Rsubst _p_OptValue_T 
                                                      (v_Vud:
                                                       (zen.term 
                                                          _p_OptValue_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_OptValue_eq 
                                                                  (_p_OptValue_some 
                                                                    v) v_Vud) 
                                                               (_p_OptValue_eq 
                                                                  (_p_OptValue_some 
                                                                    v) 
                                                                  _p_OptValue_none)))) 
                                                      _p_OptValue_none 
                                                      _p_OptValue_none 
                                                      (v_Vvd0:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_OptValue_T 
                                                                   _p_OptValue_none 
                                                                   _p_OptValue_none)))) =>
                                                       zen.Rnoteq 
                                                         _p_OptValue_T 
                                                         _p_OptValue_none 
                                                         v_Vvd0) 
                                                      (v_Vtd0:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none) 
                                                                   (_p_OptValue_eq 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    _p_OptValue_none))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            _p_OptValue_none) 
                                                         v_Vtd0) v_Vtd) v_Vbd) 
                                                (v_Vsd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_OptValue_eq 
                                                             (_p_OptValue_some 
                                                                v) 
                                                             _p_OptValue_none)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            _p_OptValue_none))) 
                                                   v_Vsd v_Vqc) v_Vlc0) v_Vae) 
                                          v_Vzd) v_Vyd) v_Vxd) 
                                 _p_OptValue_eq_transitive) 
                              (v_Vbe:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_OptValue_eq _p_OptValue_none 
                                              _p_OptValue_none))))) =>
                               zen.Rnoteq _p_OptValue_T _p_OptValue_none 
                                 v_Vvd)))) 
                     (v_Vce:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_OptValue_eq _p_OptValue_none 
                                  (_p_OptValue_some v))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_OptValue_eq _p_OptValue_none 
                                 (_p_OptValue_some v)))) v_Vce __A_1_2_LEMMA) 
                     v_Vpc) v_Voc) _p_OptValue_eq_symmetric) v_Vkc)) 
        (zen.nnpp 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (_p_OptValue_eq _p_OptValue_none (_p_OptValue_some v))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_OptValue_eq _p_OptValue_none 
                              (_p_OptValue_some v))))))) =>
            zen.Rnotnot 
              (zen.triangle 
                 (focal.is_true 
                    (_p_OptValue_eq _p_OptValue_none (_p_OptValue_some v)))) 
              (v_Vac:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_OptValue_eq _p_OptValue_none (_p_OptValue_some v))))) =>
               zen.Rall _p_Value_T 
                 (v_Vbc:(zen.term _p_Value_T) =>
                  zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_OptValue_eq (_p_OptValue_some v_Vbc) 
                             _p_OptValue_none)))) v 
                 (v_Vcc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_OptValue_eq (_p_OptValue_some v) 
                                 _p_OptValue_none))))) =>
                  zen.Rall _p_OptValue_T 
                    (v_Vdc:(zen.term _p_OptValue_T) =>
                     zen.forall _p_OptValue_T 
                       (v_Vec:(zen.term _p_OptValue_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_OptValue_eq v_Vdc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (_p_OptValue_eq v_Vec v_Vdc))))) 
                    _p_OptValue_none 
                    (v_Vfc:
                     (zen.proof 
                        (zen.forall _p_OptValue_T 
                           (v_Vec:(zen.term _p_OptValue_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq _p_OptValue_none v_Vec))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq v_Vec _p_OptValue_none)))))) =>
                     zen.Rall _p_OptValue_T 
                       (v_Vec:(zen.term _p_OptValue_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_OptValue_eq _p_OptValue_none v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_OptValue_eq v_Vec _p_OptValue_none)))) 
                       (_p_OptValue_some v) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq _p_OptValue_none 
                                       (_p_OptValue_some v)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq (_p_OptValue_some v) 
                                       _p_OptValue_none))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_OptValue_eq _p_OptValue_none 
                                   (_p_OptValue_some v)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_OptValue_eq (_p_OptValue_some v) 
                                   _p_OptValue_none))) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_OptValue_eq _p_OptValue_none 
                                          (_p_OptValue_some v)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_OptValue_eq _p_OptValue_none 
                                      (_p_OptValue_some v)))) v_Vac v_Vhc) 
                          (v_Vic:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq (_p_OptValue_some v) 
                                       _p_OptValue_none)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_OptValue_eq (_p_OptValue_some v) 
                                      _p_OptValue_none))) v_Vic v_Vcc) v_Vgc) 
                       v_Vfc) _p_OptValue_eq_symmetric) 
                 _p_OptValue_none_different_some) v_Vzb))) 
       ((__A_1_1_0_LEMMA:(dk_logic.eP (dk_logic.ebP (_p_Key_eq k k))) =>
         (__A_1_1_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_OptValue_eq 
                   (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                      _p_Key_eq _p_OptValue_none _p_OptValue_some k 
                      (AssocMap__add _p_Key_T _p_Value_T k v m1)) 
                   (_p_OptValue_some v)))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_OptValue_eq 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k m2) 
                     (_p_OptValue_some v)))) 
            (v_Vec:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_OptValue_eq 
                            (AssocMap__find _p_OptValue_T _p_Key_T 
                               _p_Value_T _p_Key_eq _p_OptValue_none 
                               _p_OptValue_some k m2) (_p_OptValue_some v)))))) =>
             focal.zenon_syntactic_equal 
               (pair_list_t__t _p_Key_T _p_Value_T) m2 
               (AssocMap__add _p_Key_T _p_Value_T k v m1) 
               (v_Vfc:
                (zen.proof 
                   (zen.triangle 
                      (zen.equal (pair_list_t__t _p_Key_T _p_Value_T) m2 
                         (AssocMap__add _p_Key_T _p_Value_T k v m1)))) =>
                zen.Rsubst basics.bool__t 
                  (v_Vgc:(zen.term basics.bool__t) =>
                   zen.triangle (focal.is_true v_Vgc)) 
                  (_p_OptValue_eq 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k 
                        (AssocMap__add _p_Key_T _p_Value_T k v m1)) 
                     (_p_OptValue_some v)) 
                  (_p_OptValue_eq 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k m2) 
                     (_p_OptValue_some v)) 
                  (v_Vhc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (_p_OptValue_eq 
                                  (AssocMap__find _p_OptValue_T _p_Key_T 
                                     _p_Value_T _p_Key_eq _p_OptValue_none 
                                     _p_OptValue_some k 
                                     (AssocMap__add _p_Key_T _p_Value_T k v 
                                        m1)) (_p_OptValue_some v)) 
                               (_p_OptValue_eq 
                                  (AssocMap__find _p_OptValue_T _p_Key_T 
                                     _p_Value_T _p_Key_eq _p_OptValue_none 
                                     _p_OptValue_some k m2) 
                                  (_p_OptValue_some v)))))) =>
                   zen.Rsubst _p_OptValue_T 
                     (v_Vic:(zen.term _p_OptValue_T) =>
                      zen.not 
                        (zen.triangle 
                           (zen.equal basics.bool__t 
                              (_p_OptValue_eq v_Vic (_p_OptValue_some v)) 
                              (_p_OptValue_eq 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some k m2) 
                                 (_p_OptValue_some v))))) 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k 
                        (AssocMap__add _p_Key_T _p_Value_T k v m1)) 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k m2) 
                     (v_Vjc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_OptValue_T 
                                  (AssocMap__find _p_OptValue_T _p_Key_T 
                                     _p_Value_T _p_Key_eq _p_OptValue_none 
                                     _p_OptValue_some k 
                                     (AssocMap__add _p_Key_T _p_Value_T k v 
                                        m1)) 
                                  (AssocMap__find _p_OptValue_T _p_Key_T 
                                     _p_Value_T _p_Key_eq _p_OptValue_none 
                                     _p_OptValue_some k m2))))) =>
                      zen.Rsubst _p_Key_T 
                        (v_Vkc:(zen.term _p_Key_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal _p_OptValue_T 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some v_Vkc 
                                    (AssocMap__add _p_Key_T _p_Value_T k v m1)) 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some k m2)))) k k 
                        (v_Vlc:
                         (zen.proof 
                            (zen.not (zen.triangle (zen.equal _p_Key_T k k)))) =>
                         zen.Rnoteq _p_Key_T k v_Vlc) 
                        (v_Vjc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_OptValue_T 
                                     (AssocMap__find _p_OptValue_T _p_Key_T 
                                        _p_Value_T _p_Key_eq 
                                        _p_OptValue_none _p_OptValue_some k 
                                        (AssocMap__add _p_Key_T _p_Value_T k 
                                           v m1)) 
                                     (AssocMap__find _p_OptValue_T _p_Key_T 
                                        _p_Value_T _p_Key_eq 
                                        _p_OptValue_none _p_OptValue_some k 
                                        m2))))) =>
                         zen.Rsubst (pair_list_t__t _p_Key_T _p_Value_T) 
                           (v_Vmc:
                            (zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal _p_OptValue_T 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k v_Vmc) 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k m2)))) 
                           (AssocMap__add _p_Key_T _p_Value_T k v m1) m2 
                           (v_Vnc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal 
                                        (pair_list_t__t _p_Key_T _p_Value_T) 
                                        (AssocMap__add _p_Key_T _p_Value_T k 
                                           v m1) m2)))) =>
                            zen.Reqsym (pair_list_t__t _p_Key_T _p_Value_T) 
                              m2 (AssocMap__add _p_Key_T _p_Value_T k v m1) 
                              v_Vfc v_Vnc) 
                           (v_Voc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_OptValue_T 
                                        (AssocMap__find _p_OptValue_T 
                                           _p_Key_T _p_Value_T _p_Key_eq 
                                           _p_OptValue_none _p_OptValue_some 
                                           k m2) 
                                        (AssocMap__find _p_OptValue_T 
                                           _p_Key_T _p_Value_T _p_Key_eq 
                                           _p_OptValue_none _p_OptValue_some 
                                           k m2))))) =>
                            zen.Rnoteq _p_OptValue_T 
                              (AssocMap__find _p_OptValue_T _p_Key_T 
                                 _p_Value_T _p_Key_eq _p_OptValue_none 
                                 _p_OptValue_some k m2) v_Voc) v_Vjc0) v_Vjc) 
                     (v_Vpc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_OptValue_eq 
                                     (AssocMap__find _p_OptValue_T _p_Key_T 
                                        _p_Value_T _p_Key_eq 
                                        _p_OptValue_none _p_OptValue_some k 
                                        m2) (_p_OptValue_some v)) 
                                  (_p_OptValue_eq 
                                     (AssocMap__find _p_OptValue_T _p_Key_T 
                                        _p_Value_T _p_Key_eq 
                                        _p_OptValue_none _p_OptValue_some k 
                                        m2) (_p_OptValue_some v)))))) =>
                      zen.Rsubst _p_OptValue_T 
                        (v_Vqc:(zen.term _p_OptValue_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (_p_OptValue_eq 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k m2) v_Vqc) 
                                 (_p_OptValue_eq 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k m2) 
                                    (_p_OptValue_some v))))) 
                        (_p_OptValue_some v) (_p_OptValue_some v) 
                        (v_Vrc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_OptValue_T 
                                     (_p_OptValue_some v) 
                                     (_p_OptValue_some v))))) =>
                         zen.Rnoteq _p_OptValue_T (_p_OptValue_some v) v_Vrc) 
                        (v_Vpc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_OptValue_eq 
                                        (AssocMap__find _p_OptValue_T 
                                           _p_Key_T _p_Value_T _p_Key_eq 
                                           _p_OptValue_none _p_OptValue_some 
                                           k m2) (_p_OptValue_some v)) 
                                     (_p_OptValue_eq 
                                        (AssocMap__find _p_OptValue_T 
                                           _p_Key_T _p_Value_T _p_Key_eq 
                                           _p_OptValue_none _p_OptValue_some 
                                           k m2) (_p_OptValue_some v)))))) =>
                         zen.Rnoteq basics.bool__t 
                           (_p_OptValue_eq 
                              (AssocMap__find _p_OptValue_T _p_Key_T 
                                 _p_Value_T _p_Key_eq _p_OptValue_none 
                                 _p_OptValue_some k m2) (_p_OptValue_some v)) 
                           v_Vpc0) v_Vpc) v_Vhc) 
                  (v_Vsc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_OptValue_eq 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k m2) (_p_OptValue_some v))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_OptValue_eq 
                              (AssocMap__find _p_OptValue_T _p_Key_T 
                                 _p_Value_T _p_Key_eq _p_OptValue_none 
                                 _p_OptValue_some k m2) (_p_OptValue_some v)))) 
                     v_Vsc v_Vec) __A_1_1_1_LEMMA) H1)) 
           ((__A_1_1_1_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (_p_OptValue_eq 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k 
                         (Node _p_Key_T _p_Value_T k v m1)) 
                      (_p_OptValue_some v)))) =>
             zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (_p_OptValue_eq 
                        (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                           _p_Key_eq _p_OptValue_none _p_OptValue_some k 
                           (AssocMap__add _p_Key_T _p_Value_T k v m1)) 
                        (_p_OptValue_some v)))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_OptValue_eq 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k 
                                  (Node _p_Key_T _p_Value_T k v m1)) 
                               (_p_OptValue_some v)))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_OptValue_eq 
                           (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                              _p_Key_eq _p_OptValue_none _p_OptValue_some k 
                              (Node _p_Key_T _p_Value_T k v m1)) 
                           (_p_OptValue_some v)))) __A_1_1_1_1_LEMMA v_Vzb)) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_OptValue_eq 
                          (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                             _p_Key_eq _p_OptValue_none _p_OptValue_some k 
                             (Node _p_Key_T _p_Value_T k v m1)) 
                          (_p_OptValue_some v)))) 
                 (v_Vbc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_OptValue_eq 
                                 (dk_bool.ite _p_OptValue_T (_p_Key_eq k k) 
                                    (_p_OptValue_some v) 
                                    (dk_builtins.call_by_value 
                                       (pair_list_t__t _p_Key_T _p_Value_T) 
                                       _p_OptValue_T 
                                       (dk_builtins.call_by_value _p_Key_T 
                                          (zen.arrow 
                                             (pair_list_t__t _p_Key_T 
                                                _p_Value_T) _p_OptValue_T) 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some) k) m1)) 
                                 (_p_OptValue_some v)))))) =>
                  focal.zenon_focal_ite_rel_nl _p_OptValue_T _p_OptValue_T 
                    (v_Vcc:(zen.term _p_OptValue_T) =>
                     v_Vdc:(zen.term _p_OptValue_T) =>
                     zen.triangle 
                       (focal.is_true (_p_OptValue_eq v_Vcc v_Vdc))) 
                    (_p_Key_eq k k) (_p_OptValue_some v) 
                    (dk_builtins.call_by_value 
                       (pair_list_t__t _p_Key_T _p_Value_T) _p_OptValue_T 
                       (dk_builtins.call_by_value _p_Key_T 
                          (zen.arrow (pair_list_t__t _p_Key_T _p_Value_T) 
                             _p_OptValue_T) 
                          (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                             _p_Key_eq _p_OptValue_none _p_OptValue_some) k) 
                       m1) (_p_OptValue_some v) 
                    (__A_1_1_0_LEMMA0:
                     (zen.proof 
                        (zen.triangle (focal.is_true (_p_Key_eq k k)))) =>
                     v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_OptValue_eq (_p_OptValue_some v) 
                                    (_p_OptValue_some v)))))) =>
                     zen.Rall _p_OptValue_T 
                       (v_Vfc:(zen.term _p_OptValue_T) =>
                        zen.triangle 
                          (focal.is_true (_p_OptValue_eq v_Vfc v_Vfc))) 
                       (_p_OptValue_some v) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_OptValue_eq (_p_OptValue_some v) 
                                    (_p_OptValue_some v))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_OptValue_eq (_p_OptValue_some v) 
                                   (_p_OptValue_some v)))) v_Vgc v_Vec) 
                       _p_OptValue_eq_reflexive) 
                    (v_Vhc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (_p_Key_eq k k))))) =>
                     v_Vic:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_OptValue_eq 
                                    (dk_builtins.call_by_value 
                                       (pair_list_t__t _p_Key_T _p_Value_T) 
                                       _p_OptValue_T 
                                       (dk_builtins.call_by_value _p_Key_T 
                                          (zen.arrow 
                                             (pair_list_t__t _p_Key_T 
                                                _p_Value_T) _p_OptValue_T) 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some) k) m1) 
                                    (_p_OptValue_some v)))))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (_p_Key_eq k k))) 
                       __A_1_1_0_LEMMA v_Vhc) v_Vbc)))) 
          (zen.nnpp (zen.triangle (focal.is_true (_p_Key_eq k k))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not (zen.triangle (focal.is_true (_p_Key_eq k k))))) =>
              zen.Rall _p_Key_T 
                (v_Vac:(zen.term _p_Key_T) =>
                 zen.triangle (focal.is_true (_p_Key_eq v_Vac v_Vac))) k 
                (v_Vbc:
                 (zen.proof (zen.triangle (focal.is_true (_p_Key_eq k k)))) =>
                 zen.Raxiom (zen.triangle (focal.is_true (_p_Key_eq k k))) 
                   v_Vbc v_Vzb) _p_Key_eq_reflexive)))).

def AssocMap__find_same_key_same_value :
  _p_Key_T:cc.uT ->
  _p_Value_T:cc.uT ->
  _p_OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_eq:((cc.eT _p_OptValue_T) ->
                  (cc.eT _p_OptValue_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_none:(cc.eT _p_OptValue_T) ->
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) ->
  _p_OptValue_eq_reflexive:(dk_logic.eP 
                              (dk_logic.forall _p_OptValue_T 
                                 (x:(cc.eT _p_OptValue_T) =>
                                  dk_logic.ebP (_p_OptValue_eq x x)))) ->
  _p_OptValue_eq_symmetric:(dk_logic.eP 
                              (dk_logic.forall _p_OptValue_T 
                                 (x:(cc.eT _p_OptValue_T) =>
                                  dk_logic.forall _p_OptValue_T 
                                    (y:(cc.eT _p_OptValue_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_OptValue_eq x y)) 
                                       (dk_logic.ebP (_p_OptValue_eq y x)))))) ->
  _p_OptValue_eq_transitive:(dk_logic.eP 
                               (dk_logic.forall _p_OptValue_T 
                                  (x:(cc.eT _p_OptValue_T) =>
                                   dk_logic.forall _p_OptValue_T 
                                     (y:(cc.eT _p_OptValue_T) =>
                                      dk_logic.forall _p_OptValue_T 
                                        (z:(cc.eT _p_OptValue_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP (_p_OptValue_eq x y)) 
                                           (dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (_p_OptValue_eq y z)) 
                                              (dk_logic.ebP 
                                                 (_p_OptValue_eq x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_Key_T 
       (k1:(cc.eT _p_Key_T) =>
        dk_logic.forall _p_Key_T 
          (k2:(cc.eT _p_Key_T) =>
           dk_logic.forall (pair_list_t__t _p_Key_T _p_Value_T) 
             (m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
              dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
                (dk_logic.ebP 
                   (_p_OptValue_eq 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k1 m) 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k2 m)))))))
  :=
  _p_Key_T:cc.uT =>
  _p_Value_T:cc.uT =>
  _p_OptValue_T:cc.uT =>
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) =>
  _p_OptValue_eq:
  ((cc.eT _p_OptValue_T) -> (cc.eT _p_OptValue_T) -> cc.eT basics.bool__t) =>
  _p_OptValue_none:(cc.eT _p_OptValue_T) =>
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) =>
  _p_OptValue_eq_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) => dk_logic.ebP (_p_OptValue_eq x x)))) =>
  _p_OptValue_eq_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) =>
         dk_logic.forall _p_OptValue_T 
           (y:(cc.eT _p_OptValue_T) =>
            dk_logic.imp (dk_logic.ebP (_p_OptValue_eq x y)) 
              (dk_logic.ebP (_p_OptValue_eq y x)))))) =>
  _p_OptValue_eq_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) =>
         dk_logic.forall _p_OptValue_T 
           (y:(cc.eT _p_OptValue_T) =>
            dk_logic.forall _p_OptValue_T 
              (z:(cc.eT _p_OptValue_T) =>
               dk_logic.imp (dk_logic.ebP (_p_OptValue_eq x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_OptValue_eq y z)) 
                    (dk_logic.ebP (_p_OptValue_eq x z)))))))) =>
  (__B_1_LEMMA:
   (k1:(cc.eT _p_Key_T) ->
    k2:(cc.eT _p_Key_T) ->
    dk_logic.eP 
      (dk_logic.forall (pair_list_t__t _p_Key_T _p_Value_T) 
         (m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
          dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
            (dk_logic.ebP 
               (_p_OptValue_eq 
                  (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                     _p_Key_eq _p_OptValue_none _p_OptValue_some k1 m) 
                  (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                     _p_Key_eq _p_OptValue_none _p_OptValue_some k2 m)))))) =>
   zen.nnpp 
     (zen.forall _p_Key_T 
        (v_Vzb:(zen.term _p_Key_T) =>
         zen.forall _p_Key_T 
           (v_Vac:(zen.term _p_Key_T) =>
            zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
              (v_Vbc:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_Key_eq v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_OptValue_eq 
                          (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                             _p_Key_eq _p_OptValue_none _p_OptValue_some 
                             v_Vzb v_Vbc) 
                          (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                             _p_Key_eq _p_OptValue_none _p_OptValue_some 
                             v_Vac v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_Key_T 
               (v_Vzb:(zen.term _p_Key_T) =>
                zen.forall _p_Key_T 
                  (v_Vac:(zen.term _p_Key_T) =>
                   zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                     (v_Vbc:
                      (zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (_p_Key_eq v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_OptValue_eq 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some v_Vzb v_Vbc) 
                                 (AssocMap__find _p_OptValue_T _p_Key_T 
                                    _p_Value_T _p_Key_eq _p_OptValue_none 
                                    _p_OptValue_some v_Vac v_Vbc)))))))))) =>
      zen.Raxiom 
        (zen.forall _p_Key_T 
           (v_Vzb:(zen.term _p_Key_T) =>
            zen.forall _p_Key_T 
              (v_Vac:(zen.term _p_Key_T) =>
               zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
                 (v_Vbc:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_Key_eq v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_OptValue_eq 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some v_Vzb v_Vbc) 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some v_Vac v_Vbc)))))))) 
        __B_1_LEMMA v_Vcc)) 
    (k1:(cc.eT _p_Key_T) =>
     k2:(cc.eT _p_Key_T) =>
     (__B_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
            (dk_logic.ebP 
               (_p_OptValue_eq 
                  (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                     _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                     (Nil _p_Key_T _p_Value_T)) 
                  (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                     _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                     (Nil _p_Key_T _p_Value_T)))))) =>
      (__B_1_2_LEMMA:
       (kcur:(cc.eT _p_Key_T) ->
        v:(cc.eT _p_Value_T) ->
        q:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) ->
        HRec:(dk_logic.eP 
                (dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
                   (dk_logic.ebP 
                      (_p_OptValue_eq 
                         (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                            _p_Key_eq _p_OptValue_none _p_OptValue_some k1 q) 
                         (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                            _p_Key_eq _p_OptValue_none _p_OptValue_some k2 q))))) ->
        dk_logic.eP 
          (dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
             (dk_logic.ebP 
                (_p_OptValue_eq 
                   (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                      _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                      (Node _p_Key_T _p_Value_T kcur v q)) 
                   (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                      _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                      (Node _p_Key_T _p_Value_T kcur v q)))))) =>
       dk_builtins.magic_prove 
         (dk_logic.forall (pair_list_t__t _p_Key_T _p_Value_T) 
            (m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
             dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
               (dk_logic.ebP 
                  (_p_OptValue_eq 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k1 m) 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k2 m)))))) 
        (kcur:(cc.eT _p_Key_T) =>
         v:(cc.eT _p_Value_T) =>
         q:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
         HRec:
         (dk_logic.eP 
            (dk_logic.imp (dk_logic.ebP (_p_Key_eq k1 k2)) 
               (dk_logic.ebP 
                  (_p_OptValue_eq 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k1 q) 
                     (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                        _p_Key_eq _p_OptValue_none _p_OptValue_some k2 q))))) =>
         (__B_1_2_1_LEMMA:
          (H1:(dk_logic.eP (dk_logic.ebP (_p_Key_eq k1 k2))) ->
           dk_logic.eP 
             (dk_logic.ebP 
                (_p_OptValue_eq 
                   (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                      _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                      (Node _p_Key_T _p_Value_T kcur v q)) 
                   (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                      _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                      (Node _p_Key_T _p_Value_T kcur v q))))) =>
          zen.nnpp 
            (zen.imp (zen.triangle (focal.is_true (_p_Key_eq k1 k2))) 
               (zen.triangle 
                  (focal.is_true 
                     (_p_OptValue_eq 
                        (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                           _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                           (Node _p_Key_T _p_Value_T kcur v q)) 
                        (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                           _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                           (Node _p_Key_T _p_Value_T kcur v q)))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.imp (zen.triangle (focal.is_true (_p_Key_eq k1 k2))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_OptValue_eq 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k1 
                                  (Node _p_Key_T _p_Value_T kcur v q)) 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k2 
                                  (Node _p_Key_T _p_Value_T kcur v q)))))))) =>
             zen.Raxiom 
               (zen.imp (zen.triangle (focal.is_true (_p_Key_eq k1 k2))) 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_OptValue_eq 
                           (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                              _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                              (Node _p_Key_T _p_Value_T kcur v q)) 
                           (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                              _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                              (Node _p_Key_T _p_Value_T kcur v q)))))) 
               __B_1_2_1_LEMMA v_Vzb)) 
           (H1:(dk_logic.eP (dk_logic.ebP (_p_Key_eq k1 k2))) =>
            (__B_1_2_1_1_LEMMA:
             (H2:(dk_logic.eP (dk_logic.ebP (_p_Key_eq kcur k1))) ->
              dk_logic.eP 
                (dk_logic.ebP 
                   (_p_OptValue_eq 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                         (Node _p_Key_T _p_Value_T kcur v q)) 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                         (Node _p_Key_T _p_Value_T kcur v q))))) =>
             (__B_1_2_1_2_LEMMA:
              (H3:(dk_logic.eP 
                     (dk_logic.not (dk_logic.ebP (_p_Key_eq kcur k1)))) ->
               dk_logic.eP 
                 (dk_logic.ebP 
                    (_p_OptValue_eq 
                       (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                          _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                          (Node _p_Key_T _p_Value_T kcur v q)) 
                       (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                          _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                          (Node _p_Key_T _p_Value_T kcur v q))))) =>
              zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (_p_OptValue_eq 
                         (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                            _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                            (Node _p_Key_T _p_Value_T kcur v q)) 
                         (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                            _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                            (Node _p_Key_T _p_Value_T kcur v q))))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_OptValue_eq 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k1 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k2 
                                   (Node _p_Key_T _p_Value_T kcur v q))))))) =>
                 zen.Rimply 
                   (zen.triangle (focal.is_true (_p_Key_eq kcur k1))) 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_OptValue_eq 
                            (AssocMap__find _p_OptValue_T _p_Key_T 
                               _p_Value_T _p_Key_eq _p_OptValue_none 
                               _p_OptValue_some k1 
                               (Node _p_Key_T _p_Value_T kcur v q)) 
                            (AssocMap__find _p_OptValue_T _p_Key_T 
                               _p_Value_T _p_Key_eq _p_OptValue_none 
                               _p_OptValue_some k2 
                               (Node _p_Key_T _p_Value_T kcur v q))))) 
                   (v_Vac:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_Key_eq kcur k1))))) =>
                    zen.Rimply 
                      (zen.not 
                         (zen.triangle (focal.is_true (_p_Key_eq kcur k1)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_OptValue_eq 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k1 
                                  (Node _p_Key_T _p_Value_T kcur v q)) 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k2 
                                  (Node _p_Key_T _p_Value_T kcur v q))))) 
                      (v_Vbc:
                       (zen.proof 
                          (zen.not 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_Key_eq kcur k1)))))) =>
                       zen.Raxiom 
                         (zen.not 
                            (zen.triangle (focal.is_true (_p_Key_eq kcur k1)))) 
                         v_Vac v_Vbc) 
                      (v_Vcc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_OptValue_eq 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some k1 
                                      (Node _p_Key_T _p_Value_T kcur v q)) 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some k2 
                                      (Node _p_Key_T _p_Value_T kcur v q)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_OptValue_eq 
                                  (AssocMap__find _p_OptValue_T _p_Key_T 
                                     _p_Value_T _p_Key_eq _p_OptValue_none 
                                     _p_OptValue_some k1 
                                     (Node _p_Key_T _p_Value_T kcur v q)) 
                                  (AssocMap__find _p_OptValue_T _p_Key_T 
                                     _p_Value_T _p_Key_eq _p_OptValue_none 
                                     _p_OptValue_some k2 
                                     (Node _p_Key_T _p_Value_T kcur v q))))) 
                         v_Vcc v_Vzb) __B_1_2_1_2_LEMMA) 
                   (v_Vcc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_OptValue_eq 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k1 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k2 
                                   (Node _p_Key_T _p_Value_T kcur v q)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_OptValue_eq 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k1 
                                  (Node _p_Key_T _p_Value_T kcur v q)) 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k2 
                                  (Node _p_Key_T _p_Value_T kcur v q))))) 
                      v_Vcc v_Vzb) __B_1_2_1_1_LEMMA)) 
               (H3:
                (dk_logic.eP 
                   (dk_logic.not (dk_logic.ebP (_p_Key_eq kcur k1)))) =>
                dk_builtins.magic_prove 
                  (dk_logic.ebP 
                     (_p_OptValue_eq 
                        (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                           _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                           (Node _p_Key_T _p_Value_T kcur v q)) 
                        (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                           _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                           (Node _p_Key_T _p_Value_T kcur v q)))))) 
              (H2:(dk_logic.eP (dk_logic.ebP (_p_Key_eq kcur k1))) =>
               (__B_1_2_1_1_1_LEMMA:
                (dk_logic.eP 
                   (dk_logic.ebP 
                      (_p_OptValue_eq 
                         (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                            _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                            (Node _p_Key_T _p_Value_T kcur v q)) 
                         (_p_OptValue_some v)))) =>
                (__B_1_2_1_1_2_LEMMA:
                 (dk_logic.eP (dk_logic.ebP (_p_Key_eq kcur k2))) =>
                 (__B_1_2_1_1_3_LEMMA:
                  (dk_logic.eP 
                     (dk_logic.ebP 
                        (_p_OptValue_eq 
                           (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                              _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                              (Node _p_Key_T _p_Value_T kcur v q)) 
                           (_p_OptValue_some v)))) =>
                  zen.nnpp 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_OptValue_eq 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some k1 
                                (Node _p_Key_T _p_Value_T kcur v q)) 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some k2 
                                (Node _p_Key_T _p_Value_T kcur v q))))) 
                    (v_Vkc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_OptValue_eq 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k1 
                                       (Node _p_Key_T _p_Value_T kcur v q)) 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k2 
                                       (Node _p_Key_T _p_Value_T kcur v q))))))) =>
                     zen.Rcut 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_OptValue_T 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some k1 
                                      (Node _p_Key_T _p_Value_T kcur v q)) 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some k1 
                                      (Node _p_Key_T _p_Value_T kcur v q))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_OptValue_eq 
                                      (AssocMap__find _p_OptValue_T _p_Key_T 
                                         _p_Value_T _p_Key_eq 
                                         _p_OptValue_none _p_OptValue_some 
                                         k1 
                                         (Node _p_Key_T _p_Value_T kcur v q)) 
                                      (AssocMap__find _p_OptValue_T _p_Key_T 
                                         _p_Value_T _p_Key_eq 
                                         _p_OptValue_none _p_OptValue_some 
                                         k1 
                                         (Node _p_Key_T _p_Value_T kcur v q))))))) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_OptValue_T 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          k1 
                                          (Node _p_Key_T _p_Value_T kcur v q)) 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          k1 
                                          (Node _p_Key_T _p_Value_T kcur v q))))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_OptValue_eq 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k1 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q)) 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k1 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q)))))))) =>
                        zen.Rand 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_OptValue_T 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some k1 
                                      (Node _p_Key_T _p_Value_T kcur v q)) 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some k1 
                                      (Node _p_Key_T _p_Value_T kcur v q))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_OptValue_eq 
                                      (AssocMap__find _p_OptValue_T _p_Key_T 
                                         _p_Value_T _p_Key_eq 
                                         _p_OptValue_none _p_OptValue_some 
                                         k1 
                                         (Node _p_Key_T _p_Value_T kcur v q)) 
                                      (AssocMap__find _p_OptValue_T _p_Key_T 
                                         _p_Value_T _p_Key_eq 
                                         _p_OptValue_none _p_OptValue_some 
                                         k1 
                                         (Node _p_Key_T _p_Value_T kcur v q)))))) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_OptValue_T 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          k1 
                                          (Node _p_Key_T _p_Value_T kcur v q)) 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          k1 
                                          (Node _p_Key_T _p_Value_T kcur v q)))))) =>
                           v_Vnc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_OptValue_eq 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k1 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q)) 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k1 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q))))))) =>
                           zen.Rnoteq _p_OptValue_T 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some k1 
                                (Node _p_Key_T _p_Value_T kcur v q)) v_Vmc) 
                          v_Vlc) 
                       (v_Voc:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_OptValue_T 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k1 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q)) 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k1 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q))))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k1 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q)) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k1 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q))))))))) =>
                        zen.Rcut 
                          (zen.triangle 
                             (zen.equal _p_OptValue_T (_p_OptValue_some v) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k2 
                                   (Node _p_Key_T _p_Value_T kcur v q)))) 
                          (v_Vpc:
                           (zen.proof 
                              (zen.triangle 
                                 (zen.equal _p_OptValue_T 
                                    (_p_OptValue_some v) 
                                    (AssocMap__find _p_OptValue_T _p_Key_T 
                                       _p_Value_T _p_Key_eq _p_OptValue_none 
                                       _p_OptValue_some k2 
                                       (Node _p_Key_T _p_Value_T kcur v q))))) =>
                           zen.Rsubst basics.bool__t 
                             (v_Vqc:(zen.term basics.bool__t) =>
                              zen.triangle (focal.is_true v_Vqc)) 
                             (_p_OptValue_eq 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k1 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (_p_OptValue_some v)) 
                             (_p_OptValue_eq 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k1 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k2 
                                   (Node _p_Key_T _p_Value_T kcur v q))) 
                             (v_Vrc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_OptValue_eq 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k1 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q)) 
                                             (_p_OptValue_some v)) 
                                          (_p_OptValue_eq 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k1 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q)) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k2 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q))))))) =>
                              zen.Rsubst _p_OptValue_T 
                                (v_Vsc:(zen.term _p_OptValue_T) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_OptValue_eq v_Vsc 
                                            (_p_OptValue_some v)) 
                                         (_p_OptValue_eq 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)) 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k2 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)))))) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k1 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k1 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_OptValue_T 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k1 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q)) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k1 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q)))))) =>
                                 zen.Rnotand 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_OptValue_T 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)) 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q))))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)))))) 
                                   (v_Vtc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_OptValue_T 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q))))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (zen.equal _p_OptValue_T 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)) 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)))) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_OptValue_T 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k1 
                                                   (Node _p_Key_T _p_Value_T 
                                                      kcur v q)) 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k1 
                                                   (Node _p_Key_T _p_Value_T 
                                                      kcur v q))))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (zen.equal _p_OptValue_T 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)))) 
                                         (v_Vuc0:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_OptValue_T 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q))))) =>
                                          zen.Rsubst _p_OptValue_T 
                                            (v_Vvc:
                                             (zen.term _p_OptValue_T) =>
                                             zen.triangle 
                                               (zen.equal _p_OptValue_T 
                                                  v_Vvc 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)))) 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)) 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)) 
                                            (v_Vmc0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         _p_OptValue_T 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (zen.equal _p_OptValue_T 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)))) v_Vuc0 
                                               v_Vmc0) 
                                            (v_Vuc1:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal _p_OptValue_T 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)) 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q))))) =>
                                             zen.Rsubst _p_OptValue_T 
                                               (v_Vwc:
                                                (zen.term _p_OptValue_T) =>
                                                zen.triangle 
                                                  (zen.equal _p_OptValue_T 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) v_Vwc)) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) 
                                               (v_Vmc0:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            _p_OptValue_T 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k1 
                                                               (Node 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  kcur v q)) 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k1 
                                                               (Node 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  kcur v q)))))) =>
                                                zen.Rnoteq _p_OptValue_T 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  v_Vmc0) 
                                               (v_Vuc1:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         _p_OptValue_T 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        _p_OptValue_T 
                                                        (AssocMap__find 
                                                           _p_OptValue_T 
                                                           _p_Key_T 
                                                           _p_Value_T 
                                                           _p_Key_eq 
                                                           _p_OptValue_none 
                                                           _p_OptValue_some 
                                                           k1 
                                                           (Node _p_Key_T 
                                                              _p_Value_T 
                                                              kcur v q)) 
                                                        (AssocMap__find 
                                                           _p_OptValue_T 
                                                           _p_Key_T 
                                                           _p_Value_T 
                                                           _p_Key_eq 
                                                           _p_OptValue_none 
                                                           _p_OptValue_some 
                                                           k1 
                                                           (Node _p_Key_T 
                                                              _p_Value_T 
                                                              kcur v q)))) 
                                                  v_Vuc1 v_Vmc) v_Vuc1) 
                                            v_Vuc0) 
                                         (v_Vmc0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_OptValue_T 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)) 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)))))) =>
                                          zen.Rnoteq _p_OptValue_T 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)) v_Vmc0)) v_Vtc) 
                                   (v_Vxc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)) 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)))))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q))))) 
                                      (v_Vyc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)))))) =>
                                       zen.Rall _p_OptValue_T 
                                         (v_Vzc:(zen.term _p_OptValue_T) =>
                                          zen.forall _p_OptValue_T 
                                            (v_Vad:
                                             (zen.term _p_OptValue_T) =>
                                             zen.forall _p_OptValue_T 
                                               (v_Vbd:
                                                (zen.term _p_OptValue_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_OptValue_eq 
                                                           v_Vzc v_Vad))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              v_Vad v_Vbd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              v_Vzc v_Vbd))))))) 
                                         (AssocMap__find _p_OptValue_T 
                                            _p_Key_T _p_Value_T _p_Key_eq 
                                            _p_OptValue_none 
                                            _p_OptValue_some k1 
                                            (Node _p_Key_T _p_Value_T kcur v 
                                               q)) 
                                         (v_Vcd:
                                          (zen.proof 
                                             (zen.forall _p_OptValue_T 
                                                (v_Vad:
                                                 (zen.term _p_OptValue_T) =>
                                                 zen.forall _p_OptValue_T 
                                                   (v_Vbd:
                                                    (zen.term _p_OptValue_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                               v_Vad))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  v_Vad v_Vbd))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  v_Vbd)))))))) =>
                                          zen.Rall _p_OptValue_T 
                                            (v_Vad:
                                             (zen.term _p_OptValue_T) =>
                                             zen.forall _p_OptValue_T 
                                               (v_Vbd:
                                                (zen.term _p_OptValue_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_OptValue_eq 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           v_Vad))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              v_Vad v_Vbd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              v_Vbd)))))) 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k1 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)) 
                                            (v_Vdd:
                                             (zen.proof 
                                                (zen.forall _p_OptValue_T 
                                                   (v_Vbd:
                                                    (zen.term _p_OptValue_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  v_Vbd))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  v_Vbd))))))) =>
                                             zen.Rall _p_OptValue_T 
                                               (v_Vbd:
                                                (zen.term _p_OptValue_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_OptValue_eq 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              v_Vbd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              v_Vbd))))) 
                                               (_p_OptValue_some v) 
                                               (v_Ved:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (_p_OptValue_some 
                                                                    v)))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (_p_OptValue_some 
                                                                    v))))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_OptValue_eq 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (_p_OptValue_some 
                                                                 v)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (_p_OptValue_some 
                                                                 v))))) 
                                                  (v_Vnc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                     v_Vyc v_Vnc) 
                                                  (v_Vfd:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (_p_OptValue_some 
                                                                    v)))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (_p_OptValue_some 
                                                                    v)))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (_p_OptValue_some 
                                                                 v)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (_p_OptValue_some 
                                                                 v)))) 
                                                     (v_Vgd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (_p_OptValue_some 
                                                                    v)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_OptValue_eq 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                 (_p_OptValue_some 
                                                                    v)))) 
                                                        __B_1_2_1_1_1_LEMMA 
                                                        v_Vgd) 
                                                     (__B_1_2_1_1_1_LEMMA0:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (_p_OptValue_some 
                                                                    v))))) =>
                                                      zen.Rsubst 
                                                        basics.bool__t 
                                                        (v_Vqc:
                                                         (zen.term 
                                                            basics.bool__t) =>
                                                         zen.triangle 
                                                           (focal.is_true 
                                                              v_Vqc)) 
                                                        (_p_OptValue_eq 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (_p_OptValue_some 
                                                              v)) 
                                                        (_p_OptValue_eq 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k2 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q))) 
                                                        (v_Vrc0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (_p_OptValue_some 
                                                                    v)) 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                         zen.Rsubst 
                                                           _p_OptValue_T 
                                                           (v_Vsc:
                                                            (zen.term 
                                                               _p_OptValue_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_OptValue_eq 
                                                                    v_Vsc 
                                                                    (_p_OptValue_some 
                                                                    v)) 
                                                                    (
                                                                    _p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (v_Vmc0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_OptValue_T 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) =>
                                                            zen.Rnoteq 
                                                              _p_OptValue_T 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              v_Vmc0) 
                                                           (v_Vrc1:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (_p_OptValue_some 
                                                                    v)) 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                            zen.Rsubst 
                                                              _p_OptValue_T 
                                                              (v_Vhd:
                                                               (zen.term 
                                                                  _p_OptValue_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vhd) 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) 
                                                              (_p_OptValue_some 
                                                                 v) 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k2 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (v_Vid:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_OptValue_T 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_OptValue_T 
                                                                    (_p_OptValue_some 
                                                                    v) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))) 
                                                                 v_Vpc v_Vid) 
                                                              (v_Vjd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))) 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                               zen.Rnoteq 
                                                                 basics.bool__t 
                                                                 (_p_OptValue_eq 
                                                                    (
                                                                    AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (
                                                                    AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))) 
                                                                 v_Vjd) 
                                                              v_Vrc1) v_Vrc0) 
                                                        (v_Vkd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_OptValue_eq 
                                                                    (
                                                                    AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (
                                                                    AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                           v_Vkd v_Vkc) 
                                                        __B_1_2_1_1_1_LEMMA0) 
                                                     v_Vfd) v_Ved) v_Vdd) 
                                            v_Vcd) _p_OptValue_eq_transitive) 
                                      v_Vxc) v_Voc) 
                                (v_Vrc0:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_OptValue_eq 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k1 
                                                   (Node _p_Key_T _p_Value_T 
                                                      kcur v q)) 
                                                (_p_OptValue_some v)) 
                                             (_p_OptValue_eq 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k1 
                                                   (Node _p_Key_T _p_Value_T 
                                                      kcur v q)) 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k2 
                                                   (Node _p_Key_T _p_Value_T 
                                                      kcur v q))))))) =>
                                 zen.Rsubst _p_OptValue_T 
                                   (v_Vhd:(zen.term _p_OptValue_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_OptValue_eq 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) v_Vhd) 
                                            (_p_OptValue_eq 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k1 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k2 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)))))) 
                                   (_p_OptValue_some v) 
                                   (AssocMap__find _p_OptValue_T _p_Key_T 
                                      _p_Value_T _p_Key_eq _p_OptValue_none 
                                      _p_OptValue_some k2 
                                      (Node _p_Key_T _p_Value_T kcur v q)) 
                                   (v_Vid:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_OptValue_T 
                                                (_p_OptValue_some v) 
                                                (AssocMap__find 
                                                   _p_OptValue_T _p_Key_T 
                                                   _p_Value_T _p_Key_eq 
                                                   _p_OptValue_none 
                                                   _p_OptValue_some k2 
                                                   (Node _p_Key_T _p_Value_T 
                                                      kcur v q)))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal _p_OptValue_T 
                                            (_p_OptValue_some v) 
                                            (AssocMap__find _p_OptValue_T 
                                               _p_Key_T _p_Value_T _p_Key_eq 
                                               _p_OptValue_none 
                                               _p_OptValue_some k2 
                                               (Node _p_Key_T _p_Value_T 
                                                  kcur v q)))) v_Vpc v_Vid) 
                                   (v_Vjd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k2 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q))) 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k1 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k2 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q))))))) =>
                                    zen.Rnoteq basics.bool__t 
                                      (_p_OptValue_eq 
                                         (AssocMap__find _p_OptValue_T 
                                            _p_Key_T _p_Value_T _p_Key_eq 
                                            _p_OptValue_none 
                                            _p_OptValue_some k1 
                                            (Node _p_Key_T _p_Value_T kcur v 
                                               q)) 
                                         (AssocMap__find _p_OptValue_T 
                                            _p_Key_T _p_Value_T _p_Key_eq 
                                            _p_OptValue_none 
                                            _p_OptValue_some k2 
                                            (Node _p_Key_T _p_Value_T kcur v 
                                               q))) v_Vjd) v_Vrc0) v_Vrc) 
                             (v_Vkd:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_OptValue_eq 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k1 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q)) 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k2 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_OptValue_eq 
                                         (AssocMap__find _p_OptValue_T 
                                            _p_Key_T _p_Value_T _p_Key_eq 
                                            _p_OptValue_none 
                                            _p_OptValue_some k1 
                                            (Node _p_Key_T _p_Value_T kcur v 
                                               q)) 
                                         (AssocMap__find _p_OptValue_T 
                                            _p_Key_T _p_Value_T _p_Key_eq 
                                            _p_OptValue_none 
                                            _p_OptValue_some k2 
                                            (Node _p_Key_T _p_Value_T kcur v 
                                               q))))) v_Vkd v_Vkc) 
                             __B_1_2_1_1_1_LEMMA) 
                          (v_Vid:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_OptValue_T 
                                       (_p_OptValue_some v) 
                                       (AssocMap__find _p_OptValue_T 
                                          _p_Key_T _p_Value_T _p_Key_eq 
                                          _p_OptValue_none _p_OptValue_some 
                                          k2 
                                          (Node _p_Key_T _p_Value_T kcur v q)))))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_OptValue_eq (_p_OptValue_some v) 
                                      (AssocMap__find _p_OptValue_T _p_Key_T 
                                         _p_Value_T _p_Key_eq 
                                         _p_OptValue_none _p_OptValue_some 
                                         k2 
                                         (Node _p_Key_T _p_Value_T kcur v q))))) 
                             (v_Vld:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_OptValue_eq (_p_OptValue_some v) 
                                          (AssocMap__find _p_OptValue_T 
                                             _p_Key_T _p_Value_T _p_Key_eq 
                                             _p_OptValue_none 
                                             _p_OptValue_some k2 
                                             (Node _p_Key_T _p_Value_T kcur 
                                                v q)))))) =>
                              zen.Rall _p_OptValue_T 
                                (v_Vzc:(zen.term _p_OptValue_T) =>
                                 zen.forall _p_OptValue_T 
                                   (v_Vad:(zen.term _p_OptValue_T) =>
                                    zen.forall _p_OptValue_T 
                                      (v_Vbd:(zen.term _p_OptValue_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_OptValue_eq v_Vzc v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq v_Vzc v_Vbd))))))) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k1 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (v_Vcd:
                                 (zen.proof 
                                    (zen.forall _p_OptValue_T 
                                       (v_Vad:(zen.term _p_OptValue_T) =>
                                        zen.forall _p_OptValue_T 
                                          (v_Vbd:(zen.term _p_OptValue_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)) v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq v_Vad 
                                                         v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         v_Vbd)))))))) =>
                                 zen.Rall _p_OptValue_T 
                                   (v_Vad:(zen.term _p_OptValue_T) =>
                                    zen.forall _p_OptValue_T 
                                      (v_Vbd:(zen.term _p_OptValue_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_OptValue_eq 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) v_Vbd)))))) 
                                   (_p_OptValue_some v) 
                                   (v_Vmd:
                                    (zen.proof 
                                       (zen.forall _p_OptValue_T 
                                          (v_Vbd:(zen.term _p_OptValue_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)) 
                                                      (_p_OptValue_some v)))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (_p_OptValue_some v) 
                                                         v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         v_Vbd))))))) =>
                                    zen.Rall _p_OptValue_T 
                                      (v_Vbd:(zen.term _p_OptValue_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_OptValue_eq 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  (_p_OptValue_some v)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (_p_OptValue_some v) 
                                                     v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) v_Vbd))))) 
                                      (AssocMap__find _p_OptValue_T _p_Key_T 
                                         _p_Value_T _p_Key_eq 
                                         _p_OptValue_none _p_OptValue_some 
                                         k2 
                                         (Node _p_Key_T _p_Value_T kcur v q)) 
                                      (v_Vnd:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k1 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)) 
                                                      (_p_OptValue_some v)))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (_p_OptValue_some v) 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k2 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k2 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_OptValue_eq 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  (_p_OptValue_some v)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (_p_OptValue_some v) 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k2 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k2 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)))))) 
                                         (v_Vgd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         (_p_OptValue_some v)))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) 
                                                     (_p_OptValue_some v)))) 
                                            __B_1_2_1_1_1_LEMMA v_Vgd) 
                                         (v_Vod:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (_p_OptValue_some v) 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k2 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k2 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (_p_OptValue_some v) 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k2 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_OptValue_eq 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k1 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k2 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q))))) 
                                            (v_Vpd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_OptValue_eq 
                                                            (_p_OptValue_some 
                                                               v) 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k2 
                                                               (Node 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  kcur v q))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_OptValue_eq 
                                                        (_p_OptValue_some v) 
                                                        (AssocMap__find 
                                                           _p_OptValue_T 
                                                           _p_Key_T 
                                                           _p_Value_T 
                                                           _p_Key_eq 
                                                           _p_OptValue_none 
                                                           _p_OptValue_some 
                                                           k2 
                                                           (Node _p_Key_T 
                                                              _p_Value_T 
                                                              kcur v q))))) 
                                               v_Vld v_Vpd) 
                                            (v_Vkd:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_OptValue_eq 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k1 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)) 
                                                         (AssocMap__find 
                                                            _p_OptValue_T 
                                                            _p_Key_T 
                                                            _p_Value_T 
                                                            _p_Key_eq 
                                                            _p_OptValue_none 
                                                            _p_OptValue_some 
                                                            k2 
                                                            (Node _p_Key_T 
                                                               _p_Value_T 
                                                               kcur v q)))))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vqd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vqd)) 
                                               (_p_OptValue_eq 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k2 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q))) 
                                               (_p_OptValue_eq 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k2 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q))) 
                                               (v_Vjd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k2 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))) 
                                                            (_p_OptValue_eq 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k2 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                zen.Rsubst _p_OptValue_T 
                                                  (v_Vrd:
                                                   (zen.term _p_OptValue_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_OptValue_eq 
                                                              v_Vrd 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k2 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))) 
                                                           (_p_OptValue_eq 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k2 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k1 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  (v_Vmc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_OptValue_T 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                               (AssocMap__find 
                                                                  _p_OptValue_T 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  _p_Key_eq 
                                                                  _p_OptValue_none 
                                                                  _p_OptValue_some 
                                                                  k1 
                                                                  (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_OptValue_T 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_OptValue_eq 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) 
                                                     (v_Vtc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_OptValue_T 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_OptValue_T 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))) 
                                                        (v_Vuc:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_OptValue_T 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) =>
                                                         zen.Reqsym 
                                                           _p_OptValue_T 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           v_Vuc v_Vmc) v_Vtc) 
                                                     (v_Vxc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_OptValue_eq 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                        (v_Vyc:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) =>
                                                         zen.Rall 
                                                           _p_OptValue_T 
                                                           (v_Vzc:
                                                            (zen.term 
                                                               _p_OptValue_T) =>
                                                            zen.forall 
                                                              _p_OptValue_T 
                                                              (v_Vad:
                                                               (zen.term 
                                                                  _p_OptValue_T) =>
                                                               zen.forall 
                                                                 _p_OptValue_T 
                                                                 (v_Vbd:
                                                                  (zen.term 
                                                                    _p_OptValue_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (v_Vcd0:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  _p_OptValue_T 
                                                                  (v_Vad:
                                                                   (zen.term 
                                                                    _p_OptValue_T) =>
                                                                   zen.forall 
                                                                    _p_OptValue_T 
                                                                    (v_Vbd:
                                                                    (zen.term 
                                                                    _p_OptValue_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vbd)))))))) =>
                                                            zen.Rall 
                                                              _p_OptValue_T 
                                                              (v_Vad:
                                                               (zen.term 
                                                                  _p_OptValue_T) =>
                                                               zen.forall 
                                                                 _p_OptValue_T 
                                                                 (v_Vbd:
                                                                  (zen.term 
                                                                    _p_OptValue_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vad))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vbd)))))) 
                                                              (AssocMap__find 
                                                                 _p_OptValue_T 
                                                                 _p_Key_T 
                                                                 _p_Value_T 
                                                                 _p_Key_eq 
                                                                 _p_OptValue_none 
                                                                 _p_OptValue_some 
                                                                 k1 
                                                                 (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                              (v_Vdd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    _p_OptValue_T 
                                                                    (v_Vbd:
                                                                    (zen.term 
                                                                    _p_OptValue_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vbd))))))) =>
                                                               zen.Rall 
                                                                 _p_OptValue_T 
                                                                 (v_Vbd:
                                                                  (zen.term 
                                                                    _p_OptValue_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    v_Vbd))))) 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                 (v_Vsd:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) 
                                                                    (
                                                                    v_Vnc:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    v_Vyc 
                                                                    v_Vnc) 
                                                                    (
                                                                    v_Vtd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    (v_Vkc0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    v_Vkd 
                                                                    v_Vkc0) 
                                                                    (v_Vkd0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))) 
                                                                    v_Vkd0 
                                                                    v_Vkc) 
                                                                    v_Vtd) 
                                                                    v_Vsd) 
                                                                 v_Vdd) 
                                                              v_Vcd0) 
                                                           _p_OptValue_eq_transitive) 
                                                        v_Vxc) v_Voc) 
                                                  (v_Vjd0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))) 
                                                               (_p_OptValue_eq 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                   zen.Rsubst _p_OptValue_T 
                                                     (v_Vud:
                                                      (zen.term _p_OptValue_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_OptValue_eq 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                 v_Vud) 
                                                              (_p_OptValue_eq 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                 (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (
                                                                    Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k2 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) 
                                                     (AssocMap__find 
                                                        _p_OptValue_T 
                                                        _p_Key_T _p_Value_T 
                                                        _p_Key_eq 
                                                        _p_OptValue_none 
                                                        _p_OptValue_some k2 
                                                        (Node _p_Key_T 
                                                           _p_Value_T kcur v 
                                                           q)) 
                                                     (v_Vvd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_OptValue_T 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                  (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)))))) =>
                                                      zen.Rnoteq 
                                                        _p_OptValue_T 
                                                        (AssocMap__find 
                                                           _p_OptValue_T 
                                                           _p_Key_T 
                                                           _p_Value_T 
                                                           _p_Key_eq 
                                                           _p_OptValue_none 
                                                           _p_OptValue_some 
                                                           k2 
                                                           (Node _p_Key_T 
                                                              _p_Value_T 
                                                              kcur v q)) 
                                                        v_Vvd) 
                                                     (v_Vjd1:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))) 
                                                                  (_p_OptValue_eq 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k1 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q)) 
                                                                    (AssocMap__find 
                                                                    _p_OptValue_T 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    _p_Key_eq 
                                                                    _p_OptValue_none 
                                                                    _p_OptValue_some 
                                                                    k2 
                                                                    (Node 
                                                                    _p_Key_T 
                                                                    _p_Value_T 
                                                                    kcur v q))))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (_p_OptValue_eq 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k2 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q))) 
                                                        v_Vjd1) v_Vjd0) v_Vjd) 
                                               (v_Vkd0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_OptValue_eq 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k1 
                                                               (Node 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  kcur v q)) 
                                                            (AssocMap__find 
                                                               _p_OptValue_T 
                                                               _p_Key_T 
                                                               _p_Value_T 
                                                               _p_Key_eq 
                                                               _p_OptValue_none 
                                                               _p_OptValue_some 
                                                               k2 
                                                               (Node 
                                                                  _p_Key_T 
                                                                  _p_Value_T 
                                                                  kcur v q)))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_OptValue_eq 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k1 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q)) 
                                                           (AssocMap__find 
                                                              _p_OptValue_T 
                                                              _p_Key_T 
                                                              _p_Value_T 
                                                              _p_Key_eq 
                                                              _p_OptValue_none 
                                                              _p_OptValue_some 
                                                              k2 
                                                              (Node _p_Key_T 
                                                                 _p_Value_T 
                                                                 kcur v q))))) 
                                                  v_Vkd0 v_Vkc) v_Vkd) v_Vod) 
                                         v_Vnd) v_Vmd) v_Vcd) 
                                _p_OptValue_eq_transitive) 
                             (v_Vpd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_OptValue_eq 
                                             (_p_OptValue_some v) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some k2 
                                                (Node _p_Key_T _p_Value_T 
                                                   kcur v q))))))) =>
                              zen.Rall _p_OptValue_T 
                                (v_Vzc:(zen.term _p_OptValue_T) =>
                                 zen.forall _p_OptValue_T 
                                   (v_Vad:(zen.term _p_OptValue_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq v_Vzc v_Vad))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq v_Vad v_Vzc))))) 
                                (AssocMap__find _p_OptValue_T _p_Key_T 
                                   _p_Value_T _p_Key_eq _p_OptValue_none 
                                   _p_OptValue_some k2 
                                   (Node _p_Key_T _p_Value_T kcur v q)) 
                                (v_Vwd:
                                 (zen.proof 
                                    (zen.forall _p_OptValue_T 
                                       (v_Vad:(zen.term _p_OptValue_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k2 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)) 
                                                   v_Vad))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq v_Vad 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k2 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)))))))) =>
                                 zen.Rall _p_OptValue_T 
                                   (v_Vad:(zen.term _p_OptValue_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k2 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) v_Vad))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq v_Vad 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k2 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)))))) 
                                   (_p_OptValue_some v) 
                                   (v_Vxd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k2 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)) 
                                                   (_p_OptValue_some v)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (_p_OptValue_some v) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k2 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k2 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q)) 
                                               (_p_OptValue_some v)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_OptValue_eq 
                                               (_p_OptValue_some v) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some k2 
                                                  (Node _p_Key_T _p_Value_T 
                                                     kcur v q))))) 
                                      (v_Vyd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_OptValue_eq 
                                                      (AssocMap__find 
                                                         _p_OptValue_T 
                                                         _p_Key_T _p_Value_T 
                                                         _p_Key_eq 
                                                         _p_OptValue_none 
                                                         _p_OptValue_some k2 
                                                         (Node _p_Key_T 
                                                            _p_Value_T kcur 
                                                            v q)) 
                                                      (_p_OptValue_some v)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_OptValue_eq 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k2 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q)) 
                                                  (_p_OptValue_some v)))) 
                                         __B_1_2_1_1_3_LEMMA v_Vyd) 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_OptValue_eq 
                                                   (_p_OptValue_some v) 
                                                   (AssocMap__find 
                                                      _p_OptValue_T _p_Key_T 
                                                      _p_Value_T _p_Key_eq 
                                                      _p_OptValue_none 
                                                      _p_OptValue_some k2 
                                                      (Node _p_Key_T 
                                                         _p_Value_T kcur v q)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_OptValue_eq 
                                                  (_p_OptValue_some v) 
                                                  (AssocMap__find 
                                                     _p_OptValue_T _p_Key_T 
                                                     _p_Value_T _p_Key_eq 
                                                     _p_OptValue_none 
                                                     _p_OptValue_some k2 
                                                     (Node _p_Key_T 
                                                        _p_Value_T kcur v q))))) 
                                         v_Vld v_Vpd) v_Vxd) v_Vwd) 
                                _p_OptValue_eq_symmetric))))) 
                   (zen.nnpp 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_OptValue_eq 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some k2 
                                  (Node _p_Key_T _p_Value_T kcur v q)) 
                               (_p_OptValue_some v)))) 
                      (v_Vbc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_OptValue_eq 
                                      (dk_bool.ite _p_OptValue_T 
                                         (_p_Key_eq kcur k2) 
                                         (_p_OptValue_some v) 
                                         (dk_builtins.call_by_value 
                                            (pair_list_t__t _p_Key_T 
                                               _p_Value_T) _p_OptValue_T 
                                            (dk_builtins.call_by_value 
                                               _p_Key_T 
                                               (zen.arrow 
                                                  (pair_list_t__t _p_Key_T 
                                                     _p_Value_T) 
                                                  _p_OptValue_T) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some) k2) q)) 
                                      (_p_OptValue_some v)))))) =>
                       focal.zenon_focal_ite_rel_nl _p_OptValue_T 
                         _p_OptValue_T 
                         (v_Vcc:(zen.term _p_OptValue_T) =>
                          v_Vdc:(zen.term _p_OptValue_T) =>
                          zen.triangle 
                            (focal.is_true (_p_OptValue_eq v_Vcc v_Vdc))) 
                         (_p_Key_eq kcur k2) (_p_OptValue_some v) 
                         (dk_builtins.call_by_value 
                            (pair_list_t__t _p_Key_T _p_Value_T) 
                            _p_OptValue_T 
                            (dk_builtins.call_by_value _p_Key_T 
                               (zen.arrow 
                                  (pair_list_t__t _p_Key_T _p_Value_T) 
                                  _p_OptValue_T) 
                               (AssocMap__find _p_OptValue_T _p_Key_T 
                                  _p_Value_T _p_Key_eq _p_OptValue_none 
                                  _p_OptValue_some) k2) q) 
                         (_p_OptValue_some v) 
                         (__B_1_2_1_1_2_LEMMA0:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_Key_eq kcur k2)))) =>
                          v_Vec:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_OptValue_eq (_p_OptValue_some v) 
                                         (_p_OptValue_some v)))))) =>
                          zen.Rall _p_OptValue_T 
                            (v_Vfc:(zen.term _p_OptValue_T) =>
                             zen.triangle 
                               (focal.is_true (_p_OptValue_eq v_Vfc v_Vfc))) 
                            (_p_OptValue_some v) 
                            (v_Vgc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_OptValue_eq (_p_OptValue_some v) 
                                         (_p_OptValue_some v))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_OptValue_eq (_p_OptValue_some v) 
                                        (_p_OptValue_some v)))) v_Vgc v_Vec) 
                            _p_OptValue_eq_reflexive) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_Key_eq kcur k2))))) =>
                          v_Vic:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_OptValue_eq 
                                         (dk_builtins.call_by_value 
                                            (pair_list_t__t _p_Key_T 
                                               _p_Value_T) _p_OptValue_T 
                                            (dk_builtins.call_by_value 
                                               _p_Key_T 
                                               (zen.arrow 
                                                  (pair_list_t__t _p_Key_T 
                                                     _p_Value_T) 
                                                  _p_OptValue_T) 
                                               (AssocMap__find _p_OptValue_T 
                                                  _p_Key_T _p_Value_T 
                                                  _p_Key_eq _p_OptValue_none 
                                                  _p_OptValue_some) k2) q) 
                                         (_p_OptValue_some v)))))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (_p_Key_eq kcur k2))) 
                            __B_1_2_1_1_2_LEMMA v_Vhc) v_Vbc))) 
                  (dk_builtins.magic_prove (dk_logic.ebP (_p_Key_eq kcur k2)))) 
                 (zen.nnpp 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_OptValue_eq 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some k1 
                                (Node _p_Key_T _p_Value_T kcur v q)) 
                             (_p_OptValue_some v)))) 
                    (v_Vbc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_OptValue_eq 
                                    (dk_bool.ite _p_OptValue_T 
                                       (_p_Key_eq kcur k1) 
                                       (_p_OptValue_some v) 
                                       (dk_builtins.call_by_value 
                                          (pair_list_t__t _p_Key_T _p_Value_T) 
                                          _p_OptValue_T 
                                          (dk_builtins.call_by_value 
                                             _p_Key_T 
                                             (zen.arrow 
                                                (pair_list_t__t _p_Key_T 
                                                   _p_Value_T) _p_OptValue_T) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some) k1) q)) 
                                    (_p_OptValue_some v)))))) =>
                     focal.zenon_focal_ite_rel_nl _p_OptValue_T 
                       _p_OptValue_T 
                       (v_Vcc:(zen.term _p_OptValue_T) =>
                        v_Vdc:(zen.term _p_OptValue_T) =>
                        zen.triangle 
                          (focal.is_true (_p_OptValue_eq v_Vcc v_Vdc))) 
                       (_p_Key_eq kcur k1) (_p_OptValue_some v) 
                       (dk_builtins.call_by_value 
                          (pair_list_t__t _p_Key_T _p_Value_T) _p_OptValue_T 
                          (dk_builtins.call_by_value _p_Key_T 
                             (zen.arrow (pair_list_t__t _p_Key_T _p_Value_T) 
                                _p_OptValue_T) 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some) k1) q) 
                       (_p_OptValue_some v) 
                       (H3:
                        (zen.proof 
                           (zen.triangle (focal.is_true (_p_Key_eq kcur k1)))) =>
                        v_Vec:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq (_p_OptValue_some v) 
                                       (_p_OptValue_some v)))))) =>
                        zen.Rall _p_OptValue_T 
                          (v_Vfc:(zen.term _p_OptValue_T) =>
                           zen.triangle 
                             (focal.is_true (_p_OptValue_eq v_Vfc v_Vfc))) 
                          (_p_OptValue_some v) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq (_p_OptValue_some v) 
                                       (_p_OptValue_some v))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_OptValue_eq (_p_OptValue_some v) 
                                      (_p_OptValue_some v)))) v_Vgc v_Vec) 
                          _p_OptValue_eq_reflexive) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (_p_Key_eq kcur k1))))) =>
                        v_Vic:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_OptValue_eq 
                                       (dk_builtins.call_by_value 
                                          (pair_list_t__t _p_Key_T _p_Value_T) 
                                          _p_OptValue_T 
                                          (dk_builtins.call_by_value 
                                             _p_Key_T 
                                             (zen.arrow 
                                                (pair_list_t__t _p_Key_T 
                                                   _p_Value_T) _p_OptValue_T) 
                                             (AssocMap__find _p_OptValue_T 
                                                _p_Key_T _p_Value_T 
                                                _p_Key_eq _p_OptValue_none 
                                                _p_OptValue_some) k1) q) 
                                       (_p_OptValue_some v)))))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (_p_Key_eq kcur k1))) 
                          H2 v_Vhc) v_Vbc)))))) 
       (zen.nnpp 
          (zen.imp (zen.triangle (focal.is_true (_p_Key_eq k1 k2))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_OptValue_eq 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                         (Nil _p_Key_T _p_Value_T)) 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                         (Nil _p_Key_T _p_Value_T)))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true (_p_Key_eq k1 k2))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_OptValue_eq 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some k1 (Nil _p_Key_T _p_Value_T)) 
                             (AssocMap__find _p_OptValue_T _p_Key_T 
                                _p_Value_T _p_Key_eq _p_OptValue_none 
                                _p_OptValue_some k2 (Nil _p_Key_T _p_Value_T)))))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true (_p_Key_eq k1 k2))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_OptValue_eq 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k1 
                         (Nil _p_Key_T _p_Value_T)) 
                      (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T 
                         _p_Key_eq _p_OptValue_none _p_OptValue_some k2 
                         (Nil _p_Key_T _p_Value_T))))) 
             (v_Vac:
              (zen.proof (zen.triangle (focal.is_true (_p_Key_eq k1 k2)))) =>
              v_Vbc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_OptValue_eq _p_OptValue_none _p_OptValue_none))))) =>
              zen.Rall _p_OptValue_T 
                (v_Vcc:(zen.term _p_OptValue_T) =>
                 zen.triangle (focal.is_true (_p_OptValue_eq v_Vcc v_Vcc))) 
                _p_OptValue_none 
                (v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_OptValue_eq _p_OptValue_none _p_OptValue_none)))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_OptValue_eq _p_OptValue_none _p_OptValue_none))) 
                   v_Vdc v_Vbc) _p_OptValue_eq_reflexive) v_Vzb))).

def AssocMap__find_spec :
  _p_Key_T:cc.uT ->
  _p_Value_T:cc.uT ->
  _p_OptValue_T:cc.uT ->
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) ->
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) ->
  abst_find:((cc.eT _p_Key_T) ->
             (cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) ->
             cc.eT _p_OptValue_T) ->
  dk_logic.eP 
    (dk_logic.forall (pair_list_t__t _p_Key_T _p_Value_T) 
       (m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
        dk_logic.forall _p_Key_T 
          (s:(cc.eT _p_Key_T) =>
           dk_logic.forall _p_Key_T 
             (k:(cc.eT _p_Key_T) =>
              dk_logic.forall _p_Value_T 
                (v:(cc.eT _p_Value_T) =>
                 dk_logic.eqv 
                   (dk_logic.or 
                      (dk_logic.ebP 
                         (basics._equal_ _p_OptValue_T (abst_find s m) 
                            (_p_OptValue_some v))) 
                      (dk_logic.ebP (_p_Key_eq s k))) 
                   (dk_logic.ebP 
                      (basics._equal_ _p_OptValue_T 
                         (abst_find s 
                            (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                         (_p_OptValue_some v))))))))
  :=
  _p_Key_T:cc.uT =>
  _p_Value_T:cc.uT =>
  _p_OptValue_T:cc.uT =>
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) =>
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) =>
  abst_find:
  ((cc.eT _p_Key_T) ->
   (cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) -> cc.eT _p_OptValue_T) =>
  (__C_1_LEMMA:
   (m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) ->
    s:(cc.eT _p_Key_T) ->
    k:(cc.eT _p_Key_T) ->
    v:(cc.eT _p_Value_T) ->
    dk_logic.eP 
      (dk_logic.eqv 
         (dk_logic.or 
            (dk_logic.ebP 
               (basics._equal_ _p_OptValue_T (abst_find s m) 
                  (_p_OptValue_some v))) (dk_logic.ebP (_p_Key_eq s k))) 
         (dk_logic.ebP 
            (basics._equal_ _p_OptValue_T 
               (abst_find s (AssocMap__add _p_Key_T _p_Value_T k v m)) 
               (_p_OptValue_some v))))) =>
   zen.nnpp 
     (zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
        (v_Vzb:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
         zen.forall _p_Key_T 
           (v_Vac:(zen.term _p_Key_T) =>
            zen.forall _p_Key_T 
              (v_Vbc:(zen.term _p_Key_T) =>
               zen.forall _p_Value_T 
                 (v_Vcc:(zen.term _p_Value_T) =>
                  zen.eqv 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ _p_OptValue_T 
                                (abst_find v_Vac v_Vzb) 
                                (_p_OptValue_some v_Vcc)))) 
                       (zen.triangle (focal.is_true (_p_Key_eq v_Vac v_Vbc)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ _p_OptValue_T 
                             (abst_find v_Vac 
                                (AssocMap__add _p_Key_T _p_Value_T v_Vbc 
                                   v_Vcc v_Vzb)) (_p_OptValue_some v_Vcc))))))))) 
     (v_Vdc:
      (zen.proof 
         (zen.not 
            (zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
               (v_Vzb:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
                zen.forall _p_Key_T 
                  (v_Vac:(zen.term _p_Key_T) =>
                   zen.forall _p_Key_T 
                     (v_Vbc:(zen.term _p_Key_T) =>
                      zen.forall _p_Value_T 
                        (v_Vcc:(zen.term _p_Value_T) =>
                         zen.eqv 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._equal_ _p_OptValue_T 
                                       (abst_find v_Vac v_Vzb) 
                                       (_p_OptValue_some v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true (_p_Key_eq v_Vac v_Vbc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ _p_OptValue_T 
                                    (abst_find v_Vac 
                                       (AssocMap__add _p_Key_T _p_Value_T 
                                          v_Vbc v_Vcc v_Vzb)) 
                                    (_p_OptValue_some v_Vcc))))))))))) =>
      zen.Raxiom 
        (zen.forall (pair_list_t__t _p_Key_T _p_Value_T) 
           (v_Vzb:(zen.term (pair_list_t__t _p_Key_T _p_Value_T)) =>
            zen.forall _p_Key_T 
              (v_Vac:(zen.term _p_Key_T) =>
               zen.forall _p_Key_T 
                 (v_Vbc:(zen.term _p_Key_T) =>
                  zen.forall _p_Value_T 
                    (v_Vcc:(zen.term _p_Value_T) =>
                     zen.eqv 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._equal_ _p_OptValue_T 
                                   (abst_find v_Vac v_Vzb) 
                                   (_p_OptValue_some v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (_p_Key_eq v_Vac v_Vbc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ _p_OptValue_T 
                                (abst_find v_Vac 
                                   (AssocMap__add _p_Key_T _p_Value_T v_Vbc 
                                      v_Vcc v_Vzb)) (_p_OptValue_some v_Vcc))))))))) 
        __C_1_LEMMA v_Vdc)) 
    (m:(cc.eT (pair_list_t__t _p_Key_T _p_Value_T)) =>
     s:(cc.eT _p_Key_T) =>
     k:(cc.eT _p_Key_T) =>
     v:(cc.eT _p_Value_T) =>
     (__C_1_1_LEMMA:
      (H1:(dk_logic.eP 
             (dk_logic.or 
                (dk_logic.ebP 
                   (basics._equal_ _p_OptValue_T (abst_find s m) 
                      (_p_OptValue_some v))) (dk_logic.ebP (_p_Key_eq s k)))) ->
       dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ _p_OptValue_T 
               (abst_find s (AssocMap__add _p_Key_T _p_Value_T k v m)) 
               (_p_OptValue_some v)))) =>
      (__C_1_2_LEMMA:
       (H2:(dk_logic.eP 
              (dk_logic.ebP 
                 (basics._equal_ _p_OptValue_T 
                    (abst_find s (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                    (_p_OptValue_some v)))) ->
        dk_logic.eP 
          (dk_logic.or 
             (dk_logic.ebP 
                (basics._equal_ _p_OptValue_T (abst_find s m) 
                   (_p_OptValue_some v))) (dk_logic.ebP (_p_Key_eq s k)))) =>
       zen.nnpp 
         (zen.eqv 
            (zen.or 
               (zen.triangle 
                  (focal.is_true 
                     (basics._equal_ _p_OptValue_T (abst_find s m) 
                        (_p_OptValue_some v)))) 
               (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
            (zen.triangle 
               (focal.is_true 
                  (basics._equal_ _p_OptValue_T 
                     (abst_find s (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                     (_p_OptValue_some v))))) 
         (v_Vzb:
          (zen.proof 
             (zen.not 
                (zen.eqv 
                   (zen.or 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._equal_ _p_OptValue_T (abst_find s m) 
                               (_p_OptValue_some v)))) 
                      (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._equal_ _p_OptValue_T 
                            (abst_find s 
                               (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                            (_p_OptValue_some v))))))) =>
          zen.Rimply 
            (zen.or 
               (zen.triangle 
                  (focal.is_true 
                     (basics._equal_ _p_OptValue_T (abst_find s m) 
                        (_p_OptValue_some v)))) 
               (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
            (zen.triangle 
               (focal.is_true 
                  (basics._equal_ _p_OptValue_T 
                     (abst_find s (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                     (_p_OptValue_some v)))) 
            (v_Vac:
             (zen.proof 
                (zen.not 
                   (zen.or 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._equal_ _p_OptValue_T (abst_find s m) 
                               (_p_OptValue_some v)))) 
                      (zen.triangle (focal.is_true (_p_Key_eq s k)))))) =>
             zen.Rnotor 
               (zen.triangle 
                  (focal.is_true 
                     (basics._equal_ _p_OptValue_T (abst_find s m) 
                        (_p_OptValue_some v)))) 
               (zen.triangle (focal.is_true (_p_Key_eq s k))) 
               (v_Vbc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal _p_OptValue_T 
                               (abst_find s m) (_p_OptValue_some v)))))) =>
                v_Vcc:
                (zen.proof 
                   (zen.not (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                zen.Rimply 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ _p_OptValue_T 
                           (abst_find s 
                              (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                           (_p_OptValue_some v)))) 
                  (zen.or 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ _p_OptValue_T (abst_find s m) 
                              (_p_OptValue_some v)))) 
                     (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
                  (v_Vdc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics.syntactic_equal _p_OptValue_T 
                                  (abst_find s 
                                     (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                                  (_p_OptValue_some v)))))) =>
                   zen.Rnotequiv 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T (abst_find s m) 
                                 (_p_OptValue_some v)))) 
                        (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ _p_OptValue_T 
                              (abst_find s 
                                 (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                              (_p_OptValue_some v)))) 
                     (v_Vac0:
                      (zen.proof 
                         (zen.not 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_OptValue_T 
                                        (abst_find s m) (_p_OptValue_some v)))) 
                               (zen.triangle (focal.is_true (_p_Key_eq s k)))))) =>
                      v_Vec:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (basics.syntactic_equal _p_OptValue_T 
                                  (abst_find s 
                                     (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                                  (_p_OptValue_some v))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T 
                                 (abst_find s 
                                    (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                                 (_p_OptValue_some v)))) v_Vec v_Vdc) 
                     (v_Vfc:
                      (zen.proof 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ _p_OptValue_T 
                                     (abst_find s m) (_p_OptValue_some v)))) 
                            (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                      v_Vdc0:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics.syntactic_equal _p_OptValue_T 
                                     (abst_find s 
                                        (AssocMap__add _p_Key_T _p_Value_T k 
                                           v m)) (_p_OptValue_some v)))))) =>
                      zen.Raxiom 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ _p_OptValue_T 
                                    (abst_find s m) (_p_OptValue_some v)))) 
                           (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
                        v_Vfc v_Vac) v_Vzb) 
                  (v_Vfc:
                   (zen.proof 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ _p_OptValue_T (abst_find s m) 
                                  (_p_OptValue_some v)))) 
                         (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                   zen.Ror 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ _p_OptValue_T (abst_find s m) 
                              (_p_OptValue_some v)))) 
                     (zen.triangle (focal.is_true (_p_Key_eq s k))) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (basics.syntactic_equal _p_OptValue_T 
                                  (abst_find s m) (_p_OptValue_some v))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T (abst_find s m) 
                                 (_p_OptValue_some v)))) v_Vgc v_Vbc) 
                     (v_Vhc:
                      (zen.proof 
                         (zen.triangle (focal.is_true (_p_Key_eq s k)))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (_p_Key_eq s k))) v_Vhc 
                        v_Vcc) v_Vfc) __C_1_2_LEMMA) v_Vac) 
            (v_Vec:
             (zen.proof 
                (zen.triangle 
                   (focal.is_true 
                      (basics.syntactic_equal _p_OptValue_T 
                         (abst_find s 
                            (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                         (_p_OptValue_some v))))) =>
             zen.Rimply 
               (zen.triangle 
                  (focal.is_true 
                     (basics._equal_ _p_OptValue_T 
                        (abst_find s 
                           (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                        (_p_OptValue_some v)))) 
               (zen.or 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ _p_OptValue_T (abst_find s m) 
                           (_p_OptValue_some v)))) 
                  (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
               (v_Vdc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal _p_OptValue_T 
                               (abst_find s 
                                  (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                               (_p_OptValue_some v)))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ _p_OptValue_T 
                           (abst_find s 
                              (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                           (_p_OptValue_some v)))) v_Vec v_Vdc) 
               (v_Vfc:
                (zen.proof 
                   (zen.or 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._equal_ _p_OptValue_T (abst_find s m) 
                               (_p_OptValue_some v)))) 
                      (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                zen.Ror 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ _p_OptValue_T (abst_find s m) 
                           (_p_OptValue_some v)))) 
                  (zen.triangle (focal.is_true (_p_Key_eq s k))) 
                  (v_Vgc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal _p_OptValue_T 
                               (abst_find s m) (_p_OptValue_some v))))) =>
                   zen.Rnotequiv 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T (abst_find s m) 
                                 (_p_OptValue_some v)))) 
                        (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ _p_OptValue_T 
                              (abst_find s 
                                 (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                              (_p_OptValue_some v)))) 
                     (v_Vac:
                      (zen.proof 
                         (zen.not 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_OptValue_T 
                                        (abst_find s m) (_p_OptValue_some v)))) 
                               (zen.triangle (focal.is_true (_p_Key_eq s k)))))) =>
                      v_Vec0:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (basics.syntactic_equal _p_OptValue_T 
                                  (abst_find s 
                                     (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                                  (_p_OptValue_some v))))) =>
                      zen.Rnotor 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T (abst_find s m) 
                                 (_p_OptValue_some v)))) 
                        (zen.triangle (focal.is_true (_p_Key_eq s k))) 
                        (v_Vbc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics.syntactic_equal _p_OptValue_T 
                                        (abst_find s m) (_p_OptValue_some v)))))) =>
                         v_Vcc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ _p_OptValue_T 
                                    (abst_find s m) (_p_OptValue_some v)))) 
                           v_Vgc v_Vbc) v_Vac) 
                     (v_Vfc0:
                      (zen.proof 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ _p_OptValue_T 
                                     (abst_find s m) (_p_OptValue_some v)))) 
                            (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                      v_Vdc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics.syntactic_equal _p_OptValue_T 
                                     (abst_find s 
                                        (AssocMap__add _p_Key_T _p_Value_T k 
                                           v m)) (_p_OptValue_some v)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T 
                                 (abst_find s 
                                    (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                                 (_p_OptValue_some v)))) v_Vec v_Vdc) v_Vzb) 
                  (v_Vhc:
                   (zen.proof (zen.triangle (focal.is_true (_p_Key_eq s k)))) =>
                   zen.Rnotequiv 
                     (zen.or 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T (abst_find s m) 
                                 (_p_OptValue_some v)))) 
                        (zen.triangle (focal.is_true (_p_Key_eq s k)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ _p_OptValue_T 
                              (abst_find s 
                                 (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                              (_p_OptValue_some v)))) 
                     (v_Vac:
                      (zen.proof 
                         (zen.not 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_OptValue_T 
                                        (abst_find s m) (_p_OptValue_some v)))) 
                               (zen.triangle (focal.is_true (_p_Key_eq s k)))))) =>
                      v_Vec0:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (basics.syntactic_equal _p_OptValue_T 
                                  (abst_find s 
                                     (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                                  (_p_OptValue_some v))))) =>
                      zen.Rnotor 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T (abst_find s m) 
                                 (_p_OptValue_some v)))) 
                        (zen.triangle (focal.is_true (_p_Key_eq s k))) 
                        (v_Vbc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics.syntactic_equal _p_OptValue_T 
                                        (abst_find s m) (_p_OptValue_some v)))))) =>
                         v_Vcc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (_p_Key_eq s k))) 
                           v_Vhc v_Vcc) v_Vac) 
                     (v_Vfc0:
                      (zen.proof 
                         (zen.or 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ _p_OptValue_T 
                                     (abst_find s m) (_p_OptValue_some v)))) 
                            (zen.triangle (focal.is_true (_p_Key_eq s k))))) =>
                      v_Vdc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics.syntactic_equal _p_OptValue_T 
                                     (abst_find s 
                                        (AssocMap__add _p_Key_T _p_Value_T k 
                                           v m)) (_p_OptValue_some v)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ _p_OptValue_T 
                                 (abst_find s 
                                    (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                                 (_p_OptValue_some v)))) v_Vec v_Vdc) v_Vzb) 
                  v_Vfc) __C_1_2_LEMMA) __C_1_1_LEMMA)) 
        (H2:
         (dk_logic.eP 
            (dk_logic.ebP 
               (basics._equal_ _p_OptValue_T 
                  (abst_find s (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                  (_p_OptValue_some v)))) =>
         (__C_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (basics._equal_ (pair_list_t__t _p_Key_T _p_Value_T) 
                   (AssocMap__add _p_Key_T _p_Value_T k v m) 
                   (Node _p_Key_T _p_Value_T k v m)))) =>
          dk_builtins.magic_prove 
            (dk_logic.or 
               (dk_logic.ebP 
                  (basics._equal_ _p_OptValue_T (abst_find s m) 
                     (_p_OptValue_some v))) (dk_logic.ebP (_p_Key_eq s k)))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ (pair_list_t__t _p_Key_T _p_Value_T) 
                       (AssocMap__add _p_Key_T _p_Value_T k v m) 
                       (Node _p_Key_T _p_Value_T k v m)))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (basics.syntactic_equal 
                              (pair_list_t__t _p_Key_T _p_Value_T) 
                              (Node _p_Key_T _p_Value_T k v m) 
                              (Node _p_Key_T _p_Value_T k v m)))))) =>
               focal.zenon_not_syntactic_equal 
                 (pair_list_t__t _p_Key_T _p_Value_T) 
                 (AssocMap__add _p_Key_T _p_Value_T k v m) 
                 (Node _p_Key_T _p_Value_T k v m) 
                 (v_Vac:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal (pair_list_t__t _p_Key_T _p_Value_T) 
                              (Node _p_Key_T _p_Value_T k v m) 
                              (Node _p_Key_T _p_Value_T k v m))))) =>
                  zen.Rnoteq (pair_list_t__t _p_Key_T _p_Value_T) 
                    (Node _p_Key_T _p_Value_T k v m) v_Vac) v_Vzb)))) 
       (H1:
        (dk_logic.eP 
           (dk_logic.or 
              (dk_logic.ebP 
                 (basics._equal_ _p_OptValue_T (abst_find s m) 
                    (_p_OptValue_some v))) (dk_logic.ebP (_p_Key_eq s k)))) =>
        (__C_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (basics._equal_ (pair_list_t__t _p_Key_T _p_Value_T) 
                  (AssocMap__add _p_Key_T _p_Value_T k v m) 
                  (Node _p_Key_T _p_Value_T k v m)))) =>
         dk_builtins.magic_prove 
           (dk_logic.ebP 
              (basics._equal_ _p_OptValue_T 
                 (abst_find s (AssocMap__add _p_Key_T _p_Value_T k v m)) 
                 (_p_OptValue_some v)))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (basics._equal_ (pair_list_t__t _p_Key_T _p_Value_T) 
                      (AssocMap__add _p_Key_T _p_Value_T k v m) 
                      (Node _p_Key_T _p_Value_T k v m)))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal 
                             (pair_list_t__t _p_Key_T _p_Value_T) 
                             (Node _p_Key_T _p_Value_T k v m) 
                             (Node _p_Key_T _p_Value_T k v m)))))) =>
              focal.zenon_not_syntactic_equal 
                (pair_list_t__t _p_Key_T _p_Value_T) 
                (AssocMap__add _p_Key_T _p_Value_T k v m) 
                (Node _p_Key_T _p_Value_T k v m) 
                (v_Vac:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal (pair_list_t__t _p_Key_T _p_Value_T) 
                             (Node _p_Key_T _p_Value_T k v m) 
                             (Node _p_Key_T _p_Value_T k v m))))) =>
                 zen.Rnoteq (pair_list_t__t _p_Key_T _p_Value_T) 
                   (Node _p_Key_T _p_Value_T k v m) v_Vac) v_Vzb)))).

def AssocMap__collection_create
  :=
  _p_Key_T:cc.uT =>
  _p_Value_T:cc.uT =>
  _p_OptValue_T:cc.uT =>
  _p_Key_eq:((cc.eT _p_Key_T) -> (cc.eT _p_Key_T) -> cc.eT basics.bool__t) =>
  _p_Key_eq_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_Key_T 
        (x:(cc.eT _p_Key_T) => dk_logic.ebP (_p_Key_eq x x)))) =>
  _p_OptValue_eq:
  ((cc.eT _p_OptValue_T) -> (cc.eT _p_OptValue_T) -> cc.eT basics.bool__t) =>
  _p_OptValue_none:(cc.eT _p_OptValue_T) =>
  _p_OptValue_some:((cc.eT _p_Value_T) -> cc.eT _p_OptValue_T) =>
  _p_OptValue_eq_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) => dk_logic.ebP (_p_OptValue_eq x x)))) =>
  _p_OptValue_eq_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) =>
         dk_logic.forall _p_OptValue_T 
           (y:(cc.eT _p_OptValue_T) =>
            dk_logic.imp (dk_logic.ebP (_p_OptValue_eq x y)) 
              (dk_logic.ebP (_p_OptValue_eq y x)))))) =>
  _p_OptValue_eq_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_OptValue_T 
        (x:(cc.eT _p_OptValue_T) =>
         dk_logic.forall _p_OptValue_T 
           (y:(cc.eT _p_OptValue_T) =>
            dk_logic.forall _p_OptValue_T 
              (z:(cc.eT _p_OptValue_T) =>
               dk_logic.imp (dk_logic.ebP (_p_OptValue_eq x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_OptValue_eq y z)) 
                    (dk_logic.ebP (_p_OptValue_eq x z)))))))) =>
  _p_OptValue_none_different_some:
  (dk_logic.eP 
     (dk_logic.forall _p_Value_T 
        (v:(cc.eT _p_Value_T) =>
         dk_logic.not 
           (dk_logic.ebP 
              (_p_OptValue_eq (_p_OptValue_some v) _p_OptValue_none))))) =>
  AssocMap__mk_record _p_Key_T _p_Value_T _p_OptValue_T _p_Key_eq 
    _p_OptValue_eq _p_OptValue_none _p_OptValue_some 
    (pair_list_t__t _p_Key_T _p_Value_T) (AssocMap__add _p_Key_T _p_Value_T) 
    (AssocMap__empty _p_Key_T _p_Value_T) 
    (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T _p_Key_eq 
       _p_OptValue_none _p_OptValue_some) 
    (AssocMap__find_added_not_fails _p_Key_T _p_Value_T _p_OptValue_T 
       _p_Key_eq _p_Key_eq_reflexive _p_OptValue_eq _p_OptValue_none 
       _p_OptValue_some _p_OptValue_eq_reflexive _p_OptValue_eq_symmetric 
       _p_OptValue_eq_transitive _p_OptValue_none_different_some) 
    (AssocMap__find_same_key_same_value _p_Key_T _p_Value_T _p_OptValue_T 
       _p_Key_eq _p_OptValue_eq _p_OptValue_none _p_OptValue_some 
       _p_OptValue_eq_reflexive _p_OptValue_eq_symmetric 
       _p_OptValue_eq_transitive) 
    (AssocMap__find_spec _p_Key_T _p_Value_T _p_OptValue_T _p_Key_eq 
       _p_OptValue_some 
       (AssocMap__find _p_OptValue_T _p_Key_T _p_Value_T _p_Key_eq 
          _p_OptValue_none _p_OptValue_some)).

