#NAME strict_orders.

def Strict_partial_order__gt :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) => y:(cc.eT abst_T) => abst_lt y x.

def Strict_partial_order__leq :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  basics._bar__bar_ (abst_lt x y) (basics.syntactic_equal abst_T x y).

def Strict_partial_order__gt_is_lt :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP (Strict_partial_order__gt abst_T abst_lt x y)) 
             (dk_logic.ebP (abst_lt y x)))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__gt abst_T abst_lt v_Vzb v_Vac))) 
             (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__gt abst_T abst_lt v_Vzb 
                             v_Vac))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__gt abst_T abst_lt v_Vzb v_Vac))) 
             (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__gt abst_T abst_lt v_Vcc 
                             v_Vac))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vac v_Vcc))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__gt abst_T abst_lt v_Vcc v_Vac))) 
             (zen.triangle (focal.is_true (abst_lt v_Vac v_Vcc)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__gt abst_T abst_lt v_Vcc 
                             v_Vec))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc)))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__gt abst_T abst_lt v_Vcc v_Vec))) 
             (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))))) =>
              v_Vhc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc)))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) v_Vhc 
                v_Vgc) 
             (v_Vhc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc)))) =>
              v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) v_Vhc 
                v_Vgc) v_Vfc) v_Vdc) v_Vbc).

def Strict_partial_order__leq_reflexive :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x x)))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true 
             (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vzb)))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true 
             (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (basics._bar__bar_ (abst_lt v_Vbc v_Vbc) 
                       (basics.syntactic_equal abst_T v_Vbc v_Vbc)))))) =>
        focal.zenon_focal_notor (abst_lt v_Vbc v_Vbc) 
          (basics.syntactic_equal abst_T v_Vbc v_Vbc) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.or 
                    (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal abst_T v_Vbc v_Vbc)))))) =>
           zen.Rnotor (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))) 
             (zen.triangle 
                (focal.is_true (basics.syntactic_equal abst_T v_Vbc v_Vbc))) 
             (v_Vec:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))))) =>
              v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal abst_T v_Vbc v_Vbc))))) =>
              focal.zenon_not_syntactic_equal abst_T v_Vbc v_Vbc 
                (v_Vgc:
                 (zen.proof 
                    (zen.not (zen.triangle (zen.equal abst_T v_Vbc v_Vbc)))) =>
                 zen.Rnoteq abst_T v_Vbc v_Vgc) v_Vfc) v_Vdc) v_Vcc) v_Vac).

def Strict_partial_order__lt_refines_leq :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
             (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y)))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vac)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vzb 
                             v_Vac)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vac))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vcc 
                             v_Vac))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vcc v_Vac)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vcc 
                             v_Vec)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vcc v_Vec))) 
             (v_Vgc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (abst_lt v_Vcc v_Vec) 
                             (basics.syntactic_equal abst_T v_Vcc v_Vec)))))) =>
              focal.zenon_focal_notor (abst_lt v_Vcc v_Vec) 
                (basics.syntactic_equal abst_T v_Vcc v_Vec) 
                (v_Vic:
                 (zen.proof 
                    (zen.not 
                       (zen.or 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T v_Vcc v_Vec)))))) =>
                 zen.Rnotor 
                   (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                   (zen.triangle 
                      (focal.is_true 
                         (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T v_Vcc v_Vec))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                      v_Vgc v_Vjc) v_Vic) v_Vhc) v_Vfc) v_Vdc) v_Vbc).

def Strict_partial_order__lt_is_asymetric :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_irreflexive:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.not (dk_logic.ebP (abst_lt x x))))) ->
  abst_lt_is_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_lt x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_lt y z)) 
                                          (dk_logic.ebP (abst_lt x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
             (dk_logic.not (dk_logic.ebP (abst_lt y x))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))) =>
  abst_lt_is_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_lt y z)) 
                    (dk_logic.ebP (abst_lt x z)))))))) =>
  (__D_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.ebP (abst_lt x y))) ->
    dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_lt y x)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
              (zen.not (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb))))))) 
        __D_1_LEMMA v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.ebP (abst_lt x y))) =>
     (__D_1_1_LEMMA:
      (F:(dk_logic.eP (dk_logic.ebP (abst_lt y x))) ->
       dk_logic.eP (dk_logic.ebP (abst_lt x x))) =>
      zen.nnpp (zen.not (zen.triangle (focal.is_true (abst_lt y x)))) 
        (v_Vzb:
         (zen.proof 
            (zen.not (zen.not (zen.triangle (focal.is_true (abst_lt y x)))))) =>
         zen.Rnotnot (zen.triangle (focal.is_true (abst_lt y x))) 
           (v_Vac:(zen.proof (zen.triangle (focal.is_true (abst_lt y x)))) =>
            zen.Rimply (zen.triangle (focal.is_true (abst_lt y x))) 
              (zen.triangle (focal.is_true (abst_lt x x))) 
              (v_Vbc:
               (zen.proof 
                  (zen.not (zen.triangle (focal.is_true (abst_lt y x))))) =>
               zen.Raxiom (zen.triangle (focal.is_true (abst_lt y x))) v_Vac 
                 v_Vbc) 
              (v_Vcc:
               (zen.proof (zen.triangle (focal.is_true (abst_lt x x)))) =>
               zen.Rall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vdc)))) x 
                 (v_Vec:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_lt x x))))) =>
                  zen.Raxiom (zen.triangle (focal.is_true (abst_lt x x))) 
                    v_Vcc v_Vec) abst_lt_is_irreflexive) __D_1_1_LEMMA) v_Vzb)) 
       (F:(dk_logic.eP (dk_logic.ebP (abst_lt y x))) =>
        zen.nnpp (zen.triangle (focal.is_true (abst_lt x x))) 
          (v_Vkc:
           (zen.proof (zen.not (zen.triangle (focal.is_true (abst_lt x x))))) =>
           zen.Rcut 
             (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                (zen.not (zen.triangle (focal.is_true (abst_lt x x))))) 
             (v_Vlc:
              (zen.proof 
                 (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                    (zen.not (zen.triangle (focal.is_true (abst_lt x x)))))) =>
              zen.Rand (zen.not (zen.triangle (zen.equal abst_T x x))) 
                (zen.not (zen.triangle (focal.is_true (abst_lt x x)))) 
                (v_Vmc:
                 (zen.proof (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not (zen.triangle (focal.is_true (abst_lt x x))))) =>
                 zen.Rnoteq abst_T x v_Vmc) v_Vlc) 
             (v_Vnc:
              (zen.proof 
                 (zen.not 
                    (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                       (zen.not (zen.triangle (focal.is_true (abst_lt x x))))))) =>
              zen.Rcut (zen.triangle (zen.equal abst_T y x)) 
                (v_Voc:(zen.proof (zen.triangle (zen.equal abst_T y x))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vpc:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vpc)) (abst_lt x y) 
                   (abst_lt x x) 
                   (v_Vqc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t (abst_lt x y) 
                                (abst_lt x x))))) =>
                    zen.Rsubst abst_T 
                      (v_Vrc:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t (abst_lt v_Vrc y) 
                               (abst_lt x x)))) x x 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                       zen.Rnotand 
                         (zen.not (zen.triangle (zen.equal abst_T x x))) 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_lt x x)))) 
                         (v_Vsc:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T x x))))) =>
                          zen.Rnotnot (zen.triangle (zen.equal abst_T x x)) 
                            (v_Vtc:
                             (zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                             zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                               (v_Vtc:
                                (zen.proof 
                                   (zen.triangle (zen.equal abst_T x x))) =>
                                zen.Rsubst abst_T 
                                  (v_Vuc:(zen.term abst_T) =>
                                   zen.triangle (zen.equal abst_T v_Vuc x)) 
                                  x x 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle (zen.equal abst_T x x)))) =>
                                   zen.Raxiom 
                                     (zen.triangle (zen.equal abst_T x x)) 
                                     v_Vtc v_Vmc) 
                                  (v_Vtc:
                                   (zen.proof 
                                      (zen.triangle (zen.equal abst_T x x))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vvc:(zen.term abst_T) =>
                                      zen.triangle (zen.equal abst_T x v_Vvc)) 
                                     x x 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T x x)))) =>
                                      zen.Rnoteq abst_T x v_Vmc) 
                                     (v_Vtc:
                                      (zen.proof 
                                         (zen.triangle (zen.equal abst_T x x))) =>
                                      zen.Raxiom 
                                        (zen.triangle (zen.equal abst_T x x)) 
                                        v_Vtc v_Vmc) v_Vtc) v_Vtc) 
                               (v_Vmc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle (zen.equal abst_T x x)))) =>
                                zen.Rnoteq abst_T x v_Vmc)) v_Vsc) 
                         (v_Vwc:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x x)))))) =>
                          zen.Rnotnot 
                            (zen.triangle (focal.is_true (abst_lt x x))) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.triangle (focal.is_true (abst_lt x x)))) =>
                             zen.Rall abst_T 
                               (v_Vyc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vzc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vyc v_Vzc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vzc v_Vad))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vyc v_Vad))))))) 
                               x 
                               (v_Vbd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vzc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vad:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt x v_Vzc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt v_Vzc v_Vad))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x v_Vad)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vzc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt x v_Vzc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vzc v_Vad))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt x v_Vad)))))) x 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vad:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt x x))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x v_Vad))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x v_Vad))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt x x))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt x v_Vad))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt x v_Vad))))) y 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt x x))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x y))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x y)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt x x))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x y))) 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x y)))) 
                                        (v_Vkc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x x))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x x))) 
                                           v_Vxc v_Vkc) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x y))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x y))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x y))) 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x y))) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x y))) 
                                              H v_Vfd) 
                                           (H:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x y)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vpc:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vpc)) 
                                              (abst_lt x y) (abst_lt x x) 
                                              (v_Vqc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_lt x y) 
                                                           (abst_lt x x))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vrc:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_lt v_Vrc y) 
                                                          (abst_lt x x)))) x 
                                                 x 
                                                 (v_Vmc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              x x)))) =>
                                                  zen.Rnoteq abst_T x v_Vmc) 
                                                 (v_Vqc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_lt x y) 
                                                              (abst_lt x x))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vgd:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_lt x v_Vgd) 
                                                             (abst_lt x x)))) 
                                                    y x 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T y x)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             y x)) v_Voc 
                                                       v_Vhd) 
                                                    (v_Vid:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_lt x x) 
                                                                 (abst_lt x x))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_lt x x) v_Vid) 
                                                    v_Vqc) v_Vqc) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x x)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x x))) v_Vxc 
                                                 v_Vkc) H) v_Ved) v_Vdd) 
                                     v_Vcd) v_Vbd) abst_lt_is_transitive) 
                            v_Vwc) v_Vnc) 
                      (v_Vqc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t (abst_lt x y) 
                                   (abst_lt x x))))) =>
                       zen.Rsubst abst_T 
                         (v_Vgd:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t (abst_lt x v_Vgd) 
                                  (abst_lt x x)))) y x 
                         (v_Vhd:
                          (zen.proof 
                             (zen.not (zen.triangle (zen.equal abst_T y x)))) =>
                          zen.Raxiom (zen.triangle (zen.equal abst_T y x)) 
                            v_Voc v_Vhd) 
                         (v_Vid:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t (abst_lt x x) 
                                      (abst_lt x x))))) =>
                          zen.Rnoteq basics.bool__t (abst_lt x x) v_Vid) 
                         v_Vqc) v_Vqc) 
                   (v_Vxc:
                    (zen.proof (zen.triangle (focal.is_true (abst_lt x x)))) =>
                    zen.Raxiom (zen.triangle (focal.is_true (abst_lt x x))) 
                      v_Vxc v_Vkc) H) 
                (v_Vhd:
                 (zen.proof (zen.not (zen.triangle (zen.equal abst_T y x)))) =>
                 zen.Rcut (zen.triangle (focal.is_true (abst_lt y x))) 
                   (F:
                    (zen.proof (zen.triangle (focal.is_true (abst_lt y x)))) =>
                    zen.Rall abst_T 
                      (v_Vyc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_lt v_Vyc v_Vzc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vzc v_Vad))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vyc v_Vad))))))) 
                      x 
                      (v_Vbd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vzc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vad:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x v_Vzc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Vzc v_Vad))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x v_Vad)))))))) =>
                       zen.Rall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_lt x v_Vzc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vzc v_Vad))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt x v_Vad)))))) y 
                         (v_Vjd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vad:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x y))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt y v_Vad))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x v_Vad))))))) =>
                          zen.Rall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle (focal.is_true (abst_lt x y))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt y v_Vad))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt x v_Vad))))) x 
                            (v_Vkd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x y))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt y x))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x x)))))) =>
                             zen.Rimply 
                               (zen.triangle (focal.is_true (abst_lt x y))) 
                               (zen.imp 
                                  (zen.triangle (focal.is_true (abst_lt y x))) 
                                  (zen.triangle (focal.is_true (abst_lt x x)))) 
                               (v_Vfd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x y))))) =>
                                zen.Raxiom 
                                  (zen.triangle (focal.is_true (abst_lt x y))) 
                                  H v_Vfd) 
                               (v_Vld:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt y x))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x x))))) =>
                                zen.Rimply 
                                  (zen.triangle (focal.is_true (abst_lt y x))) 
                                  (zen.triangle (focal.is_true (abst_lt x x))) 
                                  (v_Vmd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y x))) F 
                                     v_Vmd) 
                                  (v_Vxc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x x)))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vpc:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vpc)) 
                                     (abst_lt x x) (abst_lt x x) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_lt x x) (abst_lt x x))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vnd:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_lt v_Vnd x) 
                                                 (abst_lt x x)))) x x 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x x)))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x x)))) 
                                           (v_Vsc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T x x))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x)) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T x x))) =>
                                               zen.Reqsym abst_T x x v_Vtc 
                                                 v_Vmc) v_Vsc) 
                                           (v_Vwc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x x)))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x x))) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x x)))) =>
                                               zen.Rall abst_T 
                                                 (v_Vyc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vzc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_lt 
                                                                   v_Vyc 
                                                                   v_Vzc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                                 x 
                                                 (v_Vbd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vzc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vad:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_lt 
                                                                    x v_Vzc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vad)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vzc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_lt x 
                                                                   v_Vzc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x v_Vad)))))) 
                                                    x 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vad:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_lt 
                                                                    x x))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vad))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vad))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_lt x x))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x v_Vad))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x v_Vad))))) 
                                                       x 
                                                       (v_Vod:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_lt 
                                                                    x x))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_lt x x))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x x))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x x)))) 
                                                          (v_Vkc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x x))) 
                                                             v_Vxc v_Vkc) 
                                                          (v_Vpd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x x))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x x))) 
                                                             (v_Vkc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                v_Vxc v_Vkc) 
                                                             (v_Vxc:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                v_Vxc v_Vkc) 
                                                             v_Vpd) v_Vod) 
                                                       v_Vcd) v_Vbd) 
                                                 abst_lt_is_transitive) v_Vwc) 
                                           v_Vnc) 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_lt x x) 
                                                     (abst_lt x x))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vgd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_lt x v_Vgd) 
                                                    (abst_lt x x)))) x x 
                                           (v_Vmc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T x x)))) =>
                                            zen.Rnoteq abst_T x v_Vmc) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_lt x x) 
                                                        (abst_lt x x))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (abst_lt x x) v_Vid) v_Vid) 
                                        v_Vid) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x x)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt x x))) 
                                        v_Vxc v_Vkc) v_Vxc) v_Vld) v_Vkd) 
                            v_Vjd) v_Vbd) abst_lt_is_transitive) 
                   (v_Vmd:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_lt y x))))) =>
                    zen.Raxiom (zen.triangle (focal.is_true (abst_lt y x))) 
                      F v_Vmd)))))).

def Strict_partial_order__gt_is_irreflexive :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_irreflexive:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.not (dk_logic.ebP (abst_lt x x))))) ->
  abst_gt_is_lt:(dk_logic.eP 
                   (dk_logic.forall abst_T 
                      (x:(cc.eT abst_T) =>
                       dk_logic.forall abst_T 
                         (y:(cc.eT abst_T) =>
                          dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
                            (dk_logic.ebP (abst_lt y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_gt x x))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))) =>
  abst_gt_is_lt:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
              (dk_logic.ebP (abst_lt y x)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_gt v_Vac v_Vac))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.not (zen.triangle (focal.is_true (abst_gt v_Vac v_Vac))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_gt v_Vac v_Vac)))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.not (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc)))))) =>
        zen.Rnotnot (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
          (v_Vec:
           (zen.proof (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc)))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_gt v_Vac v_Vfc))) 
                   (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vac))))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vfc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vfc))) 
                       (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vcc)))))) =>
              zen.Rall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vfc))) 
                   (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vcc)))) 
                v_Vcc 
                (v_Vhc:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))))) =>
                 zen.Requiv 
                   (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
                   (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))))) =>
                    v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
                      v_Vec v_Vic) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc)))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc)))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle (focal.is_true (abst_lt v_Vac v_Vac)))) 
                      v_Vcc 
                      (v_Vjc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vcc v_Vcc))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
                         v_Vkc v_Vjc) abst_lt_is_irreflexive) v_Vhc) v_Vgc) 
             abst_gt_is_lt) v_Vdc) v_Vbc).

def Strict_partial_order__leq_antisymmetric :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_irreflexive:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.not (dk_logic.ebP (abst_lt x x))))) ->
  abst_lt_is_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_lt x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_lt y z)) 
                                          (dk_logic.ebP (abst_lt x z)))))))) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y)) 
             (dk_logic.imp 
                (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt y x)) 
                (dk_logic.ebP (abst_equal x y))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))) =>
  abst_lt_is_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_lt y z)) 
                    (dk_logic.ebP (abst_lt x z)))))))) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  (__F_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H_xy:(dk_logic.eP 
            (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y))) ->
    H_yx:(dk_logic.eP 
            (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt y x))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vac))) 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_partial_order__leq abst_T abst_lt v_Vac v_Vzb))) 
                 (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (Strict_partial_order__leq abst_T abst_lt v_Vzb 
                              v_Vac))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Strict_partial_order__leq abst_T abst_lt 
                                 v_Vac v_Vzb))) 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vzb v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vac))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vac 
                             v_Vzb))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))))))) 
        __F_1_LEMMA v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H_xy:
     (dk_logic.eP 
        (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y))) =>
     H_yx:
     (dk_logic.eP 
        (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt y x))) =>
     (__F_1_1_LEMMA:
      (HH_xy:(dk_logic.eP 
                (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
                   (dk_logic.ebP (abst_lt y x)))) ->
       dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
      (__F_1_2_LEMMA:
       (HH_xy:(dk_logic.eP 
                 (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
                    (dk_logic.ebP (basics.syntactic_equal abst_T y x)))) ->
        dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
       (__F_1_3_LEMMA:
        (HH_xy:(dk_logic.eP 
                  (dk_logic.and 
                     (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                     (dk_logic.ebP (abst_lt y x)))) ->
         dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
        (__F_1_4_LEMMA:
         (HH_xy:(dk_logic.eP 
                   (dk_logic.and 
                      (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                      (dk_logic.ebP (basics.syntactic_equal abst_T y x)))) ->
          dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
         zen.nnpp (zen.triangle (focal.is_true (abst_equal x y))) 
           (v_Vzb:
            (zen.proof 
               (zen.not (zen.triangle (focal.is_true (abst_equal x y))))) =>
            zen.Rimply 
              (zen.and (zen.triangle (focal.is_true (abst_lt x y))) 
                 (zen.triangle (focal.is_true (abst_lt y x)))) 
              (zen.triangle (focal.is_true (abst_equal x y))) 
              (v_Vac:
               (zen.proof 
                  (zen.not 
                     (zen.and (zen.triangle (focal.is_true (abst_lt x y))) 
                        (zen.triangle (focal.is_true (abst_lt y x)))))) =>
               zen.Rnotand (zen.triangle (focal.is_true (abst_lt x y))) 
                 (zen.triangle (focal.is_true (abst_lt y x))) 
                 (v_Vbc:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_lt x y))))) =>
                  zen.Rimply 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T x y))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y x)))) 
                    (zen.triangle (focal.is_true (abst_equal x y))) 
                    (v_Vcc:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T y x)))))) =>
                     zen.Rnotand 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T x y))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y x))) 
                       (v_Vdc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T x y))))) =>
                        focal.zenon_focal_or (abst_lt x y) 
                          (basics.syntactic_equal abst_T x y) 
                          (v_Vec:
                           (zen.proof 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_lt x y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x y))))) =>
                           zen.Ror 
                             (zen.triangle (focal.is_true (abst_lt x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T x y))) 
                             (v_Vfc:
                              (zen.proof 
                                 (zen.triangle (focal.is_true (abst_lt x y)))) =>
                              zen.Raxiom 
                                (zen.triangle (focal.is_true (abst_lt x y))) 
                                v_Vfc v_Vbc) 
                             (v_Vgc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x y)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal abst_T x y))) 
                                v_Vgc v_Vdc) v_Vec) H_xy) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T y x))))) =>
                        focal.zenon_not_syntactic_equal abst_T y x 
                          (v_Vic:
                           (zen.proof 
                              (zen.not (zen.triangle (zen.equal abst_T y x)))) =>
                           focal.zenon_focal_or (abst_lt x y) 
                             (basics.syntactic_equal abst_T x y) 
                             (v_Vec:
                              (zen.proof 
                                 (zen.or 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt x y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T x y))))) =>
                              zen.Ror 
                                (zen.triangle (focal.is_true (abst_lt x y))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal abst_T x y))) 
                                (v_Vfc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt x y)))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x y))) v_Vfc 
                                   v_Vbc) 
                                (v_Vgc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T x y)))) =>
                                 focal.zenon_syntactic_equal abst_T x y 
                                   (v_Vjc:
                                    (zen.proof 
                                       (zen.triangle (zen.equal abst_T x y))) =>
                                    zen.Reqsym abst_T x y v_Vjc v_Vic) v_Vgc) 
                                v_Vec) H_xy) v_Vhc) v_Vcc) 
                    (v_Vkc:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_equal x y)))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal x y))) v_Vkc 
                       v_Vzb) __F_1_4_LEMMA) 
                 (v_Vlc:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_lt y x))))) =>
                  zen.Rimply 
                    (zen.and (zen.triangle (focal.is_true (abst_lt x y))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y x)))) 
                    (zen.triangle (focal.is_true (abst_equal x y))) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.triangle (focal.is_true (abst_lt x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T y x)))))) =>
                     zen.Rnotand 
                       (zen.triangle (focal.is_true (abst_lt x y))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y x))) 
                       (v_Vbc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle (focal.is_true (abst_lt x y))))) =>
                        zen.Rimply 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T y x)))) 
                          (zen.triangle (focal.is_true (abst_equal x y))) 
                          (v_Vcc:
                           (zen.proof 
                              (zen.not 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T x y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T y x)))))) =>
                           zen.Rnotand 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T y x))) 
                             (v_Vdc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T x y))))) =>
                              focal.zenon_focal_or (abst_lt x y) 
                                (basics.syntactic_equal abst_T x y) 
                                (v_Vec:
                                 (zen.proof 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt x y))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                x y))))) =>
                                 zen.Ror 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x y))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics.syntactic_equal abst_T x y))) 
                                   (v_Vfc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt x y)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x y))) 
                                      v_Vfc v_Vbc) 
                                   (v_Vgc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                x y)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T x 
                                               y))) v_Vgc v_Vdc) v_Vec) H_xy) 
                             (v_Vhc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T y x))))) =>
                              focal.zenon_not_syntactic_equal abst_T y x 
                                (v_Vic:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T y x)))) =>
                                 focal.zenon_focal_or (abst_lt x y) 
                                   (basics.syntactic_equal abst_T x y) 
                                   (v_Vec:
                                    (zen.proof 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true (abst_lt x y))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics.syntactic_equal 
                                                   abst_T x y))))) =>
                                    zen.Ror 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x y))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T x 
                                               y))) 
                                      (v_Vfc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true (abst_lt x y)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x y))) 
                                         v_Vfc v_Vbc) 
                                      (v_Vgc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics.syntactic_equal 
                                                   abst_T x y)))) =>
                                       focal.zenon_syntactic_equal abst_T x 
                                         y 
                                         (v_Vjc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T x y))) =>
                                          zen.Reqsym abst_T x y v_Vjc v_Vic) 
                                         v_Vgc) v_Vec) H_xy) v_Vhc) v_Vcc) 
                          (v_Vkc:
                           (zen.proof 
                              (zen.triangle (focal.is_true (abst_equal x y)))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_equal x y))) 
                             v_Vkc v_Vzb) __F_1_4_LEMMA) 
                       (v_Vhc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T y x))))) =>
                        focal.zenon_focal_or (abst_lt y x) 
                          (basics.syntactic_equal abst_T y x) 
                          (v_Vnc:
                           (zen.proof 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_lt y x))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T y x))))) =>
                           zen.Ror 
                             (zen.triangle (focal.is_true (abst_lt y x))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T y x))) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.triangle (focal.is_true (abst_lt y x)))) =>
                              zen.Raxiom 
                                (zen.triangle (focal.is_true (abst_lt y x))) 
                                v_Voc v_Vlc) 
                             (v_Vpc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T y x)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal abst_T y x))) 
                                v_Vpc v_Vhc) v_Vnc) H_yx) v_Vmc) 
                    (v_Vkc:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_equal x y)))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal x y))) v_Vkc 
                       v_Vzb) __F_1_2_LEMMA) v_Vac) 
              (v_Vkc:
               (zen.proof (zen.triangle (focal.is_true (abst_equal x y)))) =>
               zen.Raxiom (zen.triangle (focal.is_true (abst_equal x y))) 
                 v_Vkc v_Vzb) __F_1_1_LEMMA)) 
          (HH_xy:
           (dk_logic.eP 
              (dk_logic.and 
                 (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                 (dk_logic.ebP (basics.syntactic_equal abst_T y x)))) =>
           zen.nnpp (zen.triangle (focal.is_true (abst_equal x y))) 
             (v_Vcc:
              (zen.proof 
                 (zen.not (zen.triangle (focal.is_true (abst_equal x y))))) =>
              zen.Rand 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T x y))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T y x))) 
                (v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (basics.syntactic_equal abst_T x y)))) =>
                 v_Vec:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (basics.syntactic_equal abst_T y x)))) =>
                 focal.zenon_syntactic_equal abst_T x y 
                   (v_Vfc:
                    (zen.proof (zen.triangle (zen.equal abst_T x y))) =>
                    zen.Rall abst_T 
                      (v_Vgc:(zen.term abst_T) =>
                       zen.triangle (focal.is_true (abst_equal v_Vgc v_Vgc))) 
                      x 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_equal x x)))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vic:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vic)) 
                         (abst_equal x x) (abst_equal x y) 
                         (v_Vjc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal x x) (abst_equal x y))))) =>
                          zen.Rsubst abst_T 
                            (v_Vkc:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal v_Vkc x) (abst_equal x y)))) 
                            x x 
                            (v_Vlc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T x x)))) =>
                             zen.Rnoteq abst_T x v_Vlc) 
                            (v_Vjc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal x x) (abst_equal x y))))) =>
                             zen.Rsubst abst_T 
                               (v_Vmc:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal x v_Vmc) (abst_equal x y)))) 
                               x y 
                               (v_Vnc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle (zen.equal abst_T x y)))) =>
                                zen.Raxiom 
                                  (zen.triangle (zen.equal abst_T x y)) 
                                  v_Vfc v_Vnc) 
                               (v_Voc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal x y) (abst_equal x y))))) =>
                                zen.Rnoteq basics.bool__t (abst_equal x y) 
                                  v_Voc) v_Vjc0) v_Vjc) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_equal x y)))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_equal x y))) 
                            v_Vpc v_Vcc) v_Vhc) abst_equal_reflexive) v_Vdc) 
                HH_xy))) 
         (HH_xy:
          (dk_logic.eP 
             (dk_logic.and 
                (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                (dk_logic.ebP (abst_lt y x)))) =>
          zen.nnpp (zen.triangle (focal.is_true (abst_equal x y))) 
            (v_Vcc:
             (zen.proof 
                (zen.not (zen.triangle (focal.is_true (abst_equal x y))))) =>
             zen.Rand 
               (zen.triangle 
                  (focal.is_true (basics.syntactic_equal abst_T x y))) 
               (zen.triangle (focal.is_true (abst_lt y x))) 
               (v_Vdc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true (basics.syntactic_equal abst_T x y)))) =>
                v_Vec:
                (zen.proof (zen.triangle (focal.is_true (abst_lt y x)))) =>
                focal.zenon_syntactic_equal abst_T x y 
                  (v_Vfc:(zen.proof (zen.triangle (zen.equal abst_T x y))) =>
                   zen.Rall abst_T 
                     (v_Vgc:(zen.term abst_T) =>
                      zen.triangle (focal.is_true (abst_equal v_Vgc v_Vgc))) 
                     x 
                     (v_Vhc:
                      (zen.proof 
                         (zen.triangle (focal.is_true (abst_equal x x)))) =>
                      zen.Rsubst basics.bool__t 
                        (v_Vic:(zen.term basics.bool__t) =>
                         zen.triangle (focal.is_true v_Vic)) 
                        (abst_equal x x) (abst_equal x y) 
                        (v_Vjc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t (abst_equal x x) 
                                     (abst_equal x y))))) =>
                         zen.Rsubst abst_T 
                           (v_Vkc:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal v_Vkc x) (abst_equal x y)))) 
                           x x 
                           (v_Vlc:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                            zen.Rnoteq abst_T x v_Vlc) 
                           (v_Vjc0:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal x x) (abst_equal x y))))) =>
                            zen.Rsubst abst_T 
                              (v_Vmc:(zen.term abst_T) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal x v_Vmc) (abst_equal x y)))) 
                              x y 
                              (v_Vnc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle (zen.equal abst_T x y)))) =>
                               zen.Raxiom 
                                 (zen.triangle (zen.equal abst_T x y)) v_Vfc 
                                 v_Vnc) 
                              (v_Voc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal x y) (abst_equal x y))))) =>
                               zen.Rnoteq basics.bool__t (abst_equal x y) 
                                 v_Voc) v_Vjc0) v_Vjc) 
                        (v_Vpc:
                         (zen.proof 
                            (zen.triangle (focal.is_true (abst_equal x y)))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (abst_equal x y))) 
                           v_Vpc v_Vcc) v_Vhc) abst_equal_reflexive) v_Vdc) 
               HH_xy))) 
        (HH_xy:
         (dk_logic.eP 
            (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
               (dk_logic.ebP (basics.syntactic_equal abst_T y x)))) =>
         zen.nnpp (zen.triangle (focal.is_true (abst_equal x y))) 
           (v_Vcc:
            (zen.proof 
               (zen.not (zen.triangle (focal.is_true (abst_equal x y))))) =>
            zen.Rand (zen.triangle (focal.is_true (abst_lt x y))) 
              (zen.triangle 
                 (focal.is_true (basics.syntactic_equal abst_T y x))) 
              (v_Vdc:
               (zen.proof (zen.triangle (focal.is_true (abst_lt x y)))) =>
               v_Vec:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true (basics.syntactic_equal abst_T y x)))) =>
               focal.zenon_syntactic_equal abst_T y x 
                 (v_Vfc:(zen.proof (zen.triangle (zen.equal abst_T y x))) =>
                  zen.Rall abst_T 
                    (v_Vgc:(zen.term abst_T) =>
                     zen.triangle (focal.is_true (abst_equal v_Vgc v_Vgc))) 
                    x 
                    (v_Vhc:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_equal x x)))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vic:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vic)) (abst_equal x x) 
                       (abst_equal x y) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t (abst_equal x x) 
                                    (abst_equal x y))))) =>
                        zen.Rsubst abst_T 
                          (v_Vkc:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal v_Vkc x) (abst_equal x y)))) 
                          x x 
                          (v_Vlc:
                           (zen.proof 
                              (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                           zen.Rnoteq abst_T x v_Vlc) 
                          (v_Vjc0:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal x x) (abst_equal x y))))) =>
                           zen.Rsubst abst_T 
                             (v_Vmc:(zen.term abst_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal x v_Vmc) (abst_equal x y)))) 
                             x y 
                             (v_Vnc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle (zen.equal abst_T x y)))) =>
                              zen.Reqsym abst_T y x v_Vfc v_Vnc) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal x y) (abst_equal x y))))) =>
                              zen.Rnoteq basics.bool__t (abst_equal x y) 
                                v_Voc) v_Vjc0) v_Vjc) 
                       (v_Vpc:
                        (zen.proof 
                           (zen.triangle (focal.is_true (abst_equal x y)))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (abst_equal x y))) 
                          v_Vpc v_Vcc) v_Vhc) abst_equal_reflexive) v_Vec) 
              HH_xy))) 
       (HH_xy:
        (dk_logic.eP 
           (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.ebP (abst_lt y x)))) =>
        zen.nnpp (zen.triangle (focal.is_true (abst_equal x y))) 
          (v_Vkc:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (abst_equal x y))))) =>
           zen.Rand (zen.triangle (focal.is_true (abst_lt x y))) 
             (zen.triangle (focal.is_true (abst_lt y x))) 
             (v_Vlc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt x y)))) =>
              v_Vmc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt y x)))) =>
              zen.Rall abst_T 
                (v_Vnc:(zen.term abst_T) =>
                 zen.not (zen.triangle (focal.is_true (abst_lt v_Vnc v_Vnc)))) 
                x 
                (v_Voc:
                 (zen.proof 
                    (zen.not (zen.triangle (focal.is_true (abst_lt x x))))) =>
                 zen.Rcut 
                   (zen.and (zen.not (zen.triangle (zen.equal abst_T x y))) 
                      (zen.not (zen.triangle (focal.is_true (abst_lt x y))))) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.and 
                          (zen.not (zen.triangle (zen.equal abst_T x y))) 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_lt x y)))))) =>
                    zen.Rand (zen.not (zen.triangle (zen.equal abst_T x y))) 
                      (zen.not (zen.triangle (focal.is_true (abst_lt x y)))) 
                      (v_Vqc:
                       (zen.proof 
                          (zen.not (zen.triangle (zen.equal abst_T x y)))) =>
                       v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_lt x y))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt x y))) v_Vlc 
                         v_Vrc) v_Vpc) 
                   (v_Vsc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.not (zen.triangle (zen.equal abst_T x y))) 
                             (zen.not 
                                (zen.triangle (focal.is_true (abst_lt x y))))))) =>
                    zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                      (v_Vtc:
                       (zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vuc:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vuc)) (abst_lt y x) 
                         (abst_lt x x) 
                         (v_Vvc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t (abst_lt y x) 
                                      (abst_lt x x))))) =>
                          zen.Rsubst abst_T 
                            (v_Vwc:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_lt v_Vwc x) (abst_lt x x)))) y x 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T y x)))) =>
                             zen.Rnotand 
                               (zen.not (zen.triangle (zen.equal abst_T x y))) 
                               (zen.not 
                                  (zen.triangle (focal.is_true (abst_lt x y)))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle (zen.equal abst_T x y))))) =>
                                zen.Rnotnot 
                                  (zen.triangle (zen.equal abst_T x y)) 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.triangle (zen.equal abst_T x y))) =>
                                   zen.Rcut 
                                     (zen.triangle (zen.equal abst_T x x)) 
                                     (v_Vtc0:
                                      (zen.proof 
                                         (zen.triangle (zen.equal abst_T x x))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vad:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T v_Vad x)) x y 
                                        (v_Vqc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x y)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T x y)) v_Vzc 
                                           v_Vqc) 
                                        (v_Vbd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T y x))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vcd:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T y v_Vcd)) x 
                                           x 
                                           (v_Vdd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T x x)))) =>
                                            zen.Rnoteq abst_T x v_Vdd) 
                                           (v_Vbd0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T y x))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T y x)) 
                                              v_Vbd0 v_Vxc) v_Vbd) v_Vtc0) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T x x)))) =>
                                      zen.Rnoteq abst_T x v_Vdd)) v_Vyc) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x y)))))) =>
                                zen.Rnotnot 
                                  (zen.triangle (focal.is_true (abst_lt x y))) 
                                  (v_Vlc0:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x y)))) =>
                                   zen.Rall abst_T 
                                     (v_Vnc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vfd:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vgd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vnc v_Vfd))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt v_Vfd v_Vgd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt v_Vnc v_Vgd))))))) 
                                     x 
                                     (v_Vhd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vfd:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vgd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x v_Vfd))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Vfd 
                                                              v_Vgd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x v_Vgd)))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vfd:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vgd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt x v_Vfd))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt v_Vfd v_Vgd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x v_Vgd)))))) 
                                        y 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vgd:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt y v_Vgd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x v_Vgd))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vgd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x y))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt y v_Vgd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x v_Vgd))))) 
                                           x 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt y x))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x x)))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x y))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt y x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x x)))) 
                                              (v_Vrc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x y))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x y))) 
                                                 v_Vlc0 v_Vrc) 
                                              (v_Vkd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt y x))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x x))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt y x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x x))) 
                                                 (v_Vld:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_lt y x))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_lt y x))) 
                                                    v_Vmc v_Vld) 
                                                 (v_Vmd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x x)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vuc:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vuc)) 
                                                    (abst_lt x x) 
                                                    (abst_lt x x) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_lt x x) 
                                                                 (abst_lt x x))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vwc:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_lt 
                                                                   v_Vwc x) 
                                                                (abst_lt x x)))) 
                                                       x x 
                                                       (v_Vdd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                        zen.Rnoteq abst_T x 
                                                          v_Vdd) 
                                                       (v_Vnd0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_lt 
                                                                    x x) 
                                                                    (
                                                                    abst_lt 
                                                                    x x))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vod:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_lt 
                                                                    x v_Vod) 
                                                                   (abst_lt 
                                                                    x x)))) 
                                                          x x 
                                                          (v_Vdd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T x x)) 
                                                             v_Vtc v_Vdd) 
                                                          (v_Vnd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    x x) 
                                                                    (abst_lt 
                                                                    x x))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (abst_lt x x) 
                                                             v_Vnd0) v_Vnd0) 
                                                       v_Vnd) 
                                                    (v_Vmd0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_lt x x)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_lt x x))) 
                                                       v_Vmd0 v_Voc) v_Vmd) 
                                                 v_Vkd) v_Vjd) v_Vid) v_Vhd) 
                                     abst_lt_is_transitive) v_Ved) v_Vsc) 
                            (v_Vnd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_lt x x) (abst_lt x x))))) =>
                             zen.Rsubst abst_T 
                               (v_Vod:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_lt x v_Vod) (abst_lt x x)))) x 
                               x 
                               (v_Vdd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle (zen.equal abst_T x x)))) =>
                                zen.Raxiom 
                                  (zen.triangle (zen.equal abst_T x x)) 
                                  v_Vtc v_Vdd) 
                               (v_Vnd0:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_lt x x) (abst_lt x x))))) =>
                                zen.Rnoteq basics.bool__t (abst_lt x x) 
                                  v_Vnd0) v_Vnd) v_Vvc) 
                         (v_Vmd:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_lt x x)))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_lt x x))) 
                            v_Vmd v_Voc) v_Vmc) 
                      (v_Vdd:
                       (zen.proof 
                          (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                       zen.Rcut (zen.triangle (focal.is_true (abst_lt x x))) 
                         (v_Vmd:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_lt x x)))) =>
                          zen.Rall abst_T 
                            (v_Vnc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vfd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vgd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vnc v_Vfd))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vfd v_Vgd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vnc v_Vgd))))))) y 
                            (v_Vpd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vfd:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vgd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y v_Vfd))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vfd v_Vgd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt y v_Vgd)))))))) =>
                             zen.Rall abst_T 
                               (v_Vfd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vgd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y v_Vfd))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vfd v_Vgd))) 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt y v_Vgd)))))) 
                               x 
                               (v_Vqd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vgd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y x))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt x v_Vgd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt y v_Vgd))))))) =>
                                zen.Rall abst_T 
                                  (v_Vgd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt x v_Vgd))) 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt y v_Vgd))))) 
                                  x 
                                  (v_Vrd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y x))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt x x))) 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt y x)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt x x))) 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt y x)))) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt y x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt y x))) 
                                        v_Vmc v_Vld) 
                                     (v_Vsd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt x x))) 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt y x))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt x x))) 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt y x))) 
                                        (v_Voc0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x x))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x x))) 
                                           v_Vmd v_Voc0) 
                                        (v_Vmc0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt y x)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vuc:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vuc)) 
                                           (abst_lt y x) (abst_lt x x) 
                                           (v_Vvc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_lt y x) 
                                                        (abst_lt x x))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vwc:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_lt v_Vwc x) 
                                                       (abst_lt x x)))) y x 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T y x)))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x y))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_lt x y)))) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T x y))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x y)) 
                                                    (v_Vzc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              x y))) =>
                                                     zen.Reqsym abst_T x y 
                                                       v_Vzc v_Vxc) v_Vyc) 
                                                 (v_Ved:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_lt x y)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_lt x y))) 
                                                    (v_Vlc0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_lt x y)))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vnc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vfd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vgd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Vfd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Vgd))))))) 
                                                       x 
                                                       (v_Vhd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vfd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vgd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vfd))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vgd)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vfd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vgd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vfd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vgd)))))) 
                                                          y 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vgd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x y))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vgd))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vgd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x y))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y v_Vgd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vgd))))) 
                                                             x 
                                                             (v_Vjd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x y))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x y))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x)))) 
                                                                (v_Vrc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x y))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x y))) 
                                                                   v_Vlc0 
                                                                   v_Vrc) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                   (v_Vld:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    y x))) 
                                                                    v_Vmc0 
                                                                    v_Vld) 
                                                                   (v_Vmd0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                    v_Vmd0 
                                                                    v_Voc) 
                                                                   v_Vkd) 
                                                                v_Vjd) v_Vid) 
                                                          v_Vhd) 
                                                       abst_lt_is_transitive) 
                                                    v_Ved) v_Vsc) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_lt x x) 
                                                           (abst_lt x x))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vod:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_lt x v_Vod) 
                                                          (abst_lt x x)))) x 
                                                 x 
                                                 (v_Vdd0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              x x)))) =>
                                                  zen.Rnoteq abst_T x v_Vdd0) 
                                                 (v_Vnd0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_lt x x) 
                                                              (abst_lt x x))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_lt x x) v_Vnd0) 
                                                 v_Vnd) v_Vvc) 
                                           (v_Vmd0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x x)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x x))) 
                                              v_Vmd0 v_Voc) v_Vmc0) v_Vsd) 
                                     v_Vrd) v_Vqd) v_Vpd) 
                            abst_lt_is_transitive) 
                         (v_Voc0:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (focal.is_true (abst_lt x x))))) =>
                          zen.Rnoteq abst_T x v_Vdd)))) 
                abst_lt_is_irreflexive) HH_xy))).

def Strict_partial_order__leq_transitive :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_lt x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_lt y z)) 
                                          (dk_logic.ebP (abst_lt x z)))))))) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (Strict_partial_order__leq abst_T abst_lt y z)) 
                   (dk_logic.ebP 
                      (Strict_partial_order__leq abst_T abst_lt x z)))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_lt y z)) 
                    (dk_logic.ebP (abst_lt x z)))))))) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  (__G_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    z:(cc.eT abst_T) ->
    H_xy:(dk_logic.eP 
            (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y))) ->
    H_yz:(dk_logic.eP 
            (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt y z))) ->
    dk_logic.eP (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x z))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vkc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_partial_order__leq abst_T abst_lt v_Vkc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vlc 
                             v_Vmc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vkc 
                             v_Vmc)))))))) 
     (v_Vnc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vkc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vlc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Strict_partial_order__leq abst_T abst_lt 
                                 v_Vkc v_Vlc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Vlc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Vkc v_Vmc)))))))))) =>
      zen.Rnotall abst_T 
        (v_Vkc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_partial_order__leq abst_T abst_lt v_Vkc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vlc 
                             v_Vmc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vkc 
                             v_Vmc))))))) 
        (v_Voc:(zen.term abst_T) =>
         v_Vpc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vlc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Strict_partial_order__leq abst_T abst_lt 
                                 v_Voc v_Vlc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Vlc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Voc v_Vmc))))))))) =>
         zen.Rnotall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_partial_order__leq abst_T abst_lt v_Voc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vlc 
                             v_Vmc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Voc 
                             v_Vmc)))))) 
           (v_Vqc:(zen.term abst_T) =>
            v_Vrc:
            (zen.proof 
               (zen.not 
                  (zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Strict_partial_order__leq abst_T abst_lt 
                                 v_Voc v_Vqc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Vqc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Voc v_Vmc)))))))) =>
            zen.Rnotall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_partial_order__leq abst_T abst_lt v_Voc v_Vqc))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vqc 
                             v_Vmc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Voc 
                             v_Vmc))))) 
              (v_Vsc:(zen.term abst_T) =>
               v_Vtc:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Strict_partial_order__leq abst_T abst_lt 
                                 v_Voc v_Vqc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Vqc v_Vsc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Voc v_Vsc))))))) =>
               zen.Rnotimply 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_partial_order__leq abst_T abst_lt v_Voc v_Vqc))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vqc 
                             v_Vsc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Voc 
                             v_Vsc)))) 
                 (v_Vuc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (Strict_partial_order__leq abst_T abst_lt v_Voc 
                              v_Vqc)))) =>
                  v_Vvc:
                  (zen.proof 
                     (zen.not 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Vqc v_Vsc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Voc v_Vsc)))))) =>
                  zen.Rnotimply 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vqc 
                             v_Vsc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Voc 
                             v_Vsc))) 
                    (v_Vwc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (Strict_partial_order__leq abst_T abst_lt 
                                 v_Vqc v_Vsc)))) =>
                     v_Vxc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_partial_order__leq abst_T abst_lt 
                                    v_Voc v_Vsc))))) =>
                     zen.Rcut 
                       (zen.and 
                          (zen.not 
                             (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (Strict_partial_order__leq abst_T abst_lt 
                                      v_Voc v_Voc))))) 
                       (v_Vyc:
                        (zen.proof 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (Strict_partial_order__leq abst_T 
                                          abst_lt v_Voc v_Voc)))))) =>
                        zen.Rand 
                          (zen.not 
                             (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (Strict_partial_order__leq abst_T abst_lt 
                                      v_Voc v_Voc)))) 
                          (v_Vzc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Voc v_Voc)))) =>
                           v_Vad:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (Strict_partial_order__leq abst_T 
                                          abst_lt v_Voc v_Voc))))) =>
                           zen.Rnoteq abst_T v_Voc v_Vzc) v_Vyc) 
                       (v_Vbd:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T v_Voc v_Voc))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Strict_partial_order__leq abst_T 
                                             abst_lt v_Voc v_Voc))))))) =>
                        zen.Rcut 
                          (zen.triangle (zen.equal abst_T v_Vqc v_Vsc)) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.triangle (zen.equal abst_T v_Vqc v_Vsc))) =>
                           zen.Rsubst basics.bool__t 
                             (v_Vdd:(zen.term basics.bool__t) =>
                              zen.triangle (focal.is_true v_Vdd)) 
                             (Strict_partial_order__leq abst_T abst_lt v_Voc 
                                v_Vqc) 
                             (Strict_partial_order__leq abst_T abst_lt v_Voc 
                                v_Vsc) 
                             (v_Ved:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (Strict_partial_order__leq abst_T 
                                             abst_lt v_Voc v_Vqc) 
                                          (Strict_partial_order__leq abst_T 
                                             abst_lt v_Voc v_Vsc))))) =>
                              zen.Rsubst abst_T 
                                (v_Vfd:(zen.term abst_T) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (Strict_partial_order__leq abst_T 
                                            abst_lt v_Vfd v_Vqc) 
                                         (Strict_partial_order__leq abst_T 
                                            abst_lt v_Voc v_Vsc)))) v_Voc 
                                v_Voc 
                                (v_Vzc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T v_Voc v_Voc)))) =>
                                 zen.Rnotand 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Voc v_Voc))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Strict_partial_order__leq 
                                               abst_T abst_lt v_Voc v_Voc)))) 
                                   (v_Vgd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T v_Voc v_Voc))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Voc v_Voc)) 
                                      (v_Vhd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Voc v_Voc))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (zen.equal abst_T v_Voc v_Voc)) 
                                         (v_Vhd0:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T v_Voc v_Voc))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vid:(zen.term abst_T) =>
                                             zen.triangle 
                                               (zen.equal abst_T v_Vid v_Voc)) 
                                            v_Voc v_Voc 
                                            (v_Vzc0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Voc v_Voc)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (zen.equal abst_T v_Voc 
                                                     v_Voc)) v_Vhd0 v_Vzc0) 
                                            (v_Vhd0:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Voc 
                                                      v_Voc))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vjd:(zen.term abst_T) =>
                                                zen.triangle 
                                                  (zen.equal abst_T v_Voc 
                                                     v_Vjd)) v_Voc v_Voc 
                                               (v_Vzc0:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            v_Voc v_Voc)))) =>
                                                zen.Rnoteq abst_T v_Voc 
                                                  v_Vzc0) 
                                               (v_Vhd0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Voc v_Voc))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Voc 
                                                        v_Voc)) v_Vhd0 v_Vzc) 
                                               v_Vhd0) v_Vhd0) 
                                         (v_Vzc0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Voc 
                                                      v_Voc)))) =>
                                          zen.Rnoteq abst_T v_Voc v_Vzc0)) 
                                      v_Vgd) 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Strict_partial_order__leq 
                                                      abst_T abst_lt v_Voc 
                                                      v_Voc)))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (Strict_partial_order__leq 
                                               abst_T abst_lt v_Voc v_Voc))) 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (Strict_partial_order__leq 
                                                   abst_T abst_lt v_Voc v_Voc)))) =>
                                       zen.Rall abst_T 
                                         (v_Vkc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vlc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Vkc v_Vlc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Vlc v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Vkc v_Vmc))))))) 
                                         v_Voc 
                                         (v_Vmd:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Vlc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vmc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (Strict_partial_order__leq 
                                                               abst_T 
                                                               abst_lt v_Voc 
                                                               v_Vlc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Vlc v_Vmc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vmc)))))))) =>
                                          zen.Rall abst_T 
                                            (v_Vlc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Voc v_Vlc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Vlc v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vmc)))))) 
                                            v_Voc 
                                            (v_Vnd:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Vmc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (Strict_partial_order__leq 
                                                               abst_T 
                                                               abst_lt v_Voc 
                                                               v_Voc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vmc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vmc))))))) =>
                                             zen.Rall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Voc v_Voc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vmc))))) 
                                               v_Vqc 
                                               (v_Vod:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (Strict_partial_order__leq 
                                                               abst_T 
                                                               abst_lt v_Voc 
                                                               v_Voc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vqc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vqc)))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Voc v_Voc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vqc)))) 
                                                  (v_Vad:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Voc))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Voc))) 
                                                     v_Vld v_Vad) 
                                                  (v_Vpd:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vqc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vqc))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vqc))) 
                                                     (v_Vqd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (Strict_partial_order__leq 
                                                                 abst_T 
                                                                 abst_lt 
                                                                 v_Voc v_Vqc))) 
                                                        v_Vuc v_Vqd) 
                                                     (v_Vuc0:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vqc)))) =>
                                                      zen.Rsubst 
                                                        basics.bool__t 
                                                        (v_Vdd:
                                                         (zen.term 
                                                            basics.bool__t) =>
                                                         zen.triangle 
                                                           (focal.is_true 
                                                              v_Vdd)) 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Voc v_Vqc) 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Voc v_Vsc) 
                                                        (v_Ved0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vfd:
                                                            (zen.term abst_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Vfd 
                                                                    v_Vqc) 
                                                                    (
                                                                    Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                           v_Voc v_Voc 
                                                           (v_Vzc0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                            zen.Rnoteq 
                                                              abst_T v_Voc 
                                                              v_Vzc0) 
                                                           (v_Ved0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Vrd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vrd) 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                              v_Vqc v_Vsc 
                                                              (v_Vsd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vqc 
                                                                    v_Vsc)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                 v_Vcd v_Vsd) 
                                                              (v_Vtd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                               zen.Rnoteq 
                                                                 basics.bool__t 
                                                                 (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 v_Vtd) 
                                                              v_Ved0) v_Ved0) 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                           v_Vud v_Vxc) 
                                                        v_Vuc0) v_Vpd) v_Vod) 
                                               v_Vnd) v_Vmd) __G_1_LEMMA) 
                                      v_Vkd) v_Vbd) 
                                (v_Ved0:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (Strict_partial_order__leq 
                                                abst_T abst_lt v_Voc v_Vqc) 
                                             (Strict_partial_order__leq 
                                                abst_T abst_lt v_Voc v_Vsc))))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vrd:(zen.term abst_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (Strict_partial_order__leq 
                                               abst_T abst_lt v_Voc v_Vrd) 
                                            (Strict_partial_order__leq 
                                               abst_T abst_lt v_Voc v_Vsc)))) 
                                   v_Vqc v_Vsc 
                                   (v_Vsd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Vqc v_Vsc)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Vqc v_Vsc)) 
                                      v_Vcd v_Vsd) 
                                   (v_Vtd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (Strict_partial_order__leq 
                                                   abst_T abst_lt v_Voc v_Vsc) 
                                                (Strict_partial_order__leq 
                                                   abst_T abst_lt v_Voc v_Vsc))))) =>
                                    zen.Rnoteq basics.bool__t 
                                      (Strict_partial_order__leq abst_T 
                                         abst_lt v_Voc v_Vsc) v_Vtd) v_Ved0) 
                                v_Ved) 
                             (v_Vud:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (Strict_partial_order__leq abst_T 
                                          abst_lt v_Voc v_Vsc)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (Strict_partial_order__leq abst_T 
                                         abst_lt v_Voc v_Vsc))) v_Vud v_Vxc) 
                             v_Vuc) 
                          (v_Vsd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Vqc v_Vsc)))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (focal.is_true 
                                   (Strict_partial_order__leq abst_T abst_lt 
                                      v_Vqc v_Vsc))) 
                             (v_Vwc0:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (Strict_partial_order__leq abst_T 
                                          abst_lt v_Vqc v_Vsc)))) =>
                              zen.Rall abst_T 
                                (v_Vkc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vlc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (Strict_partial_order__leq 
                                                  abst_T abst_lt v_Vkc v_Vlc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Vlc 
                                                     v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Vkc 
                                                     v_Vmc))))))) v_Voc 
                                (v_Vmd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vlc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vmc:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Strict_partial_order__leq 
                                                      abst_T abst_lt v_Voc 
                                                      v_Vlc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Vlc v_Vmc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Voc v_Vmc)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vlc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (Strict_partial_order__leq 
                                                  abst_T abst_lt v_Voc v_Vlc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Vlc 
                                                     v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Voc 
                                                     v_Vmc)))))) v_Vqc 
                                   (v_Vvd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vmc:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Strict_partial_order__leq 
                                                      abst_T abst_lt v_Voc 
                                                      v_Vqc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Vqc v_Vmc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Voc v_Vmc))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (Strict_partial_order__leq 
                                                  abst_T abst_lt v_Voc v_Vqc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Vqc 
                                                     v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Voc 
                                                     v_Vmc))))) v_Vsc 
                                      (v_Vwd:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (Strict_partial_order__leq 
                                                      abst_T abst_lt v_Voc 
                                                      v_Vqc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Vqc v_Vsc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Voc v_Vsc)))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (Strict_partial_order__leq 
                                                  abst_T abst_lt v_Voc v_Vqc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Vqc 
                                                     v_Vsc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Voc 
                                                     v_Vsc)))) 
                                         (v_Vqd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Voc v_Vqc))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Voc 
                                                     v_Vqc))) v_Vuc v_Vqd) 
                                         (v_Vxd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Vqc v_Vsc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Voc v_Vsc))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Vqc 
                                                     v_Vsc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (Strict_partial_order__leq 
                                                     abst_T abst_lt v_Voc 
                                                     v_Vsc))) 
                                            (v_Vyd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (Strict_partial_order__leq 
                                                            abst_T abst_lt 
                                                            v_Vqc v_Vsc))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (Strict_partial_order__leq 
                                                        abst_T abst_lt v_Vqc 
                                                        v_Vsc))) v_Vwc0 v_Vyd) 
                                            (v_Vud:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (Strict_partial_order__leq 
                                                         abst_T abst_lt 
                                                         v_Voc v_Vsc)))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vdd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vdd)) 
                                               (Strict_partial_order__leq 
                                                  abst_T abst_lt v_Voc v_Vsc) 
                                               (Strict_partial_order__leq 
                                                  abst_T abst_lt v_Voc v_Vsc) 
                                               (v_Vtd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (Strict_partial_order__leq 
                                                               abst_T 
                                                               abst_lt v_Voc 
                                                               v_Vsc) 
                                                            (Strict_partial_order__leq 
                                                               abst_T 
                                                               abst_lt v_Voc 
                                                               v_Vsc))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vzd:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Vzd v_Vsc) 
                                                           (Strict_partial_order__leq 
                                                              abst_T abst_lt 
                                                              v_Voc v_Vsc)))) 
                                                  v_Voc v_Voc 
                                                  (v_Vzc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T v_Voc 
                                                               v_Voc)))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Voc v_Voc))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (Strict_partial_order__leq 
                                                                 abst_T 
                                                                 abst_lt 
                                                                 v_Voc v_Voc)))) 
                                                     (v_Vgd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    v_Voc 
                                                                    v_Voc))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Voc v_Voc)) 
                                                        (v_Vhd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  v_Voc v_Voc))) =>
                                                         zen.Reqsym abst_T 
                                                           v_Voc v_Voc v_Vhd 
                                                           v_Vzc) v_Vgd) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc)))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (Strict_partial_order__leq 
                                                                 abst_T 
                                                                 abst_lt 
                                                                 v_Voc v_Voc))) 
                                                        (v_Vld:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vkc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                           v_Voc 
                                                           (v_Vmd0:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  abst_T 
                                                                  (v_Vlc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc)))))))) =>
                                                            zen.Rall abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc)))))) 
                                                              v_Voc 
                                                              (v_Vnd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))))))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))))) 
                                                                 v_Vsc 
                                                                 (v_Vae:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (
                                                                    v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    v_Vld 
                                                                    v_Vad) 
                                                                    (
                                                                    v_Vbe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (v_Vxc0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc0) 
                                                                    (v_Vud0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud0 
                                                                    v_Vxc) 
                                                                    v_Vbe) 
                                                                    v_Vae) 
                                                                 v_Vnd) 
                                                              v_Vmd0) 
                                                           __G_1_LEMMA) v_Vkd) 
                                                     v_Vbd) 
                                                  (v_Vtd0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vsc) 
                                                               (Strict_partial_order__leq 
                                                                  abst_T 
                                                                  abst_lt 
                                                                  v_Voc v_Vsc))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vrd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (Strict_partial_order__leq 
                                                                 abst_T 
                                                                 abst_lt 
                                                                 v_Voc v_Vrd) 
                                                              (Strict_partial_order__leq 
                                                                 abst_T 
                                                                 abst_lt 
                                                                 v_Voc v_Vsc)))) 
                                                     v_Vsc v_Vsc 
                                                     (v_Vce:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  v_Vsc v_Vsc)))) =>
                                                      zen.Rnoteq abst_T 
                                                        v_Vsc v_Vce) 
                                                     (v_Vtd0:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                  (Strict_partial_order__leq 
                                                                    abst_T 
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Voc v_Vsc) 
                                                        v_Vtd0) v_Vtd0) v_Vtd) 
                                               (v_Vud0:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (Strict_partial_order__leq 
                                                            abst_T abst_lt 
                                                            v_Voc v_Vsc)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (Strict_partial_order__leq 
                                                           abst_T abst_lt 
                                                           v_Voc v_Vsc))) 
                                                  v_Vud0 v_Vxc) v_Vud) v_Vxd) 
                                         v_Vwd) v_Vvd) v_Vmd) __G_1_LEMMA) 
                             (v_Vyd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (Strict_partial_order__leq abst_T 
                                             abst_lt v_Vqc v_Vsc))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (Strict_partial_order__leq abst_T 
                                         abst_lt v_Vqc v_Vsc))) v_Vwc v_Vyd)))) 
                    v_Vvc) v_Vtc) v_Vrc) v_Vpc) v_Vnc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     z:(cc.eT abst_T) =>
     H_xy:
     (dk_logic.eP 
        (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y))) =>
     H_yz:
     (dk_logic.eP 
        (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt y z))) =>
     (__G_1_1_LEMMA:
      (H:(dk_logic.eP 
            (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
               (dk_logic.ebP (abst_lt y z)))) ->
       dk_logic.eP (dk_logic.ebP (abst_lt x z))) =>
      (__G_1_2_LEMMA:
       (H:(dk_logic.eP 
             (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
                (dk_logic.ebP (basics.syntactic_equal abst_T y z)))) ->
        dk_logic.eP (dk_logic.ebP (abst_lt x z))) =>
       (__G_1_3_LEMMA:
        (H:(dk_logic.eP 
              (dk_logic.and 
                 (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                 (dk_logic.ebP (abst_lt y z)))) ->
         dk_logic.eP (dk_logic.ebP (abst_lt x z))) =>
        (__G_1_4_LEMMA:
         (H:(dk_logic.eP 
               (dk_logic.and 
                  (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                  (dk_logic.ebP (basics.syntactic_equal abst_T y z)))) ->
          dk_logic.eP (dk_logic.ebP (abst_equal x z))) =>
         zen.nnpp 
           (zen.triangle 
              (focal.is_true (Strict_partial_order__leq abst_T abst_lt x z))) 
           (v_Vhc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._bar__bar_ (abst_lt x z) 
                           (basics.syntactic_equal abst_T x z)))))) =>
            zen.Rimply 
              (zen.and (zen.triangle (focal.is_true (abst_lt x y))) 
                 (zen.triangle (focal.is_true (abst_lt y z)))) 
              (zen.triangle (focal.is_true (abst_lt x z))) 
              (v_Vic:
               (zen.proof 
                  (zen.not 
                     (zen.and (zen.triangle (focal.is_true (abst_lt x y))) 
                        (zen.triangle (focal.is_true (abst_lt y z)))))) =>
               zen.Rnotand (zen.triangle (focal.is_true (abst_lt x y))) 
                 (zen.triangle (focal.is_true (abst_lt y z))) 
                 (v_Vjc:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_lt x y))))) =>
                  zen.Rimply 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T x y))) 
                       (zen.triangle (focal.is_true (abst_lt y z)))) 
                    (zen.triangle (focal.is_true (abst_lt x z))) 
                    (v_Vkc:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T x y))) 
                              (zen.triangle (focal.is_true (abst_lt y z)))))) =>
                     zen.Rnotand 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T x y))) 
                       (zen.triangle (focal.is_true (abst_lt y z))) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T x y))))) =>
                        focal.zenon_focal_or (abst_lt x y) 
                          (basics.syntactic_equal abst_T x y) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_lt x y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x y))))) =>
                           zen.Ror 
                             (zen.triangle (focal.is_true (abst_lt x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T x y))) 
                             (v_Vnc:
                              (zen.proof 
                                 (zen.triangle (focal.is_true (abst_lt x y)))) =>
                              zen.Raxiom 
                                (zen.triangle (focal.is_true (abst_lt x y))) 
                                v_Vnc v_Vjc) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x y)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal abst_T x y))) 
                                v_Voc v_Vlc) v_Vmc) H_xy) 
                       (v_Vpc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle (focal.is_true (abst_lt y z))))) =>
                        zen.Rimply 
                          (zen.and 
                             (zen.triangle (focal.is_true (abst_lt x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T y z)))) 
                          (zen.triangle (focal.is_true (abst_lt x z))) 
                          (v_Vqc:
                           (zen.proof 
                              (zen.not 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt x y))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T y z)))))) =>
                           zen.Rnotand 
                             (zen.triangle (focal.is_true (abst_lt x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T y z))) 
                             (v_Vjc0:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt x y))))) =>
                              focal.zenon_focal_or (abst_lt x y) 
                                (basics.syntactic_equal abst_T x y) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt x y))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                x y))))) =>
                                 zen.Ror 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x y))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics.syntactic_equal abst_T x y))) 
                                   (v_Vnc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt x y)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x y))) 
                                      v_Vnc v_Vjc0) 
                                   (v_Voc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                x y)))) =>
                                    focal.zenon_syntactic_equal abst_T x y 
                                      (v_Vrc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T x y))) =>
                                       focal.zenon_focal_or (abst_lt y z) 
                                         (basics.syntactic_equal abst_T y z) 
                                         (v_Vsc:
                                          (zen.proof 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt y z))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics.syntactic_equal 
                                                         abst_T y z))))) =>
                                          zen.Ror 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt y z))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T y z))) 
                                            (v_Vtc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt y z)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt y z))) v_Vtc 
                                               v_Vpc) 
                                            (v_Vuc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics.syntactic_equal 
                                                         abst_T y z)))) =>
                                             focal.zenon_syntactic_equal 
                                               abst_T y z 
                                               (v_Vvc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T y z))) =>
                                                focal.zenon_focal_notor 
                                                  (abst_lt x z) 
                                                  (basics.syntactic_equal 
                                                     abst_T x z) 
                                                  (v_Vwc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.or 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_lt x 
                                                                    z))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (basics.syntactic_equal 
                                                                    abst_T x 
                                                                    z)))))) =>
                                                   zen.Rnotor 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x z))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics.syntactic_equal 
                                                              abst_T x z))) 
                                                     (v_Vxc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_lt x 
                                                                    z))))) =>
                                                      v_Vyc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (basics.syntactic_equal 
                                                                    abst_T x 
                                                                    z))))) =>
                                                      focal.zenon_not_syntactic_equal 
                                                        abst_T x z 
                                                        (v_Vzc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T x 
                                                                    z)))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vad:
                                                            (zen.term abst_T) =>
                                                            zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vad y)) x 
                                                           x 
                                                           (v_Vbd:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                            zen.Rcut 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    x)) 
                                                              (v_Vcd:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x))) =>
                                                               zen.Rsubst 
                                                                 abst_T 
                                                                 (v_Vdd:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vdd x)) 
                                                                 x x 
                                                                 (v_Vbd0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                                  zen.Rnoteq 
                                                                    abst_T x 
                                                                    v_Vbd0) 
                                                                 (v_Vcd0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x))) =>
                                                                  zen.Rsubst 
                                                                    abst_T 
                                                                    (
                                                                    v_Ved:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    v_Ved)) 
                                                                    x x 
                                                                    (
                                                                    v_Vbd0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T x 
                                                                    v_Vbd0) 
                                                                    (
                                                                    v_Vcd0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)) 
                                                                    v_Vcd0 
                                                                    v_Vbd) 
                                                                    v_Vcd0) 
                                                                 v_Vcd) 
                                                              (v_Vbd0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                               zen.Rnoteq 
                                                                 abst_T x 
                                                                 v_Vbd0)) 
                                                           (v_Vrc0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T x 
                                                                    y))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Ved:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    v_Ved)) 
                                                              y z 
                                                              (v_Vfd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    z)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T y 
                                                                    z)) 
                                                                 v_Vvc v_Vfd) 
                                                              (v_Vgd:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    z))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T x 
                                                                    z)) 
                                                                 v_Vgd v_Vzc) 
                                                              v_Vrc0) v_Vrc) 
                                                        v_Vyc) v_Vwc) v_Vhc) 
                                               v_Vuc) v_Vsc) H_yz) v_Voc) 
                                   v_Vmc) H_xy) 
                             (v_Vhd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal abst_T y z))))) =>
                              focal.zenon_focal_or (abst_lt y z) 
                                (basics.syntactic_equal abst_T y z) 
                                (v_Vsc:
                                 (zen.proof 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt y z))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                y z))))) =>
                                 zen.Ror 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt y z))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics.syntactic_equal abst_T y z))) 
                                   (v_Vtc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt y z)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt y z))) 
                                      v_Vtc v_Vpc) 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                y z)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T y 
                                               z))) v_Vuc v_Vhd) v_Vsc) H_yz) 
                             v_Vqc) 
                          (v_Vid:
                           (zen.proof 
                              (zen.triangle (focal.is_true (abst_lt x z)))) =>
                           focal.zenon_focal_notor (abst_lt x z) 
                             (basics.syntactic_equal abst_T x z) 
                             (v_Vwc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt x z))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                x z)))))) =>
                              zen.Rnotor 
                                (zen.triangle (focal.is_true (abst_lt x z))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal abst_T x z))) 
                                (v_Vxc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_lt x z))))) =>
                                 v_Vyc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics.syntactic_equal abst_T 
                                                x z))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x z))) v_Vid 
                                   v_Vxc) v_Vwc) v_Vhc) __G_1_2_LEMMA) v_Vkc) 
                    (v_Vid:
                     (zen.proof (zen.triangle (focal.is_true (abst_lt x z)))) =>
                     focal.zenon_focal_notor (abst_lt x z) 
                       (basics.syntactic_equal abst_T x z) 
                       (v_Vwc:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_lt x z))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x z)))))) =>
                        zen.Rnotor 
                          (zen.triangle (focal.is_true (abst_lt x z))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T x z))) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (focal.is_true (abst_lt x z))))) =>
                           v_Vyc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x z))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_lt x z))) 
                             v_Vid v_Vxc) v_Vwc) v_Vhc) __G_1_3_LEMMA) 
                 (v_Vpc:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_lt y z))))) =>
                  zen.Rimply 
                    (zen.and (zen.triangle (focal.is_true (abst_lt x y))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y z)))) 
                    (zen.triangle (focal.is_true (abst_lt x z))) 
                    (v_Vqc:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.triangle (focal.is_true (abst_lt x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T y z)))))) =>
                     zen.Rnotand 
                       (zen.triangle (focal.is_true (abst_lt x y))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y z))) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle (focal.is_true (abst_lt x y))))) =>
                        focal.zenon_focal_or (abst_lt x y) 
                          (basics.syntactic_equal abst_T x y) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_lt x y))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x y))))) =>
                           zen.Ror 
                             (zen.triangle (focal.is_true (abst_lt x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T x y))) 
                             (v_Vnc:
                              (zen.proof 
                                 (zen.triangle (focal.is_true (abst_lt x y)))) =>
                              zen.Raxiom 
                                (zen.triangle (focal.is_true (abst_lt x y))) 
                                v_Vnc v_Vjc) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x y)))) =>
                              focal.zenon_syntactic_equal abst_T x y 
                                (v_Vrc:
                                 (zen.proof 
                                    (zen.triangle (zen.equal abst_T x y))) =>
                                 focal.zenon_focal_or (abst_lt y z) 
                                   (basics.syntactic_equal abst_T y z) 
                                   (v_Vsc:
                                    (zen.proof 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true (abst_lt y z))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics.syntactic_equal 
                                                   abst_T y z))))) =>
                                    zen.Ror 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt y z))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T y 
                                               z))) 
                                      (v_Vtc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true (abst_lt y z)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y z))) 
                                         v_Vtc v_Vpc) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics.syntactic_equal 
                                                   abst_T y z)))) =>
                                       focal.zenon_syntactic_equal abst_T y 
                                         z 
                                         (v_Vvc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T y z))) =>
                                          focal.zenon_focal_notor 
                                            (abst_lt x z) 
                                            (basics.syntactic_equal abst_T x 
                                               z) 
                                            (v_Vwc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.or 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_lt x z))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics.syntactic_equal 
                                                               abst_T x z)))))) =>
                                             zen.Rnotor 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x z))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics.syntactic_equal 
                                                        abst_T x z))) 
                                               (v_Vxc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_lt x z))))) =>
                                                v_Vyc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics.syntactic_equal 
                                                               abst_T x z))))) =>
                                                focal.zenon_not_syntactic_equal 
                                                  abst_T x z 
                                                  (v_Vzc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x z)))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.triangle 
                                                        (zen.equal abst_T 
                                                           v_Vad y)) x x 
                                                     (v_Vbd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T x x)))) =>
                                                      zen.Rcut 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              x x)) 
                                                        (v_Vcd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T x x))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vdd:
                                                            (zen.term abst_T) =>
                                                            zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vdd x)) x 
                                                           x 
                                                           (v_Vbd0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                            zen.Rnoteq 
                                                              abst_T x v_Vbd0) 
                                                           (v_Vcd0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T x 
                                                                    x))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Ved:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    v_Ved)) 
                                                              x x 
                                                              (v_Vbd0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                               zen.Rnoteq 
                                                                 abst_T x 
                                                                 v_Vbd0) 
                                                              (v_Vcd0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T x 
                                                                    x)) 
                                                                 v_Vcd0 v_Vbd) 
                                                              v_Vcd0) v_Vcd) 
                                                        (v_Vbd0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                         zen.Rnoteq abst_T x 
                                                           v_Vbd0)) 
                                                     (v_Vrc0:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x y))) =>
                                                      zen.Rsubst abst_T 
                                                        (v_Ved:
                                                         (zen.term abst_T) =>
                                                         zen.triangle 
                                                           (zen.equal abst_T 
                                                              x v_Ved)) y z 
                                                        (v_Vfd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T y 
                                                                    z)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T y z)) 
                                                           v_Vvc v_Vfd) 
                                                        (v_Vgd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T x z))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T x z)) 
                                                           v_Vgd v_Vzc) 
                                                        v_Vrc0) v_Vrc) v_Vyc) 
                                               v_Vwc) v_Vhc) v_Vuc) v_Vsc) 
                                   H_yz) v_Voc) v_Vmc) H_xy) 
                       (v_Vhd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T y z))))) =>
                        focal.zenon_focal_or (abst_lt y z) 
                          (basics.syntactic_equal abst_T y z) 
                          (v_Vsc:
                           (zen.proof 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_lt y z))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T y z))))) =>
                           zen.Ror 
                             (zen.triangle (focal.is_true (abst_lt y z))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T y z))) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.triangle (focal.is_true (abst_lt y z)))) =>
                              zen.Raxiom 
                                (zen.triangle (focal.is_true (abst_lt y z))) 
                                v_Vtc v_Vpc) 
                             (v_Vuc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T y z)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal abst_T y z))) 
                                v_Vuc v_Vhd) v_Vsc) H_yz) v_Vqc) 
                    (v_Vid:
                     (zen.proof (zen.triangle (focal.is_true (abst_lt x z)))) =>
                     focal.zenon_focal_notor (abst_lt x z) 
                       (basics.syntactic_equal abst_T x z) 
                       (v_Vwc:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_lt x z))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x z)))))) =>
                        zen.Rnotor 
                          (zen.triangle (focal.is_true (abst_lt x z))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T x z))) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (focal.is_true (abst_lt x z))))) =>
                           v_Vyc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics.syntactic_equal abst_T x z))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_lt x z))) 
                             v_Vid v_Vxc) v_Vwc) v_Vhc) __G_1_2_LEMMA) v_Vic) 
              (v_Vid:
               (zen.proof (zen.triangle (focal.is_true (abst_lt x z)))) =>
               focal.zenon_focal_notor (abst_lt x z) 
                 (basics.syntactic_equal abst_T x z) 
                 (v_Vwc:
                  (zen.proof 
                     (zen.not 
                        (zen.or (zen.triangle (focal.is_true (abst_lt x z))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics.syntactic_equal abst_T x z)))))) =>
                  zen.Rnotor (zen.triangle (focal.is_true (abst_lt x z))) 
                    (zen.triangle 
                       (focal.is_true (basics.syntactic_equal abst_T x z))) 
                    (v_Vxc:
                     (zen.proof 
                        (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
                     v_Vyc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics.syntactic_equal abst_T x z))))) =>
                     zen.Raxiom (zen.triangle (focal.is_true (abst_lt x z))) 
                       v_Vid v_Vxc) v_Vwc) v_Vhc) __G_1_1_LEMMA)) 
          (H:
           (dk_logic.eP 
              (dk_logic.and 
                 (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                 (dk_logic.ebP (basics.syntactic_equal abst_T y z)))) =>
           zen.nnpp (zen.triangle (focal.is_true (abst_equal x z))) 
             (v_Vpc:
              (zen.proof 
                 (zen.not (zen.triangle (focal.is_true (abst_equal x z))))) =>
              zen.Rand 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T x y))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T y z))) 
                (v_Vqc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (basics.syntactic_equal abst_T x y)))) =>
                 v_Vrc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (basics.syntactic_equal abst_T y z)))) =>
                 focal.zenon_syntactic_equal abst_T x y 
                   (v_Vsc:
                    (zen.proof (zen.triangle (zen.equal abst_T x y))) =>
                    focal.zenon_syntactic_equal abst_T y z 
                      (v_Vtc:
                       (zen.proof (zen.triangle (zen.equal abst_T y z))) =>
                       zen.Rcut 
                         (zen.triangle (focal.is_true (abst_equal x y))) 
                         (v_Vuc:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_equal x y)))) =>
                          zen.Rcut 
                            (zen.triangle (focal.is_true (abst_equal x z))) 
                            (v_Vvc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal x z)))) =>
                             zen.Rsubst basics.bool__t 
                               (v_Vwc:(zen.term basics.bool__t) =>
                                zen.triangle (focal.is_true v_Vwc)) 
                               (abst_equal x z) (abst_equal x z) 
                               (v_Vxc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal x z) (abst_equal x z))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vyc:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal v_Vyc z) 
                                           (abst_equal x z)))) x x 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle (zen.equal abst_T x x)))) =>
                                   zen.Rnoteq abst_T x v_Vzc) 
                                  (v_Vxc0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal x z) 
                                               (abst_equal x z))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal x v_Vad) 
                                              (abst_equal x z)))) z z 
                                     (v_Vbd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T z z)))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal z z))) 
                                        (v_Vcd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal z z)))) =>
                                         zen.Rall abst_T 
                                           (v_Vdd:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Ved:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vfd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vdd 
                                                             v_Ved))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Ved v_Vfd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vdd v_Vfd))))))) 
                                           x 
                                           (v_Vgd:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Ved:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vfd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal x 
                                                                 v_Ved))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Ved 
                                                                    v_Vfd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x v_Vfd)))))))) =>
                                            zen.Rall abst_T 
                                              (v_Ved:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vfd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x v_Ved))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Ved v_Vfd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x 
                                                                v_Vfd)))))) 
                                              z 
                                              (v_Vhd:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vfd:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal x z))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    z v_Vfd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x v_Vfd))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vfd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x z))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal z 
                                                                v_Vfd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x 
                                                                v_Vfd))))) z 
                                                 (v_Vid:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal x z))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    z z))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x z)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x z))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal z z))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x z)))) 
                                                    (v_Vpc0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x z))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x z))) 
                                                       v_Vvc v_Vpc0) 
                                                    (v_Vjd:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    z z))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x z))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal z z))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x z))) 
                                                       (v_Vkd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    z z))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   z z))) 
                                                          v_Vcd v_Vkd) 
                                                       (v_Vvc0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x z)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   x z))) 
                                                          v_Vvc0 v_Vpc) v_Vjd) 
                                                    v_Vid) v_Vhd) v_Vgd) 
                                           abst_equal_transitive) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal z z))))) =>
                                         zen.Rnoteq abst_T z v_Vbd)) 
                                     (v_Vxc0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal x z) 
                                                  (abst_equal x z))))) =>
                                      zen.Rnoteq basics.bool__t 
                                        (abst_equal x z) v_Vxc0) v_Vxc0) 
                                  v_Vxc) 
                               (v_Vvc0:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x z)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x z))) 
                                  v_Vvc0 v_Vpc) v_Vvc) 
                            (v_Vpc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x z))))) =>
                             zen.Rsubst basics.bool__t 
                               (v_Vwc:(zen.term basics.bool__t) =>
                                zen.triangle (focal.is_true v_Vwc)) 
                               (abst_equal x y) (abst_equal x z) 
                               (v_Vld:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal x y) (abst_equal x z))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vmd:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal v_Vmd y) 
                                           (abst_equal x z)))) x x 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle (zen.equal abst_T x x)))) =>
                                   zen.Rnoteq abst_T x v_Vzc) 
                                  (v_Vld0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal x y) 
                                               (abst_equal x z))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal x v_Vad) 
                                              (abst_equal x z)))) y z 
                                     (v_Vnd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T y z)))) =>
                                      zen.Raxiom 
                                        (zen.triangle (zen.equal abst_T y z)) 
                                        v_Vtc v_Vnd) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal x z) 
                                                  (abst_equal x z))))) =>
                                      zen.Rnoteq basics.bool__t 
                                        (abst_equal x z) v_Vxc) v_Vld0) v_Vld) 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x z)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal x z))) v_Vvc 
                                  v_Vpc0) v_Vuc)) 
                         (v_Vod:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_equal x y))))) =>
                          zen.Rcut 
                            (zen.triangle (focal.is_true (abst_equal z z))) 
                            (v_Vcd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal z z)))) =>
                             zen.Rcut 
                               (zen.triangle (focal.is_true (abst_equal y z))) 
                               (v_Vpd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal y z)))) =>
                                zen.Rsubst basics.bool__t 
                                  (v_Vwc:(zen.term basics.bool__t) =>
                                   zen.triangle (focal.is_true v_Vwc)) 
                                  (abst_equal y z) (abst_equal x z) 
                                  (v_Vqd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal y z) 
                                               (abst_equal x z))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vyc:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal v_Vyc z) 
                                              (abst_equal x z)))) y x 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T y x)))) =>
                                      zen.Rcut 
                                        (zen.triangle (zen.equal abst_T x x)) 
                                        (v_Vsd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T x x))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vtd:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T v_Vtd x)) x 
                                           y 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T x y)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T x y)) 
                                              v_Vsc v_Vud) 
                                           (v_Vvd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T y x))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vwd:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T y v_Vwd)) 
                                              x x 
                                              (v_Vzc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T x x)))) =>
                                               zen.Rnoteq abst_T x v_Vzc) 
                                              (v_Vvd0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T y x))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T y x)) 
                                                 v_Vvd0 v_Vrd) v_Vvd) v_Vsd) 
                                        (v_Vzc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x x)))) =>
                                         zen.Rnoteq abst_T x v_Vzc)) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal x z) 
                                                  (abst_equal x z))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vad:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal x v_Vad) 
                                                 (abst_equal x z)))) z z 
                                        (v_Vbd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T z z)))) =>
                                         zen.Rnoteq abst_T z v_Vbd) 
                                        (v_Vxc0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal x z) 
                                                     (abst_equal x z))))) =>
                                         zen.Rnoteq basics.bool__t 
                                           (abst_equal x z) v_Vxc0) v_Vxc) 
                                     v_Vqd) 
                                  (v_Vvc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal x z)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x z))) 
                                     v_Vvc v_Vpc) v_Vpd) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal y z))))) =>
                                zen.Rsubst basics.bool__t 
                                  (v_Vwc:(zen.term basics.bool__t) =>
                                   zen.triangle (focal.is_true v_Vwc)) 
                                  (abst_equal z z) (abst_equal y z) 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal z z) 
                                               (abst_equal y z))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vyc:(zen.term abst_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal v_Vyc z) 
                                              (abst_equal y z)))) z y 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T z y)))) =>
                                      zen.Rcut 
                                        (zen.triangle (zen.equal abst_T y y)) 
                                        (v_Vae:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T y y))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vbe:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T v_Vbe y)) y 
                                           z 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T y z)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T y z)) 
                                              v_Vtc v_Vnd) 
                                           (v_Vce:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T z y))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vde:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T z v_Vde)) 
                                              y y 
                                              (v_Vee:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T y y)))) =>
                                               zen.Rnoteq abst_T y v_Vee) 
                                              (v_Vce0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T z y))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T z y)) 
                                                 v_Vce0 v_Vzd) v_Vce) v_Vae) 
                                        (v_Vee:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T y y)))) =>
                                         zen.Rnoteq abst_T y v_Vee)) 
                                     (v_Vfe:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal y z) 
                                                  (abst_equal y z))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vge:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal y v_Vge) 
                                                 (abst_equal y z)))) z z 
                                        (v_Vbd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T z z)))) =>
                                         zen.Rnoteq abst_T z v_Vbd) 
                                        (v_Vfe0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal y z) 
                                                     (abst_equal y z))))) =>
                                         zen.Rnoteq basics.bool__t 
                                           (abst_equal y z) v_Vfe0) v_Vfe) 
                                     v_Vyd) 
                                  (v_Vpd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal y z)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal y z))) 
                                     v_Vpd v_Vxd) v_Vcd)) 
                            (v_Vkd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal z z))))) =>
                             zen.Rall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.triangle 
                                  (focal.is_true (abst_equal v_Vdd v_Vdd))) 
                               z 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal z z)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal z z))) v_Vcd 
                                  v_Vkd) abst_equal_reflexive))) v_Vrc) v_Vqc) 
                H))) 
         (H:
          (dk_logic.eP 
             (dk_logic.and 
                (dk_logic.ebP (basics.syntactic_equal abst_T x y)) 
                (dk_logic.ebP (abst_lt y z)))) =>
          zen.nnpp (zen.triangle (focal.is_true (abst_lt x z))) 
            (v_Vcc:
             (zen.proof 
                (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
             zen.Rand 
               (zen.triangle 
                  (focal.is_true (basics.syntactic_equal abst_T x y))) 
               (zen.triangle (focal.is_true (abst_lt y z))) 
               (v_Vdc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true (basics.syntactic_equal abst_T x y)))) =>
                v_Vec:
                (zen.proof (zen.triangle (focal.is_true (abst_lt y z)))) =>
                focal.zenon_syntactic_equal abst_T x y 
                  (v_Vfc:(zen.proof (zen.triangle (zen.equal abst_T x y))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vgc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vgc)) (abst_lt y z) 
                     (abst_lt x z) 
                     (v_Vhc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t (abst_lt y z) 
                                  (abst_lt x z))))) =>
                      zen.Rsubst abst_T 
                        (v_Vic:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (abst_lt v_Vic z) 
                                 (abst_lt x z)))) y x 
                        (v_Vjc:
                         (zen.proof 
                            (zen.not (zen.triangle (zen.equal abst_T y x)))) =>
                         zen.Reqsym abst_T x y v_Vfc v_Vjc) 
                        (v_Vkc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t (abst_lt x z) 
                                     (abst_lt x z))))) =>
                         zen.Rsubst abst_T 
                           (v_Vlc:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t (abst_lt x v_Vlc) 
                                    (abst_lt x z)))) z z 
                           (v_Vmc:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal abst_T z z)))) =>
                            zen.Rnoteq abst_T z v_Vmc) 
                           (v_Vkc0:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t (abst_lt x z) 
                                        (abst_lt x z))))) =>
                            zen.Rnoteq basics.bool__t (abst_lt x z) v_Vkc0) 
                           v_Vkc) v_Vhc) 
                     (v_Vnc:
                      (zen.proof (zen.triangle (focal.is_true (abst_lt x z)))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (abst_lt x z))) v_Vnc 
                        v_Vcc) v_Vec) v_Vdc) H))) 
        (H:
         (dk_logic.eP 
            (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
               (dk_logic.ebP (basics.syntactic_equal abst_T y z)))) =>
         zen.nnpp (zen.triangle (focal.is_true (abst_lt x z))) 
           (v_Vcc:
            (zen.proof (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
            zen.Rand (zen.triangle (focal.is_true (abst_lt x y))) 
              (zen.triangle 
                 (focal.is_true (basics.syntactic_equal abst_T y z))) 
              (v_Vdc:
               (zen.proof (zen.triangle (focal.is_true (abst_lt x y)))) =>
               v_Vec:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true (basics.syntactic_equal abst_T y z)))) =>
               focal.zenon_syntactic_equal abst_T y z 
                 (v_Vfc:(zen.proof (zen.triangle (zen.equal abst_T y z))) =>
                  zen.Rsubst basics.bool__t 
                    (v_Vgc:(zen.term basics.bool__t) =>
                     zen.triangle (focal.is_true v_Vgc)) (abst_lt x y) 
                    (abst_lt x z) 
                    (v_Vhc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (abst_lt x y) 
                                 (abst_lt x z))))) =>
                     zen.Rsubst abst_T 
                       (v_Vic:(zen.term abst_T) =>
                        zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t (abst_lt v_Vic y) 
                                (abst_lt x z)))) x x 
                       (v_Vjc:
                        (zen.proof 
                           (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                        zen.Rnoteq abst_T x v_Vjc) 
                       (v_Vhc0:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t (abst_lt x y) 
                                    (abst_lt x z))))) =>
                        zen.Rsubst abst_T 
                          (v_Vkc:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t (abst_lt x v_Vkc) 
                                   (abst_lt x z)))) y z 
                          (v_Vlc:
                           (zen.proof 
                              (zen.not (zen.triangle (zen.equal abst_T y z)))) =>
                           zen.Raxiom (zen.triangle (zen.equal abst_T y z)) 
                             v_Vfc v_Vlc) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t (abst_lt x z) 
                                       (abst_lt x z))))) =>
                           zen.Rnoteq basics.bool__t (abst_lt x z) v_Vmc) 
                          v_Vhc0) v_Vhc) 
                    (v_Vnc:
                     (zen.proof (zen.triangle (focal.is_true (abst_lt x z)))) =>
                     zen.Raxiom (zen.triangle (focal.is_true (abst_lt x z))) 
                       v_Vnc v_Vcc) v_Vdc) v_Vec) H))) 
       (H:
        (dk_logic.eP 
           (dk_logic.and (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.ebP (abst_lt y z)))) =>
        zen.nnpp (zen.triangle (focal.is_true (abst_lt x z))) 
          (v_Vkc:
           (zen.proof (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
           zen.Rand (zen.triangle (focal.is_true (abst_lt x y))) 
             (zen.triangle (focal.is_true (abst_lt y z))) 
             (v_Vlc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt x y)))) =>
              v_Vmc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt y z)))) =>
              zen.Rcut 
                (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                   (zen.not (zen.triangle (focal.is_true (abst_lt x x))))) 
                (v_Vnc:
                 (zen.proof 
                    (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                       (zen.not (zen.triangle (focal.is_true (abst_lt x x)))))) =>
                 zen.Rand (zen.not (zen.triangle (zen.equal abst_T x x))) 
                   (zen.not (zen.triangle (focal.is_true (abst_lt x x)))) 
                   (v_Voc:
                    (zen.proof 
                       (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                    v_Vpc:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_lt x x))))) =>
                    zen.Rnoteq abst_T x v_Voc) v_Vnc) 
                (v_Vqc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not (zen.triangle (zen.equal abst_T x x))) 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_lt x x))))))) =>
                 zen.Rcut (zen.triangle (zen.equal abst_T y z)) 
                   (v_Vrc:
                    (zen.proof (zen.triangle (zen.equal abst_T y z))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vsc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vsc)) (abst_lt x y) 
                      (abst_lt x z) 
                      (v_Vtc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t (abst_lt x y) 
                                   (abst_lt x z))))) =>
                       zen.Rsubst abst_T 
                         (v_Vuc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t (abst_lt v_Vuc y) 
                                  (abst_lt x z)))) x x 
                         (v_Voc:
                          (zen.proof 
                             (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                          zen.Rnotand 
                            (zen.not (zen.triangle (zen.equal abst_T x x))) 
                            (zen.not 
                               (zen.triangle (focal.is_true (abst_lt x x)))) 
                            (v_Vvc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle (zen.equal abst_T x x))))) =>
                             zen.Rnotnot 
                               (zen.triangle (zen.equal abst_T x x)) 
                               (v_Vwc:
                                (zen.proof 
                                   (zen.triangle (zen.equal abst_T x x))) =>
                                zen.Rcut 
                                  (zen.triangle (zen.equal abst_T x x)) 
                                  (v_Vwc0:
                                   (zen.proof 
                                      (zen.triangle (zen.equal abst_T x x))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vxc:(zen.term abst_T) =>
                                      zen.triangle (zen.equal abst_T v_Vxc x)) 
                                     x x 
                                     (v_Voc0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T x x)))) =>
                                      zen.Raxiom 
                                        (zen.triangle (zen.equal abst_T x x)) 
                                        v_Vwc0 v_Voc0) 
                                     (v_Vwc0:
                                      (zen.proof 
                                         (zen.triangle (zen.equal abst_T x x))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vyc:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T x v_Vyc)) x x 
                                        (v_Voc0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x x)))) =>
                                         zen.Rnoteq abst_T x v_Voc0) 
                                        (v_Vwc0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T x x))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T x x)) v_Vwc0 
                                           v_Voc) v_Vwc0) v_Vwc0) 
                                  (v_Voc0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle (zen.equal abst_T x x)))) =>
                                   zen.Rnoteq abst_T x v_Voc0)) v_Vvc) 
                            (v_Vzc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x x)))))) =>
                             zen.Rnotnot 
                               (zen.triangle (focal.is_true (abst_lt x x))) 
                               (v_Vad:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x x)))) =>
                                zen.Rall abst_T 
                                  (v_Vbd:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vcd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vdd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vbd v_Vcd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vcd v_Vdd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vbd v_Vdd))))))) 
                                  x 
                                  (v_Ved:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vcd:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vdd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x v_Vcd))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vcd v_Vdd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x v_Vdd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vcd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vdd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt x v_Vcd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vcd v_Vdd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt x v_Vdd)))))) x 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vdd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x x))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x v_Vdd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x v_Vdd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vdd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x x))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt x v_Vdd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt x v_Vdd))))) y 
                                        (v_Vgd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt x x))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x x))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x y))) 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x y)))) 
                                           (v_Vpc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x x))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x x))) 
                                              v_Vad v_Vpc) 
                                           (v_Vhd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x y))) 
                                              (zen.triangle 
                                                 (focal.is_true (abst_lt x y))) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x y))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x y))) v_Vlc 
                                                 v_Vid) 
                                              (v_Vlc0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt x y)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vsc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vsc)) 
                                                 (abst_lt x y) (abst_lt x z) 
                                                 (v_Vtc0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_lt x y) 
                                                              (abst_lt x z))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vuc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_lt v_Vuc y) 
                                                             (abst_lt x z)))) 
                                                    x x 
                                                    (v_Voc0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T x x)))) =>
                                                     zen.Rnoteq abst_T x 
                                                       v_Voc0) 
                                                    (v_Vtc0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_lt x y) 
                                                                 (abst_lt x z))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vjd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_lt x 
                                                                   v_Vjd) 
                                                                (abst_lt x z)))) 
                                                       y z 
                                                       (v_Vkd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T y 
                                                                    z)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T y z)) 
                                                          v_Vrc v_Vkd) 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_lt 
                                                                    x z) 
                                                                    (
                                                                    abst_lt 
                                                                    x z))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_lt x z) v_Vld) 
                                                       v_Vtc0) v_Vtc0) 
                                                 (v_Vmd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x z)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_lt x z))) 
                                                    v_Vmd v_Vkc) v_Vlc0) 
                                              v_Vhd) v_Vgd) v_Vfd) v_Ved) 
                                  abst_lt_is_transitive) v_Vzc) v_Vqc) 
                         (v_Vtc0:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t (abst_lt x y) 
                                      (abst_lt x z))))) =>
                          zen.Rsubst abst_T 
                            (v_Vjd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_lt x v_Vjd) (abst_lt x z)))) y z 
                            (v_Vkd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T y z)))) =>
                             zen.Raxiom 
                               (zen.triangle (zen.equal abst_T y z)) v_Vrc 
                               v_Vkd) 
                            (v_Vld:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_lt x z) (abst_lt x z))))) =>
                             zen.Rnoteq basics.bool__t (abst_lt x z) v_Vld) 
                            v_Vtc0) v_Vtc) 
                      (v_Vmd:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt x z)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt x z))) v_Vmd 
                         v_Vkc) v_Vlc) 
                   (v_Vkd:
                    (zen.proof 
                       (zen.not (zen.triangle (zen.equal abst_T y z)))) =>
                    zen.Rcut (zen.triangle (focal.is_true (abst_lt y z))) 
                      (v_Vmc0:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt y z)))) =>
                       zen.Rall abst_T 
                         (v_Vbd:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vcd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vbd v_Vcd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vcd v_Vdd))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vbd v_Vdd))))))) 
                         x 
                         (v_Ved:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vcd:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vdd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x v_Vcd))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vcd v_Vdd))) 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x v_Vdd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vcd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt x v_Vcd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vcd v_Vdd))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt x v_Vdd)))))) 
                            y 
                            (v_Vnd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vdd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x y))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y v_Vdd))) 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x v_Vdd))))))) =>
                             zen.Rall abst_T 
                               (v_Vdd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle (focal.is_true (abst_lt x y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y v_Vdd))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt x v_Vdd))))) 
                               z 
                               (v_Vod:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt x y))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y z))) 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x z)))))) =>
                                zen.Rimply 
                                  (zen.triangle (focal.is_true (abst_lt x y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y z))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt x z)))) 
                                  (v_Vid:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x y))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt x y))) v_Vlc 
                                     v_Vid) 
                                  (v_Vpd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt y z))) 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x z))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y z))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt x z))) 
                                     (v_Vqd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt y z))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt y z))) 
                                        v_Vmc0 v_Vqd) 
                                     (v_Vmd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true (abst_lt x z)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vsc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vsc)) 
                                        (abst_lt x z) (abst_lt x z) 
                                        (v_Vld:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_lt x z) 
                                                     (abst_lt x z))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vrd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_lt v_Vrd z) 
                                                    (abst_lt x z)))) x x 
                                           (v_Voc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T x x)))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T x x))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x x)))) 
                                              (v_Vvc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              x x))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T x x)) 
                                                 (v_Vwc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T x x))) =>
                                                  zen.Reqsym abst_T x x 
                                                    v_Vwc v_Voc) v_Vvc) 
                                              (v_Vzc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_lt x x)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_lt x x))) 
                                                 (v_Vad:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt x x)))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vbd:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vcd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vdd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    v_Vbd 
                                                                    v_Vcd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vbd 
                                                                    v_Vdd))))))) 
                                                    x 
                                                    (v_Ved0:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vcd:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vdd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vcd))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vdd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vcd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vdd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x v_Vcd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vcd 
                                                                    v_Vdd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vdd)))))) 
                                                       x 
                                                       (v_Vfd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vdd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vdd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vdd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vdd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x x))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vdd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x v_Vdd))))) 
                                                          z 
                                                          (v_Vsd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_lt 
                                                                    x x))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x z)))) 
                                                             (v_Vpc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x x))) 
                                                                v_Vad v_Vpc) 
                                                             (v_Vtd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))) 
                                                                (v_Vkc0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))) 
                                                                   v_Vmd 
                                                                   v_Vkc0) 
                                                                (v_Vmd0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    x z))) 
                                                                   v_Vmd0 
                                                                   v_Vkc) 
                                                                v_Vtd) v_Vsd) 
                                                          v_Vfd) v_Ved0) 
                                                    abst_lt_is_transitive) 
                                                 v_Vzc) v_Vqc) 
                                           (v_Vld0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_lt x z) 
                                                        (abst_lt x z))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vjd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_lt x v_Vjd) 
                                                       (abst_lt x z)))) z z 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T z z)))) =>
                                               zen.Rnoteq abst_T z v_Vud) 
                                              (v_Vld0:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_lt x z) 
                                                           (abst_lt x z))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_lt x z) v_Vld0) v_Vld0) 
                                           v_Vld) 
                                        (v_Vmd0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true (abst_lt x z)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true (abst_lt x z))) 
                                           v_Vmd0 v_Vkc) v_Vmd) v_Vpd) v_Vod) 
                               v_Vnd) v_Ved) abst_lt_is_transitive) 
                      (v_Vqd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_lt y z))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt y z))) v_Vmc 
                         v_Vqd)))) H))).

def Strict_order__different :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) => basics._bar__bar_ (abst_lt x y) (abst_lt y x).

def Strict_order__different_is_symmetric :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.ebP (Strict_order__different abst_T abst_lt x y)) 
             (dk_logic.ebP (Strict_order__different abst_T abst_lt y x)))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vac v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vcc v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vac v_Vcc))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vac v_Vcc)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vec v_Vcc)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (Strict_order__different abst_T abst_lt v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._bar__bar_ (abst_lt v_Vcc v_Vec) 
                          (abst_lt v_Vec v_Vcc))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (abst_lt v_Vec v_Vcc) 
                             (abst_lt v_Vcc v_Vec)))))) =>
              focal.zenon_focal_or (abst_lt v_Vcc v_Vec) 
                (abst_lt v_Vec v_Vcc) 
                (v_Vic:
                 (zen.proof 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))))) =>
                 zen.Ror 
                   (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                   (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec)))) =>
                    focal.zenon_focal_notor (abst_lt v_Vec v_Vcc) 
                      (abst_lt v_Vcc v_Vec) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vec v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vcc v_Vec)))))) =>
                       zen.Rnotor 
                         (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) 
                         (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                         (v_Vlc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vec v_Vcc))))) =>
                          v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vcc v_Vec))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_lt v_Vcc v_Vec))) v_Vjc 
                            v_Vmc) v_Vkc) v_Vhc) 
                   (v_Vnc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc)))) =>
                    focal.zenon_focal_notor (abst_lt v_Vec v_Vcc) 
                      (abst_lt v_Vcc v_Vec) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vec v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vcc v_Vec)))))) =>
                       zen.Rnotor 
                         (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) 
                         (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                         (v_Vlc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vec v_Vcc))))) =>
                          v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vcc v_Vec))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_lt v_Vec v_Vcc))) v_Vnc 
                            v_Vlc) v_Vkc) v_Vhc) v_Vic) v_Vgc) v_Vfc) v_Vdc) 
       v_Vbc).

def Strict_order__different_is_irreflexive :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_irreflexive:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.not (dk_logic.ebP (abst_lt x x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.not 
          (dk_logic.ebP (Strict_order__different abst_T abst_lt x x))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.not 
          (zen.triangle 
             (focal.is_true 
                (Strict_order__different abst_T abst_lt v_Vzb v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_order__different abst_T abst_lt v_Vzb v_Vzb))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.not 
          (zen.triangle 
             (focal.is_true 
                (Strict_order__different abst_T abst_lt v_Vzb v_Vzb)))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_order__different abst_T abst_lt v_Vbc v_Vbc)))))) =>
        zen.Rnotnot 
          (zen.triangle 
             (focal.is_true 
                (Strict_order__different abst_T abst_lt v_Vbc v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (basics._bar__bar_ (abst_lt v_Vbc v_Vbc) 
                       (abst_lt v_Vbc v_Vbc))))) =>
           focal.zenon_focal_or (abst_lt v_Vbc v_Vbc) (abst_lt v_Vbc v_Vbc) 
             (v_Vec:
              (zen.proof 
                 (zen.or 
                    (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))))) =>
              zen.Ror (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))) 
                (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))) 
                (v_Vfc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc)))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.not 
                      (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vzb)))) 
                   v_Vbc 
                   (v_Vgc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))) 
                      v_Vfc v_Vgc) abst_lt_is_irreflexive) 
                (v_Vfc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc)))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.not 
                      (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vzb)))) 
                   v_Vbc 
                   (v_Vgc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vbc))) 
                      v_Vfc v_Vgc) abst_lt_is_irreflexive) v_Vec) v_Vdc) 
          v_Vcc) v_Vac).

def Syntactical_setoid__equal_symmetric :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_is_syntactic:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.imp 
                                      (dk_logic.ebP (abst_equal x y)) 
                                      (dk_logic.ebP 
                                         (basics._equal_ abst_T x y)))))) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_equal y x)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_is_syntactic:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (basics._equal_ abst_T x y)))))) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vcc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vdc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vcc)))))) 
    (v_Vec:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vcc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vcc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vcc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vdc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vcc))))) 
       (v_Vfc:(zen.term abst_T) =>
        v_Vgc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vdc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))))))) =>
        zen.Rnotall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vdc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc)))) 
          (v_Vhc:(zen.term abst_T) =>
           v_Vic:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vhc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vfc)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vhc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vfc))) 
             (v_Vjc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vfc v_Vhc)))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                v_Vhc 
                (v_Vlc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vhc)))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vmc:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vmc)) 
                   (abst_equal v_Vhc v_Vhc) (abst_equal v_Vhc v_Vfc) 
                   (v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal v_Vhc v_Vhc) 
                                (abst_equal v_Vhc v_Vfc))))) =>
                    zen.Rsubst abst_T 
                      (v_Voc:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (abst_equal v_Voc v_Vhc) 
                               (abst_equal v_Vhc v_Vfc)))) v_Vhc v_Vhc 
                      (v_Vpc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (zen.equal abst_T v_Vhc v_Vhc)))) =>
                       zen.Rnoteq abst_T v_Vhc v_Vpc) 
                      (v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal v_Vhc v_Vhc) 
                                   (abst_equal v_Vhc v_Vfc))))) =>
                       zen.Rsubst abst_T 
                         (v_Vqc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vhc v_Vqc) 
                                  (abst_equal v_Vhc v_Vfc)))) v_Vhc v_Vfc 
                         (v_Vrc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal abst_T v_Vhc v_Vfc)))) =>
                          zen.Rall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vdc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ abst_T v_Vcc v_Vdc))))) 
                            v_Vfc 
                            (v_Vsc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vdc:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vfc v_Vdc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ abst_T v_Vfc 
                                               v_Vdc)))))) =>
                             zen.Rall abst_T 
                               (v_Vdc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vfc v_Vdc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ abst_T v_Vfc v_Vdc)))) 
                               v_Vhc 
                               (v_Vtc:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vfc v_Vhc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ abst_T v_Vfc 
                                               v_Vhc))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vfc v_Vhc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ abst_T v_Vfc v_Vhc))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vfc v_Vhc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vfc v_Vhc))) v_Vjc 
                                     v_Vuc) 
                                  (v_Vvc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T 
                                               v_Vfc v_Vhc)))) =>
                                   focal.zenon_syntactic_equal abst_T v_Vfc 
                                     v_Vhc 
                                     (v_Vwc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T v_Vfc v_Vhc))) =>
                                      zen.Reqsym abst_T v_Vfc v_Vhc v_Vwc 
                                        v_Vrc) v_Vvc) v_Vtc) v_Vsc) 
                            abst_equal_is_syntactic) 
                         (v_Vxc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal v_Vhc v_Vfc) 
                                      (abst_equal v_Vhc v_Vfc))))) =>
                          zen.Rnoteq basics.bool__t (abst_equal v_Vhc v_Vfc) 
                            v_Vxc) v_Vnc) v_Vnc) 
                   (v_Vyc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vfc)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vfc))) 
                      v_Vyc v_Vkc) v_Vlc) abst_equal_reflexive) v_Vic) v_Vgc) 
       v_Vec).

def Syntactical_setoid__equal_transitive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_is_syntactic:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.imp 
                                      (dk_logic.ebP (abst_equal x y)) 
                                      (dk_logic.ebP 
                                         (basics._equal_ abst_T x y)))))) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                   (dk_logic.ebP (abst_equal x z)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_is_syntactic:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (basics._equal_ abst_T x y)))))) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vgc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vhc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vic:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vhc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vic))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vic)))))))) 
    (v_Vjc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vgc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vhc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vic:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vhc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vhc v_Vic))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vgc v_Vic)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vgc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vhc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vic:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vhc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vic))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vic))))))) 
       (v_Vkc:(zen.term abst_T) =>
        v_Vlc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vhc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vic:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vhc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vhc v_Vic))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Vic))))))))) =>
        zen.Rnotall abst_T 
          (v_Vhc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vic:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vhc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vhc v_Vic))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vic)))))) 
          (v_Vmc:(zen.term abst_T) =>
           v_Vnc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vic:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vmc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vmc v_Vic))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Vic)))))))) =>
           zen.Rnotall abst_T 
             (v_Vic:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vmc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vic))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vic))))) 
             (v_Voc:(zen.term abst_T) =>
              v_Vpc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vmc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vmc v_Voc))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Voc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vmc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vmc v_Voc))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Voc)))) 
                (v_Vqc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vmc)))) =>
                 v_Vrc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vmc v_Voc))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Voc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_equal v_Vmc v_Voc))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vkc v_Voc))) 
                   (v_Vsc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vmc v_Voc)))) =>
                    v_Vtc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Voc))))) =>
                    zen.Rall abst_T 
                      (v_Vgc:(zen.term abst_T) =>
                       zen.triangle (focal.is_true (abst_equal v_Vgc v_Vgc))) 
                      v_Vkc 
                      (v_Vuc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vkc v_Vkc)))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vvc:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vvc)) 
                         (abst_equal v_Vkc v_Vkc) (abst_equal v_Vkc v_Voc) 
                         (v_Vwc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal v_Vkc v_Vkc) 
                                      (abst_equal v_Vkc v_Voc))))) =>
                          zen.Rsubst abst_T 
                            (v_Vxc:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal v_Vxc v_Vkc) 
                                     (abst_equal v_Vkc v_Voc)))) v_Vkc v_Vkc 
                            (v_Vyc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T v_Vkc v_Vkc)))) =>
                             zen.Rnoteq abst_T v_Vkc v_Vyc) 
                            (v_Vwc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal v_Vkc v_Vkc) 
                                         (abst_equal v_Vkc v_Voc))))) =>
                             zen.Rsubst abst_T 
                               (v_Vzc:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal v_Vkc v_Vzc) 
                                        (abst_equal v_Vkc v_Voc)))) v_Vkc 
                               v_Voc 
                               (v_Vad:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Vkc v_Voc)))) =>
                                zen.Rall abst_T 
                                  (v_Vgc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vhc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vgc v_Vhc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._equal_ abst_T v_Vgc 
                                                 v_Vhc))))) v_Vmc 
                                  (v_Vbd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vhc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vmc v_Vhc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ abst_T 
                                                     v_Vmc v_Vhc)))))) =>
                                   zen.Rall abst_T 
                                     (v_Vhc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vmc v_Vhc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._equal_ abst_T v_Vmc 
                                                 v_Vhc)))) v_Voc 
                                     (v_Vcd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vmc v_Voc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ abst_T 
                                                     v_Vmc v_Voc))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vmc v_Voc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._equal_ abst_T v_Vmc 
                                                 v_Voc))) 
                                        (v_Vdd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vmc v_Voc))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vmc v_Voc))) 
                                           v_Vsc v_Vdd) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vmc v_Voc)))) =>
                                         focal.zenon_syntactic_equal abst_T 
                                           v_Vmc v_Voc 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T v_Vmc 
                                                     v_Voc))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vgd:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T v_Vgd 
                                                    v_Voc)) v_Vmc v_Vkc 
                                              (v_Vhd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           v_Vmc v_Vkc)))) =>
                                               zen.Rcut 
                                                 (zen.triangle 
                                                    (zen.equal abst_T v_Vkc 
                                                       v_Vkc)) 
                                                 (v_Vid:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           v_Vkc v_Vkc))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vjd:
                                                     (zen.term abst_T) =>
                                                     zen.triangle 
                                                       (zen.equal abst_T 
                                                          v_Vjd v_Vkc)) 
                                                    v_Vkc v_Vmc 
                                                    (v_Vkd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vkc v_Vmc)))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vgc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vhc:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vgc 
                                                                    v_Vhc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (basics._equal_ 
                                                                    abst_T 
                                                                    v_Vgc 
                                                                    v_Vhc))))) 
                                                       v_Vkc 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vhc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vhc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (basics._equal_ 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vhc)))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vhc:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vhc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (basics._equal_ 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vhc)))) 
                                                          v_Vmc 
                                                          (v_Vmd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (basics._equal_ 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vmc))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (basics._equal_ 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                             (v_Vnd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))) 
                                                                v_Vqc v_Vnd) 
                                                             (v_Vod:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (basics.syntactic_equal 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vmc)))) =>
                                                              focal.zenon_syntactic_equal 
                                                                abst_T v_Vkc 
                                                                v_Vmc 
                                                                (v_Vpd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vmc))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vmc)) 
                                                                   v_Vpd 
                                                                   v_Vkd) 
                                                                v_Vod) v_Vmd) 
                                                          v_Vld) 
                                                       abst_equal_is_syntactic) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Vmc v_Vkc))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vrd:
                                                        (zen.term abst_T) =>
                                                        zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vmc v_Vrd)) 
                                                       v_Vkc v_Vkc 
                                                       (v_Vyc:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    v_Vkc 
                                                                    v_Vkc)))) =>
                                                        zen.Rnoteq abst_T 
                                                          v_Vkc v_Vyc) 
                                                       (v_Vqd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vmc v_Vkc))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vmc 
                                                                v_Vkc)) 
                                                          v_Vqd v_Vhd) v_Vqd) 
                                                    v_Vid) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Vkc v_Vkc)))) =>
                                                  zen.Rnoteq abst_T v_Vkc 
                                                    v_Vyc)) 
                                              (v_Vsd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Vkc 
                                                        v_Voc))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vtd:(zen.term abst_T) =>
                                                  zen.triangle 
                                                    (zen.equal abst_T v_Vkc 
                                                       v_Vtd)) v_Voc v_Voc 
                                                 (v_Vud:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Voc v_Voc)))) =>
                                                  zen.Rnoteq abst_T v_Voc 
                                                    v_Vud) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           v_Vkc v_Voc))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          v_Vkc v_Voc)) 
                                                    v_Vsd v_Vad) v_Vsd) v_Vfd) 
                                           v_Ved) v_Vcd) v_Vbd) 
                                  abst_equal_is_syntactic) 
                               (v_Vvd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal v_Vkc v_Voc) 
                                            (abst_equal v_Vkc v_Voc))))) =>
                                zen.Rnoteq basics.bool__t 
                                  (abst_equal v_Vkc v_Voc) v_Vvd) v_Vwc) 
                            v_Vwc) 
                         (v_Vwd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vkc v_Voc)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vkc v_Voc))) 
                            v_Vwd v_Vtc) v_Vuc) abst_equal_reflexive) v_Vrc) 
                v_Vpc) v_Vnc) v_Vlc) v_Vjc).

def Strictly_ordered_set__leq_from_lt :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP (Strict_partial_order__leq abst_T abst_lt x y)) 
             (dk_logic.or (dk_logic.ebP (abst_lt x y)) 
                (dk_logic.ebP (basics.syntactic_equal abst_T x y))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vac))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vzb v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vzb 
                             v_Vac))) 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vzb v_Vac))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vzb v_Vac))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vzb v_Vac))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vzb v_Vac)))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vcc 
                             v_Vac))) 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vcc v_Vac)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vcc v_Vac))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vac))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vcc v_Vac))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_partial_order__leq abst_T abst_lt v_Vcc 
                             v_Vec))) 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vcc v_Vec))))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Strict_partial_order__leq abst_T abst_lt v_Vcc v_Vec))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vcc v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (abst_lt v_Vcc v_Vec) 
                             (basics.syntactic_equal abst_T v_Vcc v_Vec)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.or 
                    (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal abst_T v_Vcc v_Vec))))) =>
              zen.Ror (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec)))) =>
                 focal.zenon_focal_notor (abst_lt v_Vcc v_Vec) 
                   (basics.syntactic_equal abst_T v_Vcc v_Vec) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vcc v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T v_Vcc v_Vec)))))) =>
                    zen.Rnotor 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vcc v_Vec))))) =>
                       v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                         v_Vic v_Vkc) v_Vjc) v_Vgc) 
                (v_Vmc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal abst_T v_Vcc v_Vec)))) =>
                 focal.zenon_focal_notor (abst_lt v_Vcc v_Vec) 
                   (basics.syntactic_equal abst_T v_Vcc v_Vec) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vcc v_Vec))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T v_Vcc v_Vec)))))) =>
                    zen.Rnotor 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vcc v_Vec))))) =>
                       v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                         v_Vmc v_Vlc) v_Vjc) v_Vgc) v_Vhc) 
             (v_Vnc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._bar__bar_ (abst_lt v_Vcc v_Vec) 
                          (basics.syntactic_equal abst_T v_Vcc v_Vec))))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vcc v_Vec)))))) =>
              zen.Rnotor 
                (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                (v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))))) =>
                 v_Vlc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vcc v_Vec))))) =>
                 focal.zenon_focal_or (abst_lt v_Vcc v_Vec) 
                   (basics.syntactic_equal abst_T v_Vcc v_Vec) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.or 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T v_Vcc v_Vec))))) =>
                    zen.Ror 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                         v_Vic v_Vkc) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T v_Vcc v_Vec)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (basics.syntactic_equal abst_T v_Vcc v_Vec))) 
                         v_Vmc v_Vlc) v_Vhc) v_Vnc) v_Vjc) v_Vfc) v_Vdc) 
       v_Vbc).

def Strictly_ordered_set__different_is_syntactic :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_irreflexive:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.not (dk_logic.ebP (abst_lt x x))))) ->
  abst_different_is_symmetric:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (y:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP 
                                             (Strict_order__different abst_T 
                                                abst_lt x y)) 
                                          (dk_logic.ebP 
                                             (Strict_order__different abst_T 
                                                abst_lt y x)))))) ->
  abst_leq_from_lt:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.eqv (dk_logic.ebP (abst_leq x y)) 
                               (dk_logic.or (dk_logic.ebP (abst_lt x y)) 
                                  (dk_logic.ebP 
                                     (basics.syntactic_equal abst_T x y))))))) ->
  abst_total_order:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.or (dk_logic.ebP (abst_leq x y)) 
                               (dk_logic.ebP (abst_leq y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.not (dk_logic.ebP (basics._equal_ abst_T x y))) 
             (dk_logic.ebP (Strict_order__different abst_T abst_lt x y)))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))) =>
  abst_different_is_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp 
              (dk_logic.ebP (Strict_order__different abst_T abst_lt x y)) 
              (dk_logic.ebP (Strict_order__different abst_T abst_lt y x)))))) =>
  abst_leq_from_lt:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.or (dk_logic.ebP (abst_lt x y)) 
                 (dk_logic.ebP (basics.syntactic_equal abst_T x y))))))) =>
  abst_total_order:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.ebP (abst_leq y x)))))) =>
  (__M_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    D_xy:(dk_logic.eP 
            (dk_logic.not (dk_logic.ebP (basics._equal_ abst_T x y)))) ->
    dk_logic.eP (dk_logic.ebP (Strict_order__different abst_T abst_lt x y))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (basics._equal_ abst_T v_Vzb v_Vac)))) 
              (zen.triangle 
                 (focal.is_true 
                    (Strict_order__different abst_T abst_lt v_Vzb v_Vac)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true (basics._equal_ abst_T v_Vzb v_Vac)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Strict_order__different abst_T abst_lt v_Vzb 
                              v_Vac)))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (basics._equal_ abst_T v_Vzb v_Vac)))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_order__different abst_T abst_lt v_Vzb v_Vac)))))) 
        __M_1_LEMMA v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     D_xy:
     (dk_logic.eP (dk_logic.not (dk_logic.ebP (basics._equal_ abst_T x y)))) =>
     (__M_1_1_LEMMA:
      (L_xy:(dk_logic.eP (dk_logic.ebP (abst_leq x y))) ->
       dk_logic.eP (dk_logic.ebP (abst_lt x y))) =>
      (__M_1_2_LEMMA:
       (L_yx:(dk_logic.eP (dk_logic.ebP (abst_leq y x))) ->
        dk_logic.eP (dk_logic.ebP (abst_lt y x))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true (Strict_order__different abst_T abst_lt x y))) 
         (v_Vzb:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (basics._bar__bar_ (abst_lt x y) (abst_lt y x)))))) =>
          zen.Rimply (zen.triangle (focal.is_true (abst_leq x y))) 
            (zen.triangle (focal.is_true (abst_lt x y))) 
            (v_Vac:
             (zen.proof 
                (zen.not (zen.triangle (focal.is_true (abst_leq x y))))) =>
             zen.Rimply (zen.triangle (focal.is_true (abst_leq y x))) 
               (zen.triangle (focal.is_true (abst_lt y x))) 
               (v_Vbc:
                (zen.proof 
                   (zen.not (zen.triangle (focal.is_true (abst_leq y x))))) =>
                zen.Rall abst_T 
                  (v_Vcc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vdc:(zen.term abst_T) =>
                      zen.or 
                        (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vdc))) 
                        (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vcc))))) 
                  y 
                  (v_Vec:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vdc:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle (focal.is_true (abst_leq y v_Vdc))) 
                            (zen.triangle (focal.is_true (abst_leq v_Vdc y)))))) =>
                   zen.Rall abst_T 
                     (v_Vdc:(zen.term abst_T) =>
                      zen.or 
                        (zen.triangle (focal.is_true (abst_leq y v_Vdc))) 
                        (zen.triangle (focal.is_true (abst_leq v_Vdc y)))) x 
                     (v_Vfc:
                      (zen.proof 
                         (zen.or 
                            (zen.triangle (focal.is_true (abst_leq y x))) 
                            (zen.triangle (focal.is_true (abst_leq x y))))) =>
                      zen.Ror (zen.triangle (focal.is_true (abst_leq y x))) 
                        (zen.triangle (focal.is_true (abst_leq x y))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.triangle (focal.is_true (abst_leq y x)))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (abst_leq y x))) 
                           v_Vgc v_Vbc) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.triangle (focal.is_true (abst_leq x y)))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (abst_leq x y))) 
                           v_Vhc v_Vac) v_Vfc) v_Vec) abst_total_order) 
               (v_Vic:
                (zen.proof (zen.triangle (focal.is_true (abst_lt y x)))) =>
                focal.zenon_focal_notor (abst_lt x y) (abst_lt y x) 
                  (v_Vjc:
                   (zen.proof 
                      (zen.not 
                         (zen.or 
                            (zen.triangle (focal.is_true (abst_lt x y))) 
                            (zen.triangle (focal.is_true (abst_lt y x)))))) =>
                   zen.Rnotor (zen.triangle (focal.is_true (abst_lt x y))) 
                     (zen.triangle (focal.is_true (abst_lt y x))) 
                     (v_Vkc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_lt x y))))) =>
                      v_Vlc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_lt y x))))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (abst_lt y x))) v_Vic 
                        v_Vlc) v_Vjc) v_Vzb) __M_1_2_LEMMA) 
            (v_Vmc:
             (zen.proof (zen.triangle (focal.is_true (abst_lt x y)))) =>
             focal.zenon_focal_notor (abst_lt x y) (abst_lt y x) 
               (v_Vjc:
                (zen.proof 
                   (zen.not 
                      (zen.or (zen.triangle (focal.is_true (abst_lt x y))) 
                         (zen.triangle (focal.is_true (abst_lt y x)))))) =>
                zen.Rnotor (zen.triangle (focal.is_true (abst_lt x y))) 
                  (zen.triangle (focal.is_true (abst_lt y x))) 
                  (v_Vkc:
                   (zen.proof 
                      (zen.not (zen.triangle (focal.is_true (abst_lt x y))))) =>
                   v_Vlc:
                   (zen.proof 
                      (zen.not (zen.triangle (focal.is_true (abst_lt y x))))) =>
                   zen.Raxiom (zen.triangle (focal.is_true (abst_lt x y))) 
                     v_Vmc v_Vkc) v_Vjc) v_Vzb) __M_1_1_LEMMA)) 
        (L_yx:(dk_logic.eP (dk_logic.ebP (abst_leq y x))) =>
         zen.nnpp (zen.triangle (focal.is_true (abst_lt y x))) 
           (v_Vac:
            (zen.proof (zen.not (zen.triangle (focal.is_true (abst_lt y x))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vbc v_Vcc)))))) 
              y 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle (focal.is_true (abst_leq y v_Vcc))) 
                        (zen.or 
                           (zen.triangle (focal.is_true (abst_lt y v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics.syntactic_equal abst_T y v_Vcc))))))) =>
               zen.Rall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv (zen.triangle (focal.is_true (abst_leq y v_Vcc))) 
                    (zen.or (zen.triangle (focal.is_true (abst_lt y v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T y v_Vcc))))) x 
                 (v_Vec:
                  (zen.proof 
                     (zen.eqv (zen.triangle (focal.is_true (abst_leq y x))) 
                        (zen.or (zen.triangle (focal.is_true (abst_lt y x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics.syntactic_equal abst_T y x)))))) =>
                  zen.Requiv (zen.triangle (focal.is_true (abst_leq y x))) 
                    (zen.or (zen.triangle (focal.is_true (abst_lt y x))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y x)))) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_leq y x))))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.or 
                              (zen.triangle (focal.is_true (abst_lt y x))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal abst_T y x)))))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_leq y x))) L_yx 
                       v_Vfc) 
                    (L_yx0:
                     (zen.proof (zen.triangle (focal.is_true (abst_leq y x)))) =>
                     v_Vhc:
                     (zen.proof 
                        (zen.or (zen.triangle (focal.is_true (abst_lt y x))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics.syntactic_equal abst_T y x))))) =>
                     zen.Ror (zen.triangle (focal.is_true (abst_lt y x))) 
                       (zen.triangle 
                          (focal.is_true (basics.syntactic_equal abst_T y x))) 
                       (v_Vic:
                        (zen.proof 
                           (zen.triangle (focal.is_true (abst_lt y x)))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (abst_lt y x))) v_Vic 
                          v_Vac) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics.syntactic_equal abst_T y x)))) =>
                        focal.zenon_syntactic_equal abst_T y x 
                          (v_Vkc:
                           (zen.proof (zen.triangle (zen.equal abst_T y x))) =>
                           focal.zenon_not_syntactic_equal abst_T x y 
                             (v_Vlc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle (zen.equal abst_T x y)))) =>
                              zen.Reqsym abst_T y x v_Vkc v_Vlc) D_xy) v_Vjc) 
                       v_Vhc) v_Vec) v_Vdc) abst_leq_from_lt))) 
       (L_xy:(dk_logic.eP (dk_logic.ebP (abst_leq x y))) =>
        zen.nnpp (zen.triangle (focal.is_true (abst_lt x y))) 
          (v_Vac:
           (zen.proof (zen.not (zen.triangle (focal.is_true (abst_lt x y))))) =>
           zen.Rall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                   (zen.or 
                      (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal abst_T v_Vbc v_Vcc)))))) 
             x 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_leq x v_Vcc))) 
                       (zen.or 
                          (zen.triangle (focal.is_true (abst_lt x v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T x v_Vcc))))))) =>
              zen.Rall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv (zen.triangle (focal.is_true (abst_leq x v_Vcc))) 
                   (zen.or (zen.triangle (focal.is_true (abst_lt x v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal abst_T x v_Vcc))))) y 
                (v_Vec:
                 (zen.proof 
                    (zen.eqv (zen.triangle (focal.is_true (abst_leq x y))) 
                       (zen.or (zen.triangle (focal.is_true (abst_lt x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T x y)))))) =>
                 zen.Requiv (zen.triangle (focal.is_true (abst_leq x y))) 
                   (zen.or (zen.triangle (focal.is_true (abst_lt x y))) 
                      (zen.triangle 
                         (focal.is_true (basics.syntactic_equal abst_T x y)))) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_leq x y))))) =>
                    v_Vgc:
                    (zen.proof 
                       (zen.not 
                          (zen.or 
                             (zen.triangle (focal.is_true (abst_lt x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T x y)))))) =>
                    zen.Raxiom (zen.triangle (focal.is_true (abst_leq x y))) 
                      L_xy v_Vfc) 
                   (L_xy0:
                    (zen.proof (zen.triangle (focal.is_true (abst_leq x y)))) =>
                    v_Vhc:
                    (zen.proof 
                       (zen.or (zen.triangle (focal.is_true (abst_lt x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T x y))))) =>
                    zen.Ror (zen.triangle (focal.is_true (abst_lt x y))) 
                      (zen.triangle 
                         (focal.is_true (basics.syntactic_equal abst_T x y))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt x y)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt x y))) v_Vic 
                         v_Vac) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal abst_T x y)))) =>
                       focal.zenon_syntactic_equal abst_T x y 
                         (v_Vkc:
                          (zen.proof (zen.triangle (zen.equal abst_T x y))) =>
                          focal.zenon_not_syntactic_equal abst_T x y 
                            (v_Vlc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T x y)))) =>
                             zen.Raxiom 
                               (zen.triangle (zen.equal abst_T x y)) v_Vkc 
                               v_Vlc) D_xy) v_Vjc) v_Vhc) v_Vec) v_Vdc) 
             abst_leq_from_lt))).

def Strictly_ordered_set__total_order_strict :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq_from_lt:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.eqv (dk_logic.ebP (abst_leq x y)) 
                               (dk_logic.or (dk_logic.ebP (abst_lt x y)) 
                                  (dk_logic.ebP 
                                     (basics.syntactic_equal abst_T x y))))))) ->
  abst_total_order:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.or (dk_logic.ebP (abst_leq x y)) 
                               (dk_logic.ebP (abst_leq y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_lt x y)) 
             (dk_logic.or (dk_logic.ebP (abst_lt y x)) 
                (dk_logic.ebP (basics.syntactic_equal abst_T x y))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq_from_lt:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.or (dk_logic.ebP (abst_lt x y)) 
                 (dk_logic.ebP (basics.syntactic_equal abst_T x y))))))) =>
  abst_total_order:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.ebP (abst_leq y x)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.or (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vcc))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vbc))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vbc v_Vcc))))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.or 
                    (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vcc))) 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vbc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vbc v_Vcc))))))))) =>
     zen.Rnotall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.or (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vcc))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vbc))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vbc v_Vcc)))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.or 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vec v_Vcc)))))))) =>
        zen.Rnotall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.or (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vec v_Vcc))))) 
          (v_Vgc:(zen.term abst_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.or 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vgc))) 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vec v_Vgc))))))) =>
           zen.Rnotor (zen.triangle (focal.is_true (abst_lt v_Vec v_Vgc))) 
             (zen.or (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vec v_Vgc)))) 
             (v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vgc))))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.or 
                       (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vec v_Vgc)))))) =>
              zen.Rnotor 
                (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec))) 
                (zen.triangle 
                   (focal.is_true (basics.syntactic_equal abst_T v_Vec v_Vgc))) 
                (v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec))))) =>
                 v_Vlc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal abst_T v_Vec v_Vgc))))) =>
                 focal.zenon_not_syntactic_equal abst_T v_Vec v_Vgc 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not (zen.triangle (zen.equal abst_T v_Vec v_Vgc)))) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vbc))))) 
                      v_Vgc 
                      (v_Vnc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vcc:(zen.term abst_T) =>
                              zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vgc v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vgc)))))) =>
                       zen.Rall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vgc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vgc)))) 
                         v_Vec 
                         (v_Voc:
                          (zen.proof 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vgc v_Vec))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vec v_Vgc))))) =>
                          zen.Ror 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vgc v_Vec))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vec v_Vgc))) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vgc v_Vec)))) =>
                             zen.Rall abst_T 
                               (v_Vbc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vcc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                                     (zen.or 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vbc v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vbc v_Vcc)))))) v_Vgc 
                               (v_Vqc:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vcc:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vgc v_Vcc))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vgc v_Vcc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vgc v_Vcc))))))) =>
                                zen.Rall abst_T 
                                  (v_Vcc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vgc v_Vcc))) 
                                     (zen.or 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vgc v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vgc v_Vcc))))) v_Vec 
                                  (v_Vrc:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vgc v_Vec))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vgc v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vgc v_Vec)))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vgc v_Vec))) 
                                     (zen.or 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vgc v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vgc v_Vec)))) 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vgc v_Vec))))) =>
                                      v_Vtc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.or 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt v_Vgc v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics.syntactic_equal 
                                                        abst_T v_Vgc v_Vec)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vgc v_Vec))) v_Vpc 
                                        v_Vsc) 
                                     (v_Vpc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vgc v_Vec)))) =>
                                      v_Vuc:
                                      (zen.proof 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vgc v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vgc v_Vec))))) =>
                                      zen.Ror 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vgc v_Vec))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vgc v_Vec))) 
                                        (v_Vvc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vgc v_Vec)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vgc v_Vec))) 
                                           v_Vvc v_Vkc) 
                                        (v_Vwc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vgc v_Vec)))) =>
                                         focal.zenon_syntactic_equal abst_T 
                                           v_Vgc v_Vec 
                                           (v_Vxc:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T v_Vgc 
                                                     v_Vec))) =>
                                            zen.Reqsym abst_T v_Vgc v_Vec 
                                              v_Vxc v_Vmc) v_Vwc) v_Vuc) 
                                     v_Vrc) v_Vqc) abst_leq_from_lt) 
                            (v_Vyc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vec v_Vgc)))) =>
                             zen.Rall abst_T 
                               (v_Vbc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vcc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                                     (zen.or 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vbc v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vbc v_Vcc)))))) v_Vec 
                               (v_Vzc:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vcc:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vec v_Vcc))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vec v_Vcc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vec v_Vcc))))))) =>
                                zen.Rall abst_T 
                                  (v_Vcc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vec v_Vcc))) 
                                     (zen.or 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vec v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vec v_Vcc))))) v_Vgc 
                                  (v_Vad:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vec v_Vgc))) 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vec v_Vgc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vec v_Vgc)))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vec v_Vgc))) 
                                     (zen.or 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vec v_Vgc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vec v_Vgc)))) 
                                     (v_Vbd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vec v_Vgc))))) =>
                                      v_Vcd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.or 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt v_Vec v_Vgc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics.syntactic_equal 
                                                        abst_T v_Vec v_Vgc)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vec v_Vgc))) v_Vyc 
                                        v_Vbd) 
                                     (v_Vyc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vec v_Vgc)))) =>
                                      v_Vdd:
                                      (zen.proof 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vec v_Vgc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vec v_Vgc))))) =>
                                      zen.Ror 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vec v_Vgc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal abst_T 
                                                 v_Vec v_Vgc))) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vec v_Vgc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vec v_Vgc))) 
                                           v_Ved v_Vic) 
                                        (v_Vfd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     abst_T v_Vec v_Vgc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics.syntactic_equal 
                                                    abst_T v_Vec v_Vgc))) 
                                           v_Vfd v_Vlc) v_Vdd) v_Vad) v_Vzc) 
                               abst_leq_from_lt) v_Voc) v_Vnc) 
                      abst_total_order) v_Vlc) v_Vjc) v_Vhc) v_Vfc) v_Vdc).

def Strictly_ordered_set__equal_is_syntactic :
  abst_T:cc.uT ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_not_same:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP 
                                               (abst_different x y))))))) ->
  abst_different_is_syntactic:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (y:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.not 
                                             (dk_logic.ebP 
                                                (basics._equal_ abst_T x y))) 
                                          (dk_logic.ebP (abst_different x y)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (basics._equal_ abst_T x y)))))
  :=
  abst_T:cc.uT =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_not_same:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.not (dk_logic.ebP (abst_different x y))))))) =>
  abst_different_is_syntactic:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp 
              (dk_logic.not (dk_logic.ebP (basics._equal_ abst_T x y))) 
              (dk_logic.ebP (abst_different x y)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
             (zen.triangle 
                (focal.is_true (basics._equal_ abst_T v_Vac v_Vbc)))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true (basics._equal_ abst_T v_Vac v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
             (zen.triangle 
                (focal.is_true (basics._equal_ abst_T v_Vac v_Vbc))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true (basics._equal_ abst_T v_Vdc v_Vbc))))))) =>
        zen.Rnotall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
             (zen.triangle 
                (focal.is_true (basics._equal_ abst_T v_Vdc v_Vbc)))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                    (zen.triangle 
                       (focal.is_true (basics._equal_ abst_T v_Vdc v_Vfc)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
             (zen.triangle 
                (focal.is_true (basics._equal_ abst_T v_Vdc v_Vfc))) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc)))) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal abst_T v_Vdc v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vac v_Vbc)))))) 
                v_Vdc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vbc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vbc))))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vbc))))) 
                   v_Vfc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc)))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vfc)))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vdc v_Vfc))))) =>
                       v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vdc v_Vfc)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc v_Vfc))) v_Vhc 
                         v_Vlc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vfc)))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc))))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ abst_T v_Vac v_Vbc)))) 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vac v_Vbc))))) 
                         v_Vdc 
                         (v_Voc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vbc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ abst_T v_Vdc 
                                               v_Vbc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vdc v_Vbc)))))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ abst_T v_Vdc v_Vbc)))) 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vdc v_Vbc)))) 
                            v_Vfc 
                            (v_Vpc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ abst_T v_Vdc 
                                               v_Vfc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vdc v_Vfc))))) =>
                             zen.Rimply 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ abst_T v_Vdc v_Vfc)))) 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vdc v_Vfc))) 
                               (v_Vqc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._equal_ abst_T v_Vdc 
                                                  v_Vfc)))))) =>
                                zen.Raxiom 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._equal_ abst_T v_Vdc v_Vfc)))) 
                                  v_Vic v_Vqc) 
                               (v_Vrc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vdc v_Vfc)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_different v_Vdc v_Vfc))) v_Vrc 
                                  v_Vnc) v_Vpc) v_Voc) 
                         abst_different_is_syntactic) v_Vkc) v_Vjc) 
                abst_different_is_not_same) v_Vgc) v_Vec) v_Vcc).

def Strictly_ordered_set__different_is_complete :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_irreflexive:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.not (dk_logic.ebP (abst_lt x x))))) ->
  abst_total_order_strict:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.or (dk_logic.ebP (abst_lt x y)) 
                                      (dk_logic.or 
                                         (dk_logic.ebP (abst_lt y x)) 
                                         (dk_logic.ebP 
                                            (basics.syntactic_equal abst_T x 
                                               y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP (Strict_order__different abst_T abst_lt x y)) 
                (dk_logic.or 
                   (dk_logic.ebP (Strict_order__different abst_T abst_lt x z)) 
                   (dk_logic.ebP (Strict_order__different abst_T abst_lt y z)))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))) =>
  abst_total_order_strict:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.or (dk_logic.ebP (abst_lt y x)) 
                 (dk_logic.ebP (basics.syntactic_equal abst_T x y))))))) =>
  (__P_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    z:(cc.eT abst_T) ->
    H:(dk_logic.eP 
         (dk_logic.ebP (Strict_order__different abst_T abst_lt x y))) ->
    dk_logic.eP 
      (dk_logic.or 
         (dk_logic.ebP (Strict_order__different abst_T abst_lt x z)) 
         (dk_logic.ebP (Strict_order__different abst_T abst_lt y z)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (Strict_order__different abst_T abst_lt v_Vzb v_Vac))) 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vzb v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vac v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (Strict_order__different abst_T abst_lt v_Vzb 
                                 v_Vac))) 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_order__different abst_T abst_lt 
                                    v_Vzb v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (Strict_order__different abst_T abst_lt 
                                    v_Vac v_Vbc)))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt v_Vzb v_Vac))) 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (Strict_order__different abst_T abst_lt v_Vzb 
                                v_Vbc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (Strict_order__different abst_T abst_lt v_Vac 
                                v_Vbc)))))))) __P_1_LEMMA v_Vcc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     z:(cc.eT abst_T) =>
     H:
     (dk_logic.eP (dk_logic.ebP (Strict_order__different abst_T abst_lt x y))) =>
     (__P_1_1_LEMMA:
      (Hxz:(dk_logic.eP (dk_logic.ebP (abst_lt x z))) ->
       dk_logic.eP 
         (dk_logic.or 
            (dk_logic.ebP (Strict_order__different abst_T abst_lt x z)) 
            (dk_logic.ebP (Strict_order__different abst_T abst_lt y z)))) =>
      (__P_1_2_LEMMA:
       (Hxz:(dk_logic.eP (dk_logic.ebP (abst_lt z x))) ->
        dk_logic.eP 
          (dk_logic.or 
             (dk_logic.ebP (Strict_order__different abst_T abst_lt x z)) 
             (dk_logic.ebP (Strict_order__different abst_T abst_lt y z)))) =>
       (__P_1_3_LEMMA:
        (Hxz:(dk_logic.eP (dk_logic.ebP (basics.syntactic_equal abst_T x z))) ->
         dk_logic.eP 
           (dk_logic.or 
              (dk_logic.ebP (Strict_order__different abst_T abst_lt x z)) 
              (dk_logic.ebP (Strict_order__different abst_T abst_lt y z)))) =>
        zen.nnpp 
          (zen.or 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt y z)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt x z))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt y z)))))) =>
           zen.Rnotor 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt y z))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt x z))))) =>
              v_Vbc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt y z))))) =>
              zen.Rimply (zen.triangle (focal.is_true (abst_lt x z))) 
                (zen.or 
                   (zen.triangle 
                      (focal.is_true 
                         (Strict_order__different abst_T abst_lt x z))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Strict_order__different abst_T abst_lt y z)))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
                 zen.Rimply (zen.triangle (focal.is_true (abst_lt z x))) 
                   (zen.or 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt x z))) 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt y z)))) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_lt z x))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true (basics.syntactic_equal abst_T x z))) 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true 
                               (Strict_order__different abst_T abst_lt x z))) 
                         (zen.triangle 
                            (focal.is_true 
                               (Strict_order__different abst_T abst_lt y z)))) 
                      (v_Vec:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal abst_T x z))))) =>
                       zen.Rall abst_T 
                         (v_Vfc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vgc:(zen.term abst_T) =>
                             zen.or 
                               (zen.triangle 
                                  (focal.is_true (abst_lt v_Vfc v_Vgc))) 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vgc v_Vfc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics.syntactic_equal abst_T v_Vfc 
                                           v_Vgc)))))) x 
                         (v_Vhc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vgc:(zen.term abst_T) =>
                                 zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x v_Vgc))) 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Vgc x))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T x 
                                               v_Vgc))))))) =>
                          zen.Rall abst_T 
                            (v_Vgc:(zen.term abst_T) =>
                             zen.or 
                               (zen.triangle 
                                  (focal.is_true (abst_lt x v_Vgc))) 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vgc x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics.syntactic_equal abst_T x 
                                           v_Vgc))))) z 
                            (v_Vic:
                             (zen.proof 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x z))) 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt z x))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T x 
                                               z)))))) =>
                             zen.Ror 
                               (zen.triangle (focal.is_true (abst_lt x z))) 
                               (zen.or 
                                  (zen.triangle (focal.is_true (abst_lt z x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics.syntactic_equal abst_T x z)))) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x z)))) =>
                                zen.Raxiom 
                                  (zen.triangle (focal.is_true (abst_lt x z))) 
                                  v_Vjc v_Vcc) 
                               (v_Vkc:
                                (zen.proof 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt z x))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T x 
                                               z))))) =>
                                zen.Ror 
                                  (zen.triangle (focal.is_true (abst_lt z x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics.syntactic_equal abst_T x z))) 
                                  (v_Vlc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt z x)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt z x))) v_Vlc 
                                     v_Vdc) 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal abst_T x 
                                               z)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics.syntactic_equal abst_T x z))) 
                                     v_Vmc v_Vec) v_Vkc) v_Vic) v_Vhc) 
                         abst_total_order_strict) 
                      (v_Vnc:
                       (zen.proof 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true 
                                   (Strict_order__different abst_T abst_lt x 
                                      z))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (Strict_order__different abst_T abst_lt y 
                                      z))))) =>
                       zen.Ror 
                         (zen.triangle 
                            (focal.is_true 
                               (Strict_order__different abst_T abst_lt x z))) 
                         (zen.triangle 
                            (focal.is_true 
                               (Strict_order__different abst_T abst_lt y z))) 
                         (v_Voc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (Strict_order__different abst_T abst_lt x 
                                      z)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (Strict_order__different abst_T abst_lt x z))) 
                            v_Voc v_Vac) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (Strict_order__different abst_T abst_lt y 
                                      z)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (Strict_order__different abst_T abst_lt y z))) 
                            v_Vpc v_Vbc) v_Vnc) __P_1_3_LEMMA) 
                   (v_Vnc:
                    (zen.proof 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (Strict_order__different abst_T abst_lt x z))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Strict_order__different abst_T abst_lt y z))))) =>
                    zen.Ror 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt x z))) 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt y z))) 
                      (v_Voc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (Strict_order__different abst_T abst_lt x z)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (Strict_order__different abst_T abst_lt x z))) 
                         v_Voc v_Vac) 
                      (v_Vpc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (Strict_order__different abst_T abst_lt y z)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (Strict_order__different abst_T abst_lt y z))) 
                         v_Vpc v_Vbc) v_Vnc) __P_1_2_LEMMA) 
                (v_Vnc:
                 (zen.proof 
                    (zen.or 
                       (zen.triangle 
                          (focal.is_true 
                             (Strict_order__different abst_T abst_lt x z))) 
                       (zen.triangle 
                          (focal.is_true 
                             (Strict_order__different abst_T abst_lt y z))))) =>
                 zen.Ror 
                   (zen.triangle 
                      (focal.is_true 
                         (Strict_order__different abst_T abst_lt x z))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Strict_order__different abst_T abst_lt y z))) 
                   (v_Voc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (Strict_order__different abst_T abst_lt x z)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt x z))) 
                      v_Voc v_Vac) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (Strict_order__different abst_T abst_lt y z)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt y z))) 
                      v_Vpc v_Vbc) v_Vnc) __P_1_1_LEMMA) v_Vzb)) 
         (Hxz:
          (dk_logic.eP (dk_logic.ebP (basics.syntactic_equal abst_T x z))) =>
          zen.nnpp 
            (zen.or 
               (zen.triangle 
                  (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
               (zen.triangle 
                  (focal.is_true (Strict_order__different abst_T abst_lt y z)))) 
            (v_Vfc:
             (zen.proof 
                (zen.not 
                   (zen.or 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt x z))) 
                      (zen.triangle 
                         (focal.is_true 
                            (Strict_order__different abst_T abst_lt y z)))))) =>
             zen.Rnotor 
               (zen.triangle 
                  (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
               (zen.triangle 
                  (focal.is_true (Strict_order__different abst_T abst_lt y z))) 
               (v_Vgc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ (abst_lt x z) (abst_lt z x)))))) =>
                v_Vhc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ (abst_lt y z) (abst_lt z y)))))) =>
                focal.zenon_focal_notor (abst_lt y z) (abst_lt z y) 
                  (v_Vic:
                   (zen.proof 
                      (zen.not 
                         (zen.or 
                            (zen.triangle (focal.is_true (abst_lt y z))) 
                            (zen.triangle (focal.is_true (abst_lt z y)))))) =>
                   zen.Rnotor (zen.triangle (focal.is_true (abst_lt y z))) 
                     (zen.triangle (focal.is_true (abst_lt z y))) 
                     (v_Vjc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_lt y z))))) =>
                      v_Vkc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_lt z y))))) =>
                      focal.zenon_focal_or (abst_lt x y) (abst_lt y x) 
                        (v_Vlc:
                         (zen.proof 
                            (zen.or 
                               (zen.triangle (focal.is_true (abst_lt x y))) 
                               (zen.triangle (focal.is_true (abst_lt y x))))) =>
                         zen.Ror 
                           (zen.triangle (focal.is_true (abst_lt x y))) 
                           (zen.triangle (focal.is_true (abst_lt y x))) 
                           (v_Vmc:
                            (zen.proof 
                               (zen.triangle (focal.is_true (abst_lt x y)))) =>
                            focal.zenon_syntactic_equal abst_T x z 
                              (v_Vnc:
                               (zen.proof 
                                  (zen.triangle (zen.equal abst_T x z))) =>
                               zen.Rsubst basics.bool__t 
                                 (v_Voc:(zen.term basics.bool__t) =>
                                  zen.triangle (focal.is_true v_Voc)) 
                                 (abst_lt x y) (abst_lt z y) 
                                 (v_Vpc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_lt x y) (abst_lt z y))))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vqc:(zen.term abst_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_lt v_Vqc y) (abst_lt z y)))) 
                                    x z 
                                    (v_Vrc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T x z)))) =>
                                     zen.Raxiom 
                                       (zen.triangle (zen.equal abst_T x z)) 
                                       v_Vnc v_Vrc) 
                                    (v_Vsc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_lt z y) (abst_lt z y))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vtc:(zen.term abst_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_lt z v_Vtc) 
                                                (abst_lt z y)))) y y 
                                       (v_Vuc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T y y)))) =>
                                        zen.Rnoteq abst_T y v_Vuc) 
                                       (v_Vsc0:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_lt z y) 
                                                    (abst_lt z y))))) =>
                                        zen.Rnoteq basics.bool__t 
                                          (abst_lt z y) v_Vsc0) v_Vsc) v_Vpc) 
                                 (v_Vvc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt z y)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt z y))) v_Vvc 
                                    v_Vkc) v_Vmc) Hxz) 
                           (v_Vwc:
                            (zen.proof 
                               (zen.triangle (focal.is_true (abst_lt y x)))) =>
                            focal.zenon_syntactic_equal abst_T x z 
                              (v_Vnc:
                               (zen.proof 
                                  (zen.triangle (zen.equal abst_T x z))) =>
                               zen.Rsubst basics.bool__t 
                                 (v_Voc:(zen.term basics.bool__t) =>
                                  zen.triangle (focal.is_true v_Voc)) 
                                 (abst_lt y x) (abst_lt y z) 
                                 (v_Vxc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_lt y x) (abst_lt y z))))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vyc:(zen.term abst_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_lt v_Vyc x) (abst_lt y z)))) 
                                    y y 
                                    (v_Vuc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T y y)))) =>
                                     zen.Rnoteq abst_T y v_Vuc) 
                                    (v_Vxc0:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_lt y x) (abst_lt y z))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vzc:(zen.term abst_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_lt y v_Vzc) 
                                                (abst_lt y z)))) x z 
                                       (v_Vrc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x z)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T x z)) v_Vnc 
                                          v_Vrc) 
                                       (v_Vad:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_lt y z) 
                                                    (abst_lt y z))))) =>
                                        zen.Rnoteq basics.bool__t 
                                          (abst_lt y z) v_Vad) v_Vxc0) v_Vxc) 
                                 (v_Vbd:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y z)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt y z))) v_Vbd 
                                    v_Vjc) v_Vwc) Hxz) v_Vlc) H) v_Vic) v_Vhc) 
               v_Vfc))) 
        (Hxz:(dk_logic.eP (dk_logic.ebP (abst_lt z x))) =>
         zen.nnpp 
           (zen.or 
              (zen.triangle 
                 (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
              (zen.triangle 
                 (focal.is_true (Strict_order__different abst_T abst_lt y z)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.or 
                     (zen.triangle 
                        (focal.is_true 
                           (Strict_order__different abst_T abst_lt x z))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Strict_order__different abst_T abst_lt y z)))))) =>
            zen.Rnotor 
              (zen.triangle 
                 (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
              (zen.triangle 
                 (focal.is_true (Strict_order__different abst_T abst_lt y z))) 
              (v_Vac:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._bar__bar_ (abst_lt x z) (abst_lt z x)))))) =>
               v_Vbc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._bar__bar_ (abst_lt y z) (abst_lt z y)))))) =>
               focal.zenon_focal_notor (abst_lt x z) (abst_lt z x) 
                 (v_Vcc:
                  (zen.proof 
                     (zen.not 
                        (zen.or (zen.triangle (focal.is_true (abst_lt x z))) 
                           (zen.triangle (focal.is_true (abst_lt z x)))))) =>
                  zen.Rnotor (zen.triangle (focal.is_true (abst_lt x z))) 
                    (zen.triangle (focal.is_true (abst_lt z x))) 
                    (v_Vdc:
                     (zen.proof 
                        (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
                     v_Vec:
                     (zen.proof 
                        (zen.not (zen.triangle (focal.is_true (abst_lt z x))))) =>
                     zen.Raxiom (zen.triangle (focal.is_true (abst_lt z x))) 
                       Hxz v_Vec) v_Vcc) v_Vac) v_Vzb))) 
       (Hxz:(dk_logic.eP (dk_logic.ebP (abst_lt x z))) =>
        zen.nnpp 
          (zen.or 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt y z)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.or 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt x z))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Strict_order__different abst_T abst_lt y z)))))) =>
           zen.Rnotor 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt x z))) 
             (zen.triangle 
                (focal.is_true (Strict_order__different abst_T abst_lt y z))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (abst_lt x z) (abst_lt z x)))))) =>
              v_Vbc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (abst_lt y z) (abst_lt z y)))))) =>
              focal.zenon_focal_notor (abst_lt x z) (abst_lt z x) 
                (v_Vcc:
                 (zen.proof 
                    (zen.not 
                       (zen.or (zen.triangle (focal.is_true (abst_lt x z))) 
                          (zen.triangle (focal.is_true (abst_lt z x)))))) =>
                 zen.Rnotor (zen.triangle (focal.is_true (abst_lt x z))) 
                   (zen.triangle (focal.is_true (abst_lt z x))) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
                    v_Vec:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_lt z x))))) =>
                    zen.Raxiom (zen.triangle (focal.is_true (abst_lt x z))) 
                      Hxz v_Vdc) v_Vcc) v_Vac) v_Vzb))).

