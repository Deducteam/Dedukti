#NAME weak_structures.

def Left_regular_semi_module__zero_left_absorbes :
  _p_A_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_one:(cc.eT _p_A_T) ->
  _p_A_plus:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT _p_A_T) ->
  _p_A_zero:(cc.eT _p_A_T) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_A_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (_p_A_equal (_p_A_plus x _p_A_zero) x)) 
                                (dk_logic.ebP 
                                   (_p_A_equal (_p_A_plus _p_A_zero x) x))))) ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT _p_A_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall _p_A_T 
                                         (a:(cc.eT _p_A_T) =>
                                          dk_logic.forall _p_A_T 
                                            (b:(cc.eT _p_A_T) =>
                                             dk_logic.forall abst_T 
                                               (x:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (_p_A_equal a b)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_mult a x) 
                                                        (abst_mult b x)))))))) ->
  abst_mult_right_distributes_on_plus:(dk_logic.eP 
                                         (dk_logic.forall _p_A_T 
                                            (x:(cc.eT _p_A_T) =>
                                             dk_logic.forall _p_A_T 
                                               (y:(cc.eT _p_A_T) =>
                                                dk_logic.forall abst_T 
                                                  (z:(cc.eT abst_T) =>
                                                   dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (_p_A_plus x y) z) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)))))))) ->
  abst_one_is_left_neutral:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_equal (abst_mult _p_A_one x) x)))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_plus_is_regular:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (z:(cc.eT abst_T) =>
                                    dk_logic.and 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_plus x y) 
                                               (abst_plus x z))) 
                                         (dk_logic.ebP (abst_equal y z))) 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (abst_equal (abst_plus x z) 
                                               (abst_plus y z))) 
                                         (dk_logic.ebP (abst_equal x y)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult _p_A_zero x) abst_zero)))
  :=
  _p_A_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_one:(cc.eT _p_A_T) =>
  _p_A_plus:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT _p_A_T) =>
  _p_A_zero:(cc.eT _p_A_T) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_A_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.and (dk_logic.ebP (_p_A_equal (_p_A_plus x _p_A_zero) x)) 
           (dk_logic.ebP (_p_A_equal (_p_A_plus _p_A_zero x) x))))) =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT _p_A_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (a:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (b:(cc.eT _p_A_T) =>
            dk_logic.forall abst_T 
              (x:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal a b)) 
                 (dk_logic.ebP (abst_equal (abst_mult a x) (abst_mult b x)))))))) =>
  abst_mult_right_distributes_on_plus:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_mult (_p_A_plus x y) z) 
                    (abst_plus (abst_mult x z) (abst_mult y z)))))))) =>
  abst_one_is_left_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult _p_A_one x) x)))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_plus_is_regular:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.and 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_plus x y) (abst_plus x z))) 
                    (dk_logic.ebP (abst_equal y z))) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_plus x z) (abst_plus y z))) 
                    (dk_logic.ebP (abst_equal x y)))))))) =>
  (__A_1_LEMMA:
   (x:(cc.eT abst_T) ->
    dk_logic.eP (dk_logic.ebP (abst_equal (abst_mult _p_A_zero x) abst_zero))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle 
           (focal.is_true (abst_equal (abst_mult _p_A_zero v_Vzb) abst_zero)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_mult _p_A_zero v_Vzb) abst_zero)))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_mult _p_A_zero v_Vzb) abst_zero)))) 
        __A_1_LEMMA v_Vac)) 
    (x:(cc.eT abst_T) =>
     (__A_1_2_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) x))) =>
      (__A_1_3_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                (abst_plus (abst_mult _p_A_zero x) (abst_mult _p_A_one x))))) =>
       (__A_1_4_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP (abst_equal (abst_plus (abst_mult _p_A_zero x) x) x))) =>
        (__A_1_5_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal (abst_plus (abst_mult _p_A_zero x) x) 
                  (abst_plus abst_zero x)))) =>
         zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal (abst_mult _p_A_zero x) abst_zero))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_mult _p_A_zero x) abst_zero))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vbc) 
                                   (abst_plus v_Vac v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))))))) 
              (abst_mult _p_A_zero x) 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          v_Vbc) 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          v_Vcc) (abst_plus v_Vbc v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult _p_A_zero x) v_Vbc)))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) v_Vbc) 
                                   (abst_plus (abst_mult _p_A_zero x) v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult _p_A_zero x) v_Vbc)))))) 
                 abst_zero 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          abst_zero) 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal abst_zero v_Vcc)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          v_Vcc) (abst_plus abst_zero v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult _p_A_zero x) 
                                       abst_zero))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.and 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) 
                                      abst_zero) 
                                   (abst_plus (abst_mult _p_A_zero x) v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero v_Vcc)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) v_Vcc) 
                                   (abst_plus abst_zero v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult _p_A_zero x) abst_zero))))) 
                    x 
                    (v_Vfc:
                     (zen.proof 
                        (zen.and 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          abst_zero) 
                                       (abst_plus (abst_mult _p_A_zero x) x)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal abst_zero x)))) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (abst_plus abst_zero x)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult _p_A_zero x) 
                                       abst_zero)))))) =>
                     zen.Rand 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) 
                                      abst_zero) 
                                   (abst_plus (abst_mult _p_A_zero x) x)))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero x)))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) x) 
                                   (abst_plus abst_zero x)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult _p_A_zero x) abst_zero)))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          abst_zero) 
                                       (abst_plus (abst_mult _p_A_zero x) x)))) 
                              (zen.triangle 
                                 (focal.is_true (abst_equal abst_zero x))))) =>
                        v_Vhc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (abst_plus abst_zero x)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult _p_A_zero x) 
                                       abst_zero))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) x) 
                                   (abst_plus abst_zero x)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult _p_A_zero x) abst_zero))) 
                          (v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             x) (abst_plus abst_zero x)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult _p_A_zero x) x) 
                                      (abst_plus abst_zero x)))) 
                             __A_1_5_LEMMA v_Vic) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult _p_A_zero x) 
                                       abst_zero)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult _p_A_zero x) 
                                      abst_zero))) v_Vjc v_Vzb) v_Vhc) v_Vfc) 
                    v_Vec) v_Vdc) abst_plus_is_regular)) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_plus (abst_mult _p_A_zero x) x) 
                      (abst_plus abst_zero x)))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_plus (abst_mult _p_A_zero x) x) 
                             (abst_plus abst_zero x)))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_plus (abst_mult _p_A_zero x) x) 
                            (abst_plus (abst_mult _p_A_zero x) x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_mult _p_A_zero x) x) 
                               (abst_plus (abst_mult _p_A_zero x) x)))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_mult _p_A_zero x) x) 
                                (abst_plus (abst_mult _p_A_zero x) x)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) x) 
                                   (abst_plus (abst_mult _p_A_zero x) x))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_plus (abst_mult _p_A_zero x) x) 
                            (abst_plus (abst_mult _p_A_zero x) x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_plus (abst_mult _p_A_zero x) x) 
                               (abst_plus (abst_mult _p_A_zero x) x))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_plus (abst_mult _p_A_zero x) x) 
                                (abst_plus (abst_mult _p_A_zero x) x))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) x) 
                                   (abst_plus (abst_mult _p_A_zero x) x)))))) =>
                    zen.Rnoteq abst_T (abst_plus (abst_mult _p_A_zero x) x) 
                      v_Vmc) v_Vlc) 
                (v_Voc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_mult _p_A_zero x) x) 
                                   (abst_plus (abst_mult _p_A_zero x) x)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult _p_A_zero x) x) 
                                      (abst_plus (abst_mult _p_A_zero x) x)))))))) =>
                 zen.Rcut 
                   (zen.triangle (zen.equal abst_T x (abst_plus abst_zero x))) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal abst_T x (abst_plus abst_zero x)))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vqc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vqc)) 
                      (abst_equal (abst_plus (abst_mult _p_A_zero x) x) x) 
                      (abst_equal (abst_plus (abst_mult _p_A_zero x) x) 
                         (abst_plus abst_zero x)) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_plus (abst_mult _p_A_zero x) x) x) 
                                   (abst_equal 
                                      (abst_plus (abst_mult _p_A_zero x) x) 
                                      (abst_plus abst_zero x)))))) =>
                       zen.Rsubst abst_T 
                         (v_Vsc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vsc x) 
                                  (abst_equal 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     (abst_plus abst_zero x))))) 
                         (abst_plus (abst_mult _p_A_zero x) x) 
                         (abst_plus (abst_mult _p_A_zero x) x) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_mult _p_A_zero x) x) 
                                      (abst_plus (abst_mult _p_A_zero x) x))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     (abst_plus (abst_mult _p_A_zero x) x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_plus (abst_mult _p_A_zero x) x))))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x) 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     (abst_plus (abst_mult _p_A_zero x) x))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_plus (abst_mult _p_A_zero x) x) 
                                         (abst_plus (abst_mult _p_A_zero x) x)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_plus (abst_mult _p_A_zero x) x))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x) 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vvc:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vvc 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x))) 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x))) 
                                        v_Vuc v_Vmc) 
                                     (v_Vuc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x) 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vwc:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              v_Vwc)) 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_mult _p_A_zero 
                                                           x) x) 
                                                     (abst_plus 
                                                        (abst_mult _p_A_zero 
                                                           x) x))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           v_Vmc) 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult _p_A_zero x) x) 
                                                 (abst_plus 
                                                    (abst_mult _p_A_zero x) x))) 
                                           v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x) 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     v_Vmc)) v_Vtc) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x) 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_plus (abst_mult _p_A_zero x) x)))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x) 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x))))) =>
                                zen.Rall abst_T 
                                  (v_Vzc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vzc v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vzc v_Vbd))))))) 
                                  (abst_plus (abst_mult _p_A_zero x) x) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vad:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vbd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x) 
                                                        v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vad 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) v_Vbd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vad:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       v_Vbd)))))) 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vbd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x) 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) v_Vbd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       v_Vbd))))) x 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x) 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) x)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       x)))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x)))) 
                                              v_Vyc v_Vnc) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) x))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       x))) 
                                              (v_Vgd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) x))) 
                                                 __A_1_4_LEMMA v_Vgd) 
                                              (__A_1_4_LEMMA:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) x)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vqc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vqc)) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) x) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus abst_zero x)) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x) 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vsc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vsc x) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   x))))) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (v_Vmc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       v_Vmc) 
                                                    (v_Vrc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vhd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                   v_Vhd) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    x))))) x 
                                                       (abst_plus abst_zero x) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    (
                                                                    abst_plus 
                                                                    abst_zero 
                                                                    x))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x 
                                                                (abst_plus 
                                                                   abst_zero 
                                                                   x))) 
                                                          v_Vpc v_Vid) 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                abst_zero x)) 
                                                          v_Vjd) v_Vrc) v_Vrc) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 abst_zero x))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                abst_zero x)))) 
                                                    v_Vkd v_Vkc) 
                                                 __A_1_4_LEMMA) v_Vfd) v_Ved) 
                                        v_Vdd) v_Vcd) abst_equal_transitive) 
                               v_Vxc) v_Voc) 
                         (v_Vrc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_plus (abst_mult _p_A_zero x) x) 
                                         x) 
                                      (abst_equal 
                                         (abst_plus (abst_mult _p_A_zero x) x) 
                                         (abst_plus abst_zero x)))))) =>
                          zen.Rsubst abst_T 
                            (v_Vhd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        v_Vhd) 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_plus abst_zero x))))) x 
                            (abst_plus abst_zero x) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T x 
                                         (abst_plus abst_zero x))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal abst_T x (abst_plus abst_zero x))) 
                               v_Vpc v_Vid) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x) 
                                            (abst_plus abst_zero x)) 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult _p_A_zero x) x) 
                                            (abst_plus abst_zero x)))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal 
                                  (abst_plus (abst_mult _p_A_zero x) x) 
                                  (abst_plus abst_zero x)) v_Vjd) v_Vrc) 
                         v_Vrc) 
                      (v_Vkd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult _p_A_zero x) x) 
                                   (abst_plus abst_zero x))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult _p_A_zero x) x) 
                                  (abst_plus abst_zero x)))) v_Vkd v_Vkc) 
                      __A_1_4_LEMMA) 
                   (v_Vid:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T x (abst_plus abst_zero x))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal x (abst_plus abst_zero x)))) 
                      (v_Vld:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal x (abst_plus abst_zero x))))) =>
                       zen.Rall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vzc v_Vbd))))))) 
                         (abst_plus (abst_mult _p_A_zero x) x) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vad:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vbd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x) 
                                               v_Vad))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vad v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) v_Vbd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              v_Vbd)))))) x 
                            (v_Vmd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vbd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x) 
                                               x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) v_Vbd))))))) =>
                             zen.Rall abst_T 
                               (v_Vbd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              v_Vbd))))) 
                               (abst_plus abst_zero x) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult _p_A_zero x) x) 
                                               x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) 
                                                  (abst_plus abst_zero x))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              (abst_plus abst_zero x))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) x))) 
                                     __A_1_4_LEMMA v_Vgd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) 
                                                  (abst_plus abst_zero x)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              (abst_plus abst_zero x)))) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus abst_zero x)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus abst_zero x)))) 
                                        v_Vld v_Vpd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus 
                                                     (abst_mult _p_A_zero x) 
                                                     x) 
                                                  (abst_plus abst_zero x))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vqc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vqc)) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           (abst_plus abst_zero x)) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           (abst_plus abst_zero x)) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x) 
                                                        (abst_plus abst_zero 
                                                           x)) 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x) 
                                                        (abst_plus abst_zero 
                                                           x)))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vqd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vqd 
                                                       (abst_plus abst_zero x)) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       (abst_plus abst_zero x))))) 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           (v_Vmc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x) 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              _p_A_zero x) x))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x)))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x))))) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x)))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) v_Vuc v_Vmc) v_Vtc) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x)))) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vzc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vad:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vbd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vbd)))))) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       (v_Vdd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vbd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vbd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vbd))))) 
                                                          (abst_plus 
                                                             abst_zero x) 
                                                          (v_Vrd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x))))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                v_Vyc v_Vnc) 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                (v_Vkc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    x)))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                v_Vsd) v_Vrd) 
                                                          v_Vdd) v_Vcd) 
                                                    abst_equal_transitive) 
                                                 v_Vxc) v_Voc) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              abst_zero x)) 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult 
                                                                 _p_A_zero x) 
                                                              x) 
                                                           (abst_plus 
                                                              abst_zero x)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vhd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) v_Vhd) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) 
                                                          (abst_plus 
                                                             abst_zero x))))) 
                                              (abst_plus abst_zero x) 
                                              (abst_plus abst_zero x) 
                                              (v_Vtd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_plus 
                                                              abst_zero x) 
                                                           (abst_plus 
                                                              abst_zero x))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_plus abst_zero x) 
                                                 v_Vtd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 abst_zero x)) 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                              (abst_plus 
                                                                 abst_zero x)))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus abst_zero x)) 
                                                 v_Vjd) v_Vjd) v_Vjd) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult _p_A_zero 
                                                           x) x) 
                                                     (abst_plus abst_zero x))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus abst_zero x)))) 
                                           v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                               v_Vmd) v_Vcd) abst_equal_transitive) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x (abst_plus abst_zero x)))))) =>
                       zen.Rall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus v_Vzc abst_zero) 
                                     v_Vzc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus abst_zero v_Vzc) 
                                     v_Vzc)))) x 
                         (v_Vud:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus x abst_zero) x))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x))))) =>
                          zen.Rand 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus x abst_zero) x))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_plus abst_zero x) x))) 
                            (v_Vvd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus x abst_zero) x)))) =>
                             v_Vwd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus abst_zero x) x)))) =>
                             zen.Rall abst_T 
                               (v_Vzc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vzc v_Vad))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad v_Vzc))))) 
                               (abst_plus abst_zero x) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vad:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_zero x) 
                                                  v_Vad))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vad 
                                                  (abst_plus abst_zero x))))))) =>
                                zen.Rall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) v_Vad))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vad 
                                              (abst_plus abst_zero x))))) x 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_plus abst_zero x) x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero x) x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal x 
                                              (abst_plus abst_zero x)))) 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus abst_zero x) 
                                                     x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus abst_zero x) x))) 
                                        v_Vwd v_Vzd) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_plus abst_zero x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus abst_zero x)))) 
                                        v_Vld v_Vpd) v_Vyd) v_Vxd) 
                               abst_equal_symmetric) v_Vud) 
                         abst_zero_is_neutral)))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_plus (abst_mult _p_A_zero x) x) x))) 
            (v_Vvc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_plus (abst_mult _p_A_zero x) x) x))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus (abst_mult _p_A_zero x) x) 
                           (abst_mult (_p_A_plus _p_A_zero _p_A_one) x)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus (abst_mult _p_A_zero x) x) 
                              (abst_mult (_p_A_plus _p_A_zero _p_A_one) x)))))) 
               (v_Vwc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult _p_A_zero x) x) 
                               (abst_mult (_p_A_plus _p_A_zero _p_A_one) x)))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult _p_A_zero x) x) 
                                  (abst_mult (_p_A_plus _p_A_zero _p_A_one) x))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus (abst_mult _p_A_zero x) x) 
                           (abst_mult (_p_A_plus _p_A_zero _p_A_one) x)))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_plus (abst_mult _p_A_zero x) x) 
                              (abst_mult (_p_A_plus _p_A_zero _p_A_one) x))))) 
                  (v_Vxc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult _p_A_zero x) x) 
                               (abst_mult (_p_A_plus _p_A_zero _p_A_one) x))))) =>
                   v_Vyc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult _p_A_zero x) x) 
                                  (abst_mult (_p_A_plus _p_A_zero _p_A_one) x)))))) =>
                   zen.Rall abst_T 
                     (v_Vzc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vzc v_Vad))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vad v_Vzc))))) 
                     (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                     (v_Vbd:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vad:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        v_Vad))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal v_Vad 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x))))))) =>
                      zen.Rall abst_T 
                        (v_Vad:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x) 
                                    v_Vad))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal v_Vad 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x))))) 
                        (abst_plus (abst_mult _p_A_zero x) x) 
                        (v_Vcd:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        (abst_plus (abst_mult _p_A_zero x) x)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x)))))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x) 
                                    (abst_plus (abst_mult _p_A_zero x) x)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus (abst_mult _p_A_zero x) x) 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x)))) 
                           (v_Vdd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x) 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x)))))) =>
                            zen.Rcut 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x) 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x)))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x)))))) 
                              (v_Ved:
                               (zen.proof 
                                  (zen.and 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x) 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x)))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x))))))) =>
                               zen.Rand 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x) 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x)))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x))))) 
                                 (v_Vfd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x) 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x))))) =>
                                  v_Vgd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x)))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x) 
                                    v_Vfd) v_Ved) 
                              (v_Vhd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x)))))))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          (abst_mult _p_A_one x)) 
                                       (abst_plus (abst_mult _p_A_zero x) x))) 
                                 (v_Vid:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) 
                                              (abst_mult _p_A_one x)) 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x)))) =>
                                  zen.Rsubst basics.bool__t 
                                    (v_Vjd:(zen.term basics.bool__t) =>
                                     zen.triangle (focal.is_true v_Vjd)) 
                                    (abst_equal 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x) 
                                       (abst_plus (abst_mult _p_A_zero x) 
                                          (abst_mult _p_A_one x))) 
                                    (abst_equal 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x) 
                                       (abst_plus (abst_mult _p_A_zero x) x)) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       (abst_mult _p_A_one x))) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x)))))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vld:(zen.term abst_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal v_Vld 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      (abst_mult _p_A_one x))) 
                                                (abst_equal 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x))))) 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x) 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x) 
                                       (v_Vfd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x))))) =>
                                        zen.Rnotand 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x)))) 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x))))) 
                                          (v_Vmd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x)))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x))) 
                                             (v_Vnd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x)))) =>
                                              zen.Rcut 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x))) 
                                                (v_Vnd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x)))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vod:
                                                    (zen.term abst_T) =>
                                                    zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Vod 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x))) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) 
                                                   (v_Vfd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x) 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x))) 
                                                      v_Vnd v_Vfd) 
                                                   (v_Vnd:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x)))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vpd:
                                                       (zen.term abst_T) =>
                                                       zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x) 
                                                            v_Vpd)) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      (v_Vfd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                   (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))))) =>
                                                       zen.Rnoteq abst_T 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         v_Vfd) 
                                                      (v_Vnd:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_mult 
                                                                  (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                  x) 
                                                               (abst_mult 
                                                                  (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                  x))) v_Vnd 
                                                         v_Vfd) v_Vnd) v_Vnd) 
                                                (v_Vfd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x))))) =>
                                                 zen.Rnoteq abst_T 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) v_Vfd)) 
                                             v_Vmd) 
                                          (v_Vqd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x))))))) =>
                                           zen.Rnotnot 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x)))) 
                                             (v_Vrd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x))))) =>
                                              zen.Rall abst_T 
                                                (v_Vzc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vsd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vzc v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vsd))))))) 
                                                (abst_mult 
                                                   (_p_A_plus _p_A_zero 
                                                      _p_A_one) x) 
                                                (v_Vtd:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vad:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vsd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd)))))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vad:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vsd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vad))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd)))))) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) 
                                                   (v_Vud:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vsd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vsd:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))))) 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) 
                                                         (abst_mult _p_A_one 
                                                            x)) 
                                                      (v_Vvd:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))))))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))))) 
                                                         (v_Vgd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                            v_Vrd v_Vgd) 
                                                         (v_Vwd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                            (v_Vxd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                               __A_1_3_LEMMA 
                                                               v_Vxd) 
                                                            (__A_1_3_LEMMA:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))))) =>
                                                             zen.Rsubst 
                                                               basics.bool__t 
                                                               (v_Vjd:
                                                                (zen.term 
                                                                   basics.bool__t) =>
                                                                zen.triangle 
                                                                  (focal.is_true 
                                                                    v_Vjd)) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))) 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                               (v_Vkd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                                zen.Rsubst 
                                                                  abst_T 
                                                                  (v_Vld:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (v_Vfd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))))) =>
                                                                   zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vfd) 
                                                                  (v_Vkd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                                   zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vyd) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))) 
                                                                    v_Vid 
                                                                    v_Vzd) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                                    v_Vae) 
                                                                    v_Vkd) 
                                                                  v_Vkd) 
                                                               (v_Vbe:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                  v_Vbe v_Vdd) 
                                                               __A_1_3_LEMMA) 
                                                            v_Vwd) v_Vvd) 
                                                      v_Vud) v_Vtd) 
                                                abst_equal_transitive) v_Vqd) 
                                          v_Vhd) 
                                       (v_Vkd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) 
                                                          (abst_mult 
                                                             _p_A_one x))) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x)))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vyd:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      v_Vyd) 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x))))) 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             (abst_mult _p_A_one x)) 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             x) 
                                          (v_Vzd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) 
                                                          (abst_mult 
                                                             _p_A_one x)) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      (abst_mult _p_A_one x)) 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x))) v_Vid v_Vzd) 
                                          (v_Vae:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x)) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x)))))) =>
                                           zen.Rnoteq basics.bool__t 
                                             (abst_equal 
                                                (abst_mult 
                                                   (_p_A_plus _p_A_zero 
                                                      _p_A_one) x) 
                                                (abst_plus 
                                                   (abst_mult _p_A_zero x) x)) 
                                             v_Vae) v_Vkd) v_Vkd) 
                                    (v_Vbe:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) 
                                                 (abst_plus 
                                                    (abst_mult _p_A_zero x) x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult 
                                                   (_p_A_plus _p_A_zero 
                                                      _p_A_one) x) 
                                                (abst_plus 
                                                   (abst_mult _p_A_zero x) x)))) 
                                       v_Vbe v_Vdd) __A_1_3_LEMMA) 
                                 (v_Vzd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) 
                                                 (abst_mult _p_A_one x)) 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x))))) =>
                                  zen.Rcut 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult _p_A_zero x) 
                                                (abst_mult _p_A_one x)) 
                                             (abst_plus 
                                                (abst_mult _p_A_zero x) x)))) 
                                    (v_Vce:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult _p_A_zero x) 
                                                    (abst_mult _p_A_one x)) 
                                                 (abst_plus 
                                                    (abst_mult _p_A_zero x) x))))) =>
                                     zen.Rall abst_T 
                                       (v_Vzc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vzc v_Vad))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vad 
                                                            v_Vsd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vzc 
                                                            v_Vsd))))))) 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x) 
                                       (v_Vtd:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vad:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) v_Vad))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vad v_Vsd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) v_Vsd)))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         v_Vad))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vad 
                                                            v_Vsd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x) 
                                                            v_Vsd)))))) 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             (abst_mult _p_A_one x)) 
                                          (v_Vde:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   _p_A_one x))))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    _p_A_one 
                                                                    x)) v_Vsd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) v_Vsd))))))) =>
                                           zen.Rall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) 
                                                            (abst_mult 
                                                               _p_A_one x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               (abst_mult 
                                                                  _p_A_one x)) 
                                                            v_Vsd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x) 
                                                            v_Vsd))))) 
                                             (abst_plus 
                                                (abst_mult _p_A_zero x) x) 
                                             (v_Vee:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   _p_A_one x))))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) 
                                                            (abst_mult 
                                                               _p_A_one x))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               (abst_mult 
                                                                  _p_A_one x)) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x)))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x))))) 
                                                (v_Vxd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    _p_A_one 
                                                                    x))))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               (abst_mult 
                                                                  _p_A_one x))))) 
                                                   __A_1_3_LEMMA v_Vxd) 
                                                (v_Vfe:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                   (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               (abst_mult 
                                                                  _p_A_one x)) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x)))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               (_p_A_plus 
                                                                  _p_A_zero 
                                                                  _p_A_one) x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x)))) 
                                                   (v_Vge:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                  (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                      v_Vce v_Vge) 
                                                   (v_Vbe:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                    zen.Rsubst 
                                                      basics.bool__t 
                                                      (v_Vjd:
                                                       (zen.term 
                                                          basics.bool__t) =>
                                                       zen.triangle 
                                                         (focal.is_true v_Vjd)) 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) x)) 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) x)) 
                                                      (v_Vae:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vhe:
                                                          (zen.term abst_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    v_Vhe 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) 
                                                         (v_Vfd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))))) =>
                                                          zen.Rnotand 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))))) 
                                                            (v_Vmd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))))) =>
                                                             zen.Rnotnot 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))) 
                                                               (v_Vnd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) =>
                                                                zen.Reqsym 
                                                                  abst_T 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vnd 
                                                                  v_Vfd) 
                                                               v_Vmd) 
                                                            (v_Vqd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))))))) =>
                                                             zen.Rnotnot 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                               (v_Vrd:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))))) =>
                                                                zen.Rall 
                                                                  abst_T 
                                                                  (v_Vzc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vsd))))))) 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (v_Vtd:
                                                                   (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd)))))))) =>
                                                                   zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vad))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd)))))) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))))) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) 
                                                                    (v_Vgd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                                    v_Vrd 
                                                                    v_Vgd) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                    (v_Vdd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                    v_Vbe 
                                                                    v_Vdd) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                                    v_Vbe 
                                                                    v_Vdd) 
                                                                    v_Vje) 
                                                                    v_Vie) 
                                                                    v_Vud) 
                                                                    v_Vtd) 
                                                                  abst_equal_transitive) 
                                                               v_Vqd) v_Vhd) 
                                                         (v_Vae:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                          zen.Rsubst abst_T 
                                                            (v_Vyd:
                                                             (zen.term abst_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vyd) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x) 
                                                            (v_Vke:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                             zen.Rnoteq 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                               v_Vke) 
                                                            (v_Vae:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                             zen.Rnoteq 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)) 
                                                               v_Vae) v_Vae) 
                                                         v_Vae) 
                                                      (v_Vbe:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                         v_Vbe v_Vdd) v_Vbe) 
                                                   v_Vfe) v_Vee) v_Vde) v_Vtd) 
                                       abst_equal_transitive) 
                                    (v_Vge:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       (abst_mult _p_A_one x)) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x)))))) =>
                                     zen.Rall abst_T 
                                       (v_Vzc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vzc v_Vad))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus v_Vsd 
                                                            v_Vzc) 
                                                         (abst_plus v_Vsd 
                                                            v_Vad))))))) x 
                                       (v_Vle:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vad:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x v_Vad))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsd x) 
                                                             (abst_plus 
                                                                v_Vsd v_Vad)))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vad:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vad))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus v_Vsd x) 
                                                         (abst_plus v_Vsd 
                                                            v_Vad)))))) 
                                          (abst_mult _p_A_one x) 
                                          (v_Vme:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vsd:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_mult 
                                                                _p_A_one x)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                v_Vsd x) 
                                                             (abst_plus 
                                                                v_Vsd 
                                                                (abst_mult 
                                                                   _p_A_one x)))))))) =>
                                           zen.Rall abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_mult _p_A_one 
                                                            x)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus v_Vsd x) 
                                                         (abst_plus v_Vsd 
                                                            (abst_mult 
                                                               _p_A_one x)))))) 
                                             (abst_mult _p_A_zero x) 
                                             (v_Vne:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_mult 
                                                                _p_A_one x)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   _p_A_one x))))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_mult _p_A_one 
                                                            x)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) x) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) 
                                                            (abst_mult 
                                                               _p_A_one x))))) 
                                                (v_Voe:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x 
                                                                (abst_mult 
                                                                   _p_A_one x)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_mult 
                                                               _p_A_one v_Vzc) 
                                                            v_Vzc))) x 
                                                   (v_Vpe:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   _p_A_one x) 
                                                                x)))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vzc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    v_Vzc))))) 
                                                      (abst_mult _p_A_one x) 
                                                      (v_Vqe:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vad:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) v_Vad))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) v_Vad))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vad 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) x 
                                                         (v_Vre:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))) 
                                                            (v_Vse:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                               v_Vpe v_Vse) 
                                                            (v_Vte:
                                                             (zen.proof 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))) 
                                                               v_Vte v_Voe) 
                                                            v_Vre) v_Vqe) 
                                                      abst_equal_symmetric) 
                                                   abst_one_is_left_neutral) 
                                                (v_Vue:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) 
                                                                (abst_mult 
                                                                   _p_A_one x)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vzc v_Vad))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vad v_Vzc))))) 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) 
                                                   (v_Vve:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vad:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vad 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                  v_Vad))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vad 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) 
                                                         (abst_mult _p_A_one 
                                                            x)) 
                                                      (v_Vwe:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                         (v_Vxe:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x))))) 
                                                            v_Vue v_Vxe) 
                                                         (v_Vce:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x)))) 
                                                            v_Vce v_Vge) 
                                                         v_Vwe) v_Vve) 
                                                   abst_equal_symmetric) 
                                                v_Vne) v_Vme) v_Vle) 
                                       abst_plus_right_substitution_rule)))) 
                           (v_Vye:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x)))) 
                              v_Vye v_Vyc) v_Vcd) v_Vbd) abst_equal_symmetric) 
                  v_Vwc) 
               (v_Vze:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus (abst_mult _p_A_zero x) x) 
                                  (abst_mult (_p_A_plus _p_A_zero _p_A_one) x)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_mult _p_A_zero x) x) 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x)))))))) =>
                zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                  (v_Vaf:(zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vjd:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vjd)) 
                     (abst_equal 
                        (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) x) 
                     (abst_equal (abst_plus (abst_mult _p_A_zero x) x) x) 
                     (v_Vbf:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x) x) 
                                  (abst_equal 
                                     (abst_plus (abst_mult _p_A_zero x) x) x))))) =>
                      zen.Rsubst abst_T 
                        (v_Vcf:(zen.term abst_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (abst_equal v_Vcf x) 
                                 (abst_equal 
                                    (abst_plus (abst_mult _p_A_zero x) x) x)))) 
                        (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                        (abst_plus (abst_mult _p_A_zero x) x) 
                        (v_Vdf:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x) 
                                     (abst_plus (abst_mult _p_A_zero x) x))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus (abst_mult _p_A_zero x) x) 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x))))) 
                           (v_Vef:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus (abst_mult _p_A_zero x) x) 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x))) 
                              (v_Vff:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x)))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (abst_plus (abst_mult _p_A_zero x) x))) 
                                 (v_Vgf:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x)))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vhf:(zen.term abst_T) =>
                                     zen.triangle 
                                       (zen.equal abst_T v_Vhf 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             x))) 
                                    (abst_plus (abst_mult _p_A_zero x) x) 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x) 
                                    (v_Vxc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult _p_A_zero x) x) 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_mult _p_A_zero x) x) 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x))) v_Vff v_Vxc) 
                                    (v_Vif:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x) 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x)))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vpd:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) v_Vpd)) 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (v_Vke:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x))))) =>
                                        zen.Rnoteq abst_T 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             x) v_Vke) 
                                       (v_Vif:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) 
                                                 (abst_plus 
                                                    (abst_mult _p_A_zero x) x)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_mult 
                                                   (_p_A_plus _p_A_zero 
                                                      _p_A_one) x) 
                                                (abst_plus 
                                                   (abst_mult _p_A_zero x) x))) 
                                          v_Vif v_Vdf) v_Vif) v_Vgf) 
                                 (v_Vke:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x))))) =>
                                  zen.Rnoteq abst_T 
                                    (abst_plus (abst_mult _p_A_zero x) x) 
                                    v_Vke)) v_Vef) 
                           (v_Vjf:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult _p_A_zero x) x) 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       (abst_mult 
                                          (_p_A_plus _p_A_zero _p_A_one) x)))) 
                              (v_Vye:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x))))) =>
                               zen.Rall abst_T 
                                 (v_Vzc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vsd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vzc v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vad v_Vsd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vzc v_Vsd))))))) 
                                 (abst_plus (abst_mult _p_A_zero x) x) 
                                 (v_Vkf:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vad:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vsd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       v_Vad))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vad 
                                                          v_Vsd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) v_Vsd)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vad:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vsd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vad v_Vsd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) 
                                                      v_Vsd)))))) 
                                    (abst_mult 
                                       (_p_A_plus _p_A_zero _p_A_one) x) 
                                    (v_Vlf:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vsd:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          v_Vsd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) v_Vsd))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vsd:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      v_Vsd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) 
                                                      v_Vsd))))) x 
                                       (v_Vmf:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) x)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) x)))) 
                                          (v_Vyc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x)))) 
                                             v_Vye v_Vyc) 
                                          (v_Vnf:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) x))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) x))) 
                                             (v_Vof:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) x))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x) x))) 
                                                __A_1_2_LEMMA v_Vof) 
                                             (v_Vpf:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) x)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vjd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vjd)) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) x) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) x) 
                                                (v_Vqf:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vcf:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vcf x) 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x)))) 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) 
                                                   (v_Vke:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x))))) =>
                                                    zen.Rnoteq abst_T 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) 
                                                      v_Vke) 
                                                   (v_Vqf:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vrf:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                  v_Vrf) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x)))) 
                                                      x x 
                                                      (v_Vsf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T x x)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x x)) 
                                                         v_Vaf v_Vsf) 
                                                      (v_Vqf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x) x) v_Vqf) 
                                                      v_Vqf) v_Vqf) 
                                                (v_Vpf:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) x)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  _p_A_zero x) 
                                                               x) x))) v_Vpf 
                                                   v_Vvc) v_Vpf) v_Vnf) v_Vmf) 
                                       v_Vlf) v_Vkf) abst_equal_transitive) 
                              v_Vjf) v_Vze) 
                        (v_Vqf:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        x) 
                                     (abst_equal 
                                        (abst_plus (abst_mult _p_A_zero x) x) 
                                        x))))) =>
                         zen.Rsubst abst_T 
                           (v_Vrf:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       v_Vrf) 
                                    (abst_equal 
                                       (abst_plus (abst_mult _p_A_zero x) x) 
                                       x)))) x x 
                           (v_Vsf:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                            zen.Raxiom (zen.triangle (zen.equal abst_T x x)) 
                              v_Vaf v_Vsf) 
                           (v_Vqf:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) x) 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult _p_A_zero x) x) x))))) =>
                            zen.Rnoteq basics.bool__t 
                              (abst_equal 
                                 (abst_plus (abst_mult _p_A_zero x) x) x) 
                              v_Vqf) v_Vqf) v_Vbf) 
                     (v_Vpf:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult _p_A_zero x) x) x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus (abst_mult _p_A_zero x) x) x))) 
                        v_Vpf v_Vvc) __A_1_2_LEMMA) 
                  (v_Vsf:
                   (zen.proof (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                   zen.Rcut (zen.triangle (focal.is_true (abst_equal x x))) 
                     (v_Vtf:
                      (zen.proof 
                         (zen.triangle (focal.is_true (abst_equal x x)))) =>
                      zen.Rall abst_T 
                        (v_Vzc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vsd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vad v_Vsd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vzc v_Vsd))))))) 
                        (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                        (v_Vtd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vad:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vsd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x) v_Vad))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vad v_Vsd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) v_Vsd)))))))) =>
                         zen.Rall abst_T 
                           (v_Vad:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vsd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x) 
                                          v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vad v_Vsd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) v_Vsd)))))) x 
                           (v_Vuf:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vsd:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x) x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x v_Vsd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) v_Vsd))))))) =>
                            zen.Rall abst_T 
                              (v_Vsd:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x) 
                                          x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vsd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) v_Vsd))))) x 
                              (v_Vvf:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x) x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) x)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x) 
                                          x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) x)))) 
                                 (v_Vof:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) x))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) x))) __A_1_2_LEMMA v_Vof) 
                                 (v_Vwf:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) x))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x x))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult 
                                                (_p_A_plus _p_A_zero _p_A_one) 
                                                x) x))) 
                                    (v_Vxf:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true (abst_equal x x))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x x))) 
                                       v_Vtf v_Vxf) 
                                    (__A_1_2_LEMMA:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x) x)))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vjd:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vjd)) 
                                       (abst_equal 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x) 
                                          x) 
                                       (abst_equal 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             x) x) 
                                       (v_Vbf:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) x) 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x) 
                                                       x))))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vcf:(zen.term abst_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal v_Vcf x) 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) x)))) 
                                          (abst_mult 
                                             (_p_A_plus _p_A_zero _p_A_one) x) 
                                          (abst_plus (abst_mult _p_A_zero x) 
                                             x) 
                                          (v_Vdf:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             _p_A_zero x) x))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x)))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) x) 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x))))) 
                                             (v_Vef:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            _p_A_zero x) x) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x))) 
                                                (v_Vff:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x)))) =>
                                                 zen.Reqsym abst_T 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) 
                                                   (abst_mult 
                                                      (_p_A_plus _p_A_zero 
                                                         _p_A_one) x) v_Vff 
                                                   v_Vdf) v_Vef) 
                                             (v_Vjf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) x) 
                                                         (abst_mult 
                                                            (_p_A_plus 
                                                               _p_A_zero 
                                                               _p_A_one) x)))) 
                                                (v_Vye:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vzc:
                                                    (zen.term abst_T) =>
                                                    zen.forall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vsd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vsd))))))) 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) 
                                                   (v_Vkf:
                                                    (zen.proof 
                                                       (zen.forall abst_T 
                                                          (v_Vad:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vsd)))))))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vad:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vsd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vsd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vsd)))))) 
                                                      (abst_mult 
                                                         (_p_A_plus 
                                                            _p_A_zero 
                                                            _p_A_one) x) 
                                                      (v_Vlf:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vsd))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vsd:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vsd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    v_Vsd))))) 
                                                         x 
                                                         (v_Vmf:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x)))) 
                                                            (v_Vyc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x)))) 
                                                               v_Vye v_Vyc) 
                                                            (v_Vnf:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x))) 
                                                               (v_Vof:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))) 
                                                                  __A_1_2_LEMMA 
                                                                  v_Vof) 
                                                               (v_Vpf:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    _p_A_zero 
                                                                    x) x) x))) 
                                                                  v_Vpf v_Vvc) 
                                                               v_Vnf) v_Vmf) 
                                                         v_Vlf) v_Vkf) 
                                                   abst_equal_transitive) 
                                                v_Vjf) v_Vze) 
                                          (v_Vqf:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) x) 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                _p_A_zero x) 
                                                             x) x))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vrf:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) x) 
                                                         v_Vrf) 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               _p_A_zero x) x) 
                                                         x)))) x x 
                                             (v_Vsf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x x)))) =>
                                              zen.Rnoteq abst_T x v_Vsf) 
                                             (v_Vqf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) x) 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   _p_A_zero 
                                                                   x) x) x))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) x) v_Vqf) v_Vqf) 
                                          v_Vbf) 
                                       (v_Vpf:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult _p_A_zero x) 
                                                       x) x)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult _p_A_zero x) 
                                                      x) x))) v_Vpf v_Vvc) 
                                       __A_1_2_LEMMA) v_Vwf) v_Vvf) v_Vuf) 
                           v_Vtd) abst_equal_transitive) 
                     (v_Vxf:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_equal x x))))) =>
                      zen.Rnoteq abst_T x v_Vsf)))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                    (abst_plus (abst_mult _p_A_zero x) (abst_mult _p_A_one x))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                           (abst_plus (abst_mult _p_A_zero x) 
                              (abst_mult _p_A_one x))))))) =>
            zen.Rall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.forall _p_A_T 
                 (v_Vbc:(zen.term _p_A_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult (_p_A_plus v_Vac v_Vbc) v_Vcc) 
                             (abst_plus (abst_mult v_Vac v_Vcc) 
                                (abst_mult v_Vbc v_Vcc))))))) _p_A_zero 
              (v_Vdc:
               (zen.proof 
                  (zen.forall _p_A_T 
                     (v_Vbc:(zen.term _p_A_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (_p_A_plus _p_A_zero v_Vbc) v_Vcc) 
                                 (abst_plus (abst_mult _p_A_zero v_Vcc) 
                                    (abst_mult v_Vbc v_Vcc)))))))) =>
               zen.Rall _p_A_T 
                 (v_Vbc:(zen.term _p_A_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult (_p_A_plus _p_A_zero v_Vbc) v_Vcc) 
                             (abst_plus (abst_mult _p_A_zero v_Vcc) 
                                (abst_mult v_Vbc v_Vcc)))))) _p_A_one 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (_p_A_plus _p_A_zero _p_A_one) 
                                    v_Vcc) 
                                 (abst_plus (abst_mult _p_A_zero v_Vcc) 
                                    (abst_mult _p_A_one v_Vcc))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult (_p_A_plus _p_A_zero _p_A_one) v_Vcc) 
                             (abst_plus (abst_mult _p_A_zero v_Vcc) 
                                (abst_mult _p_A_one v_Vcc))))) x 
                    (v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                                 (abst_plus (abst_mult _p_A_zero x) 
                                    (abst_mult _p_A_one x)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                                (abst_plus (abst_mult _p_A_zero x) 
                                   (abst_mult _p_A_one x))))) v_Vfc v_Vzb) 
                    v_Vec) v_Vdc) abst_mult_right_distributes_on_plus))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) x))) 
          (v_Vkc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) x))))) =>
           zen.Rall abst_T 
             (v_Vlc:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true (abst_equal (abst_mult _p_A_one v_Vlc) v_Vlc))) 
             x 
             (v_Vmc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true (abst_equal (abst_mult _p_A_one x) x)))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                            (abst_mult _p_A_one x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                               (abst_mult _p_A_one x)))))) 
                (v_Vnc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                                (abst_mult _p_A_one x)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_mult (_p_A_plus _p_A_zero _p_A_one) 
                                      x) (abst_mult _p_A_one x))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T 
                            (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                            (abst_mult _p_A_one x)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                               (abst_mult _p_A_one x))))) 
                   (v_Voc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                                (abst_mult _p_A_one x))))) =>
                    v_Vpc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_mult (_p_A_plus _p_A_zero _p_A_one) 
                                      x) (abst_mult _p_A_one x)))))) =>
                    zen.Rall _p_A_T 
                      (v_Vqc:(zen.term _p_A_T) =>
                       zen.forall _p_A_T 
                         (v_Vrc:(zen.term _p_A_T) =>
                          zen.forall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_A_equal v_Vqc v_Vrc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vqc v_Vlc) 
                                        (abst_mult v_Vrc v_Vlc))))))) 
                      (_p_A_plus _p_A_zero _p_A_one) 
                      (v_Vsc:
                       (zen.proof 
                          (zen.forall _p_A_T 
                             (v_Vrc:(zen.term _p_A_T) =>
                              zen.forall abst_T 
                                (v_Vlc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (_p_A_plus _p_A_zero _p_A_one) 
                                            v_Vrc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               v_Vlc) (abst_mult v_Vrc v_Vlc)))))))) =>
                       zen.Rall _p_A_T 
                         (v_Vrc:(zen.term _p_A_T) =>
                          zen.forall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (_p_A_plus _p_A_zero _p_A_one) v_Vrc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) 
                                           v_Vlc) (abst_mult v_Vrc v_Vlc)))))) 
                         _p_A_one 
                         (v_Vtc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vlc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (_p_A_plus _p_A_zero _p_A_one) 
                                            _p_A_one))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               v_Vlc) 
                                            (abst_mult _p_A_one v_Vlc))))))) =>
                          zen.Rall abst_T 
                            (v_Vlc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (_p_A_plus _p_A_zero _p_A_one) 
                                        _p_A_one))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) 
                                           v_Vlc) (abst_mult _p_A_one v_Vlc))))) 
                            x 
                            (v_Vuc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal 
                                            (_p_A_plus _p_A_zero _p_A_one) 
                                            _p_A_one))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x) (abst_mult _p_A_one x)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal 
                                        (_p_A_plus _p_A_zero _p_A_one) 
                                        _p_A_one))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        (abst_mult _p_A_one x)))) 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               _p_A_one))))) =>
                                zen.Rall _p_A_T 
                                  (v_Vwc:(zen.term _p_A_T) =>
                                   zen.and 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (_p_A_plus v_Vwc _p_A_zero) 
                                              v_Vwc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (_p_A_plus _p_A_zero v_Vwc) 
                                              v_Vwc)))) _p_A_one 
                                  (v_Vxc:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_A_plus _p_A_one 
                                                     _p_A_zero) _p_A_one))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_A_plus _p_A_zero 
                                                     _p_A_one) _p_A_one))))) =>
                                   zen.Rand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (_p_A_plus _p_A_one _p_A_zero) 
                                              _p_A_one))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              _p_A_one))) 
                                     (v_Vyc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_A_plus _p_A_one 
                                                     _p_A_zero) _p_A_one)))) =>
                                      v_Vzc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_A_plus _p_A_zero 
                                                     _p_A_one) _p_A_one)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) _p_A_one))) 
                                        v_Vzc v_Vvc) v_Vxc) 
                                  _p_A_zero_is_neutral) 
                               (v_Vad:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x) (abst_mult _p_A_one x))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x) (abst_mult _p_A_one x)))) 
                                  v_Vad v_Vpc) v_Vuc) v_Vtc) v_Vsc) 
                      abst_mult_left_substitution_rule) v_Vnc) 
                (v_Vbd:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_mult (_p_A_plus _p_A_zero _p_A_one) 
                                      x) (abst_mult _p_A_one x)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_mult 
                                         (_p_A_plus _p_A_zero _p_A_one) x) 
                                      (abst_mult _p_A_one x)))))))) =>
                 zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                   (v_Vcd:
                    (zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vdd:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vdd)) 
                      (abst_equal (abst_mult _p_A_one x) x) 
                      (abst_equal 
                         (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) x) 
                      (v_Ved:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal (abst_mult _p_A_one x) x) 
                                   (abst_equal 
                                      (abst_mult 
                                         (_p_A_plus _p_A_zero _p_A_one) x) x))))) =>
                       zen.Rsubst abst_T 
                         (v_Vfd:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vfd x) 
                                  (abst_equal 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x) x)))) 
                         (abst_mult _p_A_one x) 
                         (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                         (v_Vgd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T (abst_mult _p_A_one x) 
                                      (abst_mult 
                                         (_p_A_plus _p_A_zero _p_A_one) x))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x) 
                                     (abst_mult _p_A_one x)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        (abst_mult _p_A_one x))))) 
                            (v_Vhd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x) (abst_mult _p_A_one x)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x) 
                                     (abst_mult _p_A_one x))) 
                               (v_Vid:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult 
                                            (_p_A_plus _p_A_zero _p_A_one) x) 
                                         (abst_mult _p_A_one x)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x))) 
                                  (v_Vjd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x) 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vkd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vkd 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x))) 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x) 
                                     (abst_mult _p_A_one x) 
                                     (v_Voc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult 
                                                     (_p_A_plus _p_A_zero 
                                                        _p_A_one) x) 
                                                  (abst_mult _p_A_one x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult 
                                                 (_p_A_plus _p_A_zero 
                                                    _p_A_one) x) 
                                              (abst_mult _p_A_one x))) v_Vid 
                                        v_Voc) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult _p_A_one x) 
                                               (abst_mult 
                                                  (_p_A_plus _p_A_zero 
                                                     _p_A_one) x)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vmd:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult _p_A_one x) v_Vmd)) 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult 
                                                        (_p_A_plus _p_A_zero 
                                                           _p_A_one) x) 
                                                     (abst_mult 
                                                        (_p_A_plus _p_A_zero 
                                                           _p_A_one) x))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x) v_Vnd) 
                                        (v_Vld:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult _p_A_one x) 
                                                  (abst_mult 
                                                     (_p_A_plus _p_A_zero 
                                                        _p_A_one) x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult _p_A_one x) 
                                                 (abst_mult 
                                                    (_p_A_plus _p_A_zero 
                                                       _p_A_one) x))) v_Vld 
                                           v_Vgd) v_Vld) v_Vjd) 
                                  (v_Vnd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult 
                                                  (_p_A_plus _p_A_zero 
                                                     _p_A_one) x) 
                                               (abst_mult 
                                                  (_p_A_plus _p_A_zero 
                                                     _p_A_one) x))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_mult 
                                        (_p_A_plus _p_A_zero _p_A_one) x) 
                                     v_Vnd)) v_Vhd) 
                            (v_Vod:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult 
                                                  (_p_A_plus _p_A_zero 
                                                     _p_A_one) x) 
                                               (abst_mult _p_A_one x))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        (abst_mult _p_A_one x)))) 
                               (v_Vad:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x) (abst_mult _p_A_one x))))) =>
                                zen.Rall abst_T 
                                  (v_Vlc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vpd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vqd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vlc v_Vpd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vpd v_Vqd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vlc v_Vqd))))))) 
                                  (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                                  (v_Vrd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vpd:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vqd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (_p_A_plus 
                                                              _p_A_zero 
                                                              _p_A_one) x) 
                                                        v_Vpd))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vpd 
                                                           v_Vqd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           v_Vqd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vpd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vqd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) v_Vpd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vpd v_Vqd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       v_Vqd)))))) 
                                     (abst_mult _p_A_one x) 
                                     (v_Vsd:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vqd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (_p_A_plus 
                                                              _p_A_zero 
                                                              _p_A_one) x) 
                                                        (abst_mult _p_A_one x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              _p_A_one x) 
                                                           v_Vqd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           v_Vqd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vqd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_mult _p_A_one x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult _p_A_one x) 
                                                       v_Vqd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       v_Vqd))))) x 
                                        (v_Vtd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (_p_A_plus 
                                                              _p_A_zero 
                                                              _p_A_one) x) 
                                                        (abst_mult _p_A_one x)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              _p_A_one x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           x)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_mult _p_A_one x)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult _p_A_one x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) x)))) 
                                           (v_Vpc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           (abst_mult 
                                                              _p_A_one x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       (abst_mult _p_A_one x)))) 
                                              v_Vad v_Vpc) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              _p_A_one x) x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           x))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult _p_A_one x) 
                                                       x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) x))) 
                                              (v_Vvd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 _p_A_one x) 
                                                              x))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             _p_A_one x) x))) 
                                                 v_Vmc v_Vvd) 
                                              (v_Vwd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           x)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vdd:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vdd)) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) x) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) x) 
                                                 (v_Vxd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    _p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    _p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vfd:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vfd x) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                   x) x)))) 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    (
                                                                    _p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                 (abst_mult 
                                                                    (
                                                                    _p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       v_Vnd) 
                                                    (v_Vxd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vyd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vyd) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x)))) 
                                                       x x 
                                                       (v_Vzd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x x)) 
                                                          v_Vcd v_Vzd) 
                                                       (v_Vxd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) x) v_Vxd) 
                                                       v_Vxd) v_Vxd) 
                                                 (v_Vwd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                 x) x)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (_p_A_plus 
                                                                   _p_A_zero 
                                                                   _p_A_one) 
                                                                x) x))) 
                                                    v_Vwd v_Vkc) v_Vwd) v_Vud) 
                                           v_Vtd) v_Vsd) v_Vrd) 
                                  abst_equal_transitive) v_Vod) v_Vbd) 
                         (v_Vxd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_mult 
                                            (_p_A_plus _p_A_zero _p_A_one) x) 
                                         x) 
                                      (abst_equal 
                                         (abst_mult 
                                            (_p_A_plus _p_A_zero _p_A_one) x) 
                                         x))))) =>
                          zen.Rsubst abst_T 
                            (v_Vyd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        v_Vyd) 
                                     (abst_equal 
                                        (abst_mult 
                                           (_p_A_plus _p_A_zero _p_A_one) x) 
                                        x)))) x x 
                            (v_Vzd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal abst_T x x)))) =>
                             zen.Raxiom 
                               (zen.triangle (zen.equal abst_T x x)) v_Vcd 
                               v_Vzd) 
                            (v_Vxd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x) x) 
                                         (abst_equal 
                                            (abst_mult 
                                               (_p_A_plus _p_A_zero _p_A_one) 
                                               x) x))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal 
                                  (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                                  x) v_Vxd) v_Vxd) v_Ved) 
                      (v_Vwd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_mult (_p_A_plus _p_A_zero _p_A_one) 
                                      x) x)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_mult (_p_A_plus _p_A_zero _p_A_one) x) 
                                  x))) v_Vwd v_Vkc) v_Vmc) 
                   (v_Vzd:
                    (zen.proof 
                       (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                    zen.Rcut (zen.triangle (focal.is_true (abst_equal x x))) 
                      (v_Vae:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_equal x x)))) =>
                       zen.Rall abst_T 
                         (v_Vlc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vpd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vqd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vlc v_Vpd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vpd v_Vqd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vlc v_Vqd))))))) 
                         (abst_mult _p_A_one x) 
                         (v_Vbe:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vpd:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vqd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult _p_A_one x) v_Vpd))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vpd v_Vqd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult _p_A_one x) 
                                                  v_Vqd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vpd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vqd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult _p_A_one x) 
                                           v_Vpd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vpd v_Vqd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult _p_A_one x) v_Vqd)))))) 
                            x 
                            (v_Vce:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vqd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult _p_A_one x) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vqd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult _p_A_one x) 
                                                  v_Vqd))))))) =>
                             zen.Rall abst_T 
                               (v_Vqd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult _p_A_one x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x v_Vqd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult _p_A_one x) v_Vqd))))) 
                               x 
                               (v_Vde:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult _p_A_one x) x))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult _p_A_one x) x)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_mult _p_A_one x) x))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult _p_A_one x) x)))) 
                                  (v_Vvd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult _p_A_one x) x))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult _p_A_one x) x))) 
                                     v_Vmc v_Vvd) 
                                  (v_Vee:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult _p_A_one x) x))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult _p_A_one x) x))) 
                                     (v_Vfe:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x x))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x))) 
                                        v_Vae v_Vfe) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult _p_A_one x) x)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vdd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vdd)) 
                                        (abst_equal (abst_mult _p_A_one x) x) 
                                        (abst_equal 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x) x) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult _p_A_one x) 
                                                        x) 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (_p_A_plus 
                                                              _p_A_zero 
                                                              _p_A_one) x) x))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vfd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vfd x) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) x)))) 
                                           (abst_mult _p_A_one x) 
                                           (abst_mult 
                                              (_p_A_plus _p_A_zero _p_A_one) 
                                              x) 
                                           (v_Vgd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult _p_A_one x) 
                                                        (abst_mult 
                                                           (_p_A_plus 
                                                              _p_A_zero 
                                                              _p_A_one) x))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       (abst_mult _p_A_one x)))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          (abst_mult 
                                                             _p_A_one x))))) 
                                              (v_Vhd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                 x) 
                                                              (abst_mult 
                                                                 _p_A_one x)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult 
                                                          (_p_A_plus 
                                                             _p_A_zero 
                                                             _p_A_one) x) 
                                                       (abst_mult _p_A_one x))) 
                                                 (v_Vid:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           (abst_mult 
                                                              _p_A_one x)))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (abst_mult _p_A_one x) 
                                                    v_Vid v_Vgd) v_Vhd) 
                                              (v_Vod:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    _p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                 (abst_mult 
                                                                    _p_A_one 
                                                                    x))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          (abst_mult 
                                                             _p_A_one x)))) 
                                                 (v_Vad:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                 x) 
                                                              (abst_mult 
                                                                 _p_A_one x))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vlc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vpd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vqd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vpd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vqd))))))) 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) 
                                                    (v_Vrd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vpd:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vqd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vpd))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vqd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vpd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vqd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vpd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vqd)))))) 
                                                       (abst_mult _p_A_one x) 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vqd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) v_Vqd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vqd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vqd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) v_Vqd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) v_Vqd))))) 
                                                          x 
                                                          (v_Vtd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x)))) 
                                                             (v_Vpc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x)))) 
                                                                v_Vad v_Vpc) 
                                                             (v_Vud:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))) 
                                                                (v_Vvd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    _p_A_one 
                                                                    x) x))) 
                                                                   v_Vmc 
                                                                   v_Vvd) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                    x) x))) 
                                                                   v_Vwd 
                                                                   v_Vkc) 
                                                                v_Vud) v_Vtd) 
                                                          v_Vsd) v_Vrd) 
                                                    abst_equal_transitive) 
                                                 v_Vod) v_Vbd) 
                                           (v_Vxd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           x) 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (_p_A_plus 
                                                                 _p_A_zero 
                                                                 _p_A_one) x) 
                                                           x))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vyd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          v_Vyd) 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (_p_A_plus 
                                                                _p_A_zero 
                                                                _p_A_one) x) 
                                                          x)))) x x 
                                              (v_Vzd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T x x)))) =>
                                               zen.Rnoteq abst_T x v_Vzd) 
                                              (v_Vxd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                 x) x) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (_p_A_plus 
                                                                    _p_A_zero 
                                                                    _p_A_one) 
                                                                 x) x))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) x) 
                                                 v_Vxd) v_Vxd) v_Ved) 
                                        (v_Vwd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (_p_A_plus _p_A_zero 
                                                           _p_A_one) x) x)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (_p_A_plus _p_A_zero 
                                                          _p_A_one) x) x))) 
                                           v_Vwd v_Vkc) v_Vmc) v_Vee) v_Vde) 
                               v_Vce) v_Vbe) abst_equal_transitive) 
                      (v_Vfe:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_equal x x))))) =>
                       zen.Rnoteq abst_T x v_Vzd)))) abst_one_is_left_neutral))).

def Commutative_semi_ring__one_is_right_neutral :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  abst_one_is_left_neutral:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_equal (abst_mult abst_one x) x)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult x abst_one) x)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  abst_one_is_left_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult abst_one x) x)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true (abst_equal (abst_mult v_Vkc abst_one) v_Vkc)))) 
    (v_Vlc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true (abst_equal (abst_mult v_Vkc abst_one) v_Vkc)))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true (abst_equal (abst_mult v_Vkc abst_one) v_Vkc))) 
       (v_Vmc:(zen.term abst_T) =>
        v_Vnc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true (abst_equal (abst_mult v_Vmc abst_one) v_Vmc))))) =>
        zen.Rall abst_T 
          (v_Vkc:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true (abst_equal (abst_mult abst_one v_Vkc) v_Vkc))) 
          v_Vmc 
          (v_Voc:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true (abst_equal (abst_mult abst_one v_Vmc) v_Vmc)))) =>
           zen.Rcut 
             (zen.and 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult v_Vmc abst_one) 
                         (abst_mult abst_one v_Vmc)))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vmc abst_one) 
                            (abst_mult abst_one v_Vmc)))))) 
             (v_Vpc:
              (zen.proof 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult v_Vmc abst_one) 
                             (abst_mult abst_one v_Vmc)))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult v_Vmc abst_one) 
                                (abst_mult abst_one v_Vmc))))))) =>
              zen.Rand 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult v_Vmc abst_one) 
                         (abst_mult abst_one v_Vmc)))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult v_Vmc abst_one) 
                            (abst_mult abst_one v_Vmc))))) 
                (v_Vqc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult v_Vmc abst_one) 
                             (abst_mult abst_one v_Vmc))))) =>
                 v_Vrc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult v_Vmc abst_one) 
                                (abst_mult abst_one v_Vmc)))))) =>
                 zen.Rall abst_T 
                   (v_Vkc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vsc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vkc v_Vsc) 
                               (abst_mult v_Vsc v_Vkc))))) v_Vmc 
                   (v_Vtc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vsc:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc v_Vsc) 
                                   (abst_mult v_Vsc v_Vmc)))))) =>
                    zen.Rall abst_T 
                      (v_Vsc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc v_Vsc) 
                               (abst_mult v_Vsc v_Vmc)))) abst_one 
                      (v_Vuc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_one) 
                                   (abst_mult abst_one v_Vmc))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vmc abst_one) 
                                  (abst_mult abst_one v_Vmc)))) v_Vuc v_Vrc) 
                      v_Vtc) abst_mult_commutes) v_Vpc) 
             (v_Vvc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T (abst_mult v_Vmc abst_one) 
                                (abst_mult abst_one v_Vmc)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_one) 
                                   (abst_mult abst_one v_Vmc)))))))) =>
              zen.Rcut (zen.triangle (zen.equal abst_T v_Vmc v_Vmc)) 
                (v_Vwc:
                 (zen.proof (zen.triangle (zen.equal abst_T v_Vmc v_Vmc))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vxc:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vxc)) 
                   (abst_equal (abst_mult abst_one v_Vmc) v_Vmc) 
                   (abst_equal (abst_mult v_Vmc abst_one) v_Vmc) 
                   (v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal (abst_mult abst_one v_Vmc) v_Vmc) 
                                (abst_equal (abst_mult v_Vmc abst_one) v_Vmc))))) =>
                    zen.Rsubst abst_T 
                      (v_Vzc:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (abst_equal v_Vzc v_Vmc) 
                               (abst_equal (abst_mult v_Vmc abst_one) v_Vmc)))) 
                      (abst_mult abst_one v_Vmc) (abst_mult v_Vmc abst_one) 
                      (v_Vad:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T (abst_mult abst_one v_Vmc) 
                                   (abst_mult v_Vmc abst_one))))) =>
                       zen.Rnotand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult v_Vmc abst_one) 
                                  (abst_mult abst_one v_Vmc)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vmc abst_one) 
                                     (abst_mult abst_one v_Vmc))))) 
                         (v_Vbd:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult v_Vmc abst_one) 
                                         (abst_mult abst_one v_Vmc)))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (zen.equal abst_T (abst_mult v_Vmc abst_one) 
                                  (abst_mult abst_one v_Vmc))) 
                            (v_Vcd:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult v_Vmc abst_one) 
                                      (abst_mult abst_one v_Vmc)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult v_Vmc abst_one) 
                                     (abst_mult v_Vmc abst_one))) 
                               (v_Vdd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult v_Vmc abst_one) 
                                         (abst_mult v_Vmc abst_one)))) =>
                                zen.Rsubst abst_T 
                                  (v_Ved:(zen.term abst_T) =>
                                   zen.triangle 
                                     (zen.equal abst_T v_Ved 
                                        (abst_mult v_Vmc abst_one))) 
                                  (abst_mult v_Vmc abst_one) 
                                  (abst_mult abst_one v_Vmc) 
                                  (v_Vqc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult v_Vmc abst_one) 
                                               (abst_mult abst_one v_Vmc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult v_Vmc abst_one) 
                                           (abst_mult abst_one v_Vmc))) 
                                     v_Vcd v_Vqc) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult abst_one v_Vmc) 
                                            (abst_mult v_Vmc abst_one)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vgd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult abst_one v_Vmc) v_Vgd)) 
                                     (abst_mult v_Vmc abst_one) 
                                     (abst_mult v_Vmc abst_one) 
                                     (v_Vhd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult v_Vmc abst_one) 
                                                  (abst_mult v_Vmc abst_one))))) =>
                                      zen.Rnoteq abst_T 
                                        (abst_mult v_Vmc abst_one) v_Vhd) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult abst_one v_Vmc) 
                                               (abst_mult v_Vmc abst_one)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult abst_one v_Vmc) 
                                              (abst_mult v_Vmc abst_one))) 
                                        v_Vfd v_Vad) v_Vfd) v_Vdd) 
                               (v_Vhd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult v_Vmc abst_one) 
                                            (abst_mult v_Vmc abst_one))))) =>
                                zen.Rnoteq abst_T (abst_mult v_Vmc abst_one) 
                                  v_Vhd)) v_Vbd) 
                         (v_Vid:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult v_Vmc abst_one) 
                                            (abst_mult abst_one v_Vmc))))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult v_Vmc abst_one) 
                                     (abst_mult abst_one v_Vmc)))) 
                            (v_Vuc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult v_Vmc abst_one) 
                                         (abst_mult abst_one v_Vmc))))) =>
                             zen.Rall abst_T 
                               (v_Vkc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vsc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vjd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkc v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vsc v_Vjd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkc v_Vjd))))))) 
                               (abst_mult v_Vmc abst_one) 
                               (v_Vkd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vsc:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vjd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc 
                                                        abst_one) v_Vsc))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vsc v_Vjd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) v_Vjd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vsc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vjd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vmc abst_one) 
                                                 v_Vsc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vsc v_Vjd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc abst_one) 
                                                    v_Vjd)))))) 
                                  (abst_mult abst_one v_Vmc) 
                                  (v_Vld:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vjd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc 
                                                        abst_one) 
                                                     (abst_mult abst_one 
                                                        v_Vmc)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_one 
                                                           v_Vmc) v_Vjd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) v_Vjd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vjd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vmc abst_one) 
                                                 (abst_mult abst_one v_Vmc)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_one v_Vmc) 
                                                    v_Vjd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc abst_one) 
                                                    v_Vjd))))) v_Vmc 
                                     (v_Vmd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc 
                                                        abst_one) 
                                                     (abst_mult abst_one 
                                                        v_Vmc)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_one 
                                                           v_Vmc) v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) v_Vmc)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vmc abst_one) 
                                                 (abst_mult abst_one v_Vmc)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_one v_Vmc) 
                                                    v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc abst_one) 
                                                    v_Vmc)))) 
                                        (v_Vrc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) 
                                                        (abst_mult abst_one 
                                                           v_Vmc)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc abst_one) 
                                                    (abst_mult abst_one v_Vmc)))) 
                                           v_Vuc v_Vrc) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult abst_one 
                                                           v_Vmc) v_Vmc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) v_Vmc))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult abst_one v_Vmc) 
                                                    v_Vmc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc abst_one) 
                                                    v_Vmc))) 
                                           (v_Vod:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_one v_Vmc) 
                                                           v_Vmc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_one 
                                                          v_Vmc) v_Vmc))) 
                                              v_Voc v_Vod) 
                                           (v_Vpd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) v_Vmc)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vxc:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vxc)) 
                                              (abst_equal 
                                                 (abst_mult v_Vmc abst_one) 
                                                 v_Vmc) 
                                              (abst_equal 
                                                 (abst_mult v_Vmc abst_one) 
                                                 v_Vmc) 
                                              (v_Vqd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_one) 
                                                              v_Vmc) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_one) 
                                                              v_Vmc))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vzc:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vzc 
                                                             v_Vmc) 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vmc 
                                                                abst_one) 
                                                             v_Vmc)))) 
                                                 (abst_mult v_Vmc abst_one) 
                                                 (abst_mult v_Vmc abst_one) 
                                                 (v_Vhd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_one) 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_one))))) =>
                                                  zen.Rnoteq abst_T 
                                                    (abst_mult v_Vmc abst_one) 
                                                    v_Vhd) 
                                                 (v_Vqd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                 v_Vmc) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                 v_Vmc))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vrd:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vmc 
                                                                   abst_one) 
                                                                v_Vrd) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vmc 
                                                                   abst_one) 
                                                                v_Vmc)))) 
                                                    v_Vmc v_Vmc 
                                                    (v_Vsd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vmc v_Vmc)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vmc v_Vmc)) 
                                                       v_Vwc v_Vsd) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_one) v_Vmc) 
                                                       v_Vqd) v_Vqd) v_Vqd) 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_one) v_Vmc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_one) v_Vmc))) 
                                                 v_Vpd v_Vnc) v_Vpd) v_Vnd) 
                                        v_Vmd) v_Vld) v_Vkd) 
                               abst_equal_transitive) v_Vid) v_Vvc) 
                      (v_Vqd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal (abst_mult v_Vmc abst_one) 
                                      v_Vmc) 
                                   (abst_equal (abst_mult v_Vmc abst_one) 
                                      v_Vmc))))) =>
                       zen.Rsubst abst_T 
                         (v_Vrd:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal (abst_mult v_Vmc abst_one) 
                                     v_Vrd) 
                                  (abst_equal (abst_mult v_Vmc abst_one) 
                                     v_Vmc)))) v_Vmc v_Vmc 
                         (v_Vsd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle (zen.equal abst_T v_Vmc v_Vmc)))) =>
                          zen.Raxiom 
                            (zen.triangle (zen.equal abst_T v_Vmc v_Vmc)) 
                            v_Vwc v_Vsd) 
                         (v_Vqd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal (abst_mult v_Vmc abst_one) 
                                         v_Vmc) 
                                      (abst_equal (abst_mult v_Vmc abst_one) 
                                         v_Vmc))))) =>
                          zen.Rnoteq basics.bool__t 
                            (abst_equal (abst_mult v_Vmc abst_one) v_Vmc) 
                            v_Vqd) v_Vqd) v_Vyc) 
                   (v_Vpd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult v_Vmc abst_one) v_Vmc)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc abst_one) v_Vmc))) 
                      v_Vpd v_Vnc) v_Voc) 
                (v_Vsd:
                 (zen.proof 
                    (zen.not (zen.triangle (zen.equal abst_T v_Vmc v_Vmc)))) =>
                 zen.Rcut 
                   (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vmc))) 
                   (v_Vtd:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vmc)))) =>
                    zen.Rall abst_T 
                      (v_Vkc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vsc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vjd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vkc v_Vsc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vsc v_Vjd))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vkc v_Vjd))))))) 
                      (abst_mult abst_one v_Vmc) 
                      (v_Vud:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vsc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vjd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult abst_one v_Vmc) v_Vsc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vsc v_Vjd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one v_Vmc) 
                                               v_Vjd)))))))) =>
                       zen.Rall abst_T 
                         (v_Vsc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vjd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult abst_one v_Vmc) 
                                        v_Vsc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vsc v_Vjd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_one v_Vmc) v_Vjd)))))) 
                         v_Vmc 
                         (v_Vvd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vjd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult abst_one v_Vmc) v_Vmc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vmc v_Vjd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one v_Vmc) 
                                               v_Vjd))))))) =>
                          zen.Rall abst_T 
                            (v_Vjd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult abst_one v_Vmc) 
                                        v_Vmc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vmc v_Vjd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_one v_Vmc) v_Vjd))))) 
                            v_Vmc 
                            (v_Vwd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult abst_one v_Vmc) v_Vmc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vmc v_Vmc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one v_Vmc) 
                                               v_Vmc)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult abst_one v_Vmc) 
                                        v_Vmc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vmc v_Vmc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_one v_Vmc) v_Vmc)))) 
                               (v_Vod:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one v_Vmc) 
                                               v_Vmc))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_one v_Vmc) v_Vmc))) 
                                  v_Voc v_Vod) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vmc v_Vmc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one v_Vmc) 
                                               v_Vmc))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vmc v_Vmc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_one v_Vmc) v_Vmc))) 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vmc v_Vmc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vmc v_Vmc))) v_Vtd 
                                     v_Vyd) 
                                  (v_Voc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_one v_Vmc) 
                                               v_Vmc)))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vxc:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vxc)) 
                                     (abst_equal (abst_mult abst_one v_Vmc) 
                                        v_Vmc) 
                                     (abst_equal (abst_mult v_Vmc abst_one) 
                                        v_Vmc) 
                                     (v_Vyc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_mult abst_one 
                                                        v_Vmc) v_Vmc) 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc 
                                                        abst_one) v_Vmc))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vzc:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal v_Vzc v_Vmc) 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc abst_one) 
                                                    v_Vmc)))) 
                                        (abst_mult abst_one v_Vmc) 
                                        (abst_mult v_Vmc abst_one) 
                                        (v_Vad:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult abst_one 
                                                        v_Vmc) 
                                                     (abst_mult v_Vmc 
                                                        abst_one))))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult v_Vmc abst_one) 
                                                    (abst_mult abst_one v_Vmc)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_one) 
                                                       (abst_mult abst_one 
                                                          v_Vmc))))) 
                                           (v_Vbd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult v_Vmc 
                                                              abst_one) 
                                                           (abst_mult 
                                                              abst_one v_Vmc)))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult v_Vmc abst_one) 
                                                    (abst_mult abst_one v_Vmc))) 
                                              (v_Vcd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult v_Vmc 
                                                           abst_one) 
                                                        (abst_mult abst_one 
                                                           v_Vmc)))) =>
                                               zen.Reqsym abst_T 
                                                 (abst_mult v_Vmc abst_one) 
                                                 (abst_mult abst_one v_Vmc) 
                                                 v_Vcd v_Vad) v_Vbd) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_one) 
                                                              (abst_mult 
                                                                 abst_one 
                                                                 v_Vmc))))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_one) 
                                                       (abst_mult abst_one 
                                                          v_Vmc)))) 
                                              (v_Vuc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_one) 
                                                           (abst_mult 
                                                              abst_one v_Vmc))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vkc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vsc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vjd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkc 
                                                                   v_Vsc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vjd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vjd))))))) 
                                                 (abst_mult v_Vmc abst_one) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vsc:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vjd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vsc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vjd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vjd)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vsc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vjd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                   v_Vsc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vsc 
                                                                    v_Vjd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vjd)))))) 
                                                    (abst_mult abst_one v_Vmc) 
                                                    (v_Vld:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vjd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vjd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vjd))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vjd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vjd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vjd))))) 
                                                       v_Vmc 
                                                       (v_Vmd:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vmc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                   (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vmc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc)))) 
                                                          (v_Vrc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc)))) 
                                                             v_Vuc v_Vrc) 
                                                          (v_Vnd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vmc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vmc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc))) 
                                                             (v_Vod:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vmc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_one 
                                                                    v_Vmc) 
                                                                    v_Vmc))) 
                                                                v_Voc v_Vod) 
                                                             (v_Vpd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_one) 
                                                                    v_Vmc))) 
                                                                v_Vpd v_Vnc) 
                                                             v_Vnd) v_Vmd) 
                                                       v_Vld) v_Vkd) 
                                                 abst_equal_transitive) v_Vid) 
                                           v_Vvc) 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) v_Vmc) 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_one) v_Vmc))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vrd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_one) v_Vrd) 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_one) v_Vmc)))) 
                                           v_Vmc v_Vmc 
                                           (v_Vsd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Vmc 
                                                        v_Vmc)))) =>
                                            zen.Rnoteq abst_T v_Vmc v_Vsd) 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_one) v_Vmc) 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_one) v_Vmc))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (abst_equal 
                                                 (abst_mult v_Vmc abst_one) 
                                                 v_Vmc) v_Vqd) v_Vqd) v_Vyc) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult v_Vmc abst_one) 
                                                  v_Vmc)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult v_Vmc abst_one) 
                                                 v_Vmc))) v_Vpd v_Vnc) v_Voc) 
                                  v_Vxd) v_Vwd) v_Vvd) v_Vud) 
                      abst_equal_transitive) 
                   (v_Vyd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vmc v_Vmc))))) =>
                    zen.Rnoteq abst_T v_Vmc v_Vsd)))) 
          abst_one_is_left_neutral) v_Vlc).

def Commutative_semi_ring__zero_right_absorbes :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  abst_zero_left_absorbes:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.ebP 
                                   (abst_equal (abst_mult abst_zero x) 
                                      abst_zero)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  abst_zero_left_absorbes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult abst_zero x) abst_zero)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true (abst_equal (abst_mult v_Vkc abst_zero) abst_zero)))) 
    (v_Vlc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vkc:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_mult v_Vkc abst_zero) abst_zero)))))) =>
     zen.Rnotall abst_T 
       (v_Vkc:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true (abst_equal (abst_mult v_Vkc abst_zero) abst_zero))) 
       (v_Vmc:(zen.term abst_T) =>
        v_Vnc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_mult v_Vmc abst_zero) abst_zero))))) =>
        zen.Rall abst_T 
          (v_Vkc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Voc:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult v_Vkc v_Voc) 
                      (abst_mult v_Voc v_Vkc))))) v_Vmc 
          (v_Vpc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult v_Vmc v_Voc) 
                          (abst_mult v_Voc v_Vmc)))))) =>
           zen.Rall abst_T 
             (v_Vkc:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult abst_zero v_Vkc) abst_zero))) 
             v_Vmc 
             (v_Vqc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult abst_zero v_Vmc) abst_zero)))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                            (abst_mult abst_zero v_Vmc)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc abst_zero) 
                               (abst_mult abst_zero v_Vmc)))))) 
                (v_Vrc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                                (abst_mult abst_zero v_Vmc)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                            (abst_mult abst_zero v_Vmc)))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc abst_zero) 
                               (abst_mult abst_zero v_Vmc))))) 
                   (v_Vsc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T (abst_mult v_Vmc abst_zero) 
                                (abst_mult abst_zero v_Vmc))))) =>
                    v_Vtc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc)))))) =>
                    zen.Rall abst_T 
                      (v_Voc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vmc v_Voc) 
                               (abst_mult v_Voc v_Vmc)))) abst_zero 
                      (v_Vuc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vmc abst_zero) 
                                  (abst_mult abst_zero v_Vmc)))) v_Vuc v_Vtc) 
                      v_Vpc) v_Vrc) 
                (v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_mult v_Vmc abst_zero) 
                                   (abst_mult abst_zero v_Vmc)))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult v_Vmc abst_zero) 
                                      (abst_mult abst_zero v_Vmc)))))))) =>
                 zen.Rcut 
                   (zen.triangle (zen.equal abst_T abst_zero abst_zero)) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.triangle (zen.equal abst_T abst_zero abst_zero))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vxc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vxc)) 
                      (abst_equal (abst_mult abst_zero v_Vmc) abst_zero) 
                      (abst_equal (abst_mult v_Vmc abst_zero) abst_zero) 
                      (v_Vyc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal (abst_mult abst_zero v_Vmc) 
                                      abst_zero) 
                                   (abst_equal (abst_mult v_Vmc abst_zero) 
                                      abst_zero))))) =>
                       zen.Rsubst abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vzc abst_zero) 
                                  (abst_equal (abst_mult v_Vmc abst_zero) 
                                     abst_zero)))) 
                         (abst_mult abst_zero v_Vmc) 
                         (abst_mult v_Vmc abst_zero) 
                         (v_Vad:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult abst_zero v_Vmc) 
                                      (abst_mult v_Vmc abst_zero))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult v_Vmc abst_zero) 
                                     (abst_mult abst_zero v_Vmc)))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        (abst_mult abst_zero v_Vmc))))) 
                            (v_Vbd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult v_Vmc abst_zero) 
                                            (abst_mult abst_zero v_Vmc)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult v_Vmc abst_zero) 
                                     (abst_mult abst_zero v_Vmc))) 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult v_Vmc abst_zero) 
                                         (abst_mult abst_zero v_Vmc)))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_mult v_Vmc abst_zero) 
                                        (abst_mult v_Vmc abst_zero))) 
                                  (v_Vdd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult v_Vmc abst_zero) 
                                            (abst_mult v_Vmc abst_zero)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Ved:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Ved 
                                           (abst_mult v_Vmc abst_zero))) 
                                     (abst_mult v_Vmc abst_zero) 
                                     (abst_mult abst_zero v_Vmc) 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult v_Vmc abst_zero) 
                                                  (abst_mult abst_zero v_Vmc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult v_Vmc abst_zero) 
                                              (abst_mult abst_zero v_Vmc))) 
                                        v_Vcd v_Vsc) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult abst_zero v_Vmc) 
                                               (abst_mult v_Vmc abst_zero)))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult abst_zero v_Vmc) 
                                              v_Vgd)) 
                                        (abst_mult v_Vmc abst_zero) 
                                        (abst_mult v_Vmc abst_zero) 
                                        (v_Vhd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult v_Vmc 
                                                        abst_zero) 
                                                     (abst_mult v_Vmc 
                                                        abst_zero))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_mult v_Vmc abst_zero) v_Vhd) 
                                        (v_Vfd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  (abst_mult v_Vmc abst_zero)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_mult abst_zero v_Vmc) 
                                                 (abst_mult v_Vmc abst_zero))) 
                                           v_Vfd v_Vad) v_Vfd) v_Vdd) 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult v_Vmc abst_zero) 
                                               (abst_mult v_Vmc abst_zero))))) =>
                                   zen.Rnoteq abst_T 
                                     (abst_mult v_Vmc abst_zero) v_Vhd)) 
                               v_Vbd) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult v_Vmc abst_zero) 
                                               (abst_mult abst_zero v_Vmc))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        (abst_mult abst_zero v_Vmc)))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult v_Vmc abst_zero) 
                                            (abst_mult abst_zero v_Vmc))))) =>
                                zen.Rall abst_T 
                                  (v_Vkc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Voc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vjd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkc v_Voc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Voc v_Vjd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vkc v_Vjd))))))) 
                                  (abst_mult v_Vmc abst_zero) 
                                  (v_Vkd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Voc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vjd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) v_Voc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Voc 
                                                           v_Vjd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           v_Vjd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Voc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vjd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) v_Voc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Voc v_Vjd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) v_Vjd)))))) 
                                     (abst_mult abst_zero v_Vmc) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vjd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) 
                                                        (abst_mult abst_zero 
                                                           v_Vmc)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_zero v_Vmc) 
                                                           v_Vjd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           v_Vjd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vjd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult abst_zero 
                                                       v_Vmc)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) v_Vjd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) v_Vjd))))) 
                                        abst_zero 
                                        (v_Vmd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) 
                                                        (abst_mult abst_zero 
                                                           v_Vmc)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_zero v_Vmc) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult abst_zero 
                                                       v_Vmc)))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       abst_zero)))) 
                                           (v_Vtc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           (abst_mult 
                                                              abst_zero v_Vmc)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc)))) v_Vuc 
                                              v_Vtc) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              abst_zero v_Vmc) 
                                                           abst_zero))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) abst_zero))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       abst_zero))) 
                                              (v_Vod:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 abst_zero 
                                                                 v_Vmc) 
                                                              abst_zero))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             abst_zero v_Vmc) 
                                                          abst_zero))) v_Vqc 
                                                 v_Vod) 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vxc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vxc)) 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero) 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero) 
                                                 (v_Vqd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 abst_zero) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 abst_zero))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vzc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vzc 
                                                                abst_zero) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   v_Vmc 
                                                                   abst_zero) 
                                                                abst_zero)))) 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) v_Vhd) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vrd:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                   v_Vrd) 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                   abst_zero)))) 
                                                       abst_zero abst_zero 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    abst_zero 
                                                                    abst_zero)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                abst_zero 
                                                                abst_zero)) 
                                                          v_Vwc v_Vsd) 
                                                       (v_Vqd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vmc 
                                                                abst_zero) 
                                                             abst_zero) v_Vqd) 
                                                       v_Vqd) v_Vqd) 
                                                 (v_Vpd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              abst_zero)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                v_Vmc 
                                                                abst_zero) 
                                                             abst_zero))) 
                                                    v_Vpd v_Vnc) v_Vpd) v_Vnd) 
                                           v_Vmd) v_Vld) v_Vkd) 
                                  abst_equal_transitive) v_Vid) v_Vvc) 
                         (v_Vqd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_mult v_Vmc abst_zero) 
                                         abst_zero) 
                                      (abst_equal 
                                         (abst_mult v_Vmc abst_zero) 
                                         abst_zero))))) =>
                          zen.Rsubst abst_T 
                            (v_Vrd:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        v_Vrd) 
                                     (abst_equal (abst_mult v_Vmc abst_zero) 
                                        abst_zero)))) abst_zero abst_zero 
                            (v_Vsd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T abst_zero abst_zero)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal abst_T abst_zero abst_zero)) 
                               v_Vwc v_Vsd) 
                            (v_Vqd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_mult v_Vmc abst_zero) 
                                            abst_zero) 
                                         (abst_equal 
                                            (abst_mult v_Vmc abst_zero) 
                                            abst_zero))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal (abst_mult v_Vmc abst_zero) 
                                  abst_zero) v_Vqd) v_Vqd) v_Vyc) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult v_Vmc abst_zero) 
                                   abst_zero)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult v_Vmc abst_zero) 
                                  abst_zero))) v_Vpd v_Vnc) v_Vqc) 
                   (v_Vsd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T abst_zero abst_zero)))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true (abst_equal abst_zero abst_zero))) 
                      (v_Vtd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero abst_zero)))) =>
                       zen.Rall abst_T 
                         (v_Vkc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Voc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vjd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vkc v_Voc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vjd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vkc v_Vjd))))))) 
                         (abst_mult abst_zero v_Vmc) 
                         (v_Vud:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Voc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vjd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_zero v_Vmc) 
                                               v_Voc))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Voc v_Vjd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  v_Vjd)))))))) =>
                          zen.Rall abst_T 
                            (v_Voc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vjd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) v_Voc))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Voc v_Vjd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              v_Vjd)))))) abst_zero 
                            (v_Vvd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vjd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_zero v_Vmc) 
                                               abst_zero))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero v_Vjd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  v_Vjd))))))) =>
                             zen.Rall abst_T 
                               (v_Vjd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) 
                                           abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero v_Vjd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              v_Vjd))))) abst_zero 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult abst_zero v_Vmc) 
                                               abst_zero))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) 
                                           abst_zero))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              abst_zero)))) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              abst_zero))) v_Vqc v_Vod) 
                                  (v_Vxd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal abst_zero 
                                                  abst_zero))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal abst_zero abst_zero))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult abst_zero v_Vmc) 
                                              abst_zero))) 
                                     (v_Vyd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal abst_zero 
                                                     abst_zero))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal abst_zero abst_zero))) 
                                        v_Vtd v_Vyd) 
                                     (v_Vqc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult abst_zero v_Vmc) 
                                                  abst_zero)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vxc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vxc)) 
                                        (abst_equal 
                                           (abst_mult abst_zero v_Vmc) 
                                           abst_zero) 
                                        (abst_equal 
                                           (abst_mult v_Vmc abst_zero) 
                                           abst_zero) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult abst_zero 
                                                           v_Vmc) abst_zero) 
                                                     (abst_equal 
                                                        (abst_mult v_Vmc 
                                                           abst_zero) 
                                                        abst_zero))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vzc:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vzc 
                                                       abst_zero) 
                                                    (abst_equal 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       abst_zero)))) 
                                           (abst_mult abst_zero v_Vmc) 
                                           (abst_mult v_Vmc abst_zero) 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult abst_zero 
                                                           v_Vmc) 
                                                        (abst_mult v_Vmc 
                                                           abst_zero))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc)))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) 
                                                          (abst_mult 
                                                             abst_zero v_Vmc))))) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              (abst_mult 
                                                                 abst_zero 
                                                                 v_Vmc)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_mult v_Vmc 
                                                          abst_zero) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           (abst_mult 
                                                              abst_zero v_Vmc)))) =>
                                                  zen.Reqsym abst_T 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (abst_mult abst_zero 
                                                       v_Vmc) v_Vcd v_Vad) 
                                                 v_Vbd) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                 (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) 
                                                          (abst_mult 
                                                             abst_zero v_Vmc)))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              (abst_mult 
                                                                 abst_zero 
                                                                 v_Vmc))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vkc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Voc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vjd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkc 
                                                                    v_Voc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vjd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vjd))))))) 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) 
                                                    (v_Vkd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Voc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vjd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Voc))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vjd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Voc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vjd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Voc))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vjd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd)))))) 
                                                       (abst_mult abst_zero 
                                                          v_Vmc) 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vjd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    v_Vjd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vjd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    v_Vjd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    v_Vjd))))) 
                                                          abst_zero 
                                                          (v_Vmd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                             (v_Vtc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc)))) 
                                                                v_Vuc v_Vtc) 
                                                             (v_Vnd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                (v_Vod:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    abst_zero 
                                                                    v_Vmc) 
                                                                    abst_zero))) 
                                                                   v_Vqc 
                                                                   v_Vod) 
                                                                (v_Vpd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    v_Vmc 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                   v_Vpd 
                                                                   v_Vnc) 
                                                                v_Vnd) v_Vmd) 
                                                          v_Vld) v_Vkd) 
                                                    abst_equal_transitive) 
                                                 v_Vid) v_Vvc) 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero) 
                                                        (abst_equal 
                                                           (abst_mult v_Vmc 
                                                              abst_zero) 
                                                           abst_zero))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vrd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) v_Vrd) 
                                                       (abst_equal 
                                                          (abst_mult v_Vmc 
                                                             abst_zero) 
                                                          abst_zero)))) 
                                              abst_zero abst_zero 
                                              (v_Vsd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           abst_zero 
                                                           abst_zero)))) =>
                                               zen.Rnoteq abst_T abst_zero 
                                                 v_Vsd) 
                                              (v_Vqd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              abst_zero) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 v_Vmc 
                                                                 abst_zero) 
                                                              abst_zero))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero) 
                                                 v_Vqd) v_Vqd) v_Vyc) 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult v_Vmc 
                                                        abst_zero) abst_zero)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult v_Vmc 
                                                       abst_zero) abst_zero))) 
                                           v_Vpd v_Vnc) v_Vqc) v_Vxd) v_Vwd) 
                               v_Vvd) v_Vud) abst_equal_transitive) 
                      (v_Vyd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero abst_zero))))) =>
                       zen.Rnoteq abst_T abst_zero v_Vsd)))) 
             abst_zero_left_absorbes) abst_mult_commutes) v_Vlc).

def Commutative_semi_ring__mult_right_distributes_on_plus :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  abst_mult_left_distributes_on_plus:(dk_logic.eP 
                                        (dk_logic.forall abst_T 
                                           (x:(cc.eT abst_T) =>
                                            dk_logic.forall abst_T 
                                              (y:(cc.eT abst_T) =>
                                               dk_logic.forall abst_T 
                                                 (z:(cc.eT abst_T) =>
                                                  dk_logic.ebP 
                                                    (abst_equal 
                                                       (abst_mult x 
                                                          (abst_plus y z)) 
                                                       (abst_plus 
                                                          (abst_mult x y) 
                                                          (abst_mult x z)))))))) ->
  abst_plus_substitution_rule:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x1:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (x2:(cc.eT abst_T) =>
                                        dk_logic.forall abst_T 
                                          (y1:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y2:(cc.eT abst_T) =>
                                              dk_logic.imp 
                                                (dk_logic.ebP 
                                                   (abst_equal x1 x2)) 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal y1 y2)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus x1 y1) 
                                                         (abst_plus x2 y2)))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.ebP 
                (abst_equal (abst_mult (abst_plus x y) z) 
                   (abst_plus (abst_mult x z) (abst_mult y z)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  abst_mult_left_distributes_on_plus:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.ebP 
                 (abst_equal (abst_mult x (abst_plus y z)) 
                    (abst_plus (abst_mult x y) (abst_mult x z)))))))) =>
  abst_plus_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x1:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (x2:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (y1:(cc.eT abst_T) =>
               dk_logic.forall abst_T 
                 (y2:(cc.eT abst_T) =>
                  dk_logic.imp (dk_logic.ebP (abst_equal x1 x2)) 
                    (dk_logic.imp (dk_logic.ebP (abst_equal y1 y2)) 
                       (dk_logic.ebP 
                          (abst_equal (abst_plus x1 y1) (abst_plus x2 y2)))))))))) =>
  (__D_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    z:(cc.eT abst_T) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (abst_equal (abst_mult (abst_plus x y) z) 
            (abst_plus (abst_mult x z) (abst_mult y z))))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_mult (abst_plus v_Vzb v_Vac) v_Vbc) 
                       (abst_plus (abst_mult v_Vzb v_Vbc) 
                          (abst_mult v_Vac v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_mult (abst_plus v_Vzb v_Vac) v_Vbc) 
                              (abst_plus (abst_mult v_Vzb v_Vbc) 
                                 (abst_mult v_Vac v_Vbc)))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_plus v_Vzb v_Vac) v_Vbc) 
                          (abst_plus (abst_mult v_Vzb v_Vbc) 
                             (abst_mult v_Vac v_Vbc)))))))) __D_1_LEMMA v_Vcc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     z:(cc.eT abst_T) =>
     (__D_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_mult (abst_plus x y) z) 
               (abst_mult z (abst_plus x y))))) =>
      (__D_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_mult z (abst_plus x y)) 
                (abst_plus (abst_mult z x) (abst_mult z y))))) =>
       (__D_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal (abst_plus (abst_mult z x) (abst_mult z y)) 
                 (abst_plus (abst_mult x z) (abst_mult y z))))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult (abst_plus x y) z) 
                   (abst_plus (abst_mult x z) (abst_mult y z))))) 
          (v_Vvc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_plus x y) z) 
                          (abst_plus (abst_mult x z) (abst_mult y z))))))) =>
           zen.Rcut 
             (zen.and 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult (abst_plus x y) z) 
                         (abst_mult (abst_plus x y) z)))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_plus x y) z) 
                            (abst_mult (abst_plus x y) z)))))) 
             (v_Vwc:
              (zen.proof 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult (abst_plus x y) z) 
                             (abst_mult (abst_plus x y) z)))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_plus x y) z) 
                                (abst_mult (abst_plus x y) z))))))) =>
              zen.Rand 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult (abst_plus x y) z) 
                         (abst_mult (abst_plus x y) z)))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_plus x y) z) 
                            (abst_mult (abst_plus x y) z))))) 
                (v_Vxc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult (abst_plus x y) z) 
                             (abst_mult (abst_plus x y) z))))) =>
                 v_Vyc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_plus x y) z) 
                                (abst_mult (abst_plus x y) z)))))) =>
                 zen.Rnoteq abst_T (abst_mult (abst_plus x y) z) v_Vxc) v_Vwc) 
             (v_Vzc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T (abst_mult (abst_plus x y) z) 
                                (abst_mult (abst_plus x y) z)))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult (abst_plus x y) z) 
                                   (abst_mult (abst_plus x y) z)))))))) =>
              zen.Rcut 
                (zen.triangle 
                   (zen.equal abst_T (abst_mult z (abst_plus x y)) 
                      (abst_plus (abst_mult x z) (abst_mult y z)))) 
                (v_Vad:
                 (zen.proof 
                    (zen.triangle 
                       (zen.equal abst_T (abst_mult z (abst_plus x y)) 
                          (abst_plus (abst_mult x z) (abst_mult y z))))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vbd:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vbd)) 
                   (abst_equal (abst_mult (abst_plus x y) z) 
                      (abst_mult z (abst_plus x y))) 
                   (abst_equal (abst_mult (abst_plus x y) z) 
                      (abst_plus (abst_mult x z) (abst_mult y z))) 
                   (v_Vcd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal (abst_mult (abst_plus x y) z) 
                                   (abst_mult z (abst_plus x y))) 
                                (abst_equal (abst_mult (abst_plus x y) z) 
                                   (abst_plus (abst_mult x z) (abst_mult y z))))))) =>
                    zen.Rsubst abst_T 
                      (v_Vdd:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t 
                               (abst_equal v_Vdd 
                                  (abst_mult z (abst_plus x y))) 
                               (abst_equal (abst_mult (abst_plus x y) z) 
                                  (abst_plus (abst_mult x z) (abst_mult y z)))))) 
                      (abst_mult (abst_plus x y) z) 
                      (abst_mult (abst_plus x y) z) 
                      (v_Vxc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_mult (abst_plus x y) z) 
                                   (abst_mult (abst_plus x y) z))))) =>
                       zen.Rnotand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult (abst_plus x y) z) 
                                  (abst_mult (abst_plus x y) z)))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult (abst_plus x y) z) 
                                     (abst_mult (abst_plus x y) z))))) 
                         (v_Ved:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult (abst_plus x y) z) 
                                         (abst_mult (abst_plus x y) z)))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult (abst_plus x y) z) 
                                  (abst_mult (abst_plus x y) z))) 
                            (v_Vfd:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult (abst_plus x y) z) 
                                      (abst_mult (abst_plus x y) z)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_mult (abst_plus x y) z) 
                                     (abst_mult (abst_plus x y) z))) 
                               (v_Vfd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult (abst_plus x y) z) 
                                         (abst_mult (abst_plus x y) z)))) =>
                                zen.Rsubst abst_T 
                                  (v_Vgd:(zen.term abst_T) =>
                                   zen.triangle 
                                     (zen.equal abst_T v_Vgd 
                                        (abst_mult (abst_plus x y) z))) 
                                  (abst_mult (abst_plus x y) z) 
                                  (abst_mult (abst_plus x y) z) 
                                  (v_Vxc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult (abst_plus x y) z) 
                                               (abst_mult (abst_plus x y) z))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult (abst_plus x y) z) 
                                           (abst_mult (abst_plus x y) z))) 
                                     v_Vfd v_Vxc) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult (abst_plus x y) z) 
                                            (abst_mult (abst_plus x y) z)))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vhd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult (abst_plus x y) z) 
                                           v_Vhd)) 
                                     (abst_mult (abst_plus x y) z) 
                                     (abst_mult (abst_plus x y) z) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult (abst_plus x y) 
                                                     z) 
                                                  (abst_mult (abst_plus x y) 
                                                     z))))) =>
                                      zen.Rnoteq abst_T 
                                        (abst_mult (abst_plus x y) z) v_Vxc) 
                                     (v_Vfd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult (abst_plus x y) z) 
                                               (abst_mult (abst_plus x y) z)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult (abst_plus x y) z) 
                                              (abst_mult (abst_plus x y) z))) 
                                        v_Vfd v_Vxc) v_Vfd) v_Vfd) 
                               (v_Vxc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_mult (abst_plus x y) z) 
                                            (abst_mult (abst_plus x y) z))))) =>
                                zen.Rnoteq abst_T 
                                  (abst_mult (abst_plus x y) z) v_Vxc)) v_Ved) 
                         (v_Vid:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult (abst_plus x y) z) 
                                            (abst_mult (abst_plus x y) z))))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult (abst_plus x y) z) 
                                     (abst_mult (abst_plus x y) z)))) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult (abst_plus x y) z) 
                                         (abst_mult (abst_plus x y) z))))) =>
                             zen.Rall abst_T 
                               (v_Vkd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkd v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkd v_Vmd))))))) 
                               (abst_mult (abst_plus x y) z) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (abst_plus x y) z) 
                                                     v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        v_Vmd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_plus x y) z) 
                                                 v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    v_Vmd)))))) 
                                  (abst_mult (abst_plus x y) z) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (abst_plus x y) z) 
                                                     (abst_mult 
                                                        (abst_plus x y) z)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        v_Vmd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_mult (abst_plus x y) z)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    v_Vmd))))) 
                                     (abst_mult z (abst_plus x y)) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (abst_plus x y) z) 
                                                     (abst_mult 
                                                        (abst_plus x y) z)))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_mult z 
                                                           (abst_plus x y))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_mult z 
                                                           (abst_plus x y)))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_mult (abst_plus x y) z)))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_mult z 
                                                       (abst_plus x y))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_mult z 
                                                       (abst_plus x y)))))) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_mult 
                                                           (abst_plus x y) z)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_mult 
                                                       (abst_plus x y) z)))) 
                                           v_Vjd v_Vyc) 
                                        (v_Vqd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_mult z 
                                                           (abst_plus x y))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_mult z 
                                                           (abst_plus x y))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_mult z 
                                                       (abst_plus x y))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_mult z 
                                                       (abst_plus x y))))) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z) 
                                                           (abst_mult z 
                                                              (abst_plus x y))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus x y) z) 
                                                       (abst_mult z 
                                                          (abst_plus x y))))) 
                                              __D_1_1_LEMMA v_Vrd) 
                                           (__D_1_1_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_mult z 
                                                           (abst_plus x y)))))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vbd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vbd)) 
                                              (abst_equal 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_mult z (abst_plus x y))) 
                                              (abst_equal 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_plus (abst_mult x z) 
                                                    (abst_mult y z))) 
                                              (v_Vcd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    x y) z) 
                                                              (abst_mult z 
                                                                 (abst_plus 
                                                                    x y))) 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    x y) z) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x z) 
                                                                 (abst_mult 
                                                                    y z))))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vdd:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vdd 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y))) 
                                                          (abst_equal 
                                                             (abst_mult 
                                                                (abst_plus x 
                                                                   y) z) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z)))))) 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (v_Vxc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    x y) z) 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    x y) z))))) =>
                                                  zen.Rnoteq abst_T 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    v_Vxc) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_plus 
                                                                    x y) z) 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y))) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_plus 
                                                                    x y) z) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z))))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vsd:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    x y) z) 
                                                                v_Vsd) 
                                                             (abst_equal 
                                                                (abst_mult 
                                                                   (abst_plus 
                                                                    x y) z) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x z) 
                                                                   (abst_mult 
                                                                    y z)))))) 
                                                    (abst_mult z 
                                                       (abst_plus x y)) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z)))) 
                                                       v_Vad v_Vtd) 
                                                    (v_Vud:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus x y) 
                                                             z) 
                                                          (abst_plus 
                                                             (abst_mult x z) 
                                                             (abst_mult y z))) 
                                                       v_Vud) v_Vcd) v_Vcd) 
                                              (v_Vvd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z) 
                                                           (abst_plus 
                                                              (abst_mult x z) 
                                                              (abst_mult y z)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult 
                                                             (abst_plus x y) 
                                                             z) 
                                                          (abst_plus 
                                                             (abst_mult x z) 
                                                             (abst_mult y z))))) 
                                                 v_Vvd v_Vvc) __D_1_1_LEMMA) 
                                           v_Vqd) v_Vpd) v_Vod) v_Vnd) 
                               abst_equal_transitive) v_Vid) v_Vzc) 
                      (v_Vcd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal (abst_mult (abst_plus x y) z) 
                                      (abst_mult z (abst_plus x y))) 
                                   (abst_equal (abst_mult (abst_plus x y) z) 
                                      (abst_plus (abst_mult x z) 
                                         (abst_mult y z))))))) =>
                       zen.Rsubst abst_T 
                         (v_Vwd:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal (abst_mult (abst_plus x y) z) 
                                     v_Vwd) 
                                  (abst_equal (abst_mult (abst_plus x y) z) 
                                     (abst_plus (abst_mult x z) 
                                        (abst_mult y z)))))) 
                         (abst_mult z (abst_plus x y)) 
                         (abst_plus (abst_mult x z) (abst_mult y z)) 
                         (v_Vtd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult z (abst_plus x y)) 
                                      (abst_plus (abst_mult x z) 
                                         (abst_mult y z)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult z (abst_plus x y)) 
                                  (abst_plus (abst_mult x z) (abst_mult y z)))) 
                            v_Vad v_Vtd) 
                         (v_Vud:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_mult (abst_plus x y) z) 
                                         (abst_plus (abst_mult x z) 
                                            (abst_mult y z))) 
                                      (abst_equal 
                                         (abst_mult (abst_plus x y) z) 
                                         (abst_plus (abst_mult x z) 
                                            (abst_mult y z))))))) =>
                          zen.Rnoteq basics.bool__t 
                            (abst_equal (abst_mult (abst_plus x y) z) 
                               (abst_plus (abst_mult x z) (abst_mult y z))) 
                            v_Vud) v_Vcd) v_Vcd) 
                   (v_Vvd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult (abst_plus x y) z) 
                                (abst_plus (abst_mult x z) (abst_mult y z)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult (abst_plus x y) z) 
                               (abst_plus (abst_mult x z) (abst_mult y z))))) 
                      v_Vvd v_Vvc) __D_1_1_LEMMA) 
                (v_Vtd:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T (abst_mult z (abst_plus x y)) 
                             (abst_plus (abst_mult x z) (abst_mult y z)))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult z (abst_plus x y)) 
                            (abst_plus (abst_mult x z) (abst_mult y z))))) 
                   (v_Vxd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult z (abst_plus x y)) 
                                (abst_plus (abst_mult x z) (abst_mult y z)))))) =>
                    zen.Rall abst_T 
                      (v_Vkd:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vld:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vkd v_Vld))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vld v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vkd v_Vmd))))))) 
                      (abst_mult (abst_plus x y) z) 
                      (v_Vnd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vld:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult (abst_plus x y) z) 
                                            v_Vld))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vld v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_plus x y) z) 
                                               v_Vmd)))))))) =>
                       zen.Rall abst_T 
                         (v_Vld:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_plus x y) z) v_Vld))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vld v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_plus x y) z) 
                                           v_Vmd)))))) 
                         (abst_mult z (abst_plus x y)) 
                         (v_Vyd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vmd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult (abst_plus x y) z) 
                                            (abst_mult z (abst_plus x y))))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult z (abst_plus x y)) 
                                               v_Vmd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_plus x y) z) 
                                               v_Vmd))))))) =>
                          zen.Rall abst_T 
                            (v_Vmd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_plus x y) z) 
                                        (abst_mult z (abst_plus x y))))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult z (abst_plus x y)) 
                                           v_Vmd))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_plus x y) z) 
                                           v_Vmd))))) 
                            (abst_plus (abst_mult x z) (abst_mult y z)) 
                            (v_Vzd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult (abst_plus x y) z) 
                                            (abst_mult z (abst_plus x y))))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult z (abst_plus x y)) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_plus x y) z) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z)))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_plus x y) z) 
                                        (abst_mult z (abst_plus x y))))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult z (abst_plus x y)) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_plus x y) z) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z)))))) 
                               (v_Vrd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_plus x y) z) 
                                               (abst_mult z (abst_plus x y))))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_plus x y) z) 
                                           (abst_mult z (abst_plus x y))))) 
                                  __D_1_1_LEMMA v_Vrd) 
                               (v_Vae:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult z (abst_plus x y)) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_plus x y) z) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult z (abst_plus x y)) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_plus x y) z) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z))))) 
                                  (v_Vbe:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult z 
                                                     (abst_plus x y)) 
                                                  (abst_plus (abst_mult x z) 
                                                     (abst_mult y z))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult z (abst_plus x y)) 
                                              (abst_plus (abst_mult x z) 
                                                 (abst_mult y z))))) v_Vxd 
                                     v_Vbe) 
                                  (v_Vvd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_mult (abst_plus x y) z) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z)))))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vce:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vce)) 
                                     (abst_equal 
                                        (abst_mult (abst_plus x y) z) 
                                        (abst_plus (abst_mult x z) 
                                           (abst_mult y z))) 
                                     (abst_equal 
                                        (abst_mult (abst_plus x y) z) 
                                        (abst_plus (abst_mult x z) 
                                           (abst_mult y z))) 
                                     (v_Vud:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (abst_plus x y) z) 
                                                     (abst_plus 
                                                        (abst_mult x z) 
                                                        (abst_mult y z))) 
                                                  (abst_equal 
                                                     (abst_mult 
                                                        (abst_plus x y) z) 
                                                     (abst_plus 
                                                        (abst_mult x z) 
                                                        (abst_mult y z))))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vde:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal v_Vde 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z))) 
                                                 (abst_equal 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)))))) 
                                        (abst_mult (abst_plus x y) z) 
                                        (abst_mult (abst_plus x y) z) 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult 
                                                        (abst_plus x y) z) 
                                                     (abst_mult 
                                                        (abst_plus x y) z))))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_mult 
                                                       (abst_plus x y) z)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus x y) z) 
                                                       (abst_mult 
                                                          (abst_plus x y) z))))) 
                                           (v_Ved:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z) 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z)))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (abst_mult 
                                                       (abst_plus x y) z))) 
                                              (v_Vfd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_mult 
                                                           (abst_plus x y) z)))) =>
                                               zen.Reqsym abst_T 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_mult (abst_plus x y) z) 
                                                 v_Vfd v_Vxc) v_Ved) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    x y) z) 
                                                              (abst_mult 
                                                                 (abst_plus 
                                                                    x y) z))))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus x y) z) 
                                                       (abst_mult 
                                                          (abst_plus x y) z)))) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z) 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vkd:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vld:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vkd 
                                                                   v_Vld))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vld:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    v_Vld))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    v_Vmd)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vld:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                   v_Vld))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    v_Vmd)))))) 
                                                    (abst_mult 
                                                       (abst_plus x y) z) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vmd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    v_Vmd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    v_Vmd))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vmd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    v_Vmd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    v_Vmd))))) 
                                                       (abst_plus 
                                                          (abst_mult x z) 
                                                          (abst_mult y z)) 
                                                       (v_Vee:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                   (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) 
                                                          (v_Vyc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z)))) 
                                                             v_Vjd v_Vyc) 
                                                          (v_Vfe:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                             (v_Vvc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                v_Vvd v_Vvc) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    (abst_plus 
                                                                    x y) z) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                v_Vvd v_Vvc) 
                                                             v_Vfe) v_Vee) 
                                                       v_Vod) v_Vnd) 
                                                 abst_equal_transitive) v_Vid) 
                                           v_Vzc) 
                                        (v_Vud:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z))) 
                                                     (abst_equal 
                                                        (abst_mult 
                                                           (abst_plus x y) z) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z))))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vwd:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus x y) z) 
                                                       v_Vwd) 
                                                    (abst_equal 
                                                       (abst_mult 
                                                          (abst_plus x y) z) 
                                                       (abst_plus 
                                                          (abst_mult x z) 
                                                          (abst_mult y z)))))) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z)) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z)) 
                                           (v_Vge:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_plus (abst_mult x z) 
                                                 (abst_mult y z)) v_Vge) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z) 
                                                           (abst_plus 
                                                              (abst_mult x z) 
                                                              (abst_mult y z))) 
                                                        (abst_equal 
                                                           (abst_mult 
                                                              (abst_plus x y) 
                                                              z) 
                                                           (abst_plus 
                                                              (abst_mult x z) 
                                                              (abst_mult y z))))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (abst_equal 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_plus (abst_mult x z) 
                                                    (abst_mult y z))) v_Vud) 
                                           v_Vud) v_Vud) 
                                     (v_Vvd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult (abst_plus x y) 
                                                     z) 
                                                  (abst_plus (abst_mult x z) 
                                                     (abst_mult y z)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult (abst_plus x y) z) 
                                                 (abst_plus (abst_mult x z) 
                                                    (abst_mult y z))))) 
                                        v_Vvd v_Vvc) v_Vvd) v_Vae) v_Vzd) 
                            v_Vyd) v_Vnd) abst_equal_transitive) 
                   (v_Vbe:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult z (abst_plus x y)) 
                                   (abst_plus (abst_mult x z) (abst_mult y z))))))) =>
                    zen.Rcut 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult z (abst_plus x y)) 
                                  (abst_plus (abst_mult z x) (abst_mult z y))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult z (abst_plus x y)) 
                                     (abst_plus (abst_mult z x) 
                                        (abst_mult z y))))))) 
                      (v_Vhe:
                       (zen.proof 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult z (abst_plus x y)) 
                                      (abst_plus (abst_mult z x) 
                                         (abst_mult z y))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult z (abst_plus x y)) 
                                         (abst_plus (abst_mult z x) 
                                            (abst_mult z y)))))))) =>
                       zen.Rand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult z (abst_plus x y)) 
                                  (abst_plus (abst_mult z x) (abst_mult z y))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult z (abst_plus x y)) 
                                     (abst_plus (abst_mult z x) 
                                        (abst_mult z y)))))) 
                         (v_Vie:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_mult z (abst_plus x y)) 
                                      (abst_plus (abst_mult z x) 
                                         (abst_mult z y)))))) =>
                          v_Vje:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult z (abst_plus x y)) 
                                         (abst_plus (abst_mult z x) 
                                            (abst_mult z y))))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_mult z (abst_plus x y)) 
                                     (abst_plus (abst_mult z x) 
                                        (abst_mult z y))))) __D_1_2_LEMMA 
                            v_Vje) v_Vhe) 
                      (v_Vke:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_mult z (abst_plus x y)) 
                                         (abst_plus (abst_mult z x) 
                                            (abst_mult z y))))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_mult z (abst_plus x y)) 
                                            (abst_plus (abst_mult z x) 
                                               (abst_mult z y))))))))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult x z) (abst_mult y z)) 
                               (abst_plus (abst_mult x z) (abst_mult y z)))) 
                         (v_Vle:
                          (zen.proof 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus (abst_mult x z) (abst_mult y z)) 
                                   (abst_plus (abst_mult x z) (abst_mult y z))))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vce:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vce)) 
                            (abst_equal 
                               (abst_plus (abst_mult z x) (abst_mult z y)) 
                               (abst_plus (abst_mult x z) (abst_mult y z))) 
                            (abst_equal (abst_mult z (abst_plus x y)) 
                               (abst_plus (abst_mult x z) (abst_mult y z))) 
                            (v_Vme:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal 
                                            (abst_plus (abst_mult z x) 
                                               (abst_mult z y)) 
                                            (abst_plus (abst_mult x z) 
                                               (abst_mult y z))) 
                                         (abst_equal 
                                            (abst_mult z (abst_plus x y)) 
                                            (abst_plus (abst_mult x z) 
                                               (abst_mult y z))))))) =>
                             zen.Rsubst abst_T 
                               (v_Vde:(zen.term abst_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal v_Vde 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z))) 
                                        (abst_equal 
                                           (abst_mult z (abst_plus x y)) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z)))))) 
                               (abst_plus (abst_mult z x) (abst_mult z y)) 
                               (abst_mult z (abst_plus x y)) 
                               (v_Vne:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_plus (abst_mult z x) 
                                               (abst_mult z y)) 
                                            (abst_mult z (abst_plus x y)))))) =>
                                zen.Rnotand 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult z (abst_plus x y)) 
                                           (abst_plus (abst_mult z x) 
                                              (abst_mult z y))))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult z (abst_plus x y)) 
                                              (abst_plus (abst_mult z x) 
                                                 (abst_mult z y)))))) 
                                  (v_Voe:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult z 
                                                     (abst_plus x y)) 
                                                  (abst_plus (abst_mult z x) 
                                                     (abst_mult z y))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_mult z (abst_plus x y)) 
                                           (abst_plus (abst_mult z x) 
                                              (abst_mult z y)))) 
                                     (v_Vpe:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_mult z (abst_plus x y)) 
                                               (abst_plus (abst_mult z x) 
                                                  (abst_mult z y))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_mult z (abst_plus x y)) 
                                              (abst_mult z (abst_plus x y)))) 
                                        (v_Vqe:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_mult z 
                                                     (abst_plus x y)) 
                                                  (abst_mult z 
                                                     (abst_plus x y))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vre:(zen.term abst_T) =>
                                            zen.triangle 
                                              (zen.equal abst_T v_Vre 
                                                 (abst_mult z (abst_plus x y)))) 
                                           (abst_mult z (abst_plus x y)) 
                                           (abst_plus (abst_mult z x) 
                                              (abst_mult z y)) 
                                           (v_Vie:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_mult z 
                                                           (abst_plus x y)) 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_mult z 
                                                       (abst_plus x y)) 
                                                    (abst_plus 
                                                       (abst_mult z x) 
                                                       (abst_mult z y)))) 
                                              v_Vpe v_Vie) 
                                           (v_Vse:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_plus 
                                                        (abst_mult z x) 
                                                        (abst_mult z y)) 
                                                     (abst_mult z 
                                                        (abst_plus x y))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vte:(zen.term abst_T) =>
                                               zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_mult z x) 
                                                       (abst_mult z y)) v_Vte)) 
                                              (abst_mult z (abst_plus x y)) 
                                              (abst_mult z (abst_plus x y)) 
                                              (v_Vue:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_mult z 
                                                              (abst_plus x y)) 
                                                           (abst_mult z 
                                                              (abst_plus x y)))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_mult z (abst_plus x y)) 
                                                 v_Vue) 
                                              (v_Vse:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)) 
                                                        (abst_mult z 
                                                           (abst_plus x y))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult z x) 
                                                          (abst_mult z y)) 
                                                       (abst_mult z 
                                                          (abst_plus x y)))) 
                                                 v_Vse v_Vne) v_Vse) v_Vqe) 
                                        (v_Vue:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_mult z 
                                                        (abst_plus x y)) 
                                                     (abst_mult z 
                                                        (abst_plus x y)))))) =>
                                         zen.Rnoteq abst_T 
                                           (abst_mult z (abst_plus x y)) 
                                           v_Vue)) v_Voe) 
                                  (v_Vve:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_mult z 
                                                        (abst_plus x y)) 
                                                     (abst_plus 
                                                        (abst_mult z x) 
                                                        (abst_mult z y)))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_mult z (abst_plus x y)) 
                                              (abst_plus (abst_mult z x) 
                                                 (abst_mult z y))))) 
                                     (__D_1_2_LEMMA:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_mult z 
                                                     (abst_plus x y)) 
                                                  (abst_plus (abst_mult z x) 
                                                     (abst_mult z y)))))) =>
                                      zen.Rall abst_T 
                                        (v_Vkd:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vld:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vkd 
                                                          v_Vld))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vld 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vkd 
                                                             v_Vmd))))))) 
                                        (abst_mult z (abst_plus x y)) 
                                        (v_Vwe:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vld:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult z 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              v_Vld))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vld v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 v_Vmd)))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vld:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          v_Vld))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vld 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) v_Vmd)))))) 
                                           (abst_plus (abst_mult z x) 
                                              (abst_mult z y)) 
                                           (v_Vxe:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vmd:(zen.term abst_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult z 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    z x) 
                                                                 (abst_mult 
                                                                    z y))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    z x) 
                                                                    (
                                                                    abst_mult 
                                                                    z y)) 
                                                                 v_Vmd))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 v_Vmd))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vmd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_mult z x) 
                                                             (abst_mult z y))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult z 
                                                                   x) 
                                                                (abst_mult z 
                                                                   y)) v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) v_Vmd))))) 
                                              (abst_plus (abst_mult x z) 
                                                 (abst_mult y z)) 
                                              (v_Vye:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_mult z 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    z x) 
                                                                 (abst_mult 
                                                                    z y))))) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    z x) 
                                                                    (
                                                                    abst_mult 
                                                                    z y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z)))))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_mult z x) 
                                                             (abst_mult z y))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult z 
                                                                   x) 
                                                                (abst_mult z 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z))))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z)))))) 
                                                 (v_Vje:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    z x) 
                                                                    (
                                                                    abst_mult 
                                                                    z y))))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult z 
                                                                   x) 
                                                                (abst_mult z 
                                                                   y))))) 
                                                    __D_1_2_LEMMA v_Vje) 
                                                 (v_Vze:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    z x) 
                                                                    (
                                                                    abst_mult 
                                                                    z y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z))))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z))))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult z 
                                                                   x) 
                                                                (abst_mult z 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z))))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z))))) 
                                                    (v_Vaf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    z x) 
                                                                   (abst_mult 
                                                                    z y)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x z) 
                                                                   (abst_mult 
                                                                    y z))))) 
                                                       __D_1_3_LEMMA v_Vaf) 
                                                    (v_Vxd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z)))))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vce:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vce)) 
                                                       (abst_equal 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_mult x z) 
                                                             (abst_mult y z))) 
                                                       (abst_equal 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_mult x z) 
                                                             (abst_mult y z))) 
                                                       (v_Vbf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))) 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vde:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    v_Vde 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))) 
                                                                   (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (v_Vue:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)))))) =>
                                                           zen.Rnoteq abst_T 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) v_Vue) 
                                                          (v_Vbf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vcf:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vcf) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z)) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z)) 
                                                             (v_Vge:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))) 
                                                                v_Vle v_Vge) 
                                                             (v_Vbf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))) 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))) 
                                                                v_Vbf) v_Vbf) 
                                                          v_Vbf) 
                                                       (v_Vxd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                          v_Vxd v_Vbe) v_Vxd) 
                                                    v_Vze) v_Vye) v_Vxe) 
                                           v_Vwe) abst_equal_transitive) 
                                     v_Vve) v_Vke) 
                               (v_Vbf:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal 
                                               (abst_mult z (abst_plus x y)) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z))) 
                                            (abst_equal 
                                               (abst_mult z (abst_plus x y)) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z))))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vcf:(zen.term abst_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal 
                                              (abst_mult z (abst_plus x y)) 
                                              v_Vcf) 
                                           (abst_equal 
                                              (abst_mult z (abst_plus x y)) 
                                              (abst_plus (abst_mult x z) 
                                                 (abst_mult y z)))))) 
                                  (abst_plus (abst_mult x z) (abst_mult y z)) 
                                  (abst_plus (abst_mult x z) (abst_mult y z)) 
                                  (v_Vge:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z)) 
                                               (abst_plus (abst_mult x z) 
                                                  (abst_mult y z)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z)) 
                                           (abst_plus (abst_mult x z) 
                                              (abst_mult y z)))) v_Vle v_Vge) 
                                  (v_Vbf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal 
                                                  (abst_mult z 
                                                     (abst_plus x y)) 
                                                  (abst_plus (abst_mult x z) 
                                                     (abst_mult y z))) 
                                               (abst_equal 
                                                  (abst_mult z 
                                                     (abst_plus x y)) 
                                                  (abst_plus (abst_mult x z) 
                                                     (abst_mult y z))))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (abst_equal 
                                        (abst_mult z (abst_plus x y)) 
                                        (abst_plus (abst_mult x z) 
                                           (abst_mult y z))) v_Vbf) v_Vbf) 
                               v_Vme) 
                            (v_Vxd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_mult z (abst_plus x y)) 
                                         (abst_plus (abst_mult x z) 
                                            (abst_mult y z)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult z (abst_plus x y)) 
                                        (abst_plus (abst_mult x z) 
                                           (abst_mult y z))))) v_Vxd v_Vbe) 
                            __D_1_3_LEMMA) 
                         (v_Vge:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_plus (abst_mult x z) 
                                         (abst_mult y z)) 
                                      (abst_plus (abst_mult x z) 
                                         (abst_mult y z)))))) =>
                          zen.Rcut 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_mult x z) 
                                        (abst_mult y z)) 
                                     (abst_plus (abst_mult x z) 
                                        (abst_mult y z))))) 
                            (v_Vdf:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult x z) 
                                            (abst_mult y z)) 
                                         (abst_plus (abst_mult x z) 
                                            (abst_mult y z)))))) =>
                             zen.Rall abst_T 
                               (v_Vkd:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vkd v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vkd v_Vmd))))))) 
                               (abst_plus (abst_mult z x) (abst_mult z y)) 
                               (v_Vef:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vld:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult z x) 
                                                        (abst_mult z y)) 
                                                     v_Vld))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vld v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)) 
                                                        v_Vmd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vld:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus (abst_mult z x) 
                                                    (abst_mult z y)) v_Vld))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vld v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult z x) 
                                                       (abst_mult z y)) v_Vmd)))))) 
                                  (abst_plus (abst_mult x z) (abst_mult y z)) 
                                  (v_Vff:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vmd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult z x) 
                                                        (abst_mult z y)) 
                                                     (abst_plus 
                                                        (abst_mult x z) 
                                                        (abst_mult y z))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)) 
                                                        v_Vmd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)) 
                                                        v_Vmd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vmd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus (abst_mult z x) 
                                                    (abst_mult z y)) 
                                                 (abst_plus (abst_mult x z) 
                                                    (abst_mult y z))))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)) v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult z x) 
                                                       (abst_mult z y)) v_Vmd))))) 
                                     (abst_plus (abst_mult x z) 
                                        (abst_mult y z)) 
                                     (v_Vgf:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_plus 
                                                        (abst_mult z x) 
                                                        (abst_mult z y)) 
                                                     (abst_plus 
                                                        (abst_mult x z) 
                                                        (abst_mult y z))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus (abst_mult z x) 
                                                    (abst_mult z y)) 
                                                 (abst_plus (abst_mult x z) 
                                                    (abst_mult y z))))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult z x) 
                                                       (abst_mult z y)) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)))))) 
                                        (v_Vaf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z))))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult z x) 
                                                       (abst_mult z y)) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z))))) 
                                           __D_1_3_LEMMA v_Vaf) 
                                        (v_Vhf:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult z x) 
                                                       (abst_mult z y)) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z))))) 
                                           (v_Vif:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_plus 
                                                              (abst_mult x z) 
                                                              (abst_mult y z)) 
                                                           (abst_plus 
                                                              (abst_mult x z) 
                                                              (abst_mult y z))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x z) 
                                                          (abst_mult y z)) 
                                                       (abst_plus 
                                                          (abst_mult x z) 
                                                          (abst_mult y z))))) 
                                              v_Vdf v_Vif) 
                                           (__D_1_3_LEMMA:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_plus 
                                                           (abst_mult z x) 
                                                           (abst_mult z y)) 
                                                        (abst_plus 
                                                           (abst_mult x z) 
                                                           (abst_mult y z)))))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vce:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vce)) 
                                              (abst_equal 
                                                 (abst_plus (abst_mult z x) 
                                                    (abst_mult z y)) 
                                                 (abst_plus (abst_mult x z) 
                                                    (abst_mult y z))) 
                                              (abst_equal 
                                                 (abst_mult z (abst_plus x y)) 
                                                 (abst_plus (abst_mult x z) 
                                                    (abst_mult y z))) 
                                              (v_Vme:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    z x) 
                                                                 (abst_mult 
                                                                    z y)) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x z) 
                                                                 (abst_mult 
                                                                    y z))) 
                                                           (abst_equal 
                                                              (abst_mult z 
                                                                 (abst_plus 
                                                                    x y)) 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    x z) 
                                                                 (abst_mult 
                                                                    y z))))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vde:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vde 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z))) 
                                                          (abst_equal 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   z) 
                                                                (abst_mult y 
                                                                   z)))))) 
                                                 (abst_plus (abst_mult z x) 
                                                    (abst_mult z y)) 
                                                 (abst_mult z (abst_plus x y)) 
                                                 (v_Vne:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    z x) 
                                                                 (abst_mult 
                                                                    z y)) 
                                                              (abst_mult z 
                                                                 (abst_plus 
                                                                    x y)))))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult z 
                                                                   x) 
                                                                (abst_mult z 
                                                                   y))))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult z 
                                                                   (abst_plus 
                                                                    x y)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    z x) 
                                                                   (abst_mult 
                                                                    z y)))))) 
                                                    (v_Voe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_mult z 
                                                                (abst_plus x 
                                                                   y)) 
                                                             (abst_plus 
                                                                (abst_mult z 
                                                                   x) 
                                                                (abst_mult z 
                                                                   y)))) 
                                                       (v_Vpe:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    z x) 
                                                                    (
                                                                    abst_mult 
                                                                    z y))))) =>
                                                        zen.Reqsym abst_T 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_mult z x) 
                                                             (abst_mult z y)) 
                                                          v_Vpe v_Vne) v_Voe) 
                                                    (v_Vve:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_mult z 
                                                                   (abst_plus 
                                                                    x y)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    z x) 
                                                                   (abst_mult 
                                                                    z y))))) 
                                                       (__D_1_2_LEMMA:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vkd:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vld:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (v_Vwe:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vld:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vmd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd)))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vld:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vld))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd)))))) 
                                                             (abst_plus 
                                                                (abst_mult z 
                                                                   x) 
                                                                (abst_mult z 
                                                                   y)) 
                                                             (v_Vxe:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vmd:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd))))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    v_Vmd))))) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x z) 
                                                                   (abst_mult 
                                                                    y z)) 
                                                                (v_Vye:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) 
                                                                   (v_Vje:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y))))) 
                                                                    __D_1_2_LEMMA 
                                                                    v_Vje) 
                                                                   (v_Vze:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    z x) 
                                                                    (abst_mult 
                                                                    z y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                    __D_1_3_LEMMA 
                                                                    v_Vaf) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))) 
                                                                    v_Vxd 
                                                                    v_Vbe) 
                                                                    v_Vze) 
                                                                   v_Vye) 
                                                                v_Vxe) v_Vwe) 
                                                          abst_equal_transitive) 
                                                       v_Vve) v_Vke) 
                                                 (v_Vbf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z))) 
                                                              (abst_equal 
                                                                 (abst_mult 
                                                                    z 
                                                                    (
                                                                    abst_plus 
                                                                    x y)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z))))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vcf:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_mult z 
                                                                   (abst_plus 
                                                                    x y)) 
                                                                v_Vcf) 
                                                             (abst_equal 
                                                                (abst_mult z 
                                                                   (abst_plus 
                                                                    x y)) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x z) 
                                                                   (abst_mult 
                                                                    y z)))))) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)) 
                                                    (abst_plus 
                                                       (abst_mult x z) 
                                                       (abst_mult y z)) 
                                                    (v_Vge:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z)) 
                                                                 (abst_plus 
                                                                    (
                                                                    abst_mult 
                                                                    x z) 
                                                                    (
                                                                    abst_mult 
                                                                    y z)))))) =>
                                                     zen.Rnoteq abst_T 
                                                       (abst_plus 
                                                          (abst_mult x z) 
                                                          (abst_mult y z)) 
                                                       v_Vge) 
                                                    (v_Vbf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_mult 
                                                                    z 
                                                                    (abst_plus 
                                                                    x y)) 
                                                                    (
                                                                    abst_plus 
                                                                    (abst_mult 
                                                                    x z) 
                                                                    (abst_mult 
                                                                    y z))))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_mult x z) 
                                                             (abst_mult y z))) 
                                                       v_Vbf) v_Vbf) v_Vme) 
                                              (v_Vxd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_mult z 
                                                              (abst_plus x y)) 
                                                           (abst_plus 
                                                              (abst_mult x z) 
                                                              (abst_mult y z)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_mult z 
                                                             (abst_plus x y)) 
                                                          (abst_plus 
                                                             (abst_mult x z) 
                                                             (abst_mult y z))))) 
                                                 v_Vxd v_Vbe) __D_1_3_LEMMA) 
                                           v_Vhf) v_Vgf) v_Vff) v_Vef) 
                               abst_equal_transitive) 
                            (v_Vif:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_mult x z) 
                                               (abst_mult y z)) 
                                            (abst_plus (abst_mult x z) 
                                               (abst_mult y z))))))) =>
                             zen.Rnoteq abst_T 
                               (abst_plus (abst_mult x z) (abst_mult y z)) 
                               v_Vge)))))))) 
         ((__D_1_3_1_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP (abst_equal (abst_mult z x) (abst_mult x z)))) =>
           (__D_1_3_2_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP (abst_equal (abst_mult z y) (abst_mult y z)))) =>
            zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal (abst_plus (abst_mult z x) (abst_mult z y)) 
                       (abst_plus (abst_mult x z) (abst_mult y z))))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus (abst_mult z x) (abst_mult z y)) 
                              (abst_plus (abst_mult x z) (abst_mult y z))))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vdc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vac v_Vbc))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_plus v_Vac v_Vcc) 
                                         (abst_plus v_Vbc v_Vdc))))))))) 
                 (abst_mult z x) 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vdc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult z x) v_Vbc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vcc v_Vdc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus (abst_mult z x) v_Vcc) 
                                             (abst_plus v_Vbc v_Vdc)))))))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vdc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult z x) v_Vbc))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult z x) v_Vcc) 
                                         (abst_plus v_Vbc v_Vdc)))))))) 
                    (abst_mult x z) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vdc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult z x) 
                                          (abst_mult x z)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vcc v_Vdc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus (abst_mult z x) v_Vcc) 
                                             (abst_plus (abst_mult x z) v_Vdc))))))))) =>
                     zen.Rall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vdc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult z x) 
                                      (abst_mult x z)))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult z x) v_Vcc) 
                                         (abst_plus (abst_mult x z) v_Vdc))))))) 
                       (abst_mult z y) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vdc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult z x) 
                                          (abst_mult x z)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult z y) v_Vdc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus (abst_mult z x) 
                                                (abst_mult z y)) 
                                             (abst_plus (abst_mult x z) v_Vdc)))))))) =>
                        zen.Rall abst_T 
                          (v_Vdc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult z x) 
                                      (abst_mult x z)))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult z y) v_Vdc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult z x) 
                                            (abst_mult z y)) 
                                         (abst_plus (abst_mult x z) v_Vdc)))))) 
                          (abst_mult y z) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult z x) 
                                          (abst_mult x z)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult z y) 
                                             (abst_mult y z)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus (abst_mult z x) 
                                                (abst_mult z y)) 
                                             (abst_plus (abst_mult x z) 
                                                (abst_mult y z)))))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult z x) 
                                      (abst_mult x z)))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult z y) 
                                         (abst_mult y z)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult z x) 
                                            (abst_mult z y)) 
                                         (abst_plus (abst_mult x z) 
                                            (abst_mult y z)))))) 
                             (v_Vic:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult z x) 
                                             (abst_mult x z)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult z x) 
                                         (abst_mult x z)))) __D_1_3_1_LEMMA 
                                v_Vic) 
                             (v_Vjc:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_mult z y) 
                                             (abst_mult y z)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus (abst_mult z x) 
                                                (abst_mult z y)) 
                                             (abst_plus (abst_mult x z) 
                                                (abst_mult y z))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_mult z y) 
                                         (abst_mult y z)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_plus (abst_mult z x) 
                                            (abst_mult z y)) 
                                         (abst_plus (abst_mult x z) 
                                            (abst_mult y z))))) 
                                (v_Vkc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal (abst_mult z y) 
                                                (abst_mult y z)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_mult z y) 
                                            (abst_mult y z)))) 
                                   __D_1_3_2_LEMMA v_Vkc) 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus (abst_mult z x) 
                                                (abst_mult z y)) 
                                             (abst_plus (abst_mult x z) 
                                                (abst_mult y z)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus (abst_mult z x) 
                                               (abst_mult z y)) 
                                            (abst_plus (abst_mult x z) 
                                               (abst_mult y z))))) v_Vlc 
                                   v_Vzb) v_Vjc) v_Vhc) v_Vgc) v_Vfc) v_Vec) 
                 abst_plus_substitution_rule)) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult z y) (abst_mult y z)))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult z y) (abst_mult y z)))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult v_Vac v_Vbc) 
                               (abst_mult v_Vbc v_Vac))))) z 
                   (v_Vcc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult z v_Vbc) 
                                   (abst_mult v_Vbc z)))))) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult z v_Vbc) 
                               (abst_mult v_Vbc z)))) y 
                      (v_Vdc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult z y) (abst_mult y z))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult z y) (abst_mult y z)))) 
                         v_Vdc v_Vzb) v_Vcc) abst_mult_commutes))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true (abst_equal (abst_mult z x) (abst_mult x z)))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_mult z x) (abst_mult x z)))))) =>
                zen.Rall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult v_Vac v_Vbc) 
                              (abst_mult v_Vbc v_Vac))))) z 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult z v_Vbc) 
                                  (abst_mult v_Vbc z)))))) =>
                   zen.Rall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_mult z v_Vbc) 
                              (abst_mult v_Vbc z)))) x 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_mult z x) (abst_mult x z))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult z x) (abst_mult x z)))) 
                        v_Vdc v_Vzb) v_Vcc) abst_mult_commutes)))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_mult z (abst_plus x y)) 
                    (abst_plus (abst_mult z x) (abst_mult z y))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_mult z (abst_plus x y)) 
                           (abst_plus (abst_mult z x) (abst_mult z y))))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_mult v_Vac (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_mult v_Vac v_Vbc) 
                                (abst_mult v_Vac v_Vcc))))))) z 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_mult z (abst_plus v_Vbc v_Vcc)) 
                                 (abst_plus (abst_mult z v_Vbc) 
                                    (abst_mult z v_Vcc)))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult z (abst_plus v_Vbc v_Vcc)) 
                             (abst_plus (abst_mult z v_Vbc) 
                                (abst_mult z v_Vcc)))))) x 
                 (v_Vec:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult z (abst_plus x v_Vcc)) 
                                 (abst_plus (abst_mult z x) 
                                    (abst_mult z v_Vcc))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult z (abst_plus x v_Vcc)) 
                             (abst_plus (abst_mult z x) (abst_mult z v_Vcc))))) 
                    y 
                    (v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_mult z (abst_plus x y)) 
                                 (abst_plus (abst_mult z x) (abst_mult z y)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_mult z (abst_plus x y)) 
                                (abst_plus (abst_mult z x) (abst_mult z y))))) 
                       v_Vfc v_Vzb) v_Vec) v_Vdc) 
              abst_mult_left_distributes_on_plus))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult (abst_plus x y) z) 
                   (abst_mult z (abst_plus x y))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_plus x y) z) 
                          (abst_mult z (abst_plus x y))))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vac v_Vbc) 
                         (abst_mult v_Vbc v_Vac))))) (abst_plus x y) 
             (v_Vcc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult (abst_plus x y) v_Vbc) 
                             (abst_mult v_Vbc (abst_plus x y))))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult (abst_plus x y) v_Vbc) 
                         (abst_mult v_Vbc (abst_plus x y))))) z 
                (v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult (abst_plus x y) z) 
                             (abst_mult z (abst_plus x y)))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult (abst_plus x y) z) 
                            (abst_mult z (abst_plus x y))))) v_Vdc v_Vzb) 
                v_Vcc) abst_mult_commutes))).

def Sem_algebra__lift_is_ring_morphism :
  _p_R_T:cc.uT ->
  _p_R_mult:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT _p_R_T) ->
  _p_R_plus:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT _p_R_T) ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_R_T 
       (x:(cc.eT _p_R_T) =>
        dk_logic.forall _p_R_T 
          (y:(cc.eT _p_R_T) =>
           dk_logic.forall _p_R_T 
             (a:(cc.eT _p_R_T) =>
              dk_logic.forall _p_R_T 
                (b:(cc.eT _p_R_T) =>
                 dk_logic.ebP 
                   (abst_equal 
                      (abst_lift (_p_R_plus (_p_R_mult a x) (_p_R_mult b y))) 
                      (abst_plus (abst_mult (abst_lift a) (abst_lift x)) 
                         (abst_mult (abst_lift b) (abst_lift y)))))))))
  :=
  _p_R_T:cc.uT =>
  _p_R_mult:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT _p_R_T) =>
  _p_R_plus:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT _p_R_T) =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_R_T 
       (x:(cc.eT _p_R_T) =>
        dk_logic.forall _p_R_T 
          (y:(cc.eT _p_R_T) =>
           dk_logic.forall _p_R_T 
             (a:(cc.eT _p_R_T) =>
              dk_logic.forall _p_R_T 
                (b:(cc.eT _p_R_T) =>
                 dk_logic.ebP 
                   (abst_equal 
                      (abst_lift (_p_R_plus (_p_R_mult a x) (_p_R_mult b y))) 
                      (abst_plus (abst_mult (abst_lift a) (abst_lift x)) 
                         (abst_mult (abst_lift b) (abst_lift y))))))))).

def Sem_algebra__lift_multiplicative :
  _p_R_T:cc.uT ->
  _p_R_mult:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT _p_R_T) ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) ->
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_module_mult_compat:(dk_logic.eP 
                             (dk_logic.forall _p_R_T 
                                (x:(cc.eT _p_R_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.ebP 
                                      (abst_equal (abst_module_mult x y) 
                                         (abst_mult (abst_lift x) y)))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_R_T 
       (x:(cc.eT _p_R_T) =>
        dk_logic.forall _p_R_T 
          (y:(cc.eT _p_R_T) =>
           dk_logic.ebP 
             (abst_equal (abst_mult (abst_lift x) (abst_lift y)) 
                (abst_lift (_p_R_mult x y))))))
  :=
  _p_R_T:cc.uT =>
  _p_R_mult:((cc.eT _p_R_T) -> (cc.eT _p_R_T) -> cc.eT _p_R_T) =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) =>
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_module_mult_compat:
  (dk_logic.eP 
     (dk_logic.forall _p_R_T 
        (x:(cc.eT _p_R_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP 
              (abst_equal (abst_module_mult x y) (abst_mult (abst_lift x) y)))))) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_R_T 
       (x:(cc.eT _p_R_T) =>
        dk_logic.forall _p_R_T 
          (y:(cc.eT _p_R_T) =>
           dk_logic.ebP 
             (abst_equal (abst_mult (abst_lift x) (abst_lift y)) 
                (abst_lift (_p_R_mult x y)))))).

def Semi_algebra__lift :
  _p_R_T:cc.uT ->
  abst_T:cc.uT ->
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_one:(cc.eT abst_T) -> x:(cc.eT _p_R_T) -> cc.eT abst_T
  :=
  _p_R_T:cc.uT =>
  abst_T:cc.uT =>
  abst_module_mult:((cc.eT _p_R_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_one:(cc.eT abst_T) => x:(cc.eT _p_R_T) => abst_module_mult x abst_one.

def Commutative_semi_algebra__lift_in_center :
  _p_R_T:cc.uT ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) ->
  abst_mult_commutes:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) =>
                            dk_logic.forall abst_T 
                              (y:(cc.eT abst_T) =>
                               dk_logic.ebP 
                                 (abst_equal (abst_mult x y) (abst_mult y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_R_T 
       (x:(cc.eT _p_R_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.ebP 
             (abst_equal (abst_mult (abst_lift x) y) 
                (abst_mult y (abst_lift x))))))
  :=
  _p_R_T:cc.uT =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) =>
  abst_mult_commutes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.ebP (abst_equal (abst_mult x y) (abst_mult y x)))))) =>
  zen.nnpp 
    (zen.forall _p_R_T 
       (v_Vzb:(zen.term _p_R_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult (abst_lift v_Vzb) v_Vac) 
                   (abst_mult v_Vac (abst_lift v_Vzb))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_R_T 
              (v_Vzb:(zen.term _p_R_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_lift v_Vzb) v_Vac) 
                          (abst_mult v_Vac (abst_lift v_Vzb))))))))) =>
     zen.Rnotall _p_R_T 
       (v_Vzb:(zen.term _p_R_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.triangle 
             (focal.is_true 
                (abst_equal (abst_mult (abst_lift v_Vzb) v_Vac) 
                   (abst_mult v_Vac (abst_lift v_Vzb)))))) 
       (v_Vcc:(zen.term _p_R_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_lift v_Vcc) v_Vac) 
                          (abst_mult v_Vac (abst_lift v_Vcc)))))))) =>
        zen.Rall abst_T 
          (v_Vec:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_mult v_Vec v_Vac) 
                      (abst_mult v_Vac v_Vec))))) (abst_lift v_Vcc) 
          (v_Vfc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_mult (abst_lift v_Vcc) v_Vac) 
                          (abst_mult v_Vac (abst_lift v_Vcc))))))) =>
           zen.Raxiom 
             (zen.forall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult (abst_lift v_Vcc) v_Vac) 
                         (abst_mult v_Vac (abst_lift v_Vcc)))))) v_Vfc v_Vdc) 
          abst_mult_commutes) v_Vbc).

def Integral_semi_ring__divides_is_additive :
  abst_T:cc.uT ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (abst_divides x y) 
                (dk_logic.imp (abst_divides x z) 
                   (abst_divides x (abst_plus y z)))))))
  :=
  abst_T:cc.uT =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (abst_divides x y) 
                (dk_logic.imp (abst_divides x z) 
                   (abst_divides x (abst_plus y z))))))).

def Integral_semi_ring__one_is_not_zero :
  abst_T:cc.uT ->
  abst_one:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_is_zero abst_one)))
  :=
  abst_T:cc.uT =>
  abst_one:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.not (dk_logic.ebP (abst_is_zero abst_one))).

def Torsion_free_semi_algebra__module_recip :
  _p_R_T:cc.uT ->
  abst_T:cc.uT ->
  abst_module_exquo:((cc.eT abst_T) ->
                     (cc.eT _p_R_T) -> cc.eT (basics.partiel__t abst_T)) ->
  abst_one:(cc.eT abst_T) ->
  a:(cc.eT _p_R_T) -> cc.eT (basics.partiel__t abst_T)
  :=
  _p_R_T:cc.uT =>
  abst_T:cc.uT =>
  abst_module_exquo:
  ((cc.eT abst_T) -> (cc.eT _p_R_T) -> cc.eT (basics.partiel__t abst_T)) =>
  abst_one:(cc.eT abst_T) => a:(cc.eT _p_R_T) => abst_module_exquo abst_one a.

def Torsion_free_semi_algebra__module_recip_is_inverse :
  _p_R_T:cc.uT ->
  abst_T:cc.uT ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_one:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) ->
  abst_module_recip:((cc.eT _p_R_T) -> cc.eT (basics.partiel__t abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall _p_R_T 
       (a:(cc.eT _p_R_T) =>
        dk_logic.or 
          (dk_logic.ebP (basics.is_failed abst_T (abst_module_recip a))) 
          (dk_logic.ebP 
             (abst_is_one 
                (abst_mult (abst_lift a) 
                   (basics.non_failed abst_T (abst_module_recip a)))))))
  :=
  _p_R_T:cc.uT =>
  abst_T:cc.uT =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_one:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lift:((cc.eT _p_R_T) -> cc.eT abst_T) =>
  abst_module_recip:((cc.eT _p_R_T) -> cc.eT (basics.partiel__t abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_R_T 
       (a:(cc.eT _p_R_T) =>
        dk_logic.or 
          (dk_logic.ebP (basics.is_failed abst_T (abst_module_recip a))) 
          (dk_logic.ebP 
             (abst_is_one 
                (abst_mult (abst_lift a) 
                   (basics.non_failed abst_T (abst_module_recip a))))))).

def quo_rem_result__t
  :=
  __var_a:cc.uT => weak_structures_externals.quo_rem_result __var_a.

def cr_qrr :
  __var_a:cc.uT ->
  (cc.eT __var_a) -> (cc.eT __var_a) -> cc.eT (quo_rem_result__t __var_a)
  :=
  __var_a:cc.uT => weak_structures_externals.cr_qrr __var_a.

def quot :
  __var_a:cc.uT -> (cc.eT (quo_rem_result__t __var_a)) -> cc.eT __var_a
  :=
  __var_a:cc.uT => weak_structures_externals.qrr_quot __var_a.

def rema :
  __var_a:cc.uT -> (cc.eT (quo_rem_result__t __var_a)) -> cc.eT __var_a
  :=
  __var_a:cc.uT => weak_structures_externals.qrr_rema __var_a.

def Euclidean_semi_ring__quotient :
  abst_T:cc.uT ->
  abst_quo_rem:((cc.eT abst_T) ->
                (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_quo_rem:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) =>
  x:(cc.eT abst_T) => y:(cc.eT abst_T) => quot abst_T (abst_quo_rem x y).

def Euclidean_semi_ring__remainder :
  abst_T:cc.uT ->
  abst_quo_rem:((cc.eT abst_T) ->
                (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_quo_rem:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) =>
  x:(cc.eT abst_T) => y:(cc.eT abst_T) => rema abst_T (abst_quo_rem x y).

def Euclidean_semi_ring__euclidean_characterisation :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_euclidean_ordering:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (b:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (q:(cc.eT abst_T) =>
              dk_logic.forall abst_T 
                (r:(cc.eT abst_T) =>
                 dk_logic.imp 
                   (dk_logic.ebP (abst_equal a (abst_plus (abst_mult b q) r))) 
                   (dk_logic.imp 
                      (dk_logic.not (dk_logic.ebP (abst_is_zero b))) 
                      (dk_logic.imp 
                         (dk_logic.or (dk_logic.ebP (abst_is_zero r)) 
                            (abst_euclidean_ordering r b)) 
                         (dk_logic.and 
                            (dk_logic.ebP (abst_equal q (abst_quotient a b))) 
                            (dk_logic.ebP (abst_equal r (abst_remainder a b)))))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_euclidean_ordering:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (b:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (q:(cc.eT abst_T) =>
              dk_logic.forall abst_T 
                (r:(cc.eT abst_T) =>
                 dk_logic.imp 
                   (dk_logic.ebP (abst_equal a (abst_plus (abst_mult b q) r))) 
                   (dk_logic.imp 
                      (dk_logic.not (dk_logic.ebP (abst_is_zero b))) 
                      (dk_logic.imp 
                         (dk_logic.or (dk_logic.ebP (abst_is_zero r)) 
                            (abst_euclidean_ordering r b)) 
                         (dk_logic.and 
                            (dk_logic.ebP (abst_equal q (abst_quotient a b))) 
                            (dk_logic.ebP (abst_equal r (abst_remainder a b))))))))))).

def Euclidean_semi_ring__euclidean_relation :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_is_zero y)) 
             (dk_logic.ebP 
                (abst_equal x 
                   (abst_plus (abst_mult (abst_quotient x y) y) 
                      (abst_remainder x y)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.or (dk_logic.ebP (abst_is_zero y)) 
             (dk_logic.ebP 
                (abst_equal x 
                   (abst_plus (abst_mult (abst_quotient x y) y) 
                      (abst_remainder x y))))))).

def Euclidean_semi_ring__exquo :
  abst_T:cc.uT ->
  abst_quo_rem:((cc.eT abst_T) ->
                (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)
  :=
  abst_T:cc.uT =>
  abst_quo_rem:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  dk_bool.ite (basics.partiel__t abst_T) (abst_is_zero y) 
    (basics.Failed abst_T) 
    ((qr:(cc.eT (quo_rem_result__t abst_T)) =>
      dk_bool.ite (basics.partiel__t abst_T) (abst_is_zero (rema abst_T qr)) 
        (basics.Unfailed abst_T (quot abst_T qr)) (basics.Failed abst_T)) 
       (abst_quo_rem x y)).

def Euclidean_semi_ring__gcd :
  abst_T:cc.uT ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  (cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T.

[y, x, abst_is_zero, abst_remainder, abst_T]
  Euclidean_semi_ring__gcd abst_T abst_remainder abst_is_zero x y
  -->
  dk_bool.ite abst_T (abst_is_zero y) x 
    ((abst_T:cc.uT =>
      abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
      abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
      x:(cc.eT abst_T) =>
      y:(cc.eT abst_T) =>
      dk_builtins.call_by_value abst_T abst_T 
        (dk_builtins.call_by_value abst_T (cc.Arrow abst_T abst_T) 
           (Euclidean_semi_ring__gcd abst_T abst_remainder abst_is_zero) x) y) 
       abst_T abst_remainder abst_is_zero y (abst_remainder x y)).

def Euclidean_semi_ring__one_is_euclidean_minimal :
  abst_T:cc.uT ->
  abst_euclidean_ordering:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_one:(cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.not 
          (dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
             (abst_euclidean_ordering abst_one x))))
  :=
  abst_T:cc.uT =>
  abst_euclidean_ordering:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_one:(cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.not 
          (dk_logic.imp (dk_logic.ebP (abst_is_zero x)) 
             (abst_euclidean_ordering abst_one x)))).

def Euclidean_semi_ring__remainder_left_substitution_rule :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.not 
                   (dk_logic.imp (dk_logic.ebP (abst_is_zero z)) 
                      (dk_logic.ebP 
                         (abst_equal (abst_remainder x z) 
                            (abst_remainder y z)))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.not 
                   (dk_logic.imp (dk_logic.ebP (abst_is_zero z)) 
                      (dk_logic.ebP 
                         (abst_equal (abst_remainder x z) 
                            (abst_remainder y z))))))))).

def Euclidean_semi_ring__exquo_divides :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_quo_rem:((cc.eT abst_T) ->
                (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (a:(cc.eT abst_T) =>
              dk_logic.or 
                (dk_logic.ebP 
                   (basics.is_failed abst_T 
                      (Euclidean_semi_ring__exquo abst_T abst_quo_rem 
                         abst_is_zero x a))) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (abst_equal y 
                         (basics.non_failed abst_T 
                            (Euclidean_semi_ring__exquo abst_T abst_quo_rem 
                               abst_is_zero x a)))) 
                   (dk_logic.ebP (abst_equal x (abst_mult a y))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_quo_rem:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (quo_rem_result__t abst_T)) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (a:(cc.eT abst_T) =>
              dk_logic.or 
                (dk_logic.ebP 
                   (basics.is_failed abst_T 
                      (Euclidean_semi_ring__exquo abst_T abst_quo_rem 
                         abst_is_zero x a))) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (abst_equal y 
                         (basics.non_failed abst_T 
                            (Euclidean_semi_ring__exquo abst_T abst_quo_rem 
                               abst_is_zero x a)))) 
                   (dk_logic.ebP (abst_equal x (abst_mult a y)))))))).

def Euclidean_semi_ring__divisor_is_multiple_of_gcd :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_euclidean_ordering:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_euclidean_relation:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.or 
                                      (dk_logic.ebP (abst_is_zero y)) 
                                      (dk_logic.ebP 
                                         (abst_equal x 
                                            (abst_plus 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               (abst_remainder x y)))))))) ->
  abst_exquo:((cc.eT abst_T) ->
              (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) ->
  abst_gcd:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (d:(cc.eT abst_T) =>
              dk_logic.not 
                (dk_logic.imp 
                   (dk_logic.ebP (basics.is_failed abst_T (abst_exquo x d))) 
                   (dk_logic.not 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics.is_failed abst_T (abst_exquo y d))) 
                         (dk_logic.not 
                            (dk_logic.ebP 
                               (basics.is_failed abst_T 
                                  (abst_exquo d (abst_gcd x y))))))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_euclidean_ordering:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_euclidean_relation:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_is_zero y)) 
              (dk_logic.ebP 
                 (abst_equal x 
                    (abst_plus (abst_mult (abst_quotient x y) y) 
                       (abst_remainder x y)))))))) =>
  abst_exquo:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) =>
  abst_gcd:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (d:(cc.eT abst_T) =>
              dk_logic.not 
                (dk_logic.imp 
                   (dk_logic.ebP (basics.is_failed abst_T (abst_exquo x d))) 
                   (dk_logic.not 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics.is_failed abst_T (abst_exquo y d))) 
                         (dk_logic.not 
                            (dk_logic.ebP 
                               (basics.is_failed abst_T 
                                  (abst_exquo d (abst_gcd x y)))))))))))).

def Euclidean_semi_ring__gcd_divides :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_euclidean_ordering:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_euclidean_relation:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.or 
                                      (dk_logic.ebP (abst_is_zero y)) 
                                      (dk_logic.ebP 
                                         (abst_equal x 
                                            (abst_plus 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               (abst_remainder x y)))))))) ->
  abst_exquo:((cc.eT abst_T) ->
              (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) ->
  abst_gcd:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal z (abst_gcd x y))) 
                (dk_logic.and 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo x z)))) 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo y z)))))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_euclidean_ordering:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_euclidean_relation:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_is_zero y)) 
              (dk_logic.ebP 
                 (abst_equal x 
                    (abst_plus (abst_mult (abst_quotient x y) y) 
                       (abst_remainder x y)))))))) =>
  abst_exquo:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT (basics.partiel__t abst_T)) =>
  abst_gcd:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal z (abst_gcd x y))) 
                (dk_logic.and 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo x z)))) 
                   (dk_logic.not 
                      (dk_logic.ebP 
                         (basics.is_failed abst_T (abst_exquo y z))))))))).

def Euclidean_semi_ring__zero_remainder_is_zero :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_euclidean_ordering:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_plus_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall abst_T 
                                         (x:(cc.eT abst_T) =>
                                          dk_logic.forall abst_T 
                                            (y:(cc.eT abst_T) =>
                                             dk_logic.forall abst_T 
                                               (z:(cc.eT abst_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (abst_equal x y)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_plus x z) 
                                                        (abst_plus y z)))))))) ->
  abst_euclidean_characterisation:(dk_logic.eP 
                                     (dk_logic.forall abst_T 
                                        (a:(cc.eT abst_T) =>
                                         dk_logic.forall abst_T 
                                           (b:(cc.eT abst_T) =>
                                            dk_logic.forall abst_T 
                                              (q:(cc.eT abst_T) =>
                                               dk_logic.forall abst_T 
                                                 (r:(cc.eT abst_T) =>
                                                  dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (abst_equal a 
                                                          (abst_plus 
                                                             (abst_mult b q) 
                                                             r))) 
                                                    (dk_logic.imp 
                                                       (dk_logic.not 
                                                          (dk_logic.ebP 
                                                             (abst_is_zero b))) 
                                                       (dk_logic.imp 
                                                          (dk_logic.or 
                                                             (dk_logic.ebP 
                                                                (abst_is_zero 
                                                                   r)) 
                                                             (abst_euclidean_ordering 
                                                                r b)) 
                                                          (dk_logic.and 
                                                             (dk_logic.ebP 
                                                                (abst_equal 
                                                                   q 
                                                                   (abst_quotient 
                                                                    a b))) 
                                                             (dk_logic.ebP 
                                                                (abst_equal 
                                                                   r 
                                                                   (abst_remainder 
                                                                    a b)))))))))))) ->
  abst_is_zero_spec:(dk_logic.eP 
                       (dk_logic.forall abst_T 
                          (x:(cc.eT abst_T) =>
                           dk_logic.eqv (dk_logic.ebP (abst_is_zero x)) 
                             (dk_logic.or 
                                (dk_logic.ebP (abst_equal x abst_zero)) 
                                (dk_logic.ebP (abst_equal abst_zero x)))))) ->
  abst_zero_right_absorbes:(dk_logic.eP 
                              (dk_logic.forall abst_T 
                                 (x:(cc.eT abst_T) =>
                                  dk_logic.ebP 
                                    (abst_equal (abst_mult x abst_zero) 
                                       abst_zero)))) ->
  abst_zero_checks_to_zero:(dk_logic.eP 
                              (dk_logic.ebP (abst_is_zero abst_zero))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.or (dk_logic.ebP (abst_is_zero x)) 
          (dk_logic.ebP (abst_is_zero (abst_remainder abst_zero x)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_euclidean_ordering:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_plus_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus x z) (abst_plus y z)))))))) =>
  abst_euclidean_characterisation:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (a:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (b:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (q:(cc.eT abst_T) =>
               dk_logic.forall abst_T 
                 (r:(cc.eT abst_T) =>
                  dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal a (abst_plus (abst_mult b q) r))) 
                    (dk_logic.imp 
                       (dk_logic.not (dk_logic.ebP (abst_is_zero b))) 
                       (dk_logic.imp 
                          (dk_logic.or (dk_logic.ebP (abst_is_zero r)) 
                             (abst_euclidean_ordering r b)) 
                          (dk_logic.and 
                             (dk_logic.ebP (abst_equal q (abst_quotient a b))) 
                             (dk_logic.ebP 
                                (abst_equal r (abst_remainder a b)))))))))))) =>
  abst_is_zero_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.eqv (dk_logic.ebP (abst_is_zero x)) 
           (dk_logic.or (dk_logic.ebP (abst_equal x abst_zero)) 
              (dk_logic.ebP (abst_equal abst_zero x)))))) =>
  abst_zero_right_absorbes:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero)))) =>
  abst_zero_checks_to_zero:
  (dk_logic.eP (dk_logic.ebP (abst_is_zero abst_zero))) =>
  (__F_1_LEMMA:
   (x:(cc.eT abst_T) ->
    H:(dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_is_zero x)))) ->
    dk_logic.eP (dk_logic.ebP (abst_is_zero (abst_remainder abst_zero x)))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.or (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
           (zen.triangle 
              (focal.is_true (abst_is_zero (abst_remainder abst_zero v_Vzb)))))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.or (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_is_zero (abst_remainder abst_zero v_Vzb)))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.or (zen.triangle (focal.is_true (abst_is_zero v_Vzb))) 
           (zen.triangle 
              (focal.is_true (abst_is_zero (abst_remainder abst_zero v_Vzb))))) 
        (v_Vbc:(zen.term abst_T) =>
         v_Vcc:
         (zen.proof 
            (zen.not 
               (zen.or (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_is_zero (abst_remainder abst_zero v_Vbc))))))) =>
         zen.Rnotor (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
           (zen.triangle 
              (focal.is_true (abst_is_zero (abst_remainder abst_zero v_Vbc)))) 
           (v_Vdc:
            (zen.proof 
               (zen.not (zen.triangle (focal.is_true (abst_is_zero v_Vbc))))) =>
            v_Vec:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_is_zero (abst_remainder abst_zero v_Vbc)))))) =>
            zen.Rall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.imp 
                 (zen.not (zen.triangle (focal.is_true (abst_is_zero v_Vzb)))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_is_zero (abst_remainder abst_zero v_Vzb))))) 
              v_Vbc 
              (v_Vfc:
               (zen.proof 
                  (zen.imp 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_is_zero (abst_remainder abst_zero v_Vbc)))))) =>
               zen.Rimply 
                 (zen.not (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))) 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_is_zero (abst_remainder abst_zero v_Vbc)))) 
                 (v_Vgc:
                  (zen.proof 
                     (zen.not 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))))) =>
                  zen.Raxiom 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vbc)))) 
                    v_Vdc v_Vgc) 
                 (v_Vhc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_is_zero (abst_remainder abst_zero v_Vbc))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_is_zero (abst_remainder abst_zero v_Vbc)))) 
                    v_Vhc v_Vec) v_Vfc) __F_1_LEMMA) v_Vcc) v_Vac)) 
    (x:(cc.eT abst_T) =>
     H:(dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_is_zero x)))) =>
     (__F_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal abst_zero 
               (abst_plus (abst_mult x abst_zero) abst_zero)))) =>
      (__F_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (abst_equal abst_zero (abst_remainder abst_zero x)))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true (abst_is_zero (abst_remainder abst_zero x)))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true (abst_is_zero (abst_remainder abst_zero x)))))) =>
          zen.Rall abst_T 
            (v_Vbc:(zen.term abst_T) =>
             zen.eqv (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
               (zen.or 
                  (zen.triangle (focal.is_true (abst_equal v_Vbc abst_zero))) 
                  (zen.triangle (focal.is_true (abst_equal abst_zero v_Vbc))))) 
            (abst_remainder abst_zero x) 
            (v_Vcc:
             (zen.proof 
                (zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_is_zero (abst_remainder abst_zero x)))) 
                   (zen.or 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_remainder abst_zero x) 
                               abst_zero))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal abst_zero 
                               (abst_remainder abst_zero x))))))) =>
             zen.Requiv 
               (zen.triangle 
                  (focal.is_true (abst_is_zero (abst_remainder abst_zero x)))) 
               (zen.or 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_remainder abst_zero x) abst_zero))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal abst_zero (abst_remainder abst_zero x))))) 
               (v_Vac:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_is_zero (abst_remainder abst_zero x)))))) =>
                v_Vdc:
                (zen.proof 
                   (zen.not 
                      (zen.or 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_remainder abst_zero x) 
                                  abst_zero))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal abst_zero 
                                  (abst_remainder abst_zero x))))))) =>
                zen.Rnotor 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal (abst_remainder abst_zero x) abst_zero))) 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal abst_zero (abst_remainder abst_zero x)))) 
                  (v_Vec:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_remainder abst_zero x) 
                                  abst_zero))))) =>
                   v_Vfc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal abst_zero 
                                  (abst_remainder abst_zero x)))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal abst_zero (abst_remainder abst_zero x)))) 
                     __F_1_2_LEMMA v_Vfc) v_Vdc) 
               (v_Vgc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_is_zero (abst_remainder abst_zero x))))) =>
                v_Vhc:
                (zen.proof 
                   (zen.or 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_remainder abst_zero x) 
                               abst_zero))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal abst_zero 
                               (abst_remainder abst_zero x)))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_is_zero (abst_remainder abst_zero x)))) v_Vgc 
                  v_Vac) v_Vcc) abst_is_zero_spec)) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal abst_zero (abst_remainder abst_zero x)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal abst_zero (abst_remainder abst_zero x)))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vdc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal v_Vac 
                                   (abst_plus (abst_mult v_Vbc v_Vcc) v_Vdc)))) 
                          (zen.imp 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero v_Vbc)))) 
                             (zen.imp 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero v_Vdc))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering v_Vdc v_Vbc))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vcc 
                                            (abst_quotient v_Vac v_Vbc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vdc 
                                            (abst_remainder v_Vac v_Vbc))))))))))) 
              abst_zero 
              (v_Vec:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vdc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus (abst_mult v_Vbc v_Vcc) 
                                          v_Vdc)))) 
                              (zen.imp 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_is_zero v_Vbc)))) 
                                 (zen.imp 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (abst_is_zero v_Vdc))) 
                                       (zen.triangle 
                                          (abst_euclidean_ordering v_Vdc 
                                             v_Vbc))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vcc 
                                                (abst_quotient abst_zero 
                                                   v_Vbc)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vdc 
                                                (abst_remainder abst_zero 
                                                   v_Vbc)))))))))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vdc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus (abst_mult v_Vbc v_Vcc) v_Vdc)))) 
                          (zen.imp 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero v_Vbc)))) 
                             (zen.imp 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero v_Vdc))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering v_Vdc v_Vbc))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vcc 
                                            (abst_quotient abst_zero v_Vbc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vdc 
                                            (abst_remainder abst_zero v_Vbc)))))))))) 
                 x 
                 (v_Vfc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vdc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus (abst_mult x v_Vcc) v_Vdc)))) 
                              (zen.imp 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_is_zero x)))) 
                                 (zen.imp 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (abst_is_zero v_Vdc))) 
                                       (zen.triangle 
                                          (abst_euclidean_ordering v_Vdc x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vcc 
                                                (abst_quotient abst_zero x)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vdc 
                                                (abst_remainder abst_zero x))))))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vdc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus (abst_mult x v_Vcc) v_Vdc)))) 
                          (zen.imp 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero x)))) 
                             (zen.imp 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero v_Vdc))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering v_Vdc x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vcc 
                                            (abst_quotient abst_zero x)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vdc 
                                            (abst_remainder abst_zero x))))))))) 
                    abst_zero 
                    (v_Vgc:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vdc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus (abst_mult x abst_zero) 
                                          v_Vdc)))) 
                              (zen.imp 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_is_zero x)))) 
                                 (zen.imp 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (abst_is_zero v_Vdc))) 
                                       (zen.triangle 
                                          (abst_euclidean_ordering v_Vdc x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_quotient abst_zero x)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vdc 
                                                (abst_remainder abst_zero x)))))))))) =>
                     zen.Rall abst_T 
                       (v_Vdc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus (abst_mult x abst_zero) v_Vdc)))) 
                          (zen.imp 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero x)))) 
                             (zen.imp 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero v_Vdc))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering v_Vdc x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_quotient abst_zero x)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vdc 
                                            (abst_remainder abst_zero x)))))))) 
                       abst_zero 
                       (v_Vhc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero)))) 
                              (zen.imp 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_is_zero x)))) 
                                 (zen.imp 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_is_zero abst_zero))) 
                                       (zen.triangle 
                                          (abst_euclidean_ordering abst_zero 
                                             x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_quotient abst_zero x)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_remainder abst_zero x))))))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero 
                                   (abst_plus (abst_mult x abst_zero) 
                                      abst_zero)))) 
                          (zen.imp 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero x)))) 
                             (zen.imp 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero abst_zero))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering abst_zero x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_quotient abst_zero x)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_remainder abst_zero x))))))) 
                          (v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_plus (abst_mult x abst_zero) 
                                             abst_zero)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal abst_zero 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero)))) __F_1_1_LEMMA v_Vic) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_is_zero x)))) 
                                 (zen.imp 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_is_zero abst_zero))) 
                                       (zen.triangle 
                                          (abst_euclidean_ordering abst_zero 
                                             x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_quotient abst_zero x)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_remainder abst_zero x)))))))) =>
                           zen.Rimply 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero x)))) 
                             (zen.imp 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero abst_zero))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering abst_zero x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_quotient abst_zero x)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_remainder abst_zero x)))))) 
                             (v_Vkc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_is_zero x)))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true (abst_is_zero x))) 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true (abst_is_zero x)))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero x))) 
                                   v_Vlc H) v_Vkc) 
                             (v_Vmc:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_is_zero abst_zero))) 
                                       (zen.triangle 
                                          (abst_euclidean_ordering abst_zero 
                                             x))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_quotient abst_zero x)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_remainder abst_zero x))))))) =>
                              zen.Rimply 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero abst_zero))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering abst_zero x))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_quotient abst_zero x)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_remainder abst_zero x))))) 
                                (v_Vnc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.or 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_is_zero abst_zero))) 
                                          (zen.triangle 
                                             (abst_euclidean_ordering 
                                                abst_zero x))))) =>
                                 zen.Rnotor 
                                   (zen.triangle 
                                      (focal.is_true (abst_is_zero abst_zero))) 
                                   (zen.triangle 
                                      (abst_euclidean_ordering abst_zero x)) 
                                   (v_Voc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_is_zero abst_zero))))) =>
                                    v_Vpc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (abst_euclidean_ordering 
                                                abst_zero x)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_is_zero abst_zero))) 
                                      abst_zero_checks_to_zero v_Voc) v_Vnc) 
                                (v_Vqc:
                                 (zen.proof 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_quotient abst_zero x)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_remainder abst_zero x)))))) =>
                                 zen.Rand 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_quotient abst_zero x)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_remainder abst_zero x)))) 
                                   (v_Vrc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_quotient abst_zero x))))) =>
                                    v_Vsc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_remainder abst_zero x))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_remainder abst_zero x)))) 
                                      v_Vsc v_Vzb) v_Vqc) v_Vmc) v_Vjc) v_Vhc) 
                       v_Vgc) v_Vfc) v_Vec) abst_euclidean_characterisation))) 
       ((__F_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP (abst_equal (abst_mult x abst_zero) abst_zero))) =>
         (__F_1_1_2_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (abst_equal (abst_plus (abst_mult x abst_zero) abst_zero) 
                   (abst_plus abst_zero abst_zero)))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal abst_zero 
                     (abst_plus (abst_mult x abst_zero) abst_zero)))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal abst_zero 
                            (abst_plus (abst_mult x abst_zero) abst_zero)))))) =>
             zen.Rall abst_T 
               (v_Vlc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vmc:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                     (zen.triangle (focal.is_true (abst_equal v_Vmc v_Vlc))))) 
               (abst_plus (abst_mult x abst_zero) abst_zero) 
               (v_Vnc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vmc:(zen.term abst_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult x abst_zero) 
                                     abst_zero) v_Vmc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal v_Vmc 
                                  (abst_plus (abst_mult x abst_zero) 
                                     abst_zero))))))) =>
                zen.Rall abst_T 
                  (v_Vmc:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus (abst_mult x abst_zero) abst_zero) 
                              v_Vmc))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal v_Vmc 
                              (abst_plus (abst_mult x abst_zero) abst_zero))))) 
                  abst_zero 
                  (v_Voc:
                   (zen.proof 
                      (zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal 
                                  (abst_plus (abst_mult x abst_zero) 
                                     abst_zero) abst_zero))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal abst_zero 
                                  (abst_plus (abst_mult x abst_zero) 
                                     abst_zero)))))) =>
                   zen.Rimply 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus (abst_mult x abst_zero) abst_zero) 
                              abst_zero))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal abst_zero 
                              (abst_plus (abst_mult x abst_zero) abst_zero)))) 
                     (v_Vpc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus (abst_mult x abst_zero) 
                                        abst_zero) abst_zero))))) =>
                      zen.Rcut 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus (abst_mult x abst_zero) 
                                       abst_zero) 
                                    (abst_plus (abst_mult x abst_zero) 
                                       abst_zero)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero)))))) 
                        (v_Vqc:
                         (zen.proof 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero) 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero))))))) =>
                         zen.Rand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_plus (abst_mult x abst_zero) 
                                       abst_zero) 
                                    (abst_plus (abst_mult x abst_zero) 
                                       abst_zero)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero))))) 
                           (v_Vrc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero) 
                                        (abst_plus (abst_mult x abst_zero) 
                                           abst_zero))))) =>
                            v_Vsc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero)))))) =>
                            zen.Rnoteq abst_T 
                              (abst_plus (abst_mult x abst_zero) abst_zero) 
                              v_Vrc) v_Vqc) 
                        (v_Vtc:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero)))))))) =>
                         zen.Rcut 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_plus abst_zero abst_zero) abst_zero)) 
                           (v_Vuc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_plus abst_zero abst_zero) 
                                     abst_zero))) =>
                            zen.Rsubst basics.bool__t 
                              (v_Vvc:(zen.term basics.bool__t) =>
                               zen.triangle (focal.is_true v_Vvc)) 
                              (abst_equal 
                                 (abst_plus (abst_mult x abst_zero) abst_zero) 
                                 (abst_plus abst_zero abst_zero)) 
                              (abst_equal 
                                 (abst_plus (abst_mult x abst_zero) abst_zero) 
                                 abst_zero) 
                              (v_Vwc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) 
                                              (abst_plus abst_zero abst_zero)) 
                                           (abst_equal 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) abst_zero))))) =>
                               zen.Rsubst abst_T 
                                 (v_Vxc:(zen.term abst_T) =>
                                  zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal v_Vxc 
                                             (abst_plus abst_zero abst_zero)) 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero) abst_zero)))) 
                                 (abst_plus (abst_mult x abst_zero) abst_zero) 
                                 (abst_plus (abst_mult x abst_zero) abst_zero) 
                                 (v_Vrc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero) 
                                              (abst_plus 
                                                 (abst_mult x abst_zero) 
                                                 abst_zero))))) =>
                                  zen.Rnotand 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero))))) 
                                    (v_Vyc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero)))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero))) 
                                       (v_Vzc:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    abst_zero) 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    abst_zero)))) =>
                                        zen.Rcut 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero))) 
                                          (v_Vzc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero)))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vad:(zen.term abst_T) =>
                                              zen.triangle 
                                                (zen.equal abst_T v_Vad 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero))) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero) 
                                             (v_Vrc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero) 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero))) v_Vzc 
                                                v_Vrc) 
                                             (v_Vzc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero)))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vbd:(zen.term abst_T) =>
                                                 zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero) v_Vbd)) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) 
                                                (v_Vrc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                abst_zero))))) =>
                                                 zen.Rnoteq abst_T 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) v_Vrc) 
                                                (v_Vzc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero) 
                                                         (abst_plus 
                                                            (abst_mult x 
                                                               abst_zero) 
                                                            abst_zero))) 
                                                   v_Vzc v_Vrc) v_Vzc) v_Vzc) 
                                          (v_Vrc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero))))) =>
                                           zen.Rnoteq abst_T 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero) v_Vrc)) v_Vyc) 
                                    (v_Vcd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero))))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero)))) 
                                       (v_Vdd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero) 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero))))) =>
                                        zen.Rall abst_T 
                                          (v_Vlc:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vmc:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Ved:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vlc 
                                                            v_Vmc))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vmc v_Ved))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vlc v_Ved))))))) 
                                          (abst_plus (abst_mult x abst_zero) 
                                             abst_zero) 
                                          (v_Vfd:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vmc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Ved:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                v_Vmc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vmc 
                                                                   v_Ved))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   v_Ved)))))))) =>
                                           zen.Rall abst_T 
                                             (v_Vmc:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Ved:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            v_Vmc))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Vmc v_Ved))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               v_Ved)))))) 
                                             (abst_plus 
                                                (abst_mult x abst_zero) 
                                                abst_zero) 
                                             (v_Vgd:
                                              (zen.proof 
                                                 (zen.forall abst_T 
                                                    (v_Ved:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   v_Ved))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   v_Ved))))))) =>
                                              zen.Rall abst_T 
                                                (v_Ved:(zen.term abst_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               v_Ved))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               v_Ved))))) 
                                                (abst_plus abst_zero 
                                                   abst_zero) 
                                                (v_Vhd:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero))))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_zero)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_zero))))) 
                                                   (v_Vsc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero)))) 
                                                      v_Vdd v_Vsc) 
                                                   (v_Vid:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_zero)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_zero)))) 
                                                      (v_Vjd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)))) 
                                                         __F_1_1_2_LEMMA 
                                                         v_Vjd) 
                                                      (__F_1_1_2_LEMMA:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero))))) =>
                                                       zen.Rsubst 
                                                         basics.bool__t 
                                                         (v_Vvc:
                                                          (zen.term 
                                                             basics.bool__t) =>
                                                          zen.triangle 
                                                            (focal.is_true 
                                                               v_Vvc)) 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               abst_zero 
                                                               abst_zero)) 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            abst_zero) 
                                                         (v_Vwc:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                          zen.Rsubst abst_T 
                                                            (v_Vxc:
                                                             (zen.term abst_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vxc 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (v_Vrc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                             zen.Rnoteq 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               v_Vrc) 
                                                            (v_Vwc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero)) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                             zen.Rsubst 
                                                               abst_T 
                                                               (v_Vkd:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vkd) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                               (abst_plus 
                                                                  abst_zero 
                                                                  abst_zero) 
                                                               abst_zero 
                                                               (v_Vld:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    abst_zero 
                                                                    abst_zero) 
                                                                    abst_zero)) 
                                                                  v_Vuc v_Vld) 
                                                               (v_Vmd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                                zen.Rnoteq 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                  v_Vmd) 
                                                               v_Vwc) v_Vwc) 
                                                         (v_Vnd:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                            v_Vnd v_Vpc) 
                                                         __F_1_1_2_LEMMA) 
                                                      v_Vid) v_Vhd) v_Vgd) 
                                             v_Vfd) abst_equal_transitive) 
                                       v_Vcd) v_Vtc) 
                                 (v_Vwc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    abst_zero) 
                                                 (abst_plus abst_zero 
                                                    abst_zero)) 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult x abst_zero) 
                                                    abst_zero) abst_zero))))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vkd:(zen.term abst_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) v_Vkd) 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult x abst_zero) 
                                                   abst_zero) abst_zero)))) 
                                    (abst_plus abst_zero abst_zero) 
                                    abst_zero 
                                    (v_Vld:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_plus abst_zero 
                                                    abst_zero) abst_zero)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_plus abst_zero abst_zero) 
                                             abst_zero)) v_Vuc v_Vld) 
                                    (v_Vmd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero) abst_zero) 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult x abst_zero) 
                                                       abst_zero) abst_zero))))) =>
                                     zen.Rnoteq basics.bool__t 
                                       (abst_equal 
                                          (abst_plus (abst_mult x abst_zero) 
                                             abst_zero) abst_zero) v_Vmd) 
                                    v_Vwc) v_Vwc) 
                              (v_Vnd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus 
                                              (abst_mult x abst_zero) 
                                              abst_zero) abst_zero)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_plus (abst_mult x abst_zero) 
                                             abst_zero) abst_zero))) v_Vnd 
                                 v_Vpc) __F_1_1_2_LEMMA) 
                           (v_Vld:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal abst_T 
                                        (abst_plus abst_zero abst_zero) 
                                        abst_zero)))) =>
                            zen.Rcut 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero abst_zero) 
                                       abst_zero))) 
                              (v_Vod:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_plus abst_zero abst_zero) 
                                           abst_zero)))) =>
                               zen.Rall abst_T 
                                 (v_Vlc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vmc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Ved:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Vlc v_Vmc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vmc v_Ved))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vlc v_Ved))))))) 
                                 (abst_plus (abst_mult x abst_zero) abst_zero) 
                                 (v_Vfd:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vmc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Ved:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) v_Vmc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vmc 
                                                          v_Ved))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) v_Ved)))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vmc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Ved:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) v_Vmc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vmc v_Ved))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero) v_Ved)))))) 
                                    (abst_plus abst_zero abst_zero) 
                                    (v_Vpd:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Ved:(zen.term abst_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus abst_zero 
                                                          abst_zero)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_zero) v_Ved))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) v_Ved))))))) =>
                                     zen.Rall abst_T 
                                       (v_Ved:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) 
                                                   (abst_plus abst_zero 
                                                      abst_zero)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus abst_zero 
                                                         abst_zero) v_Ved))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero) v_Ved))))) 
                                       abst_zero 
                                       (v_Vqd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult x 
                                                             abst_zero) 
                                                          abst_zero) 
                                                       (abst_plus abst_zero 
                                                          abst_zero)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_zero) 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          abst_zero)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) 
                                                   (abst_plus abst_zero 
                                                      abst_zero)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus abst_zero 
                                                         abst_zero) abst_zero))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero) abst_zero)))) 
                                          (v_Vjd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_zero)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero) 
                                                      (abst_plus abst_zero 
                                                         abst_zero)))) 
                                             __F_1_1_2_LEMMA v_Vjd) 
                                          (v_Vrd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             abst_zero 
                                                             abst_zero) 
                                                          abst_zero))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          abst_zero))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus abst_zero 
                                                         abst_zero) abst_zero))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_plus 
                                                         (abst_mult x 
                                                            abst_zero) 
                                                         abst_zero) abst_zero))) 
                                             (v_Vsd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                abst_zero 
                                                                abst_zero) 
                                                             abst_zero))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_plus 
                                                            abst_zero 
                                                            abst_zero) 
                                                         abst_zero))) v_Vod 
                                                v_Vsd) 
                                             (v_Vnd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_plus 
                                                             (abst_mult x 
                                                                abst_zero) 
                                                             abst_zero) 
                                                          abst_zero)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vvc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vvc)) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) abst_zero) 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) abst_zero) 
                                                (v_Vmd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             (abst_equal 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                abst_zero))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vtd:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Vtd 
                                                               abst_zero) 
                                                            (abst_equal 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               abst_zero)))) 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) 
                                                   (abst_plus 
                                                      (abst_mult x abst_zero) 
                                                      abst_zero) 
                                                   (v_Vrc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                   abst_zero))))) =>
                                                    zen.Rnotand 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero)))) 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))) 
                                                      (v_Vyc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero))) 
                                                         (v_Vzc:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                          zen.Reqsym abst_T 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            v_Vzc v_Vrc) 
                                                         v_Vyc) 
                                                      (v_Vcd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                         (v_Vdd:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                          zen.Rall abst_T 
                                                            (v_Vlc:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vmc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.forall 
                                                                  abst_T 
                                                                  (v_Ved:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Ved))))))) 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            (v_Vfd:
                                                             (zen.proof 
                                                                (zen.forall 
                                                                   abst_T 
                                                                   (v_Vmc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Ved:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vmc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Ved)))))))) =>
                                                             zen.Rall abst_T 
                                                               (v_Vmc:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.forall 
                                                                  abst_T 
                                                                  (v_Ved:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Vmc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vmc 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Ved)))))) 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                  abst_zero) 
                                                               (v_Vgd:
                                                                (zen.proof 
                                                                   (zen.forall 
                                                                    abst_T 
                                                                    (v_Ved:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Ved))))))) =>
                                                                zen.Rall 
                                                                  abst_T 
                                                                  (v_Ved:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Ved))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    v_Ved))))) 
                                                                  abst_zero 
                                                                  (v_Vud:
                                                                   (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                                   zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                    (v_Vsc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero)))) 
                                                                    v_Vdd 
                                                                    v_Vsc) 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    (v_Vpc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    v_Vnd 
                                                                    v_Vpc) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))) 
                                                                    v_Vnd 
                                                                    v_Vpc) 
                                                                    v_Vvd) 
                                                                    v_Vud) 
                                                                  v_Vgd) 
                                                               v_Vfd) 
                                                            abst_equal_transitive) 
                                                         v_Vcd) v_Vtc) 
                                                   (v_Vmd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   abst_zero) 
                                                                (abst_equal 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   abst_zero))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vwd:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                  v_Vwd) 
                                                               (abst_equal 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                  abst_zero)))) 
                                                      abst_zero abst_zero 
                                                      (v_Vxd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   abst_zero 
                                                                   abst_zero)))) =>
                                                       zen.Rnoteq abst_T 
                                                         abst_zero v_Vxd) 
                                                      (v_Vmd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                   (abst_equal 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    x 
                                                                    abst_zero) 
                                                                    abst_zero) 
                                                                    abst_zero))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            abst_zero) v_Vmd) 
                                                      v_Vmd) v_Vmd) 
                                                (v_Vnd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_plus 
                                                                (abst_mult x 
                                                                   abst_zero) 
                                                                abst_zero) 
                                                             abst_zero)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_plus 
                                                               (abst_mult x 
                                                                  abst_zero) 
                                                               abst_zero) 
                                                            abst_zero))) 
                                                   v_Vnd v_Vpc) v_Vnd) v_Vrd) 
                                          v_Vqd) v_Vpd) v_Vfd) 
                                 abst_equal_transitive) 
                              (v_Vsd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_plus abst_zero abst_zero) 
                                              abst_zero))))) =>
                               zen.Rall abst_T 
                                 (v_Vlc:(zen.term abst_T) =>
                                  zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vlc abst_zero) 
                                             v_Vlc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero v_Vlc) 
                                             v_Vlc)))) abst_zero 
                                 (v_Vyd:
                                  (zen.proof 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus abst_zero 
                                                    abst_zero) abst_zero))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus abst_zero 
                                                    abst_zero) abst_zero))))) =>
                                  zen.Rand 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero abst_zero) 
                                             abst_zero))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus abst_zero abst_zero) 
                                             abst_zero))) 
                                    (v_Vod:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus abst_zero 
                                                    abst_zero) abst_zero)))) =>
                                     v_Vod:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus abst_zero 
                                                    abst_zero) abst_zero)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus abst_zero 
                                                   abst_zero) abst_zero))) 
                                       v_Vod v_Vsd) v_Vyd) 
                                 abst_zero_is_neutral)))) 
                     (v_Vzd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal abst_zero 
                                  (abst_plus (abst_mult x abst_zero) 
                                     abst_zero))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal abst_zero 
                                 (abst_plus (abst_mult x abst_zero) abst_zero)))) 
                        v_Vzd v_Vkc) v_Voc) v_Vnc) abst_equal_symmetric)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_equal 
                       (abst_plus (abst_mult x abst_zero) abst_zero) 
                       (abst_plus abst_zero abst_zero)))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_plus (abst_mult x abst_zero) abst_zero) 
                              (abst_plus abst_zero abst_zero)))))) =>
               zen.Rall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vac v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc))))))) 
                 (abst_mult x abst_zero) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vbc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult x abst_zero) v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          v_Vcc) (abst_plus v_Vbc v_Vcc)))))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult x abst_zero) v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult x abst_zero) v_Vcc) 
                                   (abst_plus v_Vbc v_Vcc)))))) abst_zero 
                    (v_Vec:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vcc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult x abst_zero) 
                                       abst_zero))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          v_Vcc) (abst_plus abst_zero v_Vcc))))))) =>
                     zen.Rall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult x abst_zero) abst_zero))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult x abst_zero) v_Vcc) 
                                   (abst_plus abst_zero v_Vcc))))) abst_zero 
                       (v_Vfc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_mult x abst_zero) 
                                       abst_zero))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) 
                                       (abst_plus abst_zero abst_zero)))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_mult x abst_zero) abst_zero))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus (abst_mult x abst_zero) 
                                      abst_zero) 
                                   (abst_plus abst_zero abst_zero)))) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_mult x abst_zero) 
                                          abst_zero))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_mult x abst_zero) 
                                      abst_zero))) __F_1_1_1_LEMMA v_Vgc) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus (abst_mult x abst_zero) 
                                          abst_zero) 
                                       (abst_plus abst_zero abst_zero))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus (abst_mult x abst_zero) 
                                         abst_zero) 
                                      (abst_plus abst_zero abst_zero)))) 
                             v_Vhc v_Vzb) v_Vfc) v_Vec) v_Vdc) 
                 abst_plus_left_substitution_rule))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true (abst_equal (abst_mult x abst_zero) abst_zero))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult x abst_zero) abst_zero))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (abst_equal (abst_mult v_Vac abst_zero) abst_zero))) x 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_mult x abst_zero) abst_zero)))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_mult x abst_zero) abst_zero))) 
                   v_Vbc v_Vzb) abst_zero_right_absorbes)))).

def Euclidean_semi_ring__zero_remainder_divides :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_zero:(cc.eT abst_T) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_plus_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall abst_T 
                                          (x:(cc.eT abst_T) =>
                                           dk_logic.forall abst_T 
                                             (y:(cc.eT abst_T) =>
                                              dk_logic.forall abst_T 
                                                (z:(cc.eT abst_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (abst_equal x y)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_plus z x) 
                                                         (abst_plus z y)))))))) ->
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_zero_is_neutral:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.and 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus x abst_zero) x)) 
                                (dk_logic.ebP 
                                   (abst_equal (abst_plus abst_zero x) x))))) ->
  abst_euclidean_relation:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.or 
                                      (dk_logic.ebP (abst_is_zero y)) 
                                      (dk_logic.ebP 
                                         (abst_equal x 
                                            (abst_plus 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               (abst_remainder x y)))))))) ->
  abst_is_zero_spec:(dk_logic.eP 
                       (dk_logic.forall abst_T 
                          (x:(cc.eT abst_T) =>
                           dk_logic.eqv (dk_logic.ebP (abst_is_zero x)) 
                             (dk_logic.or 
                                (dk_logic.ebP (abst_equal x abst_zero)) 
                                (dk_logic.ebP (abst_equal abst_zero x)))))) ->
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) ->
  abst_divides_extends_equal:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (abst_divides x y))))) ->
  abst_divides_reverses_mult:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.and 
                                         (abst_divides x (abst_mult x y)) 
                                         (abst_divides y (abst_mult x y)))))) ->
  abst_divides_transitive:(dk_logic.eP 
                             (dk_logic.forall abst_T 
                                (x:(cc.eT abst_T) =>
                                 dk_logic.forall abst_T 
                                   (y:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (z:(cc.eT abst_T) =>
                                       dk_logic.imp (abst_divides x y) 
                                         (dk_logic.imp (abst_divides y z) 
                                            (abst_divides x z))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.not (dk_logic.ebP (abst_is_zero y))) 
             (dk_logic.imp 
                (dk_logic.ebP (abst_is_zero (abst_remainder x y))) 
                (abst_divides y x)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_mult:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_plus:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_zero:(cc.eT abst_T) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_plus_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.ebP (abst_equal (abst_plus z x) (abst_plus z y)))))))) =>
  abst_quotient:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_remainder:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_is_zero:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_zero_is_neutral:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.and (dk_logic.ebP (abst_equal (abst_plus x abst_zero) x)) 
           (dk_logic.ebP (abst_equal (abst_plus abst_zero x) x))))) =>
  abst_euclidean_relation:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_is_zero y)) 
              (dk_logic.ebP 
                 (abst_equal x 
                    (abst_plus (abst_mult (abst_quotient x y) y) 
                       (abst_remainder x y)))))))) =>
  abst_is_zero_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.eqv (dk_logic.ebP (abst_is_zero x)) 
           (dk_logic.or (dk_logic.ebP (abst_equal x abst_zero)) 
              (dk_logic.ebP (abst_equal abst_zero x)))))) =>
  abst_divides:((cc.eT abst_T) -> (cc.eT abst_T) -> dk_logic.Prop) =>
  abst_divides_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) (abst_divides x y))))) =>
  abst_divides_reverses_mult:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.and (abst_divides x (abst_mult x y)) 
              (abst_divides y (abst_mult x y)))))) =>
  abst_divides_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (abst_divides x y) 
                 (dk_logic.imp (abst_divides y z) (abst_divides x z))))))) =>
  (__G_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    H_0:(dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_is_zero y)))) ->
    H_r:(dk_logic.eP (dk_logic.ebP (abst_is_zero (abst_remainder x y)))) ->
    dk_logic.eP (abst_divides y x)) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp 
              (zen.not (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_is_zero (abst_remainder v_Vzb v_Vac)))) 
                 (zen.triangle (abst_divides v_Vac v_Vzb)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_is_zero (abst_remainder v_Vzb v_Vac)))) 
                        (zen.triangle (abst_divides v_Vac v_Vzb)))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.imp 
                 (zen.not (zen.triangle (focal.is_true (abst_is_zero v_Vac)))) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_is_zero (abst_remainder v_Vzb v_Vac)))) 
                    (zen.triangle (abst_divides v_Vac v_Vzb)))))) 
        __G_1_LEMMA v_Vbc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     H_0:(dk_logic.eP (dk_logic.not (dk_logic.ebP (abst_is_zero y)))) =>
     H_r:(dk_logic.eP (dk_logic.ebP (abst_is_zero (abst_remainder x y)))) =>
     (__G_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (abst_equal x (abst_mult (abst_quotient x y) y)))) =>
      (__G_1_2_LEMMA:
       (dk_logic.eP (abst_divides y (abst_mult (abst_quotient x y) y))) =>
       zen.nnpp (zen.triangle (abst_divides y x)) 
         (v_Vhc:(zen.proof (zen.not (zen.triangle (abst_divides y x)))) =>
          zen.Rcut 
            (zen.and (zen.not (zen.triangle (zen.equal abst_T y y))) 
               (zen.not (zen.triangle (abst_divides y y)))) 
            (v_Vic:
             (zen.proof 
                (zen.and (zen.not (zen.triangle (zen.equal abst_T y y))) 
                   (zen.not (zen.triangle (abst_divides y y))))) =>
             zen.Rand (zen.not (zen.triangle (zen.equal abst_T y y))) 
               (zen.not (zen.triangle (abst_divides y y))) 
               (v_Vjc:
                (zen.proof (zen.not (zen.triangle (zen.equal abst_T y y)))) =>
                v_Vkc:
                (zen.proof (zen.not (zen.triangle (abst_divides y y)))) =>
                zen.Rnoteq abst_T y v_Vjc) v_Vic) 
            (v_Vlc:
             (zen.proof 
                (zen.not 
                   (zen.and (zen.not (zen.triangle (zen.equal abst_T y y))) 
                      (zen.not (zen.triangle (abst_divides y y)))))) =>
             zen.Rcut 
               (zen.triangle 
                  (zen.equal abst_T (abst_mult (abst_quotient x y) y) x)) 
               (v_Vmc:
                (zen.proof 
                   (zen.triangle 
                      (zen.equal abst_T (abst_mult (abst_quotient x y) y) x))) =>
                zen.Rsubst abst_T 
                  (v_Vnc:(zen.term abst_T) =>
                   zen.triangle 
                     (abst_divides v_Vnc (abst_mult (abst_quotient x y) y))) 
                  y y 
                  (v_Vjc:
                   (zen.proof (zen.not (zen.triangle (zen.equal abst_T y y)))) =>
                   zen.Rnotand 
                     (zen.not (zen.triangle (zen.equal abst_T y y))) 
                     (zen.not (zen.triangle (abst_divides y y))) 
                     (v_Voc:
                      (zen.proof 
                         (zen.not 
                            (zen.not (zen.triangle (zen.equal abst_T y y))))) =>
                      zen.Rnotnot (zen.triangle (zen.equal abst_T y y)) 
                        (v_Vpc:
                         (zen.proof (zen.triangle (zen.equal abst_T y y))) =>
                         zen.Rcut (zen.triangle (zen.equal abst_T y y)) 
                           (v_Vpc:
                            (zen.proof (zen.triangle (zen.equal abst_T y y))) =>
                            zen.Rsubst abst_T 
                              (v_Vqc:(zen.term abst_T) =>
                               zen.triangle (zen.equal abst_T v_Vqc y)) y y 
                              (v_Vjc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle (zen.equal abst_T y y)))) =>
                               zen.Raxiom 
                                 (zen.triangle (zen.equal abst_T y y)) v_Vpc 
                                 v_Vjc) 
                              (v_Vpc:
                               (zen.proof 
                                  (zen.triangle (zen.equal abst_T y y))) =>
                               zen.Rsubst abst_T 
                                 (v_Vrc:(zen.term abst_T) =>
                                  zen.triangle (zen.equal abst_T y v_Vrc)) y 
                                 y 
                                 (v_Vjc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle (zen.equal abst_T y y)))) =>
                                  zen.Rnoteq abst_T y v_Vjc) 
                                 (v_Vpc:
                                  (zen.proof 
                                     (zen.triangle (zen.equal abst_T y y))) =>
                                  zen.Raxiom 
                                    (zen.triangle (zen.equal abst_T y y)) 
                                    v_Vpc v_Vjc) v_Vpc) v_Vpc) 
                           (v_Vjc:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal abst_T y y)))) =>
                            zen.Rnoteq abst_T y v_Vjc)) v_Voc) 
                     (v_Vsc:
                      (zen.proof 
                         (zen.not (zen.not (zen.triangle (abst_divides y y))))) =>
                      zen.Rnotnot (zen.triangle (abst_divides y y)) 
                        (v_Vtc:
                         (zen.proof (zen.triangle (abst_divides y y))) =>
                         zen.Rall abst_T 
                           (v_Vuc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vvc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_divides v_Vuc v_Vvc)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides v_Vvc v_Vwc)) 
                                       (zen.triangle 
                                          (abst_divides v_Vuc v_Vwc)))))) y 
                           (v_Vxc:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vvc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle (abst_divides y v_Vvc)) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides v_Vvc v_Vwc)) 
                                           (zen.triangle 
                                              (abst_divides y v_Vwc))))))) =>
                            zen.Rall abst_T 
                              (v_Vvc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_divides y v_Vvc)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides v_Vvc v_Vwc)) 
                                       (zen.triangle (abst_divides y v_Vwc))))) 
                              y 
                              (v_Vyc:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vwc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle (abst_divides y y)) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides y v_Vwc)) 
                                           (zen.triangle 
                                              (abst_divides y v_Vwc)))))) =>
                               zen.Rall abst_T 
                                 (v_Vwc:(zen.term abst_T) =>
                                  zen.imp (zen.triangle (abst_divides y y)) 
                                    (zen.imp 
                                       (zen.triangle (abst_divides y v_Vwc)) 
                                       (zen.triangle (abst_divides y v_Vwc)))) 
                                 (abst_mult (abst_quotient x y) y) 
                                 (v_Vzc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle (abst_divides y y)) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides y 
                                                 (abst_mult 
                                                    (abst_quotient x y) y))) 
                                           (zen.triangle 
                                              (abst_divides y 
                                                 (abst_mult 
                                                    (abst_quotient x y) y)))))) =>
                                  zen.Rimply 
                                    (zen.triangle (abst_divides y y)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (abst_divides y 
                                             (abst_mult (abst_quotient x y) y))) 
                                       (zen.triangle 
                                          (abst_divides y 
                                             (abst_mult (abst_quotient x y) y)))) 
                                    (v_Vkc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle (abst_divides y y)))) =>
                                     zen.Raxiom 
                                       (zen.triangle (abst_divides y y)) 
                                       v_Vtc v_Vkc) 
                                    (v_Vad:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (abst_divides y 
                                                 (abst_mult 
                                                    (abst_quotient x y) y))) 
                                           (zen.triangle 
                                              (abst_divides y 
                                                 (abst_mult 
                                                    (abst_quotient x y) y))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (abst_divides y 
                                             (abst_mult (abst_quotient x y) y))) 
                                       (zen.triangle 
                                          (abst_divides y 
                                             (abst_mult (abst_quotient x y) y))) 
                                       (v_Vbd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (abst_divides y 
                                                    (abst_mult 
                                                       (abst_quotient x y) y))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (abst_divides y 
                                                (abst_mult 
                                                   (abst_quotient x y) y))) 
                                          __G_1_2_LEMMA v_Vbd) 
                                       (__G_1_2_LEMMA:
                                        (zen.proof 
                                           (zen.triangle 
                                              (abst_divides y 
                                                 (abst_mult 
                                                    (abst_quotient x y) y)))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vnc:(zen.term abst_T) =>
                                           zen.triangle 
                                             (abst_divides v_Vnc 
                                                (abst_mult 
                                                   (abst_quotient x y) y))) 
                                          y y 
                                          (v_Vjc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T y y)))) =>
                                           zen.Rnoteq abst_T y v_Vjc) 
                                          (__G_1_2_LEMMA:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (abst_divides y 
                                                    (abst_mult 
                                                       (abst_quotient x y) y)))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vcd:(zen.term abst_T) =>
                                              zen.triangle 
                                                (abst_divides y v_Vcd)) 
                                             (abst_mult (abst_quotient x y) y) 
                                             x 
                                             (v_Vdd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_mult 
                                                             (abst_quotient 
                                                                x y) y) x)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_mult 
                                                         (abst_quotient x y) 
                                                         y) x)) v_Vmc v_Vdd) 
                                             (v_Ved:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (abst_divides y x))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (abst_divides y x)) v_Ved 
                                                v_Vhc) __G_1_2_LEMMA) 
                                          __G_1_2_LEMMA) v_Vad) v_Vzc) v_Vyc) 
                              v_Vxc) abst_divides_transitive) v_Vsc) v_Vlc) 
                  (__G_1_2_LEMMA:
                   (zen.proof 
                      (zen.triangle 
                         (abst_divides y (abst_mult (abst_quotient x y) y)))) =>
                   zen.Rsubst abst_T 
                     (v_Vcd:(zen.term abst_T) =>
                      zen.triangle (abst_divides y v_Vcd)) 
                     (abst_mult (abst_quotient x y) y) x 
                     (v_Vdd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_mult (abst_quotient x y) y) x)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (zen.equal abst_T 
                              (abst_mult (abst_quotient x y) y) x)) v_Vmc 
                        v_Vdd) 
                     (v_Ved:(zen.proof (zen.triangle (abst_divides y x))) =>
                      zen.Raxiom (zen.triangle (abst_divides y x)) v_Ved 
                        v_Vhc) __G_1_2_LEMMA) __G_1_2_LEMMA) 
               (v_Vdd:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T (abst_mult (abst_quotient x y) y) 
                            x)))) =>
                zen.Rcut 
                  (zen.triangle 
                     (abst_divides (abst_mult (abst_quotient x y) y) x)) 
                  (v_Vfd:
                   (zen.proof 
                      (zen.triangle 
                         (abst_divides (abst_mult (abst_quotient x y) y) x))) =>
                   zen.Rall abst_T 
                     (v_Vuc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle (abst_divides v_Vuc v_Vvc)) 
                              (zen.imp 
                                 (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                 (zen.triangle (abst_divides v_Vuc v_Vwc)))))) 
                     y 
                     (v_Vxc:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vvc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vwc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle (abst_divides y v_Vvc)) 
                                  (zen.imp 
                                     (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                     (zen.triangle (abst_divides y v_Vwc))))))) =>
                      zen.Rall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp (zen.triangle (abst_divides y v_Vvc)) 
                              (zen.imp 
                                 (zen.triangle (abst_divides v_Vvc v_Vwc)) 
                                 (zen.triangle (abst_divides y v_Vwc))))) 
                        (abst_mult (abst_quotient x y) y) 
                        (v_Vgd:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vwc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (abst_divides y 
                                        (abst_mult (abst_quotient x y) y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides 
                                           (abst_mult (abst_quotient x y) y) 
                                           v_Vwc)) 
                                     (zen.triangle (abst_divides y v_Vwc)))))) =>
                         zen.Rall abst_T 
                           (v_Vwc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (abst_divides y 
                                    (abst_mult (abst_quotient x y) y))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_divides 
                                       (abst_mult (abst_quotient x y) y) 
                                       v_Vwc)) 
                                 (zen.triangle (abst_divides y v_Vwc)))) x 
                           (v_Vhd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (abst_divides y 
                                        (abst_mult (abst_quotient x y) y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides 
                                           (abst_mult (abst_quotient x y) y) 
                                           x)) 
                                     (zen.triangle (abst_divides y x))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (abst_divides y 
                                    (abst_mult (abst_quotient x y) y))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_divides 
                                       (abst_mult (abst_quotient x y) y) x)) 
                                 (zen.triangle (abst_divides y x))) 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (abst_divides y 
                                           (abst_mult (abst_quotient x y) y))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (abst_divides y 
                                       (abst_mult (abst_quotient x y) y))) 
                                 __G_1_2_LEMMA v_Vbd) 
                              (v_Vid:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (abst_divides 
                                           (abst_mult (abst_quotient x y) y) 
                                           x)) 
                                     (zen.triangle (abst_divides y x)))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (abst_divides 
                                       (abst_mult (abst_quotient x y) y) x)) 
                                 (zen.triangle (abst_divides y x)) 
                                 (v_Vjd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (abst_divides 
                                              (abst_mult (abst_quotient x y) 
                                                 y) x)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (abst_divides 
                                          (abst_mult (abst_quotient x y) y) x)) 
                                    v_Vfd v_Vjd) 
                                 (v_Ved:
                                  (zen.proof 
                                     (zen.triangle (abst_divides y x))) =>
                                  zen.Rsubst abst_T 
                                    (v_Vkd:(zen.term abst_T) =>
                                     zen.triangle (abst_divides v_Vkd x)) y 
                                    y 
                                    (v_Vjc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T y y)))) =>
                                     zen.Rnotand 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T y y))) 
                                       (zen.not 
                                          (zen.triangle (abst_divides y y))) 
                                       (v_Voc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T y y))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle 
                                             (zen.equal abst_T y y)) 
                                          (v_Vpc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T y y))) =>
                                           zen.Reqsym abst_T y y v_Vpc v_Vjc) 
                                          v_Voc) 
                                       (v_Vsc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (abst_divides y y))))) =>
                                        zen.Rnotnot 
                                          (zen.triangle (abst_divides y y)) 
                                          (v_Vtc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (abst_divides y y))) =>
                                           zen.Rall abst_T 
                                             (v_Vuc:(zen.term abst_T) =>
                                              zen.forall abst_T 
                                                (v_Vvc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides v_Vuc 
                                                            v_Vvc)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vvc v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vuc v_Vwc)))))) 
                                             y 
                                             (v_Vxc:
                                              (zen.proof 
                                                 (zen.forall abst_T 
                                                    (v_Vvc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vwc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides y 
                                                                v_Vvc)) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   v_Vvc 
                                                                   v_Vwc)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y v_Vwc))))))) =>
                                              zen.Rall abst_T 
                                                (v_Vvc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides y 
                                                            v_Vvc)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides 
                                                               v_Vvc v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides y 
                                                               v_Vwc))))) y 
                                                (v_Vyc:
                                                 (zen.proof 
                                                    (zen.forall abst_T 
                                                       (v_Vwc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides y 
                                                                y)) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y v_Vwc)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y v_Vwc)))))) =>
                                                 zen.Rall abst_T 
                                                   (v_Vwc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (abst_divides y y)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides y 
                                                               v_Vwc)) 
                                                         (zen.triangle 
                                                            (abst_divides y 
                                                               v_Vwc)))) x 
                                                   (v_Vld:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (abst_divides y 
                                                                y)) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y x)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y x))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (abst_divides y y)) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (abst_divides y x)) 
                                                         (zen.triangle 
                                                            (abst_divides y x))) 
                                                      (v_Vkc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y y)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (abst_divides y y)) 
                                                         v_Vtc v_Vkc) 
                                                      (v_Vmd:
                                                       (zen.proof 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y x)) 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y x)))) =>
                                                       zen.Rimply 
                                                         (zen.triangle 
                                                            (abst_divides y x)) 
                                                         (zen.triangle 
                                                            (abst_divides y x)) 
                                                         (v_Vhc:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (abst_divides 
                                                                    y x)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (abst_divides 
                                                                  y x)) 
                                                            v_Ved v_Vhc) 
                                                         (v_Ved:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (abst_divides 
                                                                   y x))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (abst_divides 
                                                                  y x)) 
                                                            v_Ved v_Vhc) 
                                                         v_Vmd) v_Vld) v_Vyc) 
                                                v_Vxc) 
                                             abst_divides_transitive) v_Vsc) 
                                       v_Vlc) 
                                    (v_Ved:
                                     (zen.proof 
                                        (zen.triangle (abst_divides y x))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vcd:(zen.term abst_T) =>
                                        zen.triangle (abst_divides y v_Vcd)) 
                                       x x 
                                       (v_Vnd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x)))) =>
                                        zen.Rnoteq abst_T x v_Vnd) 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.triangle (abst_divides y x))) =>
                                        zen.Raxiom 
                                          (zen.triangle (abst_divides y x)) 
                                          v_Ved v_Vhc) v_Ved) v_Ved) v_Vid) 
                              v_Vhd) v_Vgd) v_Vxc) abst_divides_transitive) 
                  (v_Vjd:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (abst_divides (abst_mult (abst_quotient x y) y) x)))) =>
                   zen.Rall abst_T 
                     (v_Vuc:(zen.term abst_T) =>
                      zen.forall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vuc v_Vvc))) 
                           (zen.triangle (abst_divides v_Vuc v_Vvc)))) 
                     (abst_mult (abst_quotient x y) y) 
                     (v_Vod:
                      (zen.proof 
                         (zen.forall abst_T 
                            (v_Vvc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_quotient x y) y) 
                                        v_Vvc))) 
                               (zen.triangle 
                                  (abst_divides 
                                     (abst_mult (abst_quotient x y) y) v_Vvc))))) =>
                      zen.Rall abst_T 
                        (v_Vvc:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_mult (abst_quotient x y) y) v_Vvc))) 
                           (zen.triangle 
                              (abst_divides 
                                 (abst_mult (abst_quotient x y) y) v_Vvc))) 
                        x 
                        (v_Vpd:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_mult (abst_quotient x y) y) x))) 
                               (zen.triangle 
                                  (abst_divides 
                                     (abst_mult (abst_quotient x y) y) x)))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_mult (abst_quotient x y) y) x))) 
                           (zen.triangle 
                              (abst_divides 
                                 (abst_mult (abst_quotient x y) y) x)) 
                           (v_Vqd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_mult (abst_quotient x y) y) 
                                           x))))) =>
                            zen.Rall abst_T 
                              (v_Vuc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vvc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vuc v_Vvc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vvc v_Vuc))))) x 
                              (v_Vrd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vvc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x v_Vvc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vvc x)))))) =>
                               zen.Rall abst_T 
                                 (v_Vvc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vvc))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal v_Vvc x)))) 
                                 (abst_mult (abst_quotient x y) y) 
                                 (v_Vsd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_mult 
                                                    (abst_quotient x y) y)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_quotient x y) y) x))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_mult (abst_quotient x y) y)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_mult (abst_quotient x y) y) 
                                             x))) 
                                    (v_Vtd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x 
                                                    (abst_mult 
                                                       (abst_quotient x y) y)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_mult 
                                                   (abst_quotient x y) y)))) 
                                       __G_1_1_LEMMA v_Vtd) 
                                    (v_Vud:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_mult 
                                                    (abst_quotient x y) y) x)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_mult 
                                                   (abst_quotient x y) y) x))) 
                                       v_Vud v_Vqd) v_Vsd) v_Vrd) 
                              abst_equal_symmetric) 
                           (v_Vfd:
                            (zen.proof 
                               (zen.triangle 
                                  (abst_divides 
                                     (abst_mult (abst_quotient x y) y) x))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (abst_divides 
                                    (abst_mult (abst_quotient x y) y) x)) 
                              v_Vfd v_Vjd) v_Vpd) v_Vod) 
                     abst_divides_extends_equal))))) 
        (zen.nnpp 
           (zen.triangle (abst_divides y (abst_mult (abst_quotient x y) y))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (abst_divides y (abst_mult (abst_quotient x y) y))))) =>
            zen.Rall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.and 
                    (zen.triangle 
                       (abst_divides v_Vac (abst_mult v_Vac v_Vbc))) 
                    (zen.triangle 
                       (abst_divides v_Vbc (abst_mult v_Vac v_Vbc))))) 
              (abst_quotient x y) 
              (v_Vcc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vbc:(zen.term abst_T) =>
                      zen.and 
                        (zen.triangle 
                           (abst_divides (abst_quotient x y) 
                              (abst_mult (abst_quotient x y) v_Vbc))) 
                        (zen.triangle 
                           (abst_divides v_Vbc 
                              (abst_mult (abst_quotient x y) v_Vbc)))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.and 
                    (zen.triangle 
                       (abst_divides (abst_quotient x y) 
                          (abst_mult (abst_quotient x y) v_Vbc))) 
                    (zen.triangle 
                       (abst_divides v_Vbc 
                          (abst_mult (abst_quotient x y) v_Vbc)))) y 
                 (v_Vdc:
                  (zen.proof 
                     (zen.and 
                        (zen.triangle 
                           (abst_divides (abst_quotient x y) 
                              (abst_mult (abst_quotient x y) y))) 
                        (zen.triangle 
                           (abst_divides y (abst_mult (abst_quotient x y) y))))) =>
                  zen.Rand 
                    (zen.triangle 
                       (abst_divides (abst_quotient x y) 
                          (abst_mult (abst_quotient x y) y))) 
                    (zen.triangle 
                       (abst_divides y (abst_mult (abst_quotient x y) y))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.triangle 
                           (abst_divides (abst_quotient x y) 
                              (abst_mult (abst_quotient x y) y)))) =>
                     v_Vfc:
                     (zen.proof 
                        (zen.triangle 
                           (abst_divides y (abst_mult (abst_quotient x y) y)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (abst_divides y (abst_mult (abst_quotient x y) y))) 
                       v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_divides_reverses_mult))) 
       ((__G_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal x 
                  (abst_plus (abst_mult (abst_quotient x y) y) abst_zero)))) =>
         zen.nnpp 
           (zen.triangle 
              (focal.is_true (abst_equal x (abst_mult (abst_quotient x y) y)))) 
           (v_Vkc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal x (abst_mult (abst_quotient x y) y)))))) =>
            zen.Rcut 
              (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                 (zen.not (zen.triangle (focal.is_true (abst_equal x x))))) 
              (v_Vlc:
               (zen.proof 
                  (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                     (zen.not (zen.triangle (focal.is_true (abst_equal x x)))))) =>
               zen.Rand (zen.not (zen.triangle (zen.equal abst_T x x))) 
                 (zen.not (zen.triangle (focal.is_true (abst_equal x x)))) 
                 (v_Vmc:
                  (zen.proof (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                  v_Vnc:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_equal x x))))) =>
                  zen.Rnoteq abst_T x v_Vmc) v_Vlc) 
              (v_Voc:
               (zen.proof 
                  (zen.not 
                     (zen.and 
                        (zen.not (zen.triangle (zen.equal abst_T x x))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal x x))))))) =>
               zen.Rcut 
                 (zen.triangle 
                    (zen.equal abst_T 
                       (abst_plus (abst_mult (abst_quotient x y) y) abst_zero) 
                       (abst_mult (abst_quotient x y) y))) 
                 (v_Vpc:
                  (zen.proof 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus (abst_mult (abst_quotient x y) y) 
                              abst_zero) (abst_mult (abst_quotient x y) y)))) =>
                  zen.Rsubst basics.bool__t 
                    (v_Vqc:(zen.term basics.bool__t) =>
                     zen.triangle (focal.is_true v_Vqc)) 
                    (abst_equal x 
                       (abst_plus (abst_mult (abst_quotient x y) y) abst_zero)) 
                    (abst_equal x (abst_mult (abst_quotient x y) y)) 
                    (v_Vrc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal x 
                                    (abst_plus 
                                       (abst_mult (abst_quotient x y) y) 
                                       abst_zero)) 
                                 (abst_equal x 
                                    (abst_mult (abst_quotient x y) y)))))) =>
                     zen.Rsubst abst_T 
                       (v_Vsc:(zen.term abst_T) =>
                        zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal v_Vsc 
                                   (abst_plus 
                                      (abst_mult (abst_quotient x y) y) 
                                      abst_zero)) 
                                (abst_equal x 
                                   (abst_mult (abst_quotient x y) y))))) x x 
                       (v_Vmc:
                        (zen.proof 
                           (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                        zen.Rnotand 
                          (zen.not (zen.triangle (zen.equal abst_T x x))) 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_equal x x)))) 
                          (v_Vtc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle (zen.equal abst_T x x))))) =>
                           zen.Rnotnot (zen.triangle (zen.equal abst_T x x)) 
                             (v_Vuc:
                              (zen.proof 
                                 (zen.triangle (zen.equal abst_T x x))) =>
                              zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle (zen.equal abst_T x x))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vvc:(zen.term abst_T) =>
                                    zen.triangle (zen.equal abst_T v_Vvc x)) 
                                   x x 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T x x)))) =>
                                    zen.Raxiom 
                                      (zen.triangle (zen.equal abst_T x x)) 
                                      v_Vuc v_Vmc) 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.triangle (zen.equal abst_T x x))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vwc:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T x v_Vwc)) x x 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T x x)))) =>
                                       zen.Rnoteq abst_T x v_Vmc) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T x x))) =>
                                       zen.Raxiom 
                                         (zen.triangle (zen.equal abst_T x x)) 
                                         v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T x x)))) =>
                                 zen.Rnoteq abst_T x v_Vmc)) v_Vtc) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x x)))))) =>
                           zen.Rnotnot 
                             (zen.triangle (focal.is_true (abst_equal x x))) 
                             (v_Vyc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x x)))) =>
                              zen.Rall abst_T 
                                (v_Vzc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vzc v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vzc v_Vbd))))))) 
                                x 
                                (v_Vcd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vbd)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x v_Vbd)))))) 
                                   x 
                                   (v_Vdd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x x))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vbd))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x v_Vbd))))) 
                                      (abst_plus 
                                         (abst_mult (abst_quotient x y) y) 
                                         abst_zero) 
                                      (v_Ved:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x x))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal x x))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus 
                                                        (abst_mult 
                                                           (abst_quotient x y) 
                                                           y) abst_zero)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus 
                                                        (abst_mult 
                                                           (abst_quotient x y) 
                                                           y) abst_zero))))) 
                                         (v_Vnc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x x))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x x))) v_Vyc 
                                            v_Vnc) 
                                         (v_Vfd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus 
                                                        (abst_mult 
                                                           (abst_quotient x y) 
                                                           y) abst_zero)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal x 
                                                     (abst_plus 
                                                        (abst_mult 
                                                           (abst_quotient x y) 
                                                           y) abst_zero)))) 
                                            (v_Vgd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  (abst_quotient 
                                                                    x y) y) 
                                                               abst_zero)))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x 
                                                        (abst_plus 
                                                           (abst_mult 
                                                              (abst_quotient 
                                                                 x y) y) 
                                                           abst_zero)))) 
                                               __G_1_1_1_LEMMA v_Vgd) 
                                            (__G_1_1_1_LEMMA:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero))))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vqc:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vqc)) 
                                               (abst_equal x 
                                                  (abst_plus 
                                                     (abst_mult 
                                                        (abst_quotient x y) y) 
                                                     abst_zero)) 
                                               (abst_equal x 
                                                  (abst_mult 
                                                     (abst_quotient x y) y)) 
                                               (v_Vrc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal x 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                  abst_zero)) 
                                                            (abst_equal x 
                                                               (abst_mult 
                                                                  (abst_quotient 
                                                                    x y) y)))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vsc:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal v_Vsc 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_quotient 
                                                                    x y) y) 
                                                                 abst_zero)) 
                                                           (abst_equal x 
                                                              (abst_mult 
                                                                 (abst_quotient 
                                                                    x y) y))))) 
                                                  x x 
                                                  (v_Vmc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T x x)))) =>
                                                   zen.Rnoteq abst_T x v_Vmc) 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal x 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)) 
                                                               (abst_equal x 
                                                                  (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vhd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal x 
                                                                 v_Vhd) 
                                                              (abst_equal x 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_quotient 
                                                                    x y) y))))) 
                                                     (abst_plus 
                                                        (abst_mult 
                                                           (abst_quotient x y) 
                                                           y) abst_zero) 
                                                     (abst_mult 
                                                        (abst_quotient x y) y) 
                                                     (v_Vid:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero) 
                                                                  (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_plus 
                                                                 (abst_mult 
                                                                    (
                                                                    abst_quotient 
                                                                    x y) y) 
                                                                 abst_zero) 
                                                              (abst_mult 
                                                                 (abst_quotient 
                                                                    x y) y))) 
                                                        v_Vpc v_Vid) 
                                                     (v_Vjd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)) 
                                                                  (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_equal x 
                                                           (abst_mult 
                                                              (abst_quotient 
                                                                 x y) y)) 
                                                        v_Vjd) v_Vrc) v_Vrc) 
                                               (v_Vkd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal x 
                                                           (abst_mult 
                                                              (abst_quotient 
                                                                 x y) y)))) 
                                                  v_Vkd v_Vkc) 
                                               __G_1_1_1_LEMMA) v_Vfd) v_Ved) 
                                      v_Vdd) v_Vcd) abst_equal_transitive) 
                             v_Vxc) v_Voc) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal x 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          abst_zero)) 
                                    (abst_equal x 
                                       (abst_mult (abst_quotient x y) y)))))) =>
                        zen.Rsubst abst_T 
                          (v_Vhd:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal x v_Vhd) 
                                   (abst_equal x 
                                      (abst_mult (abst_quotient x y) y))))) 
                          (abst_plus (abst_mult (abst_quotient x y) y) 
                             abst_zero) (abst_mult (abst_quotient x y) y) 
                          (v_Vid:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          abst_zero) 
                                       (abst_mult (abst_quotient x y) y))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_plus 
                                      (abst_mult (abst_quotient x y) y) 
                                      abst_zero) 
                                   (abst_mult (abst_quotient x y) y))) v_Vpc 
                             v_Vid) 
                          (v_Vjd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal x 
                                          (abst_mult (abst_quotient x y) y)) 
                                       (abst_equal x 
                                          (abst_mult (abst_quotient x y) y)))))) =>
                           zen.Rnoteq basics.bool__t 
                             (abst_equal x (abst_mult (abst_quotient x y) y)) 
                             v_Vjd) v_Vrc) v_Vrc) 
                    (v_Vkd:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal x (abst_mult (abst_quotient x y) y))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal x (abst_mult (abst_quotient x y) y)))) 
                       v_Vkd v_Vkc) __G_1_1_1_LEMMA) 
                 (v_Vid:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T 
                              (abst_plus (abst_mult (abst_quotient x y) y) 
                                 abst_zero) (abst_mult (abst_quotient x y) y))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_plus (abst_mult (abst_quotient x y) y) 
                                abst_zero) (abst_mult (abst_quotient x y) y)))) 
                    (v_Vld:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus 
                                    (abst_mult (abst_quotient x y) y) 
                                    abst_zero) 
                                 (abst_mult (abst_quotient x y) y))))) =>
                     zen.Rall abst_T 
                       (v_Vzc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vzc v_Vbd))))))) 
                       x 
                       (v_Vcd:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x v_Vbd)))))))) =>
                        zen.Rall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal x v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x v_Vbd)))))) 
                          (abst_plus (abst_mult (abst_quotient x y) y) 
                             abst_zero) 
                          (v_Vmd:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                abst_zero)))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero) v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x v_Vbd))))))) =>
                           zen.Rall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal x 
                                         (abst_plus 
                                            (abst_mult (abst_quotient x y) y) 
                                            abst_zero)))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               abst_zero) v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x v_Vbd))))) 
                             (abst_mult (abst_quotient x y) y) 
                             (v_Vnd:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                abst_zero)))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero) 
                                                (abst_mult 
                                                   (abst_quotient x y) y)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_mult 
                                                   (abst_quotient x y) y))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal x 
                                         (abst_plus 
                                            (abst_mult (abst_quotient x y) y) 
                                            abst_zero)))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               abst_zero) 
                                            (abst_mult (abst_quotient x y) y)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_mult (abst_quotient x y) y))))) 
                                (v_Vgd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero)))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_plus 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               abst_zero)))) __G_1_1_1_LEMMA 
                                   v_Vgd) 
                                (v_Vod:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero) 
                                                (abst_mult 
                                                   (abst_quotient x y) y)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_mult 
                                                   (abst_quotient x y) y)))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_plus 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               abst_zero) 
                                            (abst_mult (abst_quotient x y) y)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal x 
                                            (abst_mult (abst_quotient x y) y)))) 
                                   (v_Vpd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult 
                                                         (abst_quotient x y) 
                                                         y) abst_zero) 
                                                   (abst_mult 
                                                      (abst_quotient x y) y)))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_plus 
                                                  (abst_mult 
                                                     (abst_quotient x y) y) 
                                                  abst_zero) 
                                               (abst_mult 
                                                  (abst_quotient x y) y)))) 
                                      v_Vld v_Vpd) 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_mult 
                                                   (abst_quotient x y) y))))) =>
                                    zen.Rsubst basics.bool__t 
                                      (v_Vqc:(zen.term basics.bool__t) =>
                                       zen.triangle (focal.is_true v_Vqc)) 
                                      (abst_equal x 
                                         (abst_mult (abst_quotient x y) y)) 
                                      (abst_equal x 
                                         (abst_mult (abst_quotient x y) y)) 
                                      (v_Vjd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal x 
                                                      (abst_mult 
                                                         (abst_quotient x y) 
                                                         y)) 
                                                   (abst_equal x 
                                                      (abst_mult 
                                                         (abst_quotient x y) 
                                                         y)))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vqd:(zen.term abst_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal v_Vqd 
                                                     (abst_mult 
                                                        (abst_quotient x y) y)) 
                                                  (abst_equal x 
                                                     (abst_mult 
                                                        (abst_quotient x y) y))))) 
                                         x x 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T x x)))) =>
                                          zen.Rnotand 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x x))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x x)))) 
                                            (v_Vtc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T x 
                                                            x))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (zen.equal abst_T x x)) 
                                               (v_Vuc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T x x))) =>
                                                zen.Reqsym abst_T x x v_Vuc 
                                                  v_Vmc) v_Vtc) 
                                            (v_Vxc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x x)))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal x x))) 
                                               (v_Vyc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x x)))) =>
                                                zen.Rall abst_T 
                                                  (v_Vzc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                  x 
                                                  (v_Vcd:
                                                   (zen.proof 
                                                      (zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd)))))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x v_Vbd)))))) 
                                                     x 
                                                     (v_Vdd:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x x))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x v_Vbd))))) 
                                                        (abst_mult 
                                                           (abst_quotient x y) 
                                                           y) 
                                                        (v_Vrd:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y))))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    x x))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y))))) 
                                                           (v_Vnc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x x))) 
                                                              v_Vyc v_Vnc) 
                                                           (v_Vsd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))) 
                                                              (v_Vkc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))) 
                                                                 v_Vkd v_Vkc) 
                                                              (v_Vkd:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y)))) 
                                                                 v_Vkd v_Vkc) 
                                                              v_Vsd) v_Vrd) 
                                                        v_Vdd) v_Vcd) 
                                                  abst_equal_transitive) 
                                               v_Vxc) v_Voc) 
                                         (v_Vjd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal x 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y)) 
                                                      (abst_equal x 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y)))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vhd:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal x v_Vhd) 
                                                     (abst_equal x 
                                                        (abst_mult 
                                                           (abst_quotient x y) 
                                                           y))))) 
                                            (abst_mult (abst_quotient x y) y) 
                                            (abst_mult (abst_quotient x y) y) 
                                            (v_Vtd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y) 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y))))) =>
                                             zen.Rnoteq abst_T 
                                               (abst_mult 
                                                  (abst_quotient x y) y) 
                                               v_Vtd) 
                                            (v_Vjd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal x 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y)) 
                                                         (abst_equal x 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y)))))) =>
                                             zen.Rnoteq basics.bool__t 
                                               (abst_equal x 
                                                  (abst_mult 
                                                     (abst_quotient x y) y)) 
                                               v_Vjd) v_Vjd) v_Vjd) 
                                      (v_Vkd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal x 
                                                   (abst_mult 
                                                      (abst_quotient x y) y))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal x 
                                                  (abst_mult 
                                                     (abst_quotient x y) y)))) 
                                         v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                             v_Vmd) v_Vcd) abst_equal_transitive) 
                    (v_Vpd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_plus 
                                       (abst_mult (abst_quotient x y) y) 
                                       abst_zero) 
                                    (abst_mult (abst_quotient x y) y)))))) =>
                     zen.Rall abst_T 
                       (v_Vzc:(zen.term abst_T) =>
                        zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus v_Vzc abst_zero) v_Vzc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_plus abst_zero v_Vzc) v_Vzc)))) 
                       (abst_mult (abst_quotient x y) y) 
                       (v_Vud:
                        (zen.proof 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          abst_zero) 
                                       (abst_mult (abst_quotient x y) y)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero 
                                          (abst_mult (abst_quotient x y) y)) 
                                       (abst_mult (abst_quotient x y) y)))))) =>
                        zen.Rand 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus 
                                      (abst_mult (abst_quotient x y) y) 
                                      abst_zero) 
                                   (abst_mult (abst_quotient x y) y)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_plus abst_zero 
                                      (abst_mult (abst_quotient x y) y)) 
                                   (abst_mult (abst_quotient x y) y)))) 
                          (v_Vld:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          abst_zero) 
                                       (abst_mult (abst_quotient x y) y))))) =>
                           v_Vvd:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_plus abst_zero 
                                          (abst_mult (abst_quotient x y) y)) 
                                       (abst_mult (abst_quotient x y) y))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_plus 
                                         (abst_mult (abst_quotient x y) y) 
                                         abst_zero) 
                                      (abst_mult (abst_quotient x y) y)))) 
                             v_Vld v_Vpd) v_Vud) abst_zero_is_neutral))))) 
          ((__G_1_1_1_1_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (abst_equal x 
                     (abst_plus (abst_mult (abst_quotient x y) y) 
                        (abst_remainder x y))))) =>
            (__G_1_1_1_2_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP (abst_equal (abst_remainder x y) abst_zero))) =>
             zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal x 
                        (abst_plus (abst_mult (abst_quotient x y) y) 
                           abst_zero)))) 
               (v_Vkc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal x 
                               (abst_plus (abst_mult (abst_quotient x y) y) 
                                  abst_zero)))))) =>
                zen.Rcut 
                  (zen.and (zen.not (zen.triangle (zen.equal abst_T x x))) 
                     (zen.not (zen.triangle (focal.is_true (abst_equal x x))))) 
                  (v_Vlc:
                   (zen.proof 
                      (zen.and 
                         (zen.not (zen.triangle (zen.equal abst_T x x))) 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_equal x x)))))) =>
                   zen.Rand (zen.not (zen.triangle (zen.equal abst_T x x))) 
                     (zen.not (zen.triangle (focal.is_true (abst_equal x x)))) 
                     (v_Vmc:
                      (zen.proof 
                         (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                      v_Vnc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_equal x x))))) =>
                      zen.Rnoteq abst_T x v_Vmc) v_Vlc) 
                  (v_Voc:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.not (zen.triangle (zen.equal abst_T x x))) 
                            (zen.not 
                               (zen.triangle (focal.is_true (abst_equal x x))))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_plus (abst_mult (abst_quotient x y) y) 
                              (abst_remainder x y)) 
                           (abst_plus (abst_mult (abst_quotient x y) y) 
                              abst_zero))) 
                     (v_Vpc:
                      (zen.proof 
                         (zen.triangle 
                            (zen.equal abst_T 
                               (abst_plus (abst_mult (abst_quotient x y) y) 
                                  (abst_remainder x y)) 
                               (abst_plus (abst_mult (abst_quotient x y) y) 
                                  abst_zero)))) =>
                      zen.Rsubst basics.bool__t 
                        (v_Vqc:(zen.term basics.bool__t) =>
                         zen.triangle (focal.is_true v_Vqc)) 
                        (abst_equal x 
                           (abst_plus (abst_mult (abst_quotient x y) y) 
                              (abst_remainder x y))) 
                        (abst_equal x 
                           (abst_plus (abst_mult (abst_quotient x y) y) 
                              abst_zero)) 
                        (v_Vrc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal x 
                                        (abst_plus 
                                           (abst_mult (abst_quotient x y) y) 
                                           (abst_remainder x y))) 
                                     (abst_equal x 
                                        (abst_plus 
                                           (abst_mult (abst_quotient x y) y) 
                                           abst_zero)))))) =>
                         zen.Rsubst abst_T 
                           (v_Vsc:(zen.term abst_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal v_Vsc 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          (abst_remainder x y))) 
                                    (abst_equal x 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          abst_zero))))) x x 
                           (v_Vmc:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                            zen.Rnotand 
                              (zen.not (zen.triangle (zen.equal abst_T x x))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x x)))) 
                              (v_Vtc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle (zen.equal abst_T x x))))) =>
                               zen.Rnotnot 
                                 (zen.triangle (zen.equal abst_T x x)) 
                                 (v_Vuc:
                                  (zen.proof 
                                     (zen.triangle (zen.equal abst_T x x))) =>
                                  zen.Rcut 
                                    (zen.triangle (zen.equal abst_T x x)) 
                                    (v_Vuc:
                                     (zen.proof 
                                        (zen.triangle (zen.equal abst_T x x))) =>
                                     zen.Rsubst abst_T 
                                       (v_Vvc:(zen.term abst_T) =>
                                        zen.triangle 
                                          (zen.equal abst_T v_Vvc x)) x x 
                                       (v_Vmc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal abst_T x x)) v_Vuc 
                                          v_Vmc) 
                                       (v_Vuc:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T x x))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vwc:(zen.term abst_T) =>
                                           zen.triangle 
                                             (zen.equal abst_T x v_Vwc)) x x 
                                          (v_Vmc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T x x)))) =>
                                           zen.Rnoteq abst_T x v_Vmc) 
                                          (v_Vuc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T x x))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (zen.equal abst_T x x)) 
                                             v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T x x)))) =>
                                     zen.Rnoteq abst_T x v_Vmc)) v_Vtc) 
                              (v_Vxc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x x)))))) =>
                               zen.Rnotnot 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal x x))) 
                                 (v_Vyc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal x x)))) =>
                                  zen.Rall abst_T 
                                    (v_Vzc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vzc v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vzc v_Vbd))))))) 
                                    x 
                                    (v_Vcd:
                                     (zen.proof 
                                        (zen.forall abst_T 
                                           (v_Vad:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vbd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x v_Vad))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vad 
                                                             v_Vbd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x v_Vbd)))))))) =>
                                     zen.Rall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vbd)))))) 
                                       x 
                                       (v_Vdd:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vbd:(zen.term abst_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x x))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x v_Vbd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x v_Vbd))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x x))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x v_Vbd))))) 
                                          (abst_plus 
                                             (abst_mult (abst_quotient x y) y) 
                                             (abst_remainder x y)) 
                                          (v_Ved:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal x x))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                (abst_remainder 
                                                                   x y))))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                (abst_remainder 
                                                                   x y)))))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x x))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            (abst_remainder 
                                                               x y))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            (abst_remainder 
                                                               x y)))))) 
                                             (v_Vnc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x x))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x x))) 
                                                v_Vyc v_Vnc) 
                                             (v_Vfd:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                (abst_remainder 
                                                                   x y))))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                (abst_remainder 
                                                                   x y))))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            (abst_remainder 
                                                               x y))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            (abst_remainder 
                                                               x y))))) 
                                                (v_Vgd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                   (abst_remainder 
                                                                    x y))))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  (abst_quotient 
                                                                    x y) y) 
                                                               (abst_remainder 
                                                                  x y))))) 
                                                   __G_1_1_1_1_LEMMA v_Vgd) 
                                                (__G_1_1_1_1_LEMMA:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal x 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                (abst_remainder 
                                                                   x y)))))) =>
                                                 zen.Rsubst basics.bool__t 
                                                   (v_Vqc:
                                                    (zen.term basics.bool__t) =>
                                                    zen.triangle 
                                                      (focal.is_true v_Vqc)) 
                                                   (abst_equal x 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y) 
                                                         (abst_remainder x y))) 
                                                   (abst_equal x 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y) 
                                                         abst_zero)) 
                                                   (v_Vrc:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   x 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    (abst_remainder 
                                                                    x y))) 
                                                                (abst_equal 
                                                                   x 
                                                                   (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))))) =>
                                                    zen.Rsubst abst_T 
                                                      (v_Vsc:
                                                       (zen.term abst_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  v_Vsc 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    (abst_remainder 
                                                                    x y))) 
                                                               (abst_equal x 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero))))) 
                                                      x x 
                                                      (v_Vmc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T x x)))) =>
                                                       zen.Rnoteq abst_T x 
                                                         v_Vmc) 
                                                      (v_Vrc:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    (abst_remainder 
                                                                    x y))) 
                                                                   (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vhd:
                                                          (zen.term abst_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    x v_Vhd) 
                                                                  (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero))))) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            (abst_remainder 
                                                               x y)) 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero) 
                                                         (v_Vid:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    (abst_remainder 
                                                                    x y)) 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    (abst_remainder 
                                                                    x y)) 
                                                                  (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero))) 
                                                            v_Vpc v_Vid) 
                                                         (v_Vjd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)) 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))))) =>
                                                          zen.Rnoteq 
                                                            basics.bool__t 
                                                            (abst_equal x 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                  abst_zero)) 
                                                            v_Vjd) v_Vrc) 
                                                      v_Vrc) 
                                                   (v_Vkd:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                   abst_zero))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal x 
                                                               (abst_plus 
                                                                  (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                  abst_zero)))) 
                                                      v_Vkd v_Vkc) 
                                                   __G_1_1_1_1_LEMMA) v_Vfd) 
                                             v_Ved) v_Vdd) v_Vcd) 
                                    abst_equal_transitive) v_Vxc) v_Voc) 
                           (v_Vrc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_equal x 
                                           (abst_plus 
                                              (abst_mult (abst_quotient x y) 
                                                 y) (abst_remainder x y))) 
                                        (abst_equal x 
                                           (abst_plus 
                                              (abst_mult (abst_quotient x y) 
                                                 y) abst_zero)))))) =>
                            zen.Rsubst abst_T 
                              (v_Vld:(zen.term abst_T) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal x v_Vld) 
                                       (abst_equal x 
                                          (abst_plus 
                                             (abst_mult (abst_quotient x y) y) 
                                             abst_zero))))) 
                              (abst_plus (abst_mult (abst_quotient x y) y) 
                                 (abst_remainder x y)) 
                              (abst_plus (abst_mult (abst_quotient x y) y) 
                                 abst_zero) 
                              (v_Vid:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_plus 
                                              (abst_mult (abst_quotient x y) 
                                                 y) (abst_remainder x y)) 
                                           (abst_plus 
                                              (abst_mult (abst_quotient x y) 
                                                 y) abst_zero))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          (abst_remainder x y)) 
                                       (abst_plus 
                                          (abst_mult (abst_quotient x y) y) 
                                          abst_zero))) v_Vpc v_Vid) 
                              (v_Vjd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_equal x 
                                              (abst_plus 
                                                 (abst_mult 
                                                    (abst_quotient x y) y) 
                                                 abst_zero)) 
                                           (abst_equal x 
                                              (abst_plus 
                                                 (abst_mult 
                                                    (abst_quotient x y) y) 
                                                 abst_zero)))))) =>
                               zen.Rnoteq basics.bool__t 
                                 (abst_equal x 
                                    (abst_plus 
                                       (abst_mult (abst_quotient x y) y) 
                                       abst_zero)) v_Vjd) v_Vrc) v_Vrc) 
                        (v_Vkd:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x 
                                     (abst_plus 
                                        (abst_mult (abst_quotient x y) y) 
                                        abst_zero))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal x 
                                    (abst_plus 
                                       (abst_mult (abst_quotient x y) y) 
                                       abst_zero)))) v_Vkd v_Vkc) 
                        __G_1_1_1_1_LEMMA) 
                     (v_Vid:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_plus 
                                     (abst_mult (abst_quotient x y) y) 
                                     (abst_remainder x y)) 
                                  (abst_plus 
                                     (abst_mult (abst_quotient x y) y) 
                                     abst_zero))))) =>
                      zen.Rcut 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_plus 
                                    (abst_mult (abst_quotient x y) y) 
                                    (abst_remainder x y)) 
                                 (abst_plus 
                                    (abst_mult (abst_quotient x y) y) 
                                    abst_zero)))) 
                        (v_Vmd:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_plus 
                                        (abst_mult (abst_quotient x y) y) 
                                        (abst_remainder x y)) 
                                     (abst_plus 
                                        (abst_mult (abst_quotient x y) y) 
                                        abst_zero))))) =>
                         zen.Rall abst_T 
                           (v_Vzc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vzc v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vzc v_Vbd))))))) 
                           x 
                           (v_Vcd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x v_Vad))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vad v_Vbd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x v_Vbd)))))))) =>
                            zen.Rall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x v_Vbd)))))) 
                              (abst_plus (abst_mult (abst_quotient x y) y) 
                                 (abst_remainder x y)) 
                              (v_Vnd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus 
                                                    (abst_mult 
                                                       (abst_quotient x y) y) 
                                                    (abst_remainder x y))))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) 
                                                       (abst_remainder x y)) 
                                                    v_Vbd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x v_Vbd))))))) =>
                               zen.Rall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                (abst_remainder x y))))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   (abst_remainder x y)) 
                                                v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x v_Vbd))))) 
                                 (abst_plus 
                                    (abst_mult (abst_quotient x y) y) 
                                    abst_zero) 
                                 (v_Vod:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x 
                                                 (abst_plus 
                                                    (abst_mult 
                                                       (abst_quotient x y) y) 
                                                    (abst_remainder x y))))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) 
                                                       (abst_remainder x y)) 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) abst_zero)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) abst_zero))))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal x 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                (abst_remainder x y))))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   (abst_remainder x y)) 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero))))) 
                                    (v_Vgd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) 
                                                       (abst_remainder x y))))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   (abst_remainder x y))))) 
                                       __G_1_1_1_1_LEMMA v_Vgd) 
                                    (v_Vpd:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) 
                                                       (abst_remainder x y)) 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) abst_zero)))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) abst_zero)))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   (abst_remainder x y)) 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal x 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero)))) 
                                       (v_Vqd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             (abst_quotient 
                                                                x y) y) 
                                                          (abst_remainder x y)) 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             (abst_quotient 
                                                                x y) y) 
                                                          abst_zero)))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_plus 
                                                      (abst_mult 
                                                         (abst_quotient x y) 
                                                         y) 
                                                      (abst_remainder x y)) 
                                                   (abst_plus 
                                                      (abst_mult 
                                                         (abst_quotient x y) 
                                                         y) abst_zero)))) 
                                          v_Vmd v_Vqd) 
                                       (v_Vkd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal x 
                                                    (abst_plus 
                                                       (abst_mult 
                                                          (abst_quotient x y) 
                                                          y) abst_zero))))) =>
                                        zen.Rsubst basics.bool__t 
                                          (v_Vrd:(zen.term basics.bool__t) =>
                                           zen.triangle (focal.is_true v_Vrd)) 
                                          (abst_equal x 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                abst_zero)) 
                                          (abst_equal x 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                abst_zero)) 
                                          (v_Vjd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal x 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                (abst_quotient 
                                                                   x y) y) 
                                                             abst_zero)) 
                                                       (abst_equal x 
                                                          (abst_plus 
                                                             (abst_mult 
                                                                (abst_quotient 
                                                                   x y) y) 
                                                             abst_zero)))))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vsd:(zen.term abst_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal v_Vsd 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero)) 
                                                      (abst_equal x 
                                                         (abst_plus 
                                                            (abst_mult 
                                                               (abst_quotient 
                                                                  x y) y) 
                                                            abst_zero))))) x 
                                             x 
                                             (v_Vmc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x x)))) =>
                                              zen.Rnotand 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T x x))) 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x x)))) 
                                                (v_Vtc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x x))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (zen.equal abst_T x x)) 
                                                   (v_Vuc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             x x))) =>
                                                    zen.Reqsym abst_T x x 
                                                      v_Vuc v_Vmc) v_Vtc) 
                                                (v_Vxc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   x x)))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal x x))) 
                                                   (v_Vyc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal x x)))) =>
                                                    zen.Rall abst_T 
                                                      (v_Vzc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                      x 
                                                      (v_Vcd:
                                                       (zen.proof 
                                                          (zen.forall abst_T 
                                                             (v_Vad:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vbd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vad))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd)))))))) =>
                                                       zen.Rall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd)))))) 
                                                         x 
                                                         (v_Vdd:
                                                          (zen.proof 
                                                             (zen.forall 
                                                                abst_T 
                                                                (v_Vbd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))))))) =>
                                                          zen.Rall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x v_Vbd))))) 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  (abst_quotient 
                                                                    x y) y) 
                                                               abst_zero) 
                                                            (v_Vtd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero))))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero))))) 
                                                               (v_Vnc:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x x))) 
                                                                  v_Vyc v_Vnc) 
                                                               (v_Vud:
                                                                (zen.proof 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))))) =>
                                                                zen.Rimply 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))) 
                                                                  (v_Vkc:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                  (v_Vkd:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    x 
                                                                    (abst_plus 
                                                                    (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                    abst_zero)))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                  v_Vud) 
                                                               v_Vtd) v_Vdd) 
                                                         v_Vcd) 
                                                      abst_equal_transitive) 
                                                   v_Vxc) v_Voc) 
                                             (v_Vjd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal x 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                abst_zero)) 
                                                          (abst_equal x 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                abst_zero)))))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vld:(zen.term abst_T) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal x v_Vld) 
                                                         (abst_equal x 
                                                            (abst_plus 
                                                               (abst_mult 
                                                                  (abst_quotient 
                                                                    x y) y) 
                                                               abst_zero))))) 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero) 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero) 
                                                (v_Vvd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                abst_zero) 
                                                             (abst_plus 
                                                                (abst_mult 
                                                                   (abst_quotient 
                                                                    x y) y) 
                                                                abst_zero))))) =>
                                                 zen.Rnoteq abst_T 
                                                   (abst_plus 
                                                      (abst_mult 
                                                         (abst_quotient x y) 
                                                         y) abst_zero) v_Vvd) 
                                                (v_Vjd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal x 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                   abst_zero)) 
                                                             (abst_equal x 
                                                                (abst_plus 
                                                                   (abst_mult 
                                                                    (abst_quotient 
                                                                    x y) y) 
                                                                   abst_zero)))))) =>
                                                 zen.Rnoteq basics.bool__t 
                                                   (abst_equal x 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y) 
                                                         abst_zero)) v_Vjd) 
                                                v_Vjd) v_Vjd) 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal x 
                                                       (abst_plus 
                                                          (abst_mult 
                                                             (abst_quotient 
                                                                x y) y) 
                                                          abst_zero))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal x 
                                                      (abst_plus 
                                                         (abst_mult 
                                                            (abst_quotient x 
                                                               y) y) 
                                                         abst_zero)))) v_Vkd 
                                             v_Vkc) v_Vkd) v_Vpd) v_Vod) 
                                 v_Vnd) v_Vcd) abst_equal_transitive) 
                        (v_Vqd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_plus 
                                           (abst_mult (abst_quotient x y) y) 
                                           (abst_remainder x y)) 
                                        (abst_plus 
                                           (abst_mult (abst_quotient x y) y) 
                                           abst_zero)))))) =>
                         zen.Rall abst_T 
                           (v_Vzc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vzc v_Vad))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vbd v_Vzc) 
                                             (abst_plus v_Vbd v_Vad))))))) 
                           (abst_remainder x y) 
                           (v_Vwd:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vad:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_remainder x y) v_Vad))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus v_Vbd 
                                                    (abst_remainder x y)) 
                                                 (abst_plus v_Vbd v_Vad)))))))) =>
                            zen.Rall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_remainder x y) 
                                             v_Vad))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vbd 
                                                (abst_remainder x y)) 
                                             (abst_plus v_Vbd v_Vad)))))) 
                              abst_zero 
                              (v_Vxd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_remainder x y) 
                                                 abst_zero))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus v_Vbd 
                                                    (abst_remainder x y)) 
                                                 (abst_plus v_Vbd abst_zero))))))) =>
                               zen.Rall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_remainder x y) 
                                             abst_zero))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus v_Vbd 
                                                (abst_remainder x y)) 
                                             (abst_plus v_Vbd abst_zero))))) 
                                 (abst_mult (abst_quotient x y) y) 
                                 (v_Vyd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_remainder x y) 
                                                 abst_zero))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult 
                                                       (abst_quotient x y) y) 
                                                    (abst_remainder x y)) 
                                                 (abst_plus 
                                                    (abst_mult 
                                                       (abst_quotient x y) y) 
                                                    abst_zero)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_remainder x y) 
                                             abst_zero))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                (abst_remainder x y)) 
                                             (abst_plus 
                                                (abst_mult 
                                                   (abst_quotient x y) y) 
                                                abst_zero)))) 
                                    (v_Vzd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_remainder x y) 
                                                    abst_zero))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_remainder x y) 
                                                abst_zero))) 
                                       __G_1_1_1_2_LEMMA v_Vzd) 
                                    (v_Vmd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_plus 
                                                    (abst_mult 
                                                       (abst_quotient x y) y) 
                                                    (abst_remainder x y)) 
                                                 (abst_plus 
                                                    (abst_mult 
                                                       (abst_quotient x y) y) 
                                                    abst_zero))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   (abst_remainder x y)) 
                                                (abst_plus 
                                                   (abst_mult 
                                                      (abst_quotient x y) y) 
                                                   abst_zero)))) v_Vmd v_Vqd) 
                                    v_Vyd) v_Vxd) v_Vwd) 
                           abst_plus_right_substitution_rule))))) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_remainder x y) abst_zero))) 
                 (v_Vac:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_remainder x y) abst_zero))))) =>
                  zen.Rall abst_T 
                    (v_Vbc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vbc abst_zero))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal abst_zero v_Vbc))))) 
                    (abst_remainder x y) 
                    (v_Vcc:
                     (zen.proof 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_is_zero (abst_remainder x y)))) 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_remainder x y) 
                                       abst_zero))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_remainder x y))))))) =>
                     zen.Requiv 
                       (zen.triangle 
                          (focal.is_true (abst_is_zero (abst_remainder x y)))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_remainder x y) abst_zero))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero (abst_remainder x y))))) 
                       (v_Vdc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_is_zero (abst_remainder x y)))))) =>
                        v_Vec:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_remainder x y) 
                                          abst_zero))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal abst_zero 
                                          (abst_remainder x y))))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_is_zero (abst_remainder x y)))) H_r 
                          v_Vdc) 
                       (H_r:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_is_zero (abst_remainder x y))))) =>
                        v_Vfc:
                        (zen.proof 
                           (zen.or 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_remainder x y) 
                                       abst_zero))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_remainder x y)))))) =>
                        zen.Ror 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_remainder x y) abst_zero))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal abst_zero (abst_remainder x y)))) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_remainder x y) 
                                       abst_zero)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_remainder x y) abst_zero))) 
                             v_Vgc v_Vac) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal abst_zero 
                                       (abst_remainder x y))))) =>
                           zen.Rall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vic:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vbc v_Vic))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vic v_Vbc))))) 
                             abst_zero 
                             (v_Vjc:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vic:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero v_Vic))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vic abst_zero)))))) =>
                              zen.Rall abst_T 
                                (v_Vic:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero v_Vic))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal v_Vic abst_zero)))) 
                                (abst_remainder x y) 
                                (v_Vkc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal abst_zero 
                                                (abst_remainder x y)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_remainder x y) 
                                                abst_zero))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal abst_zero 
                                            (abst_remainder x y)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_remainder x y) 
                                            abst_zero))) 
                                   (v_Vlc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal abst_zero 
                                                   (abst_remainder x y)))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal abst_zero 
                                               (abst_remainder x y)))) v_Vhc 
                                      v_Vlc) 
                                   (v_Vgc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_remainder x y) 
                                                abst_zero)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_remainder x y) 
                                               abst_zero))) v_Vgc v_Vac) 
                                   v_Vkc) v_Vjc) abst_equal_symmetric) v_Vfc) 
                       v_Vcc) abst_is_zero_spec))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal x 
                         (abst_plus (abst_mult (abst_quotient x y) y) 
                            (abst_remainder x y))))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal x 
                                (abst_plus (abst_mult (abst_quotient x y) y) 
                                   (abst_remainder x y))))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.or 
                         (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal v_Vac 
                                  (abst_plus 
                                     (abst_mult (abst_quotient v_Vac v_Vbc) 
                                        v_Vbc) (abst_remainder v_Vac v_Vbc))))))) 
                   x 
                   (v_Vcc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_is_zero v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x 
                                      (abst_plus 
                                         (abst_mult (abst_quotient x v_Vbc) 
                                            v_Vbc) (abst_remainder x v_Vbc)))))))) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.or 
                         (zen.triangle (focal.is_true (abst_is_zero v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal x 
                                  (abst_plus 
                                     (abst_mult (abst_quotient x v_Vbc) v_Vbc) 
                                     (abst_remainder x v_Vbc)))))) y 
                      (v_Vdc:
                       (zen.proof 
                          (zen.or 
                             (zen.triangle (focal.is_true (abst_is_zero y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x 
                                      (abst_plus 
                                         (abst_mult (abst_quotient x y) y) 
                                         (abst_remainder x y))))))) =>
                       zen.Ror 
                         (zen.triangle (focal.is_true (abst_is_zero y))) 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal x 
                                  (abst_plus 
                                     (abst_mult (abst_quotient x y) y) 
                                     (abst_remainder x y))))) 
                         (v_Vec:
                          (zen.proof 
                             (zen.triangle (focal.is_true (abst_is_zero y)))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (abst_is_zero y))) 
                            v_Vec H_0) 
                         (v_Vfc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal x 
                                      (abst_plus 
                                         (abst_mult (abst_quotient x y) y) 
                                         (abst_remainder x y)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal x 
                                     (abst_plus 
                                        (abst_mult (abst_quotient x y) y) 
                                        (abst_remainder x y))))) v_Vfc v_Vzb) 
                         v_Vdc) v_Vcc) abst_euclidean_relation))))).

def bezout_res__t
  :=
  __var_a:cc.uT => weak_structures_externals.bezout_res __var_a.

def cr_br :
  __var_a:cc.uT ->
  (cc.eT __var_a) ->
  (cc.eT __var_a) -> (cc.eT __var_a) -> cc.eT (bezout_res__t __var_a)
  :=
  __var_a:cc.uT => weak_structures_externals.cr_br __var_a.

def gcd :
  __var_a:cc.uT -> (cc.eT (bezout_res__t __var_a)) -> cc.eT __var_a
  :=
  __var_a:cc.uT => weak_structures_externals.br_gcd __var_a.

def coef1 :
  __var_a:cc.uT -> (cc.eT (bezout_res__t __var_a)) -> cc.eT __var_a
  :=
  __var_a:cc.uT => weak_structures_externals.br_coef1 __var_a.

def coef2 :
  __var_a:cc.uT -> (cc.eT (bezout_res__t __var_a)) -> cc.eT __var_a
  :=
  __var_a:cc.uT => weak_structures_externals.br_coef2 __var_a.

