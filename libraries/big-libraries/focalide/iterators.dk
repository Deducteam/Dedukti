#NAME iterators.

def well_wrapper :
  __var_a:cc.uT ->
  ((cc.eT __var_a) -> (cc.eT __var_a) -> cc.eT basics.bool__t) ->
  dk_logic.Prop
  :=
  __var_a:cc.uT =>
  f:((cc.eT __var_a) -> (cc.eT __var_a) -> dk_bool.Bool) => dk_logic.True.

Utils__me_as_species : A_T:cc.uT -> Type.

Utils__mk_record :
  A_T:cc.uT ->
  Utils__rf_T:cc.uT ->
  Utils__rf_append:((cc.eT (basics.list__t A_T)) ->
                    (cc.eT (basics.list__t A_T)) ->
                    cc.eT (basics.list__t A_T)) ->
  Utils__rf_length:((cc.eT (basics.list__t A_T)) -> cc.eT basics.int__t) ->
  Utils__rf_mem:((cc.eT (basics.list__t A_T)) ->
                 (cc.eT A_T) -> cc.eT basics.bool__t) ->
  Utils__rf_rm:((cc.eT (basics.list__t A_T)) ->
                (cc.eT A_T) -> cc.eT (basics.list__t A_T)) ->
  Utils__rf_append_left_neutral:(dk_logic.eP 
                                   (dk_logic.forall (basics.list__t A_T) 
                                      (l:(cc.eT (basics.list__t A_T)) =>
                                       dk_logic.ebP 
                                         (basics._equal_ 
                                            (basics.list__t A_T) 
                                            (Utils__rf_append 
                                               (builtins.nil A_T) l) l)))) ->
  Utils__rf_append_neutral:((cc.eT (basics.list__t A_T)) -> dk_logic.Prop) ->
  Utils__rf_append_right_neutral:(dk_logic.eP 
                                    (dk_logic.forall (basics.list__t A_T) 
                                       (l:(cc.eT (basics.list__t A_T)) =>
                                        dk_logic.ebP 
                                          (basics._equal_ 
                                             (basics.list__t A_T) 
                                             (Utils__rf_append l 
                                                (builtins.nil A_T)) l)))) ->
  Utils__rf_append_spec:(dk_logic.eP 
                           (dk_logic.forall (basics.list__t A_T) 
                              (l1:(cc.eT (basics.list__t A_T)) =>
                               dk_logic.forall (basics.list__t A_T) 
                                 (l2:(cc.eT (basics.list__t A_T)) =>
                                  dk_logic.forall A_T 
                                    (a:(cc.eT A_T) =>
                                     dk_logic.eqv 
                                       (dk_logic.or 
                                          (dk_logic.ebP (Utils__rf_mem l1 a)) 
                                          (dk_logic.ebP (Utils__rf_mem l2 a))) 
                                       (dk_logic.ebP 
                                          (Utils__rf_mem 
                                             (Utils__rf_append l1 l2) a))))))) ->
  Utils__rf_mem_empty_spec:(dk_logic.eP 
                              (dk_logic.forall A_T 
                                 (x:(cc.eT A_T) =>
                                  dk_logic.ebP 
                                    (basics._tilda__tilda_ 
                                       (Utils__rf_mem (builtins.nil A_T) x))))) ->
  Utils__rf_mem_spec:(dk_logic.eP 
                        (dk_logic.forall (basics.list__t A_T) 
                           (l:(cc.eT (basics.list__t A_T)) =>
                            dk_logic.forall A_T 
                              (e:(cc.eT A_T) =>
                               dk_logic.forall A_T 
                                 (h:(cc.eT A_T) =>
                                  dk_logic.eqv 
                                    (dk_logic.or 
                                       (dk_logic.ebP (Utils__rf_mem l e)) 
                                       (dk_logic.ebP (basics._equal_ A_T e h))) 
                                    (dk_logic.ebP 
                                       (Utils__rf_mem 
                                          (builtins.cons A_T h l) e))))))) ->
  Utils__rf_parse:((cc.eT basics.string__t) -> cc.eT Utils__rf_T) ->
  Utils__rf_print:((cc.eT Utils__rf_T) -> cc.eT basics.string__t) ->
  Utils__rf_nil_unique:(dk_logic.eP 
                          (dk_logic.forall (basics.list__t A_T) 
                             (n:(cc.eT (basics.list__t A_T)) =>
                              dk_logic.imp (Utils__rf_append_neutral n) 
                                (dk_logic.ebP 
                                   (basics._equal_ (basics.list__t A_T) n 
                                      (builtins.nil A_T)))))) ->
  Utils__rf_nil_neutral:(dk_logic.eP 
                           (Utils__rf_append_neutral (builtins.nil A_T))) ->
  Utils__rf_mem_cons_head:(dk_logic.eP 
                             (dk_logic.forall A_T 
                                (x:(cc.eT A_T) =>
                                 dk_logic.forall (basics.list__t A_T) 
                                   (l:(cc.eT (basics.list__t A_T)) =>
                                    dk_logic.ebP 
                                      (Utils__rf_mem (builtins.cons A_T x l) 
                                         x))))) ->
  Utils__rf_mem_cons_tail:(dk_logic.eP 
                             (dk_logic.forall A_T 
                                (x:(cc.eT A_T) =>
                                 dk_logic.forall A_T 
                                   (y:(cc.eT A_T) =>
                                    dk_logic.forall (basics.list__t A_T) 
                                      (l:(cc.eT (basics.list__t A_T)) =>
                                       dk_logic.imp 
                                         (dk_logic.ebP (Utils__rf_mem l x)) 
                                         (dk_logic.ebP 
                                            (Utils__rf_mem 
                                               (builtins.cons A_T y l) x))))))) ->
  Utils__rf_not_mem_empty:(dk_logic.eP 
                             (dk_logic.forall (basics.list__t A_T) 
                                (l:(cc.eT (basics.list__t A_T)) =>
                                 dk_logic.imp 
                                   (dk_logic.forall A_T 
                                      (x:(cc.eT A_T) =>
                                       dk_logic.ebP 
                                         (basics._equal_ basics.bool__t 
                                            (Utils__rf_mem l x) dk_bool.false))) 
                                   (dk_logic.ebP 
                                      (basics._equal_ (basics.list__t A_T) l 
                                         (builtins.nil A_T)))))) ->
  Utils__rf_mem_contains:(dk_logic.eP 
                            (dk_logic.forall (basics.list__t A_T) 
                               (l:(cc.eT (basics.list__t A_T)) =>
                                dk_logic.eqv 
                                  (dk_logic.ebP 
                                     (basics._tilda__tilda_ 
                                        (basics._equal_ (basics.list__t A_T) 
                                           l (builtins.nil A_T)))) 
                                  (dk_logic.exists A_T 
                                     (x:(cc.eT A_T) =>
                                      dk_logic.ebP (Utils__rf_mem l x)))))) ->
  Utils__me_as_species A_T.

def proj_Utils__rf_T :
  A_T:cc.uT -> record:(Utils__me_as_species A_T) -> cc.uT.

[Utils__rf_T]
  proj_Utils__rf_T _ (Utils__mk_record _ Utils__rf_T _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Utils__rf_T.

def proj_Utils__rf_append :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  (cc.eT (basics.list__t A_T)) ->
  (cc.eT (basics.list__t A_T)) -> cc.eT (basics.list__t A_T).

[Utils__rf_append]
  proj_Utils__rf_append _ (Utils__mk_record _ _ Utils__rf_append _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Utils__rf_append.

def proj_Utils__rf_length :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  (cc.eT (basics.list__t A_T)) -> cc.eT basics.int__t.

[Utils__rf_length]
  proj_Utils__rf_length _ (Utils__mk_record _ _ _ Utils__rf_length _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  Utils__rf_length.

def proj_Utils__rf_mem :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  (cc.eT (basics.list__t A_T)) -> (cc.eT A_T) -> cc.eT basics.bool__t.

[Utils__rf_mem]
  proj_Utils__rf_mem _ (Utils__mk_record _ _ _ _ Utils__rf_mem _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _)
  -->
  Utils__rf_mem.

def proj_Utils__rf_rm :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  (cc.eT (basics.list__t A_T)) -> (cc.eT A_T) -> cc.eT (basics.list__t A_T).

[Utils__rf_rm]
  proj_Utils__rf_rm _ (Utils__mk_record _ _ _ _ _ Utils__rf_rm _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _)
  -->
  Utils__rf_rm.

def proj_Utils__rf_append_left_neutral :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t A_T) 
       (l:(cc.eT (basics.list__t A_T)) =>
        dk_logic.ebP 
          (basics._equal_ (basics.list__t A_T) 
             (proj_Utils__rf_append A_T record (builtins.nil A_T) l) l))).

[Utils__rf_append_left_neutral]
  proj_Utils__rf_append_left_neutral _ (Utils__mk_record _ _ _ _ _ _ 
    Utils__rf_append_left_neutral _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Utils__rf_append_left_neutral.

def proj_Utils__rf_append_neutral :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  (cc.eT (basics.list__t A_T)) -> dk_logic.Prop.

[Utils__rf_append_neutral]
  proj_Utils__rf_append_neutral _ (Utils__mk_record _ _ _ _ _ _ _ 
    Utils__rf_append_neutral _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Utils__rf_append_neutral.

def proj_Utils__rf_append_right_neutral :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t A_T) 
       (l:(cc.eT (basics.list__t A_T)) =>
        dk_logic.ebP 
          (basics._equal_ (basics.list__t A_T) 
             (proj_Utils__rf_append A_T record l (builtins.nil A_T)) l))).

[Utils__rf_append_right_neutral]
  proj_Utils__rf_append_right_neutral _ (Utils__mk_record _ _ _ _ _ _ _ _ 
    Utils__rf_append_right_neutral _ _ _ _ _ _ _ _ _ _ _)
  -->
  Utils__rf_append_right_neutral.

def proj_Utils__rf_append_spec :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t A_T) 
       (l1:(cc.eT (basics.list__t A_T)) =>
        dk_logic.forall (basics.list__t A_T) 
          (l2:(cc.eT (basics.list__t A_T)) =>
           dk_logic.forall A_T 
             (a:(cc.eT A_T) =>
              dk_logic.eqv 
                (dk_logic.or 
                   (dk_logic.ebP (proj_Utils__rf_mem A_T record l1 a)) 
                   (dk_logic.ebP (proj_Utils__rf_mem A_T record l2 a))) 
                (dk_logic.ebP 
                   (proj_Utils__rf_mem A_T record 
                      (proj_Utils__rf_append A_T record l1 l2) a)))))).

[Utils__rf_append_spec]
  proj_Utils__rf_append_spec _ (Utils__mk_record _ _ _ _ _ _ _ _ _ 
    Utils__rf_append_spec _ _ _ _ _ _ _ _ _ _)
  -->
  Utils__rf_append_spec.

def proj_Utils__rf_mem_empty_spec :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.ebP 
          (basics._tilda__tilda_ 
             (proj_Utils__rf_mem A_T record (builtins.nil A_T) x)))).

[Utils__rf_mem_empty_spec]
  proj_Utils__rf_mem_empty_spec _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ 
    Utils__rf_mem_empty_spec _ _ _ _ _ _ _ _ _)
  -->
  Utils__rf_mem_empty_spec.

def proj_Utils__rf_mem_spec :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t A_T) 
       (l:(cc.eT (basics.list__t A_T)) =>
        dk_logic.forall A_T 
          (e:(cc.eT A_T) =>
           dk_logic.forall A_T 
             (h:(cc.eT A_T) =>
              dk_logic.eqv 
                (dk_logic.or 
                   (dk_logic.ebP (proj_Utils__rf_mem A_T record l e)) 
                   (dk_logic.ebP (basics._equal_ A_T e h))) 
                (dk_logic.ebP 
                   (proj_Utils__rf_mem A_T record (builtins.cons A_T h l) e)))))).

[Utils__rf_mem_spec]
  proj_Utils__rf_mem_spec _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ 
    Utils__rf_mem_spec _ _ _ _ _ _ _ _)
  -->
  Utils__rf_mem_spec.

def proj_Utils__rf_parse :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  (cc.eT basics.string__t) -> cc.eT (proj_Utils__rf_T A_T record).

[Utils__rf_parse]
  proj_Utils__rf_parse _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ 
    Utils__rf_parse _ _ _ _ _ _ _)
  -->
  Utils__rf_parse.

def proj_Utils__rf_print :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  (cc.eT (proj_Utils__rf_T A_T record)) -> cc.eT basics.string__t.

[Utils__rf_print]
  proj_Utils__rf_print _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Utils__rf_print _ _ _ _ _ _)
  -->
  Utils__rf_print.

def proj_Utils__rf_nil_unique :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t A_T) 
       (n:(cc.eT (basics.list__t A_T)) =>
        dk_logic.imp (proj_Utils__rf_append_neutral A_T record n) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t A_T) n (builtins.nil A_T))))).

[Utils__rf_nil_unique]
  proj_Utils__rf_nil_unique _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Utils__rf_nil_unique _ _ _ _ _)
  -->
  Utils__rf_nil_unique.

def proj_Utils__rf_nil_neutral :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP (proj_Utils__rf_append_neutral A_T record (builtins.nil A_T)).

[Utils__rf_nil_neutral]
  proj_Utils__rf_nil_neutral _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ Utils__rf_nil_neutral _ _ _ _)
  -->
  Utils__rf_nil_neutral.

def proj_Utils__rf_mem_cons_head :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.forall (basics.list__t A_T) 
          (l:(cc.eT (basics.list__t A_T)) =>
           dk_logic.ebP 
             (proj_Utils__rf_mem A_T record (builtins.cons A_T x l) x)))).

[Utils__rf_mem_cons_head]
  proj_Utils__rf_mem_cons_head _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ Utils__rf_mem_cons_head _ _ _)
  -->
  Utils__rf_mem_cons_head.

def proj_Utils__rf_mem_cons_tail :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.forall A_T 
          (y:(cc.eT A_T) =>
           dk_logic.forall (basics.list__t A_T) 
             (l:(cc.eT (basics.list__t A_T)) =>
              dk_logic.imp 
                (dk_logic.ebP (proj_Utils__rf_mem A_T record l x)) 
                (dk_logic.ebP 
                   (proj_Utils__rf_mem A_T record (builtins.cons A_T y l) x)))))).

[Utils__rf_mem_cons_tail]
  proj_Utils__rf_mem_cons_tail _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ Utils__rf_mem_cons_tail _ _)
  -->
  Utils__rf_mem_cons_tail.

def proj_Utils__rf_not_mem_empty :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t A_T) 
       (l:(cc.eT (basics.list__t A_T)) =>
        dk_logic.imp 
          (dk_logic.forall A_T 
             (x:(cc.eT A_T) =>
              dk_logic.ebP 
                (basics._equal_ basics.bool__t 
                   (proj_Utils__rf_mem A_T record l x) dk_bool.false))) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t A_T) l (builtins.nil A_T))))).

[Utils__rf_not_mem_empty]
  proj_Utils__rf_not_mem_empty _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ Utils__rf_not_mem_empty _)
  -->
  Utils__rf_not_mem_empty.

def proj_Utils__rf_mem_contains :
  A_T:cc.uT ->
  record:(Utils__me_as_species A_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t A_T) 
       (l:(cc.eT (basics.list__t A_T)) =>
        dk_logic.eqv 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (basics._equal_ (basics.list__t A_T) l (builtins.nil A_T)))) 
          (dk_logic.exists A_T 
             (x:(cc.eT A_T) =>
              dk_logic.ebP (proj_Utils__rf_mem A_T record l x))))).

[Utils__rf_mem_contains]
  proj_Utils__rf_mem_contains _ (Utils__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ Utils__rf_mem_contains)
  -->
  Utils__rf_mem_contains.

def Utils__append :
  _p_A_T:cc.uT ->
  (cc.eT (basics.list__t _p_A_T)) ->
  (cc.eT (basics.list__t _p_A_T)) -> cc.eT (basics.list__t _p_A_T).

[l2, l1, _p_A_T]
  Utils__append _p_A_T l1 l2
  -->
  basics.match__nil _p_A_T (basics.list__t _p_A_T) l1 l2 
    (basics.match__cons _p_A_T (basics.list__t _p_A_T) l1 
       (pattern_var_0_:(cc.eT _p_A_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_A_T)) =>
        (h:(cc.eT _p_A_T) =>
         (q:(cc.eT (basics.list__t _p_A_T)) =>
          builtins.cons _p_A_T h 
            ((_p_A_T:cc.uT =>
              l1:(cc.eT (basics.list__t _p_A_T)) =>
              l2:(cc.eT (basics.list__t _p_A_T)) =>
              dk_builtins.call_by_value (basics.list__t _p_A_T) 
                (basics.list__t _p_A_T) 
                (dk_builtins.call_by_value (basics.list__t _p_A_T) 
                   (cc.Arrow (basics.list__t _p_A_T) (basics.list__t _p_A_T)) 
                   (Utils__append _p_A_T) l1) l2) _p_A_T q l2)) 
           pattern_var_1_) pattern_var_0_) 
       (dk_fail.fail (basics.list__t _p_A_T))).

def Utils__length :
  _p_A_T:cc.uT -> (cc.eT (basics.list__t _p_A_T)) -> cc.eT basics.int__t.

[l, _p_A_T]
  Utils__length _p_A_T l
  -->
  basics.match__nil _p_A_T basics.int__t l (dk_int.from_nat builtins.0) 
    (basics.match__cons _p_A_T basics.int__t l 
       (pattern_var_0_:(cc.eT _p_A_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_A_T)) =>
        (h:(cc.eT _p_A_T) =>
         (q:(cc.eT (basics.list__t _p_A_T)) =>
          basics._plus_ (dk_int.from_nat (builtins.S builtins.0)) 
            ((_p_A_T:cc.uT =>
              l:(cc.eT (basics.list__t _p_A_T)) =>
              dk_builtins.call_by_value (basics.list__t _p_A_T) 
                basics.int__t (Utils__length _p_A_T) l) _p_A_T q)) 
           pattern_var_1_) pattern_var_0_) (dk_fail.fail basics.int__t)).

def Utils__mem :
  _p_A_T:cc.uT ->
  (cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t.

[x, l, _p_A_T]
  Utils__mem _p_A_T l x
  -->
  basics.match__nil _p_A_T basics.bool__t l dk_bool.false 
    (basics.match__cons _p_A_T basics.bool__t l 
       (pattern_var_0_:(cc.eT _p_A_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_A_T)) =>
        (h:(cc.eT _p_A_T) =>
         (q:(cc.eT (basics.list__t _p_A_T)) =>
          basics._bar__bar_ (basics._equal_ _p_A_T h x) 
            ((_p_A_T:cc.uT =>
              l:(cc.eT (basics.list__t _p_A_T)) =>
              x:(cc.eT _p_A_T) =>
              dk_builtins.call_by_value _p_A_T basics.bool__t 
                (dk_builtins.call_by_value (basics.list__t _p_A_T) 
                   (cc.Arrow _p_A_T basics.bool__t) (Utils__mem _p_A_T) l) x) 
               _p_A_T q x)) pattern_var_1_) pattern_var_0_) 
       (dk_fail.fail basics.bool__t)).

def Utils__rm :
  _p_A_T:cc.uT ->
  (cc.eT (basics.list__t _p_A_T)) ->
  (cc.eT _p_A_T) -> cc.eT (basics.list__t _p_A_T).

[x, l, _p_A_T]
  Utils__rm _p_A_T l x
  -->
  basics.match__nil _p_A_T (basics.list__t _p_A_T) l (builtins.nil _p_A_T) 
    (basics.match__cons _p_A_T (basics.list__t _p_A_T) l 
       (pattern_var_0_:(cc.eT _p_A_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_A_T)) =>
        (h:(cc.eT _p_A_T) =>
         (q:(cc.eT (basics.list__t _p_A_T)) =>
          dk_bool.ite (basics.list__t _p_A_T) (basics._equal_ _p_A_T h x) q 
            (builtins.cons _p_A_T h 
               ((_p_A_T:cc.uT =>
                 l:(cc.eT (basics.list__t _p_A_T)) =>
                 x:(cc.eT _p_A_T) =>
                 dk_builtins.call_by_value _p_A_T (basics.list__t _p_A_T) 
                   (dk_builtins.call_by_value (basics.list__t _p_A_T) 
                      (cc.Arrow _p_A_T (basics.list__t _p_A_T)) 
                      (Utils__rm _p_A_T) l) x) _p_A_T q x))) pattern_var_1_) 
          pattern_var_0_) (dk_fail.fail (basics.list__t _p_A_T))).

def Utils__append_left_neutral :
  _p_A_T:cc.uT ->
  abst_append:((cc.eT (basics.list__t _p_A_T)) ->
               (cc.eT (basics.list__t _p_A_T)) ->
               cc.eT (basics.list__t _p_A_T)) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.ebP 
          (basics._equal_ (basics.list__t _p_A_T) 
             (abst_append (builtins.nil _p_A_T) l) l)))
  :=
  _p_A_T:cc.uT =>
  abst_append:
  ((cc.eT (basics.list__t _p_A_T)) ->
   (cc.eT (basics.list__t _p_A_T)) -> cc.eT (basics.list__t _p_A_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.ebP 
          (basics._equal_ (basics.list__t _p_A_T) 
             (abst_append (builtins.nil _p_A_T) l) l))).

def Utils__append_neutral :
  _p_A_T:cc.uT ->
  abst_append:((cc.eT (basics.list__t _p_A_T)) ->
               (cc.eT (basics.list__t _p_A_T)) ->
               cc.eT (basics.list__t _p_A_T)) ->
  n:(cc.eT (basics.list__t _p_A_T)) -> dk_logic.Prop
  :=
  _p_A_T:cc.uT =>
  abst_append:
  ((cc.eT (basics.list__t _p_A_T)) ->
   (cc.eT (basics.list__t _p_A_T)) -> cc.eT (basics.list__t _p_A_T)) =>
  n:(cc.eT (basics.list__t _p_A_T)) =>
  dk_logic.forall (basics.list__t _p_A_T) 
    (l:(cc.eT (basics.list__t _p_A_T)) =>
     dk_logic.and 
       (dk_logic.ebP 
          (basics._equal_ (basics.list__t _p_A_T) (abst_append l n) l)) 
       (dk_logic.ebP 
          (basics._equal_ (basics.list__t _p_A_T) (abst_append n l) l))).

def Utils__append_right_neutral :
  _p_A_T:cc.uT ->
  abst_append:((cc.eT (basics.list__t _p_A_T)) ->
               (cc.eT (basics.list__t _p_A_T)) ->
               cc.eT (basics.list__t _p_A_T)) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.ebP 
          (basics._equal_ (basics.list__t _p_A_T) 
             (abst_append l (builtins.nil _p_A_T)) l)))
  :=
  _p_A_T:cc.uT =>
  abst_append:
  ((cc.eT (basics.list__t _p_A_T)) ->
   (cc.eT (basics.list__t _p_A_T)) -> cc.eT (basics.list__t _p_A_T)) =>
  (__A_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.ebP 
         (basics._equal_ (basics.list__t _p_A_T) 
            (abst_append (builtins.nil _p_A_T) (builtins.nil _p_A_T)) 
            (builtins.nil _p_A_T)))) =>
   (__A_2_LEMMA:
    (a:(cc.eT _p_A_T) ->
     l:(cc.eT (basics.list__t _p_A_T)) ->
     I:(dk_logic.eP 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_A_T) 
                (abst_append l (builtins.nil _p_A_T)) l))) ->
     dk_logic.eP 
       (dk_logic.ebP 
          (basics._equal_ (basics.list__t _p_A_T) 
             (abst_append (builtins.cons _p_A_T a l) (builtins.nil _p_A_T)) 
             (builtins.cons _p_A_T a l)))) =>
    dk_builtins.magic_prove 
      (dk_logic.forall (basics.list__t _p_A_T) 
         (l:(cc.eT (basics.list__t _p_A_T)) =>
          dk_logic.ebP 
            (basics._equal_ (basics.list__t _p_A_T) 
               (abst_append l (builtins.nil _p_A_T)) l)))) 
     (a:(cc.eT _p_A_T) =>
      l:(cc.eT (basics.list__t _p_A_T)) =>
      I:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ (basics.list__t _p_A_T) 
               (abst_append l (builtins.nil _p_A_T)) l))) =>
      (__A_2_1_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_A_T) 
                (abst_append (builtins.cons _p_A_T a l) (builtins.nil _p_A_T)) 
                (builtins.cons _p_A_T a (abst_append l (builtins.nil _p_A_T)))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (basics._equal_ (basics.list__t _p_A_T) 
                  (abst_append (builtins.cons _p_A_T a l) 
                     (builtins.nil _p_A_T)) (builtins.cons _p_A_T a l)))) 
         (v_Vfc:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (basics.syntactic_equal (basics.list__t _p_A_T) 
                         (abst_append (builtins.cons _p_A_T a l) 
                            (builtins.nil _p_A_T)) (builtins.cons _p_A_T a l)))))) =>
          focal.zenon_syntactic_equal (basics.list__t _p_A_T) 
            (abst_append (builtins.cons _p_A_T a l) (builtins.nil _p_A_T)) 
            (builtins.cons _p_A_T a (abst_append l (builtins.nil _p_A_T))) 
            (v_Vgc:
             (zen.proof 
                (zen.triangle 
                   (zen.equal (basics.list__t _p_A_T) 
                      (abst_append (builtins.cons _p_A_T a l) 
                         (builtins.nil _p_A_T)) 
                      (builtins.cons _p_A_T a 
                         (abst_append l (builtins.nil _p_A_T)))))) =>
             focal.zenon_syntactic_equal (basics.list__t _p_A_T) 
               (abst_append l (builtins.nil _p_A_T)) l 
               (v_Vhc:
                (zen.proof 
                   (zen.triangle 
                      (zen.equal (basics.list__t _p_A_T) 
                         (abst_append l (builtins.nil _p_A_T)) l))) =>
                focal.zenon_not_syntactic_equal (basics.list__t _p_A_T) 
                  (abst_append (builtins.cons _p_A_T a l) 
                     (builtins.nil _p_A_T)) (builtins.cons _p_A_T a l) 
                  (v_Vic:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal (basics.list__t _p_A_T) 
                               (abst_append (builtins.cons _p_A_T a l) 
                                  (builtins.nil _p_A_T)) 
                               (builtins.cons _p_A_T a l))))) =>
                   zen.Rsubst (basics.list__t _p_A_T) 
                     (v_Vjc:(zen.term (basics.list__t _p_A_T)) =>
                      zen.triangle 
                        (zen.equal (basics.list__t _p_A_T) v_Vjc 
                           (builtins.cons _p_A_T a 
                              (abst_append l (builtins.nil _p_A_T))))) 
                     (abst_append (builtins.cons _p_A_T a l) 
                        (builtins.nil _p_A_T)) 
                     (abst_append (builtins.cons _p_A_T a l) 
                        (builtins.nil _p_A_T)) 
                     (v_Vkc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal (basics.list__t _p_A_T) 
                                  (abst_append (builtins.cons _p_A_T a l) 
                                     (builtins.nil _p_A_T)) 
                                  (abst_append (builtins.cons _p_A_T a l) 
                                     (builtins.nil _p_A_T)))))) =>
                      zen.Rcut 
                        (zen.triangle 
                           (zen.equal (basics.list__t _p_A_T) 
                              (abst_append (builtins.cons _p_A_T a l) 
                                 (builtins.nil _p_A_T)) 
                              (abst_append (builtins.cons _p_A_T a l) 
                                 (builtins.nil _p_A_T)))) 
                        (v_Vlc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal (basics.list__t _p_A_T) 
                                  (abst_append (builtins.cons _p_A_T a l) 
                                     (builtins.nil _p_A_T)) 
                                  (abst_append (builtins.cons _p_A_T a l) 
                                     (builtins.nil _p_A_T))))) =>
                         zen.Rsubst (basics.list__t _p_A_T) 
                           (v_Vmc:(zen.term (basics.list__t _p_A_T)) =>
                            zen.triangle 
                              (zen.equal (basics.list__t _p_A_T) v_Vmc 
                                 (abst_append (builtins.cons _p_A_T a l) 
                                    (builtins.nil _p_A_T)))) 
                           (abst_append (builtins.cons _p_A_T a l) 
                              (builtins.nil _p_A_T)) 
                           (abst_append (builtins.cons _p_A_T a l) 
                              (builtins.nil _p_A_T)) 
                           (v_Vkc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) 
                                        (abst_append 
                                           (builtins.cons _p_A_T a l) 
                                           (builtins.nil _p_A_T)) 
                                        (abst_append 
                                           (builtins.cons _p_A_T a l) 
                                           (builtins.nil _p_A_T)))))) =>
                            zen.Rnoteq (basics.list__t _p_A_T) 
                              (abst_append (builtins.cons _p_A_T a l) 
                                 (builtins.nil _p_A_T)) v_Vkc) 
                           (v_Vlc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal (basics.list__t _p_A_T) 
                                     (abst_append (builtins.cons _p_A_T a l) 
                                        (builtins.nil _p_A_T)) 
                                     (abst_append (builtins.cons _p_A_T a l) 
                                        (builtins.nil _p_A_T))))) =>
                            zen.Rsubst (basics.list__t _p_A_T) 
                              (v_Vnc:(zen.term (basics.list__t _p_A_T)) =>
                               zen.triangle 
                                 (zen.equal (basics.list__t _p_A_T) 
                                    (abst_append (builtins.cons _p_A_T a l) 
                                       (builtins.nil _p_A_T)) v_Vnc)) 
                              (abst_append (builtins.cons _p_A_T a l) 
                                 (builtins.nil _p_A_T)) 
                              (abst_append (builtins.cons _p_A_T a l) 
                                 (builtins.nil _p_A_T)) 
                              (v_Vkc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_A_T) 
                                           (abst_append 
                                              (builtins.cons _p_A_T a l) 
                                              (builtins.nil _p_A_T)) 
                                           (abst_append 
                                              (builtins.cons _p_A_T a l) 
                                              (builtins.nil _p_A_T)))))) =>
                               zen.Rnoteq (basics.list__t _p_A_T) 
                                 (abst_append (builtins.cons _p_A_T a l) 
                                    (builtins.nil _p_A_T)) v_Vkc) 
                              (v_Vlc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) 
                                        (abst_append 
                                           (builtins.cons _p_A_T a l) 
                                           (builtins.nil _p_A_T)) 
                                        (abst_append 
                                           (builtins.cons _p_A_T a l) 
                                           (builtins.nil _p_A_T))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal (basics.list__t _p_A_T) 
                                       (abst_append 
                                          (builtins.cons _p_A_T a l) 
                                          (builtins.nil _p_A_T)) 
                                       (abst_append 
                                          (builtins.cons _p_A_T a l) 
                                          (builtins.nil _p_A_T)))) v_Vlc 
                                 v_Vkc) v_Vlc) v_Vlc) 
                        (v_Vkc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal (basics.list__t _p_A_T) 
                                     (abst_append (builtins.cons _p_A_T a l) 
                                        (builtins.nil _p_A_T)) 
                                     (abst_append (builtins.cons _p_A_T a l) 
                                        (builtins.nil _p_A_T)))))) =>
                         zen.Rnoteq (basics.list__t _p_A_T) 
                           (abst_append (builtins.cons _p_A_T a l) 
                              (builtins.nil _p_A_T)) v_Vkc)) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.triangle 
                            (zen.equal (basics.list__t _p_A_T) 
                               (abst_append (builtins.cons _p_A_T a l) 
                                  (builtins.nil _p_A_T)) 
                               (builtins.cons _p_A_T a 
                                  (abst_append l (builtins.nil _p_A_T)))))) =>
                      zen.Rsubst (basics.list__t _p_A_T) 
                        (v_Vnc:(zen.term (basics.list__t _p_A_T)) =>
                         zen.triangle 
                           (zen.equal (basics.list__t _p_A_T) 
                              (abst_append (builtins.cons _p_A_T a l) 
                                 (builtins.nil _p_A_T)) v_Vnc)) 
                        (builtins.cons _p_A_T a 
                           (abst_append l (builtins.nil _p_A_T))) 
                        (builtins.cons _p_A_T a l) 
                        (v_Voc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal (basics.list__t _p_A_T) 
                                     (builtins.cons _p_A_T a 
                                        (abst_append l (builtins.nil _p_A_T))) 
                                     (builtins.cons _p_A_T a l))))) =>
                         zen.Rsubst _p_A_T 
                           (v_Vpc:(zen.term _p_A_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal (basics.list__t _p_A_T) 
                                    (builtins.cons _p_A_T v_Vpc 
                                       (abst_append l (builtins.nil _p_A_T))) 
                                    (builtins.cons _p_A_T a l)))) a a 
                           (v_Vqc:
                            (zen.proof 
                               (zen.not (zen.triangle (zen.equal _p_A_T a a)))) =>
                            zen.Rnoteq _p_A_T a v_Vqc) 
                           (v_Voc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) 
                                        (builtins.cons _p_A_T a 
                                           (abst_append l 
                                              (builtins.nil _p_A_T))) 
                                        (builtins.cons _p_A_T a l))))) =>
                            zen.Rsubst (basics.list__t _p_A_T) 
                              (v_Vrc:(zen.term (basics.list__t _p_A_T)) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal (basics.list__t _p_A_T) 
                                       (builtins.cons _p_A_T a v_Vrc) 
                                       (builtins.cons _p_A_T a l)))) 
                              (abst_append l (builtins.nil _p_A_T)) l 
                              (v_Vsc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_A_T) 
                                           (abst_append l 
                                              (builtins.nil _p_A_T)) l)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal (basics.list__t _p_A_T) 
                                       (abst_append l (builtins.nil _p_A_T)) 
                                       l)) v_Vhc v_Vsc) 
                              (v_Vtc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_A_T) 
                                           (builtins.cons _p_A_T a l) 
                                           (builtins.cons _p_A_T a l))))) =>
                               zen.Rnoteq (basics.list__t _p_A_T) 
                                 (builtins.cons _p_A_T a l) v_Vtc) v_Voc) 
                           v_Voc) 
                        (v_Vuc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal (basics.list__t _p_A_T) 
                                  (abst_append (builtins.cons _p_A_T a l) 
                                     (builtins.nil _p_A_T)) 
                                  (builtins.cons _p_A_T a l)))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (zen.equal (basics.list__t _p_A_T) 
                                 (abst_append (builtins.cons _p_A_T a l) 
                                    (builtins.nil _p_A_T)) 
                                 (builtins.cons _p_A_T a l))) v_Vuc v_Vic) 
                        v_Vgc) v_Vgc) v_Vfc) I) __A_2_1_LEMMA)) 
        (dk_builtins.magic_prove 
           (dk_logic.ebP 
              (basics._equal_ (basics.list__t _p_A_T) 
                 (abst_append (builtins.cons _p_A_T a l) 
                    (builtins.nil _p_A_T)) 
                 (builtins.cons _p_A_T a 
                    (abst_append l (builtins.nil _p_A_T)))))))) 
    (dk_builtins.magic_prove 
       (dk_logic.ebP 
          (basics._equal_ (basics.list__t _p_A_T) 
             (abst_append (builtins.nil _p_A_T) (builtins.nil _p_A_T)) 
             (builtins.nil _p_A_T)))).

def Utils__append_spec :
  _p_A_T:cc.uT ->
  abst_append:((cc.eT (basics.list__t _p_A_T)) ->
               (cc.eT (basics.list__t _p_A_T)) ->
               cc.eT (basics.list__t _p_A_T)) ->
  abst_mem:((cc.eT (basics.list__t _p_A_T)) ->
            (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l1:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.forall (basics.list__t _p_A_T) 
          (l2:(cc.eT (basics.list__t _p_A_T)) =>
           dk_logic.forall _p_A_T 
             (a:(cc.eT _p_A_T) =>
              dk_logic.eqv 
                (dk_logic.or (dk_logic.ebP (abst_mem l1 a)) 
                   (dk_logic.ebP (abst_mem l2 a))) 
                (dk_logic.ebP (abst_mem (abst_append l1 l2) a))))))
  :=
  _p_A_T:cc.uT =>
  abst_append:
  ((cc.eT (basics.list__t _p_A_T)) ->
   (cc.eT (basics.list__t _p_A_T)) -> cc.eT (basics.list__t _p_A_T)) =>
  abst_mem:
  ((cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l1:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.forall (basics.list__t _p_A_T) 
          (l2:(cc.eT (basics.list__t _p_A_T)) =>
           dk_logic.forall _p_A_T 
             (a:(cc.eT _p_A_T) =>
              dk_logic.eqv 
                (dk_logic.or (dk_logic.ebP (abst_mem l1 a)) 
                   (dk_logic.ebP (abst_mem l2 a))) 
                (dk_logic.ebP (abst_mem (abst_append l1 l2) a)))))).

def Utils__mem_empty_spec :
  _p_A_T:cc.uT ->
  abst_mem:((cc.eT (basics.list__t _p_A_T)) ->
            (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (basics._tilda__tilda_ (abst_mem (builtins.nil _p_A_T) x))))
  :=
  _p_A_T:cc.uT =>
  abst_mem:
  ((cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.ebP 
          (basics._tilda__tilda_ (abst_mem (builtins.nil _p_A_T) x)))).

def Utils__mem_spec :
  _p_A_T:cc.uT ->
  abst_mem:((cc.eT (basics.list__t _p_A_T)) ->
            (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.forall _p_A_T 
          (e:(cc.eT _p_A_T) =>
           dk_logic.forall _p_A_T 
             (h:(cc.eT _p_A_T) =>
              dk_logic.eqv 
                (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                   (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                (dk_logic.ebP (abst_mem (builtins.cons _p_A_T h l) e))))))
  :=
  _p_A_T:cc.uT =>
  abst_mem:
  ((cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.forall _p_A_T 
          (e:(cc.eT _p_A_T) =>
           dk_logic.forall _p_A_T 
             (h:(cc.eT _p_A_T) =>
              dk_logic.eqv 
                (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                   (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                (dk_logic.ebP (abst_mem (builtins.cons _p_A_T h l) e)))))).

def Utils__nil_unique :
  _p_A_T:cc.uT ->
  abst_append:((cc.eT (basics.list__t _p_A_T)) ->
               (cc.eT (basics.list__t _p_A_T)) ->
               cc.eT (basics.list__t _p_A_T)) ->
  abst_append_left_neutral:(dk_logic.eP 
                              (dk_logic.forall (basics.list__t _p_A_T) 
                                 (l:(cc.eT (basics.list__t _p_A_T)) =>
                                  dk_logic.ebP 
                                    (basics._equal_ (basics.list__t _p_A_T) 
                                       (abst_append (builtins.nil _p_A_T) l) 
                                       l)))) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (n:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.imp (Utils__append_neutral _p_A_T abst_append n) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_A_T) n (builtins.nil _p_A_T)))))
  :=
  _p_A_T:cc.uT =>
  abst_append:
  ((cc.eT (basics.list__t _p_A_T)) ->
   (cc.eT (basics.list__t _p_A_T)) -> cc.eT (basics.list__t _p_A_T)) =>
  abst_append_left_neutral:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_A_T) 
        (l:(cc.eT (basics.list__t _p_A_T)) =>
         dk_logic.ebP 
           (basics._equal_ (basics.list__t _p_A_T) 
              (abst_append (builtins.nil _p_A_T) l) l)))) =>
  (__B_1_LEMMA:
   (n:(cc.eT (basics.list__t _p_A_T)) ->
    N:(dk_logic.eP (Utils__append_neutral _p_A_T abst_append n)) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (basics._equal_ (basics.list__t _p_A_T) n (builtins.nil _p_A_T)))) =>
   zen.nnpp 
     (zen.forall (basics.list__t _p_A_T) 
        (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
         zen.imp 
           (zen.triangle (Utils__append_neutral _p_A_T abst_append v_Vzb)) 
           (zen.triangle 
              (focal.is_true 
                 (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                    (builtins.nil _p_A_T)))))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall (basics.list__t _p_A_T) 
               (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
                zen.imp 
                  (zen.triangle 
                     (Utils__append_neutral _p_A_T abst_append v_Vzb)) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                           (builtins.nil _p_A_T)))))))) =>
      zen.Raxiom 
        (zen.forall (basics.list__t _p_A_T) 
           (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
            zen.imp 
              (zen.triangle (Utils__append_neutral _p_A_T abst_append v_Vzb)) 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                       (builtins.nil _p_A_T)))))) __B_1_LEMMA v_Vac)) 
    (n:(cc.eT (basics.list__t _p_A_T)) =>
     N:(dk_logic.eP (Utils__append_neutral _p_A_T abst_append n)) =>
     (__B_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ (basics.list__t _p_A_T) 
               (abst_append (builtins.nil _p_A_T) n) (builtins.nil _p_A_T)))) =>
      (__B_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_A_T) 
                (abst_append (builtins.nil _p_A_T) n) n))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (basics._equal_ (basics.list__t _p_A_T) n 
                  (builtins.nil _p_A_T)))) 
         (v_Vfc:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (basics.syntactic_equal (basics.list__t _p_A_T) n 
                         (builtins.nil _p_A_T)))))) =>
          focal.zenon_syntactic_equal (basics.list__t _p_A_T) 
            (abst_append (builtins.nil _p_A_T) n) (builtins.nil _p_A_T) 
            (v_Vgc:
             (zen.proof 
                (zen.triangle 
                   (zen.equal (basics.list__t _p_A_T) 
                      (abst_append (builtins.nil _p_A_T) n) 
                      (builtins.nil _p_A_T)))) =>
             focal.zenon_syntactic_equal (basics.list__t _p_A_T) 
               (abst_append (builtins.nil _p_A_T) n) n 
               (v_Vhc:
                (zen.proof 
                   (zen.triangle 
                      (zen.equal (basics.list__t _p_A_T) 
                         (abst_append (builtins.nil _p_A_T) n) n))) =>
                focal.zenon_not_syntactic_equal (basics.list__t _p_A_T) n 
                  (builtins.nil _p_A_T) 
                  (v_Vic:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal (basics.list__t _p_A_T) n 
                               (builtins.nil _p_A_T))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (zen.equal (basics.list__t _p_A_T) 
                           (builtins.nil _p_A_T) (builtins.nil _p_A_T))) 
                     (v_Vjc:
                      (zen.proof 
                         (zen.triangle 
                            (zen.equal (basics.list__t _p_A_T) 
                               (builtins.nil _p_A_T) (builtins.nil _p_A_T)))) =>
                      zen.Rsubst (basics.list__t _p_A_T) 
                        (v_Vkc:(zen.term (basics.list__t _p_A_T)) =>
                         zen.triangle 
                           (zen.equal (basics.list__t _p_A_T) v_Vkc 
                              (builtins.nil _p_A_T))) (builtins.nil _p_A_T) 
                        n 
                        (v_Vlc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal (basics.list__t _p_A_T) 
                                     (builtins.nil _p_A_T) n)))) =>
                         zen.Rsubst (basics.list__t _p_A_T) 
                           (v_Vmc:(zen.term (basics.list__t _p_A_T)) =>
                            zen.triangle 
                              (zen.equal (basics.list__t _p_A_T) v_Vmc n)) 
                           (abst_append (builtins.nil _p_A_T) n) 
                           (builtins.nil _p_A_T) 
                           (v_Vnc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) 
                                        (abst_append (builtins.nil _p_A_T) n) 
                                        (builtins.nil _p_A_T))))) =>
                            zen.Rcut 
                              (zen.triangle 
                                 (zen.equal (basics.list__t _p_A_T) 
                                    (builtins.nil _p_A_T) 
                                    (builtins.nil _p_A_T))) 
                              (v_Vjc0:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) 
                                        (builtins.nil _p_A_T) 
                                        (builtins.nil _p_A_T)))) =>
                               zen.Rsubst (basics.list__t _p_A_T) 
                                 (v_Vkc:(zen.term (basics.list__t _p_A_T)) =>
                                  zen.triangle 
                                    (zen.equal (basics.list__t _p_A_T) v_Vkc 
                                       (builtins.nil _p_A_T))) 
                                 (builtins.nil _p_A_T) 
                                 (abst_append (builtins.nil _p_A_T) n) 
                                 (v_Voc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal 
                                              (basics.list__t _p_A_T) 
                                              (builtins.nil _p_A_T) 
                                              (abst_append 
                                                 (builtins.nil _p_A_T) n))))) =>
                                  zen.Reqsym (basics.list__t _p_A_T) 
                                    (abst_append (builtins.nil _p_A_T) n) 
                                    (builtins.nil _p_A_T) v_Vgc v_Voc) 
                                 (v_Vgc0:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_A_T) 
                                           (abst_append 
                                              (builtins.nil _p_A_T) n) 
                                           (builtins.nil _p_A_T)))) =>
                                  zen.Rsubst (basics.list__t _p_A_T) 
                                    (v_Vpc:
                                     (zen.term (basics.list__t _p_A_T)) =>
                                     zen.triangle 
                                       (zen.equal (basics.list__t _p_A_T) 
                                          (abst_append (builtins.nil _p_A_T) 
                                             n) v_Vpc)) 
                                    (builtins.nil _p_A_T) 
                                    (builtins.nil _p_A_T) 
                                    (v_Vqc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal 
                                                 (basics.list__t _p_A_T) 
                                                 (builtins.nil _p_A_T) 
                                                 (builtins.nil _p_A_T))))) =>
                                     zen.Rnoteq (basics.list__t _p_A_T) 
                                       (builtins.nil _p_A_T) v_Vqc) 
                                    (v_Vgc0:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal 
                                              (basics.list__t _p_A_T) 
                                              (abst_append 
                                                 (builtins.nil _p_A_T) n) 
                                              (builtins.nil _p_A_T)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal (basics.list__t _p_A_T) 
                                             (abst_append 
                                                (builtins.nil _p_A_T) n) 
                                             (builtins.nil _p_A_T))) v_Vgc0 
                                       v_Vnc) v_Vgc0) v_Vjc0) 
                              (v_Vqc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_A_T) 
                                           (builtins.nil _p_A_T) 
                                           (builtins.nil _p_A_T))))) =>
                               zen.Rnoteq (basics.list__t _p_A_T) 
                                 (builtins.nil _p_A_T) v_Vqc)) 
                           (v_Vrc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal (basics.list__t _p_A_T) 
                                     (builtins.nil _p_A_T) n))) =>
                            zen.Rsubst (basics.list__t _p_A_T) 
                              (v_Vsc:(zen.term (basics.list__t _p_A_T)) =>
                               zen.triangle 
                                 (zen.equal (basics.list__t _p_A_T) 
                                    (builtins.nil _p_A_T) v_Vsc)) n n 
                              (v_Vtc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_A_T) n 
                                           n)))) =>
                               zen.Rnoteq (basics.list__t _p_A_T) n v_Vtc) 
                              (v_Vrc0:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) 
                                        (builtins.nil _p_A_T) n))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal (basics.list__t _p_A_T) 
                                       (builtins.nil _p_A_T) n)) v_Vrc0 v_Vlc) 
                              v_Vrc) v_Vhc) 
                        (v_Vuc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal (basics.list__t _p_A_T) n 
                                  (builtins.nil _p_A_T)))) =>
                         zen.Rsubst (basics.list__t _p_A_T) 
                           (v_Vvc:(zen.term (basics.list__t _p_A_T)) =>
                            zen.triangle 
                              (zen.equal (basics.list__t _p_A_T) n v_Vvc)) 
                           (builtins.nil _p_A_T) (builtins.nil _p_A_T) 
                           (v_Vqc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) 
                                        (builtins.nil _p_A_T) 
                                        (builtins.nil _p_A_T))))) =>
                            zen.Rnoteq (basics.list__t _p_A_T) 
                              (builtins.nil _p_A_T) v_Vqc) 
                           (v_Vuc0:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal (basics.list__t _p_A_T) n 
                                     (builtins.nil _p_A_T)))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal (basics.list__t _p_A_T) n 
                                    (builtins.nil _p_A_T))) v_Vuc0 v_Vic) 
                           v_Vuc) v_Vjc) 
                     (v_Vqc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal (basics.list__t _p_A_T) 
                                  (builtins.nil _p_A_T) (builtins.nil _p_A_T))))) =>
                      zen.Rnoteq (basics.list__t _p_A_T) 
                        (builtins.nil _p_A_T) v_Vqc)) v_Vfc) __B_1_2_LEMMA) 
            __B_1_1_LEMMA)) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (basics._equal_ (basics.list__t _p_A_T) 
                    (abst_append (builtins.nil _p_A_T) n) n))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (basics.syntactic_equal (basics.list__t _p_A_T) 
                           (abst_append (builtins.nil _p_A_T) n) n))))) =>
            zen.Rall (basics.list__t _p_A_T) 
              (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
               zen.triangle 
                 (focal.is_true 
                    (basics._equal_ (basics.list__t _p_A_T) 
                       (abst_append (builtins.nil _p_A_T) v_Vac) v_Vac))) n 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (basics.syntactic_equal (basics.list__t _p_A_T) 
                           (abst_append (builtins.nil _p_A_T) n) n)))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_A_T) 
                          (abst_append (builtins.nil _p_A_T) n) n))) v_Vbc 
                 v_Vzb) abst_append_left_neutral))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_A_T) 
                   (abst_append (builtins.nil _p_A_T) n) 
                   (builtins.nil _p_A_T)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_A_T) 
                          (abst_append (builtins.nil _p_A_T) n) 
                          (builtins.nil _p_A_T)))))) =>
           zen.Rall (basics.list__t _p_A_T) 
             (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
              zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_A_T) 
                         (abst_append v_Vac n) v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_A_T) 
                         (abst_append n v_Vac) v_Vac)))) 
             (builtins.nil _p_A_T) 
             (v_Vbc:
              (zen.proof 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ (basics.list__t _p_A_T) 
                             (abst_append (builtins.nil _p_A_T) n) 
                             (builtins.nil _p_A_T)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ (basics.list__t _p_A_T) 
                             (abst_append n (builtins.nil _p_A_T)) 
                             (builtins.nil _p_A_T)))))) =>
              zen.Rand 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_A_T) 
                         (abst_append (builtins.nil _p_A_T) n) 
                         (builtins.nil _p_A_T)))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_A_T) 
                         (abst_append n (builtins.nil _p_A_T)) 
                         (builtins.nil _p_A_T)))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal (basics.list__t _p_A_T) 
                             (abst_append (builtins.nil _p_A_T) n) 
                             (builtins.nil _p_A_T))))) =>
                 v_Vdc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal (basics.list__t _p_A_T) 
                             (abst_append n (builtins.nil _p_A_T)) 
                             (builtins.nil _p_A_T))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._equal_ (basics.list__t _p_A_T) 
                            (abst_append (builtins.nil _p_A_T) n) 
                            (builtins.nil _p_A_T)))) v_Vcc v_Vzb) v_Vbc) N))).

def Utils__nil_neutral :
  _p_A_T:cc.uT ->
  abst_append:((cc.eT (basics.list__t _p_A_T)) ->
               (cc.eT (basics.list__t _p_A_T)) ->
               cc.eT (basics.list__t _p_A_T)) ->
  abst_append_left_neutral:(dk_logic.eP 
                              (dk_logic.forall (basics.list__t _p_A_T) 
                                 (l:(cc.eT (basics.list__t _p_A_T)) =>
                                  dk_logic.ebP 
                                    (basics._equal_ (basics.list__t _p_A_T) 
                                       (abst_append (builtins.nil _p_A_T) l) 
                                       l)))) ->
  abst_append_right_neutral:(dk_logic.eP 
                               (dk_logic.forall (basics.list__t _p_A_T) 
                                  (l:(cc.eT (basics.list__t _p_A_T)) =>
                                   dk_logic.ebP 
                                     (basics._equal_ (basics.list__t _p_A_T) 
                                        (abst_append l (builtins.nil _p_A_T)) 
                                        l)))) ->
  dk_logic.eP 
    (Utils__append_neutral _p_A_T abst_append (builtins.nil _p_A_T))
  :=
  _p_A_T:cc.uT =>
  abst_append:
  ((cc.eT (basics.list__t _p_A_T)) ->
   (cc.eT (basics.list__t _p_A_T)) -> cc.eT (basics.list__t _p_A_T)) =>
  abst_append_left_neutral:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_A_T) 
        (l:(cc.eT (basics.list__t _p_A_T)) =>
         dk_logic.ebP 
           (basics._equal_ (basics.list__t _p_A_T) 
              (abst_append (builtins.nil _p_A_T) l) l)))) =>
  abst_append_right_neutral:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_A_T) 
        (l:(cc.eT (basics.list__t _p_A_T)) =>
         dk_logic.ebP 
           (basics._equal_ (basics.list__t _p_A_T) 
              (abst_append l (builtins.nil _p_A_T)) l)))) =>
  zen.nnpp 
    (zen.triangle 
       (Utils__append_neutral _p_A_T abst_append (builtins.nil _p_A_T))) 
    (v_Vzb:
     (zen.proof 
        (zen.not 
           (zen.forall (basics.list__t _p_A_T) 
              (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
               zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_A_T) 
                          (abst_append v_Vac (builtins.nil _p_A_T)) v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_A_T) 
                          (abst_append (builtins.nil _p_A_T) v_Vac) v_Vac))))))) =>
     zen.Rnotall (basics.list__t _p_A_T) 
       (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
        zen.and 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_A_T) 
                   (abst_append v_Vac (builtins.nil _p_A_T)) v_Vac))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_A_T) 
                   (abst_append (builtins.nil _p_A_T) v_Vac) v_Vac)))) 
       (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.and 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_A_T) 
                          (abst_append v_Vbc (builtins.nil _p_A_T)) v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_A_T) 
                          (abst_append (builtins.nil _p_A_T) v_Vbc) v_Vbc)))))) =>
        zen.Rnotand 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_A_T) 
                   (abst_append v_Vbc (builtins.nil _p_A_T)) v_Vbc))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_A_T) 
                   (abst_append (builtins.nil _p_A_T) v_Vbc) v_Vbc))) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_A_T) 
                          (abst_append v_Vbc (builtins.nil _p_A_T)) v_Vbc))))) =>
           zen.Rall (basics.list__t _p_A_T) 
             (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
              zen.triangle 
                (focal.is_true 
                   (basics._equal_ (basics.list__t _p_A_T) 
                      (abst_append v_Vac (builtins.nil _p_A_T)) v_Vac))) 
             v_Vbc 
             (v_Vec:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_A_T) 
                          (abst_append v_Vbc (builtins.nil _p_A_T)) v_Vbc)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_A_T) 
                         (abst_append v_Vbc (builtins.nil _p_A_T)) v_Vbc))) 
                v_Vec v_Vdc) abst_append_right_neutral) 
          (v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_A_T) 
                          (abst_append (builtins.nil _p_A_T) v_Vbc) v_Vbc))))) =>
           zen.Rall (basics.list__t _p_A_T) 
             (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
              zen.triangle 
                (focal.is_true 
                   (basics._equal_ (basics.list__t _p_A_T) 
                      (abst_append (builtins.nil _p_A_T) v_Vac) v_Vac))) 
             v_Vbc 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_A_T) 
                          (abst_append (builtins.nil _p_A_T) v_Vbc) v_Vbc)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_A_T) 
                         (abst_append (builtins.nil _p_A_T) v_Vbc) v_Vbc))) 
                v_Vgc v_Vfc) abst_append_left_neutral) v_Vcc) v_Vzb).

def Utils__mem_cons_head :
  _p_A_T:cc.uT ->
  abst_mem:((cc.eT (basics.list__t _p_A_T)) ->
            (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  abst_mem_spec:(dk_logic.eP 
                   (dk_logic.forall (basics.list__t _p_A_T) 
                      (l:(cc.eT (basics.list__t _p_A_T)) =>
                       dk_logic.forall _p_A_T 
                         (e:(cc.eT _p_A_T) =>
                          dk_logic.forall _p_A_T 
                            (h:(cc.eT _p_A_T) =>
                             dk_logic.eqv 
                               (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                                  (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                               (dk_logic.ebP 
                                  (abst_mem (builtins.cons _p_A_T h l) e))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall (basics.list__t _p_A_T) 
          (l:(cc.eT (basics.list__t _p_A_T)) =>
           dk_logic.ebP (abst_mem (builtins.cons _p_A_T x l) x))))
  :=
  _p_A_T:cc.uT =>
  abst_mem:
  ((cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  abst_mem_spec:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_A_T) 
        (l:(cc.eT (basics.list__t _p_A_T)) =>
         dk_logic.forall _p_A_T 
           (e:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (h:(cc.eT _p_A_T) =>
               dk_logic.eqv 
                 (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                    (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                 (dk_logic.ebP (abst_mem (builtins.cons _p_A_T h l) e))))))) =>
  zen.nnpp 
    (zen.forall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall (basics.list__t _p_A_T) 
          (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
           zen.triangle 
             (focal.is_true 
                (abst_mem (builtins.cons _p_A_T v_Vzb v_Vac) v_Vzb))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_A_T 
              (v_Vzb:(zen.term _p_A_T) =>
               zen.forall (basics.list__t _p_A_T) 
                 (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_mem (builtins.cons _p_A_T v_Vzb v_Vac) v_Vzb))))))) =>
     zen.Rnotall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall (basics.list__t _p_A_T) 
          (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
           zen.triangle 
             (focal.is_true 
                (abst_mem (builtins.cons _p_A_T v_Vzb v_Vac) v_Vzb)))) 
       (v_Vcc:(zen.term _p_A_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall (basics.list__t _p_A_T) 
                 (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_mem (builtins.cons _p_A_T v_Vcc v_Vac) v_Vcc)))))) =>
        zen.Rnotall (basics.list__t _p_A_T) 
          (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
           zen.triangle 
             (focal.is_true 
                (abst_mem (builtins.cons _p_A_T v_Vcc v_Vac) v_Vcc))) 
          (v_Vec:(zen.term (basics.list__t _p_A_T)) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_mem (builtins.cons _p_A_T v_Vcc v_Vec) v_Vcc))))) =>
           zen.Rall (basics.list__t _p_A_T) 
             (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
              zen.forall _p_A_T 
                (v_Vgc:(zen.term _p_A_T) =>
                 zen.forall _p_A_T 
                   (v_Vhc:(zen.term _p_A_T) =>
                    zen.eqv 
                      (zen.or 
                         (zen.triangle (focal.is_true (abst_mem v_Vac v_Vgc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ _p_A_T v_Vgc v_Vhc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_mem (builtins.cons _p_A_T v_Vhc v_Vac) 
                               v_Vgc)))))) v_Vec 
             (v_Vic:
              (zen.proof 
                 (zen.forall _p_A_T 
                    (v_Vgc:(zen.term _p_A_T) =>
                     zen.forall _p_A_T 
                       (v_Vhc:(zen.term _p_A_T) =>
                        zen.eqv 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_mem v_Vec v_Vgc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ _p_A_T v_Vgc v_Vhc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T v_Vhc v_Vec) 
                                   v_Vgc))))))) =>
              zen.Rall _p_A_T 
                (v_Vgc:(zen.term _p_A_T) =>
                 zen.forall _p_A_T 
                   (v_Vhc:(zen.term _p_A_T) =>
                    zen.eqv 
                      (zen.or 
                         (zen.triangle (focal.is_true (abst_mem v_Vec v_Vgc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ _p_A_T v_Vgc v_Vhc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_mem (builtins.cons _p_A_T v_Vhc v_Vec) 
                               v_Vgc))))) v_Vcc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall _p_A_T 
                       (v_Vhc:(zen.term _p_A_T) =>
                        zen.eqv 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_mem v_Vec v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ _p_A_T v_Vcc v_Vhc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T v_Vhc v_Vec) 
                                   v_Vcc)))))) =>
                 zen.Rall _p_A_T 
                   (v_Vhc:(zen.term _p_A_T) =>
                    zen.eqv 
                      (zen.or 
                         (zen.triangle (focal.is_true (abst_mem v_Vec v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ _p_A_T v_Vcc v_Vhc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_mem (builtins.cons _p_A_T v_Vhc v_Vec) 
                               v_Vcc)))) v_Vcc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_mem v_Vec v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ _p_A_T v_Vcc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T v_Vcc v_Vec) 
                                   v_Vcc))))) =>
                    zen.Requiv 
                      (zen.or 
                         (zen.triangle (focal.is_true (abst_mem v_Vec v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ _p_A_T v_Vcc v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_mem (builtins.cons _p_A_T v_Vcc v_Vec) 
                               v_Vcc))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_mem v_Vec v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._equal_ _p_A_T v_Vcc v_Vcc)))))) =>
                       v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_mem 
                                      (builtins.cons _p_A_T v_Vcc v_Vec) 
                                      v_Vcc))))) =>
                       zen.Rnotor 
                         (zen.triangle (focal.is_true (abst_mem v_Vec v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ _p_A_T v_Vcc v_Vcc))) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_mem v_Vec v_Vcc))))) =>
                          v_Vnc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal _p_A_T v_Vcc 
                                         v_Vcc))))) =>
                          focal.zenon_not_syntactic_equal _p_A_T v_Vcc v_Vcc 
                            (v_Voc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_A_T v_Vcc v_Vcc)))) =>
                             zen.Rnoteq _p_A_T v_Vcc v_Voc) v_Vnc) v_Vlc) 
                      (v_Vpc:
                       (zen.proof 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_mem v_Vec v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ _p_A_T v_Vcc v_Vcc))))) =>
                       v_Vqc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T v_Vcc v_Vec) 
                                   v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_mem (builtins.cons _p_A_T v_Vcc v_Vec) 
                                  v_Vcc))) v_Vqc v_Vfc) v_Vkc) v_Vjc) v_Vic) 
             abst_mem_spec) v_Vdc) v_Vbc).

def Utils__mem_cons_tail :
  _p_A_T:cc.uT ->
  abst_mem:((cc.eT (basics.list__t _p_A_T)) ->
            (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  abst_mem_spec:(dk_logic.eP 
                   (dk_logic.forall (basics.list__t _p_A_T) 
                      (l:(cc.eT (basics.list__t _p_A_T)) =>
                       dk_logic.forall _p_A_T 
                         (e:(cc.eT _p_A_T) =>
                          dk_logic.forall _p_A_T 
                            (h:(cc.eT _p_A_T) =>
                             dk_logic.eqv 
                               (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                                  (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                               (dk_logic.ebP 
                                  (abst_mem (builtins.cons _p_A_T h l) e))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall _p_A_T 
          (y:(cc.eT _p_A_T) =>
           dk_logic.forall (basics.list__t _p_A_T) 
             (l:(cc.eT (basics.list__t _p_A_T)) =>
              dk_logic.imp (dk_logic.ebP (abst_mem l x)) 
                (dk_logic.ebP (abst_mem (builtins.cons _p_A_T y l) x))))))
  :=
  _p_A_T:cc.uT =>
  abst_mem:
  ((cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  abst_mem_spec:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_A_T) 
        (l:(cc.eT (basics.list__t _p_A_T)) =>
         dk_logic.forall _p_A_T 
           (e:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (h:(cc.eT _p_A_T) =>
               dk_logic.eqv 
                 (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                    (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                 (dk_logic.ebP (abst_mem (builtins.cons _p_A_T h l) e))))))) =>
  zen.nnpp 
    (zen.forall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall _p_A_T 
          (v_Vac:(zen.term _p_A_T) =>
           zen.forall (basics.list__t _p_A_T) 
             (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
              zen.imp (zen.triangle (focal.is_true (abst_mem v_Vbc v_Vzb))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_mem (builtins.cons _p_A_T v_Vac v_Vbc) v_Vzb))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_A_T 
              (v_Vzb:(zen.term _p_A_T) =>
               zen.forall _p_A_T 
                 (v_Vac:(zen.term _p_A_T) =>
                  zen.forall (basics.list__t _p_A_T) 
                    (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_mem v_Vbc v_Vzb))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_mem (builtins.cons _p_A_T v_Vac v_Vbc) 
                                v_Vzb))))))))) =>
     zen.Rnotall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall _p_A_T 
          (v_Vac:(zen.term _p_A_T) =>
           zen.forall (basics.list__t _p_A_T) 
             (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
              zen.imp (zen.triangle (focal.is_true (abst_mem v_Vbc v_Vzb))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_mem (builtins.cons _p_A_T v_Vac v_Vbc) v_Vzb)))))) 
       (v_Vdc:(zen.term _p_A_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall _p_A_T 
                 (v_Vac:(zen.term _p_A_T) =>
                  zen.forall (basics.list__t _p_A_T) 
                    (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_mem v_Vbc v_Vdc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_mem (builtins.cons _p_A_T v_Vac v_Vbc) 
                                v_Vdc)))))))) =>
        zen.Rnotall _p_A_T 
          (v_Vac:(zen.term _p_A_T) =>
           zen.forall (basics.list__t _p_A_T) 
             (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
              zen.imp (zen.triangle (focal.is_true (abst_mem v_Vbc v_Vdc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_mem (builtins.cons _p_A_T v_Vac v_Vbc) v_Vdc))))) 
          (v_Vfc:(zen.term _p_A_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall (basics.list__t _p_A_T) 
                    (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_mem v_Vbc v_Vdc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_mem (builtins.cons _p_A_T v_Vfc v_Vbc) 
                                v_Vdc))))))) =>
           zen.Rnotall (basics.list__t _p_A_T) 
             (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
              zen.imp (zen.triangle (focal.is_true (abst_mem v_Vbc v_Vdc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_mem (builtins.cons _p_A_T v_Vfc v_Vbc) v_Vdc)))) 
             (v_Vhc:(zen.term (basics.list__t _p_A_T)) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_mem (builtins.cons _p_A_T v_Vfc v_Vhc) 
                                v_Vdc)))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_mem (builtins.cons _p_A_T v_Vfc v_Vhc) v_Vdc))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_mem v_Vhc v_Vdc)))) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_mem (builtins.cons _p_A_T v_Vfc v_Vhc) 
                                v_Vdc))))) =>
                 zen.Rall (basics.list__t _p_A_T) 
                   (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
                    zen.forall _p_A_T 
                      (v_Vlc:(zen.term _p_A_T) =>
                       zen.forall _p_A_T 
                         (v_Vmc:(zen.term _p_A_T) =>
                          zen.eqv 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true (abst_mem v_Vbc v_Vlc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_A_T v_Vlc v_Vmc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_mem 
                                     (builtins.cons _p_A_T v_Vmc v_Vbc) v_Vlc)))))) 
                   v_Vhc 
                   (v_Vnc:
                    (zen.proof 
                       (zen.forall _p_A_T 
                          (v_Vlc:(zen.term _p_A_T) =>
                           zen.forall _p_A_T 
                             (v_Vmc:(zen.term _p_A_T) =>
                              zen.eqv 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_mem v_Vhc v_Vlc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ _p_A_T v_Vlc v_Vmc)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_mem 
                                         (builtins.cons _p_A_T v_Vmc v_Vhc) 
                                         v_Vlc))))))) =>
                    zen.Rall _p_A_T 
                      (v_Vlc:(zen.term _p_A_T) =>
                       zen.forall _p_A_T 
                         (v_Vmc:(zen.term _p_A_T) =>
                          zen.eqv 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true (abst_mem v_Vhc v_Vlc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_A_T v_Vlc v_Vmc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_mem 
                                     (builtins.cons _p_A_T v_Vmc v_Vhc) v_Vlc))))) 
                      v_Vdc 
                      (v_Voc:
                       (zen.proof 
                          (zen.forall _p_A_T 
                             (v_Vmc:(zen.term _p_A_T) =>
                              zen.eqv 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ _p_A_T v_Vdc v_Vmc)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_mem 
                                         (builtins.cons _p_A_T v_Vmc v_Vhc) 
                                         v_Vdc)))))) =>
                       zen.Rall _p_A_T 
                         (v_Vmc:(zen.term _p_A_T) =>
                          zen.eqv 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_A_T v_Vdc v_Vmc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_mem 
                                     (builtins.cons _p_A_T v_Vmc v_Vhc) v_Vdc)))) 
                         v_Vfc 
                         (v_Vpc:
                          (zen.proof 
                             (zen.eqv 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ _p_A_T v_Vdc v_Vfc)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_mem 
                                         (builtins.cons _p_A_T v_Vfc v_Vhc) 
                                         v_Vdc))))) =>
                          zen.Requiv 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_A_T v_Vdc v_Vfc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_mem 
                                     (builtins.cons _p_A_T v_Vfc v_Vhc) v_Vdc))) 
                            (v_Vqc:
                             (zen.proof 
                                (zen.not 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_mem v_Vhc v_Vdc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ _p_A_T v_Vdc 
                                               v_Vfc)))))) =>
                             v_Vkc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_mem 
                                            (builtins.cons _p_A_T v_Vfc v_Vhc) 
                                            v_Vdc))))) =>
                             zen.Rnotor 
                               (zen.triangle 
                                  (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_A_T v_Vdc v_Vfc))) 
                               (v_Vrc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_mem v_Vhc v_Vdc))))) =>
                                v_Vsc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal _p_A_T 
                                               v_Vdc v_Vfc))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                                  v_Vjc v_Vrc) v_Vqc) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true (abst_mem v_Vhc v_Vdc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ _p_A_T v_Vdc v_Vfc))))) =>
                             v_Vuc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_mem 
                                         (builtins.cons _p_A_T v_Vfc v_Vhc) 
                                         v_Vdc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_mem 
                                        (builtins.cons _p_A_T v_Vfc v_Vhc) 
                                        v_Vdc))) v_Vuc v_Vkc) v_Vpc) v_Voc) 
                      v_Vnc) abst_mem_spec) v_Vic) v_Vgc) v_Vec) v_Vcc).

def Utils__not_mem_empty :
  _p_A_T:cc.uT ->
  abst_mem:((cc.eT (basics.list__t _p_A_T)) ->
            (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  abst_mem_spec:(dk_logic.eP 
                   (dk_logic.forall (basics.list__t _p_A_T) 
                      (l:(cc.eT (basics.list__t _p_A_T)) =>
                       dk_logic.forall _p_A_T 
                         (e:(cc.eT _p_A_T) =>
                          dk_logic.forall _p_A_T 
                            (h:(cc.eT _p_A_T) =>
                             dk_logic.eqv 
                               (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                                  (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                               (dk_logic.ebP 
                                  (abst_mem (builtins.cons _p_A_T h l) e))))))) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.imp 
          (dk_logic.forall _p_A_T 
             (x:(cc.eT _p_A_T) =>
              dk_logic.ebP 
                (basics._equal_ basics.bool__t (abst_mem l x) dk_bool.false))) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_A_T) l (builtins.nil _p_A_T)))))
  :=
  _p_A_T:cc.uT =>
  abst_mem:
  ((cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  abst_mem_spec:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_A_T) 
        (l:(cc.eT (basics.list__t _p_A_T)) =>
         dk_logic.forall _p_A_T 
           (e:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (h:(cc.eT _p_A_T) =>
               dk_logic.eqv 
                 (dk_logic.or (dk_logic.ebP (abst_mem l e)) 
                    (dk_logic.ebP (basics._equal_ _p_A_T e h))) 
                 (dk_logic.ebP (abst_mem (builtins.cons _p_A_T h l) e))))))) =>
  (__F_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.imp 
         (dk_logic.forall _p_A_T 
            (x:(cc.eT _p_A_T) =>
             dk_logic.ebP 
               (basics._equal_ basics.bool__t 
                  (abst_mem (builtins.nil _p_A_T) x) dk_bool.false))) 
         (dk_logic.ebP 
            (basics._equal_ (basics.list__t dk_builtins.weak_poly_var_ty) 
               (builtins.nil dk_builtins.weak_poly_var_ty) 
               (builtins.nil dk_builtins.weak_poly_var_ty))))) =>
   (__F_2_LEMMA:
    (dk_logic.eP 
       (dk_logic.forall (basics.list__t _p_A_T) 
          (l:(cc.eT (basics.list__t _p_A_T)) =>
           dk_logic.imp 
             (dk_logic.imp 
                (dk_logic.forall _p_A_T 
                   (x:(cc.eT _p_A_T) =>
                    dk_logic.ebP 
                      (basics._equal_ basics.bool__t (abst_mem l x) 
                         dk_bool.false))) 
                (dk_logic.ebP 
                   (basics._equal_ (basics.list__t _p_A_T) l 
                      (builtins.nil _p_A_T)))) 
             (dk_logic.forall _p_A_T 
                (e:(cc.eT _p_A_T) =>
                 dk_logic.imp 
                   (dk_logic.forall _p_A_T 
                      (x:(cc.eT _p_A_T) =>
                       dk_logic.ebP 
                         (basics._equal_ basics.bool__t 
                            (abst_mem (builtins.cons _p_A_T e l) x) 
                            dk_bool.false))) 
                   (dk_logic.ebP 
                      (basics._equal_ (basics.list__t _p_A_T) 
                         (builtins.cons _p_A_T e l) (builtins.nil _p_A_T)))))))) =>
    dk_builtins.magic_prove 
      (dk_logic.forall (basics.list__t _p_A_T) 
         (l:(cc.eT (basics.list__t _p_A_T)) =>
          dk_logic.imp 
            (dk_logic.forall _p_A_T 
               (x:(cc.eT _p_A_T) =>
                dk_logic.ebP 
                  (basics._equal_ basics.bool__t (abst_mem l x) dk_bool.false))) 
            (dk_logic.ebP 
               (basics._equal_ (basics.list__t _p_A_T) l 
                  (builtins.nil _p_A_T)))))) 
     ((__F_2_1_LEMMA:
       (l:(cc.eT (basics.list__t _p_A_T)) ->
        e:(cc.eT _p_A_T) ->
        H:(dk_logic.eP 
             (dk_logic.forall _p_A_T 
                (x:(cc.eT _p_A_T) =>
                 dk_logic.ebP 
                   (basics._equal_ basics.bool__t 
                      (abst_mem (builtins.cons _p_A_T e l) x) dk_bool.false)))) ->
        dk_logic.eP 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_A_T) 
                (builtins.cons _p_A_T e l) (builtins.nil _p_A_T)))) =>
       zen.nnpp 
         (zen.forall (basics.list__t _p_A_T) 
            (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
             zen.imp 
               (zen.imp 
                  (zen.forall _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (basics._equal_ basics.bool__t 
                              (abst_mem v_Vzb v_Vac) dk_bool.false)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                           (builtins.nil _p_A_T))))) 
               (zen.forall _p_A_T 
                  (v_Vbc:(zen.term _p_A_T) =>
                   zen.imp 
                     (zen.forall _p_A_T 
                        (v_Vac:(zen.term _p_A_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (basics._equal_ basics.bool__t 
                                 (abst_mem 
                                    (builtins.cons _p_A_T v_Vbc v_Vzb) v_Vac) 
                                 dk_bool.false)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ (basics.list__t _p_A_T) 
                              (builtins.cons _p_A_T v_Vbc v_Vzb) 
                              (builtins.nil _p_A_T)))))))) 
         (v_Vcc:
          (zen.proof 
             (zen.not 
                (zen.forall (basics.list__t _p_A_T) 
                   (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
                    zen.imp 
                      (zen.imp 
                         (zen.forall _p_A_T 
                            (v_Vac:(zen.term _p_A_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ basics.bool__t 
                                     (abst_mem v_Vzb v_Vac) dk_bool.false)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                                  (builtins.nil _p_A_T))))) 
                      (zen.forall _p_A_T 
                         (v_Vbc:(zen.term _p_A_T) =>
                          zen.imp 
                            (zen.forall _p_A_T 
                               (v_Vac:(zen.term _p_A_T) =>
                                zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ basics.bool__t 
                                        (abst_mem 
                                           (builtins.cons _p_A_T v_Vbc v_Vzb) 
                                           v_Vac) dk_bool.false)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ (basics.list__t _p_A_T) 
                                     (builtins.cons _p_A_T v_Vbc v_Vzb) 
                                     (builtins.nil _p_A_T)))))))))) =>
          zen.Rnotall (basics.list__t _p_A_T) 
            (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
             zen.imp 
               (zen.imp 
                  (zen.forall _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (basics._equal_ basics.bool__t 
                              (abst_mem v_Vzb v_Vac) dk_bool.false)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                           (builtins.nil _p_A_T))))) 
               (zen.forall _p_A_T 
                  (v_Vbc:(zen.term _p_A_T) =>
                   zen.imp 
                     (zen.forall _p_A_T 
                        (v_Vac:(zen.term _p_A_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (basics._equal_ basics.bool__t 
                                 (abst_mem 
                                    (builtins.cons _p_A_T v_Vbc v_Vzb) v_Vac) 
                                 dk_bool.false)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ (basics.list__t _p_A_T) 
                              (builtins.cons _p_A_T v_Vbc v_Vzb) 
                              (builtins.nil _p_A_T))))))) 
            (v_Vdc:(zen.term (basics.list__t _p_A_T)) =>
             v_Vec:
             (zen.proof 
                (zen.not 
                   (zen.imp 
                      (zen.imp 
                         (zen.forall _p_A_T 
                            (v_Vac:(zen.term _p_A_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ basics.bool__t 
                                     (abst_mem v_Vdc v_Vac) dk_bool.false)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ (basics.list__t _p_A_T) v_Vdc 
                                  (builtins.nil _p_A_T))))) 
                      (zen.forall _p_A_T 
                         (v_Vbc:(zen.term _p_A_T) =>
                          zen.imp 
                            (zen.forall _p_A_T 
                               (v_Vac:(zen.term _p_A_T) =>
                                zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ basics.bool__t 
                                        (abst_mem 
                                           (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                           v_Vac) dk_bool.false)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ (basics.list__t _p_A_T) 
                                     (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                     (builtins.nil _p_A_T))))))))) =>
             zen.Rnotimply 
               (zen.imp 
                  (zen.forall _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (basics._equal_ basics.bool__t 
                              (abst_mem v_Vdc v_Vac) dk_bool.false)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ (basics.list__t _p_A_T) v_Vdc 
                           (builtins.nil _p_A_T))))) 
               (zen.forall _p_A_T 
                  (v_Vbc:(zen.term _p_A_T) =>
                   zen.imp 
                     (zen.forall _p_A_T 
                        (v_Vac:(zen.term _p_A_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (basics._equal_ basics.bool__t 
                                 (abst_mem 
                                    (builtins.cons _p_A_T v_Vbc v_Vdc) v_Vac) 
                                 dk_bool.false)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ (basics.list__t _p_A_T) 
                              (builtins.cons _p_A_T v_Vbc v_Vdc) 
                              (builtins.nil _p_A_T)))))) 
               (v_Vfc:
                (zen.proof 
                   (zen.imp 
                      (zen.forall _p_A_T 
                         (v_Vac:(zen.term _p_A_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (basics._equal_ basics.bool__t 
                                  (abst_mem v_Vdc v_Vac) dk_bool.false)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._equal_ (basics.list__t _p_A_T) v_Vdc 
                               (builtins.nil _p_A_T)))))) =>
                v_Vgc:
                (zen.proof 
                   (zen.not 
                      (zen.forall _p_A_T 
                         (v_Vbc:(zen.term _p_A_T) =>
                          zen.imp 
                            (zen.forall _p_A_T 
                               (v_Vac:(zen.term _p_A_T) =>
                                zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ basics.bool__t 
                                        (abst_mem 
                                           (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                           v_Vac) dk_bool.false)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ (basics.list__t _p_A_T) 
                                     (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                     (builtins.nil _p_A_T)))))))) =>
                zen.Rall (basics.list__t _p_A_T) 
                  (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
                   zen.forall _p_A_T 
                     (v_Vbc:(zen.term _p_A_T) =>
                      zen.imp 
                        (zen.forall _p_A_T 
                           (v_Vac:(zen.term _p_A_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ basics.bool__t 
                                    (abst_mem 
                                       (builtins.cons _p_A_T v_Vbc v_Vzb) 
                                       v_Vac) dk_bool.false)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ (basics.list__t _p_A_T) 
                                 (builtins.cons _p_A_T v_Vbc v_Vzb) 
                                 (builtins.nil _p_A_T)))))) v_Vdc 
                  (v_Vhc:
                   (zen.proof 
                      (zen.forall _p_A_T 
                         (v_Vbc:(zen.term _p_A_T) =>
                          zen.imp 
                            (zen.forall _p_A_T 
                               (v_Vac:(zen.term _p_A_T) =>
                                zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ basics.bool__t 
                                        (abst_mem 
                                           (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                           v_Vac) dk_bool.false)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ (basics.list__t _p_A_T) 
                                     (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                     (builtins.nil _p_A_T))))))) =>
                   zen.Raxiom 
                     (zen.forall _p_A_T 
                        (v_Vbc:(zen.term _p_A_T) =>
                         zen.imp 
                           (zen.forall _p_A_T 
                              (v_Vac:(zen.term _p_A_T) =>
                               zen.triangle 
                                 (focal.is_true 
                                    (basics._equal_ basics.bool__t 
                                       (abst_mem 
                                          (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                          v_Vac) dk_bool.false)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_A_T) 
                                    (builtins.cons _p_A_T v_Vbc v_Vdc) 
                                    (builtins.nil _p_A_T)))))) v_Vhc v_Vgc) 
                  __F_2_1_LEMMA) v_Vec) v_Vcc)) 
        (l:(cc.eT (basics.list__t _p_A_T)) =>
         e:(cc.eT _p_A_T) =>
         H:
         (dk_logic.eP 
            (dk_logic.forall _p_A_T 
               (x:(cc.eT _p_A_T) =>
                dk_logic.ebP 
                  (basics._equal_ basics.bool__t 
                     (abst_mem (builtins.cons _p_A_T e l) x) dk_bool.false)))) =>
         (__F_2_1_1_LEMMA:
          (dk_logic.eP (dk_logic.ebP (abst_mem (builtins.cons _p_A_T e l) e))) =>
          dk_builtins.magic_prove 
            (dk_logic.ebP 
               (basics._equal_ (basics.list__t _p_A_T) 
                  (builtins.cons _p_A_T e l) (builtins.nil _p_A_T)))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true (abst_mem (builtins.cons _p_A_T e l) e))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_mem (builtins.cons _p_A_T e l) e))))) =>
               zen.Rall (basics.list__t _p_A_T) 
                 (v_Vac:(zen.term (basics.list__t _p_A_T)) =>
                  zen.forall _p_A_T 
                    (v_Vbc:(zen.term _p_A_T) =>
                     zen.forall _p_A_T 
                       (v_Vcc:(zen.term _p_A_T) =>
                        zen.eqv 
                          (zen.or 
                             (zen.triangle 
                                (focal.is_true (abst_mem v_Vac v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ _p_A_T v_Vbc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T v_Vcc v_Vac) 
                                   v_Vbc)))))) l 
                 (v_Vdc:
                  (zen.proof 
                     (zen.forall _p_A_T 
                        (v_Vbc:(zen.term _p_A_T) =>
                         zen.forall _p_A_T 
                           (v_Vcc:(zen.term _p_A_T) =>
                            zen.eqv 
                              (zen.or 
                                 (zen.triangle 
                                    (focal.is_true (abst_mem l v_Vbc))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._equal_ _p_A_T v_Vbc v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_mem (builtins.cons _p_A_T v_Vcc l) 
                                       v_Vbc))))))) =>
                  zen.Rall _p_A_T 
                    (v_Vbc:(zen.term _p_A_T) =>
                     zen.forall _p_A_T 
                       (v_Vcc:(zen.term _p_A_T) =>
                        zen.eqv 
                          (zen.or 
                             (zen.triangle (focal.is_true (abst_mem l v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ _p_A_T v_Vbc v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T v_Vcc l) 
                                   v_Vbc))))) e 
                    (v_Vec:
                     (zen.proof 
                        (zen.forall _p_A_T 
                           (v_Vcc:(zen.term _p_A_T) =>
                            zen.eqv 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_mem l e))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._equal_ _p_A_T e v_Vcc)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_mem (builtins.cons _p_A_T v_Vcc l) 
                                       e)))))) =>
                     zen.Rall _p_A_T 
                       (v_Vcc:(zen.term _p_A_T) =>
                        zen.eqv 
                          (zen.or 
                             (zen.triangle (focal.is_true (abst_mem l e))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ _p_A_T e v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T v_Vcc l) e)))) 
                       e 
                       (v_Vfc:
                        (zen.proof 
                           (zen.eqv 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_mem l e))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._equal_ _p_A_T e e)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_mem (builtins.cons _p_A_T e l) e))))) =>
                        zen.Requiv 
                          (zen.or 
                             (zen.triangle (focal.is_true (abst_mem l e))) 
                             (zen.triangle 
                                (focal.is_true (basics._equal_ _p_A_T e e)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_mem (builtins.cons _p_A_T e l) e))) 
                          (v_Vgc:
                           (zen.proof 
                              (zen.not 
                                 (zen.or 
                                    (zen.triangle 
                                       (focal.is_true (abst_mem l e))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._equal_ _p_A_T e e)))))) =>
                           v_Vzb:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_mem (builtins.cons _p_A_T e l) e))))) =>
                           zen.Rnotor 
                             (zen.triangle (focal.is_true (abst_mem l e))) 
                             (zen.triangle 
                                (focal.is_true (basics._equal_ _p_A_T e e))) 
                             (v_Vhc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_mem l e))))) =>
                              v_Vic:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics.syntactic_equal _p_A_T e e))))) =>
                              focal.zenon_not_syntactic_equal _p_A_T e e 
                                (v_Vjc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal _p_A_T e e)))) =>
                                 zen.Rnoteq _p_A_T e v_Vjc) v_Vic) v_Vgc) 
                          (v_Vkc:
                           (zen.proof 
                              (zen.or 
                                 (zen.triangle (focal.is_true (abst_mem l e))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._equal_ _p_A_T e e))))) =>
                           v_Vlc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_mem (builtins.cons _p_A_T e l) e)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_mem (builtins.cons _p_A_T e l) e))) 
                             v_Vlc v_Vzb) v_Vfc) v_Vec) v_Vdc) abst_mem_spec))))) 
    (zen.nnpp 
       (zen.imp 
          (zen.forall _p_A_T 
             (v_Vzb:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true 
                   (basics._equal_ basics.bool__t 
                      (abst_mem (builtins.nil _p_A_T) v_Vzb) dk_bool.false)))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ 
                   (basics.list__t dk_builtins.weak_poly_var_ty) 
                   (builtins.nil dk_builtins.weak_poly_var_ty) 
                   (builtins.nil dk_builtins.weak_poly_var_ty))))) 
       (v_Vac:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.forall _p_A_T 
                    (v_Vzb:(zen.term _p_A_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t 
                             (abst_mem (builtins.nil _p_A_T) v_Vzb) 
                             dk_bool.false)))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ 
                          (basics.list__t dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty))))))) =>
        zen.Rnotimply 
          (zen.forall _p_A_T 
             (v_Vzb:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true 
                   (basics._equal_ basics.bool__t 
                      (abst_mem (builtins.nil _p_A_T) v_Vzb) dk_bool.false)))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ 
                   (basics.list__t dk_builtins.weak_poly_var_ty) 
                   (builtins.nil dk_builtins.weak_poly_var_ty) 
                   (builtins.nil dk_builtins.weak_poly_var_ty)))) 
          (v_Vbc:
           (zen.proof 
              (zen.forall _p_A_T 
                 (v_Vzb:(zen.term _p_A_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (basics._equal_ basics.bool__t 
                          (abst_mem (builtins.nil _p_A_T) v_Vzb) 
                          dk_bool.false))))) =>
           v_Vcc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal 
                          (basics.list__t dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty)))))) =>
           focal.zenon_not_syntactic_equal 
             (basics.list__t dk_builtins.weak_poly_var_ty) 
             (builtins.nil dk_builtins.weak_poly_var_ty) 
             (builtins.nil dk_builtins.weak_poly_var_ty) 
             (v_Vdc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal 
                          (basics.list__t dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty))))) =>
              zen.Rnoteq (basics.list__t dk_builtins.weak_poly_var_ty) 
                (builtins.nil dk_builtins.weak_poly_var_ty) v_Vdc) v_Vcc) 
          v_Vac)).

def Utils__mem_contains :
  _p_A_T:cc.uT ->
  abst_mem:((cc.eT (basics.list__t _p_A_T)) ->
            (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  abst_mem_empty_spec:(dk_logic.eP 
                         (dk_logic.forall _p_A_T 
                            (x:(cc.eT _p_A_T) =>
                             dk_logic.ebP 
                               (basics._tilda__tilda_ 
                                  (abst_mem (builtins.nil _p_A_T) x))))) ->
  abst_mem_cons_head:(dk_logic.eP 
                        (dk_logic.forall _p_A_T 
                           (x:(cc.eT _p_A_T) =>
                            dk_logic.forall (basics.list__t _p_A_T) 
                              (l:(cc.eT (basics.list__t _p_A_T)) =>
                               dk_logic.ebP 
                                 (abst_mem (builtins.cons _p_A_T x l) x))))) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_A_T) 
       (l:(cc.eT (basics.list__t _p_A_T)) =>
        dk_logic.eqv 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (basics._equal_ (basics.list__t _p_A_T) l 
                   (builtins.nil _p_A_T)))) 
          (dk_logic.exists _p_A_T 
             (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_mem l x)))))
  :=
  _p_A_T:cc.uT =>
  abst_mem:
  ((cc.eT (basics.list__t _p_A_T)) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  abst_mem_empty_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.ebP 
           (basics._tilda__tilda_ (abst_mem (builtins.nil _p_A_T) x))))) =>
  abst_mem_cons_head:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall (basics.list__t _p_A_T) 
           (l:(cc.eT (basics.list__t _p_A_T)) =>
            dk_logic.ebP (abst_mem (builtins.cons _p_A_T x l) x))))) =>
  (__G_1_LEMMA:
   (l:(cc.eT (basics.list__t _p_A_T)) ->
    dk_logic.eP 
      (dk_logic.imp 
         (dk_logic.ebP 
            (basics._equal_ (basics.list__t _p_A_T) l (builtins.nil _p_A_T))) 
         (dk_logic.forall _p_A_T 
            (x:(cc.eT _p_A_T) =>
             dk_logic.ebP (basics._tilda__tilda_ (abst_mem l x)))))) =>
   (__G_2_LEMMA:
    (dk_logic.eP 
       (dk_logic.forall (basics.list__t _p_A_T) 
          (l:(cc.eT (basics.list__t _p_A_T)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (basics._tilda__tilda_ 
                   (basics._equal_ (basics.list__t _p_A_T) l 
                      (builtins.nil _p_A_T)))) 
             (dk_logic.exists _p_A_T 
                (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_mem l x)))))) =>
    zen.nnpp 
      (zen.forall (basics.list__t _p_A_T) 
         (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
          zen.eqv 
            (zen.triangle 
               (focal.is_true 
                  (basics._tilda__tilda_ 
                     (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                        (builtins.nil _p_A_T))))) 
            (zen.exists _p_A_T 
               (v_Vac:(zen.term _p_A_T) =>
                zen.triangle (focal.is_true (abst_mem v_Vzb v_Vac)))))) 
      (v_Vbc:
       (zen.proof 
          (zen.not 
             (zen.forall (basics.list__t _p_A_T) 
                (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
                 zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._tilda__tilda_ 
                            (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                               (builtins.nil _p_A_T))))) 
                   (zen.exists _p_A_T 
                      (v_Vac:(zen.term _p_A_T) =>
                       zen.triangle (focal.is_true (abst_mem v_Vzb v_Vac)))))))) =>
       zen.Rnotall (basics.list__t _p_A_T) 
         (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
          zen.eqv 
            (zen.triangle 
               (focal.is_true 
                  (basics._tilda__tilda_ 
                     (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                        (builtins.nil _p_A_T))))) 
            (zen.exists _p_A_T 
               (v_Vac:(zen.term _p_A_T) =>
                zen.triangle (focal.is_true (abst_mem v_Vzb v_Vac))))) 
         (v_Vcc:(zen.term (basics.list__t _p_A_T)) =>
          v_Vdc:
          (zen.proof 
             (zen.not 
                (zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._tilda__tilda_ 
                            (basics._equal_ (basics.list__t _p_A_T) v_Vcc 
                               (builtins.nil _p_A_T))))) 
                   (zen.exists _p_A_T 
                      (v_Vac:(zen.term _p_A_T) =>
                       zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac))))))) =>
          zen.Rnotequiv 
            (zen.triangle 
               (focal.is_true 
                  (basics._tilda__tilda_ 
                     (basics._equal_ (basics.list__t _p_A_T) v_Vcc 
                        (builtins.nil _p_A_T))))) 
            (zen.exists _p_A_T 
               (v_Vac:(zen.term _p_A_T) =>
                zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac)))) 
            (v_Vec:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._tilda__tilda_ 
                            (basics.syntactic_equal (basics.list__t _p_A_T) 
                               v_Vcc (builtins.nil _p_A_T))))))) =>
             v_Vfc:
             (zen.proof 
                (zen.exists _p_A_T 
                   (v_Vac:(zen.term _p_A_T) =>
                    zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac))))) =>
             zen.Rex _p_A_T 
               (v_Vac:(zen.term _p_A_T) =>
                zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac))) 
               (v_Vgc:(zen.term _p_A_T) =>
                v_Vhc:
                (zen.proof 
                   (zen.triangle (focal.is_true (abst_mem v_Vcc v_Vgc)))) =>
                focal.zenon_focal_notnot 
                  (basics.syntactic_equal (basics.list__t _p_A_T) v_Vcc 
                     (builtins.nil _p_A_T)) 
                  (v_Vic:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (basics.syntactic_equal (basics.list__t _p_A_T) 
                               v_Vcc (builtins.nil _p_A_T))))) =>
                   focal.zenon_syntactic_equal (basics.list__t _p_A_T) v_Vcc 
                     (builtins.nil _p_A_T) 
                     (v_Vjc:
                      (zen.proof 
                         (zen.triangle 
                            (zen.equal (basics.list__t _p_A_T) v_Vcc 
                               (builtins.nil _p_A_T)))) =>
                      zen.Rall (basics.list__t _p_A_T) 
                        (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_A_T) 
                                    v_Vzb (builtins.nil _p_A_T)))) 
                           (zen.forall _p_A_T 
                              (v_Vac:(zen.term _p_A_T) =>
                               zen.triangle 
                                 (focal.is_true 
                                    (basics._tilda__tilda_ 
                                       (abst_mem v_Vzb v_Vac)))))) v_Vcc 
                        (v_Vkc:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ (basics.list__t _p_A_T) 
                                        v_Vcc (builtins.nil _p_A_T)))) 
                               (zen.forall _p_A_T 
                                  (v_Vac:(zen.term _p_A_T) =>
                                   zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (abst_mem v_Vcc v_Vac))))))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_A_T) 
                                    v_Vcc (builtins.nil _p_A_T)))) 
                           (zen.forall _p_A_T 
                              (v_Vac:(zen.term _p_A_T) =>
                               zen.triangle 
                                 (focal.is_true 
                                    (basics._tilda__tilda_ 
                                       (abst_mem v_Vcc v_Vac))))) 
                           (v_Vlc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics.syntactic_equal 
                                           (basics.list__t _p_A_T) v_Vcc 
                                           (builtins.nil _p_A_T)))))) =>
                            focal.zenon_not_syntactic_equal 
                              (basics.list__t _p_A_T) v_Vcc 
                              (builtins.nil _p_A_T) 
                              (v_Vmc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_A_T) 
                                           v_Vcc (builtins.nil _p_A_T))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal (basics.list__t _p_A_T) v_Vcc 
                                       (builtins.nil _p_A_T))) v_Vjc v_Vmc) 
                              v_Vlc) 
                           (v_Vnc:
                            (zen.proof 
                               (zen.forall _p_A_T 
                                  (v_Vac:(zen.term _p_A_T) =>
                                   zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (abst_mem v_Vcc v_Vac)))))) =>
                            zen.Rall _p_A_T 
                              (v_Vac:(zen.term _p_A_T) =>
                               zen.triangle 
                                 (focal.is_true 
                                    (basics._tilda__tilda_ 
                                       (abst_mem v_Vcc v_Vac)))) v_Vgc 
                              (v_Voc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (abst_mem v_Vcc v_Vgc))))) =>
                               focal.zenon_focal_not (abst_mem v_Vcc v_Vgc) 
                                 (v_Vpc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_mem v_Vcc v_Vgc))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (abst_mem v_Vcc v_Vgc))) 
                                    v_Vhc v_Vpc) v_Voc) v_Vnc) v_Vkc) 
                        __G_1_LEMMA) v_Vic) v_Vec) v_Vfc) 
            (v_Vqc:
             (zen.proof 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ 
                         (basics.syntactic_equal (basics.list__t _p_A_T) 
                            v_Vcc (builtins.nil _p_A_T)))))) =>
             v_Vrc:
             (zen.proof 
                (zen.not 
                   (zen.exists _p_A_T 
                      (v_Vac:(zen.term _p_A_T) =>
                       zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac)))))) =>
             zen.Rall (basics.list__t _p_A_T) 
               (v_Vzb:(zen.term (basics.list__t _p_A_T)) =>
                zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (basics._equal_ (basics.list__t _p_A_T) v_Vzb 
                              (builtins.nil _p_A_T))))) 
                  (zen.exists _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle (focal.is_true (abst_mem v_Vzb v_Vac))))) 
               v_Vcc 
               (v_Vsc:
                (zen.proof 
                   (zen.imp 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._tilda__tilda_ 
                               (basics._equal_ (basics.list__t _p_A_T) v_Vcc 
                                  (builtins.nil _p_A_T))))) 
                      (zen.exists _p_A_T 
                         (v_Vac:(zen.term _p_A_T) =>
                          zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac)))))) =>
                zen.Rimply 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (basics._equal_ (basics.list__t _p_A_T) v_Vcc 
                              (builtins.nil _p_A_T))))) 
                  (zen.exists _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac)))) 
                  (v_Vec:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (basics.syntactic_equal 
                                     (basics.list__t _p_A_T) v_Vcc 
                                     (builtins.nil _p_A_T))))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (basics.syntactic_equal 
                                 (basics.list__t _p_A_T) v_Vcc 
                                 (builtins.nil _p_A_T))))) v_Vqc v_Vec) 
                  (v_Vfc:
                   (zen.proof 
                      (zen.exists _p_A_T 
                         (v_Vac:(zen.term _p_A_T) =>
                          zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac))))) =>
                   zen.Raxiom 
                     (zen.exists _p_A_T 
                        (v_Vac:(zen.term _p_A_T) =>
                         zen.triangle (focal.is_true (abst_mem v_Vcc v_Vac)))) 
                     v_Vfc v_Vrc) v_Vsc) __G_2_LEMMA) v_Vdc) v_Vbc)) 
     ((__G_2_1_LEMMA:
       (dk_logic.eP 
          (dk_logic.imp 
             (dk_logic.ebP 
                (basics._tilda__tilda_ 
                   (basics._equal_ 
                      (basics.list__t dk_builtins.weak_poly_var_ty) 
                      (builtins.nil dk_builtins.weak_poly_var_ty) 
                      (builtins.nil dk_builtins.weak_poly_var_ty)))) 
             (dk_logic.exists _p_A_T 
                (x:(cc.eT _p_A_T) =>
                 dk_logic.ebP (abst_mem (builtins.nil _p_A_T) x))))) =>
       (__G_2_2_LEMMA:
        (l:(cc.eT (basics.list__t _p_A_T)) ->
         a:(cc.eT _p_A_T) ->
         I:(dk_logic.eP 
              (dk_logic.imp 
                 (dk_logic.ebP 
                    (basics._tilda__tilda_ 
                       (basics._equal_ (basics.list__t _p_A_T) l 
                          (builtins.nil _p_A_T)))) 
                 (dk_logic.exists _p_A_T 
                    (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_mem l x))))) ->
         dk_logic.eP 
           (dk_logic.exists _p_A_T 
              (x:(cc.eT _p_A_T) =>
               dk_logic.ebP (abst_mem (builtins.cons _p_A_T a l) x)))) =>
        dk_builtins.magic_prove 
          (dk_logic.forall (basics.list__t _p_A_T) 
             (l:(cc.eT (basics.list__t _p_A_T)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (basics._tilda__tilda_ 
                      (basics._equal_ (basics.list__t _p_A_T) l 
                         (builtins.nil _p_A_T)))) 
                (dk_logic.exists _p_A_T 
                   (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_mem l x)))))) 
         (l:(cc.eT (basics.list__t _p_A_T)) =>
          a:(cc.eT _p_A_T) =>
          I:
          (dk_logic.eP 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (basics._tilda__tilda_ 
                      (basics._equal_ (basics.list__t _p_A_T) l 
                         (builtins.nil _p_A_T)))) 
                (dk_logic.exists _p_A_T 
                   (x:(cc.eT _p_A_T) => dk_logic.ebP (abst_mem l x))))) =>
          (__G_2_2_1_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP (abst_mem (builtins.cons _p_A_T a l) a))) =>
           zen.nnpp 
             (zen.exists _p_A_T 
                (v_Vzb:(zen.term _p_A_T) =>
                 zen.triangle 
                   (focal.is_true (abst_mem (builtins.cons _p_A_T a l) v_Vzb)))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.exists _p_A_T 
                       (v_Vzb:(zen.term _p_A_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_mem (builtins.cons _p_A_T a l) v_Vzb)))))) =>
              zen.Rnotex _p_A_T 
                (v_Vzb:(zen.term _p_A_T) =>
                 zen.triangle 
                   (focal.is_true (abst_mem (builtins.cons _p_A_T a l) v_Vzb))) 
                a 
                (v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_mem (builtins.cons _p_A_T a l) a))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true (abst_mem (builtins.cons _p_A_T a l) a))) 
                   __G_2_2_1_LEMMA v_Vbc) v_Vac)) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true (abst_mem (builtins.cons _p_A_T a l) a))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_mem (builtins.cons _p_A_T a l) a))))) =>
                zen.Rall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.forall (basics.list__t _p_A_T) 
                     (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_mem (builtins.cons _p_A_T v_Vac v_Vbc) v_Vac)))) 
                  a 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall (basics.list__t _p_A_T) 
                         (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
                          zen.triangle 
                            (focal.is_true 
                               (abst_mem (builtins.cons _p_A_T a v_Vbc) a))))) =>
                   zen.Rall (basics.list__t _p_A_T) 
                     (v_Vbc:(zen.term (basics.list__t _p_A_T)) =>
                      zen.triangle 
                        (focal.is_true 
                           (abst_mem (builtins.cons _p_A_T a v_Vbc) a))) l 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_mem (builtins.cons _p_A_T a l) a)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_mem (builtins.cons _p_A_T a l) a))) 
                        v_Vdc v_Vzb) v_Vcc) abst_mem_cons_head)))) 
        (zen.nnpp 
           (zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (basics._equal_ 
                          (basics.list__t dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty))))) 
              (zen.exists _p_A_T 
                 (v_Vzb:(zen.term _p_A_T) =>
                  zen.triangle 
                    (focal.is_true (abst_mem (builtins.nil _p_A_T) v_Vzb))))) 
           (v_Vac:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (basics._equal_ 
                                 (basics.list__t dk_builtins.weak_poly_var_ty) 
                                 (builtins.nil dk_builtins.weak_poly_var_ty) 
                                 (builtins.nil dk_builtins.weak_poly_var_ty))))) 
                     (zen.exists _p_A_T 
                        (v_Vzb:(zen.term _p_A_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_mem (builtins.nil _p_A_T) v_Vzb))))))) =>
            zen.Rnotimply 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (basics._equal_ 
                          (basics.list__t dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty) 
                          (builtins.nil dk_builtins.weak_poly_var_ty))))) 
              (zen.exists _p_A_T 
                 (v_Vzb:(zen.term _p_A_T) =>
                  zen.triangle 
                    (focal.is_true (abst_mem (builtins.nil _p_A_T) v_Vzb)))) 
              (v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (basics.syntactic_equal 
                              (basics.list__t dk_builtins.weak_poly_var_ty) 
                              (builtins.nil dk_builtins.weak_poly_var_ty) 
                              (builtins.nil dk_builtins.weak_poly_var_ty)))))) =>
               v_Vcc:
               (zen.proof 
                  (zen.not 
                     (zen.exists _p_A_T 
                        (v_Vzb:(zen.term _p_A_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (abst_mem (builtins.nil _p_A_T) v_Vzb)))))) =>
               focal.zenon_focal_not 
                 (basics.syntactic_equal 
                    (basics.list__t dk_builtins.weak_poly_var_ty) 
                    (builtins.nil dk_builtins.weak_poly_var_ty) 
                    (builtins.nil dk_builtins.weak_poly_var_ty)) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (basics.syntactic_equal 
                                 (basics.list__t dk_builtins.weak_poly_var_ty) 
                                 (builtins.nil dk_builtins.weak_poly_var_ty) 
                                 (builtins.nil dk_builtins.weak_poly_var_ty)))))) =>
                  focal.zenon_not_syntactic_equal 
                    (basics.list__t dk_builtins.weak_poly_var_ty) 
                    (builtins.nil dk_builtins.weak_poly_var_ty) 
                    (builtins.nil dk_builtins.weak_poly_var_ty) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal 
                                 (basics.list__t dk_builtins.weak_poly_var_ty) 
                                 (builtins.nil dk_builtins.weak_poly_var_ty) 
                                 (builtins.nil dk_builtins.weak_poly_var_ty))))) =>
                     zen.Rnoteq 
                       (basics.list__t dk_builtins.weak_poly_var_ty) 
                       (builtins.nil dk_builtins.weak_poly_var_ty) v_Vec) 
                    v_Vdc) v_Vbc) v_Vac)))) 
    (l:(cc.eT (basics.list__t _p_A_T)) =>
     zen.nnpp 
       (zen.imp 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_A_T) l 
                   (builtins.nil _p_A_T)))) 
          (zen.forall _p_A_T 
             (v_Vcc:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true (basics._tilda__tilda_ (abst_mem l v_Vcc)))))) 
       (v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_A_T) l 
                          (builtins.nil _p_A_T)))) 
                 (zen.forall _p_A_T 
                    (v_Vcc:(zen.term _p_A_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ (abst_mem l v_Vcc)))))))) =>
        zen.Rnotimply 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_A_T) l 
                   (builtins.nil _p_A_T)))) 
          (zen.forall _p_A_T 
             (v_Vcc:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true (basics._tilda__tilda_ (abst_mem l v_Vcc))))) 
          (v_Vec:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (basics.syntactic_equal (basics.list__t _p_A_T) l 
                       (builtins.nil _p_A_T))))) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_A_T 
                    (v_Vcc:(zen.term _p_A_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ (abst_mem l v_Vcc))))))) =>
           zen.Rnotall _p_A_T 
             (v_Vcc:(zen.term _p_A_T) =>
              zen.triangle 
                (focal.is_true (basics._tilda__tilda_ (abst_mem l v_Vcc)))) 
             (v_Vgc:(zen.term _p_A_T) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ (abst_mem l v_Vgc)))))) =>
              focal.zenon_focal_notnot (abst_mem l v_Vgc) 
                (v_Vic:
                 (zen.proof (zen.triangle (focal.is_true (abst_mem l v_Vgc)))) =>
                 focal.zenon_syntactic_equal (basics.list__t _p_A_T) l 
                   (builtins.nil _p_A_T) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal (basics.list__t _p_A_T) l 
                             (builtins.nil _p_A_T)))) =>
                    zen.Rall _p_A_T 
                      (v_Vcc:(zen.term _p_A_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (basics._tilda__tilda_ 
                               (abst_mem (builtins.nil _p_A_T) v_Vcc)))) 
                      v_Vgc 
                      (v_Vkc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (abst_mem (builtins.nil _p_A_T) v_Vgc))))) =>
                       focal.zenon_focal_not 
                         (abst_mem (builtins.nil _p_A_T) v_Vgc) 
                         (v_Vlc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_mem (builtins.nil _p_A_T) v_Vgc))))) =>
                          zen.Rsubst basics.bool__t 
                            (v_Vmc:(zen.term basics.bool__t) =>
                             zen.triangle (focal.is_true v_Vmc)) 
                            (abst_mem l v_Vgc) 
                            (abst_mem (builtins.nil _p_A_T) v_Vgc) 
                            (v_Vnc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_mem l v_Vgc) 
                                         (abst_mem (builtins.nil _p_A_T) 
                                            v_Vgc))))) =>
                             zen.Rsubst (basics.list__t _p_A_T) 
                               (v_Voc:(zen.term (basics.list__t _p_A_T)) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_mem v_Voc v_Vgc) 
                                        (abst_mem (builtins.nil _p_A_T) v_Vgc)))) 
                               l (builtins.nil _p_A_T) 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal (basics.list__t _p_A_T) 
                                            l (builtins.nil _p_A_T))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (zen.equal (basics.list__t _p_A_T) l 
                                        (builtins.nil _p_A_T))) v_Vjc v_Vpc) 
                               (v_Vqc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_mem (builtins.nil _p_A_T) 
                                               v_Vgc) 
                                            (abst_mem (builtins.nil _p_A_T) 
                                               v_Vgc))))) =>
                                zen.Rsubst _p_A_T 
                                  (v_Vrc:(zen.term _p_A_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_mem (builtins.nil _p_A_T) 
                                              v_Vrc) 
                                           (abst_mem (builtins.nil _p_A_T) 
                                              v_Vgc)))) v_Vgc v_Vgc 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_A_T v_Vgc v_Vgc)))) =>
                                   zen.Rnoteq _p_A_T v_Vgc v_Vsc) 
                                  (v_Vqc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_mem 
                                                  (builtins.nil _p_A_T) v_Vgc) 
                                               (abst_mem 
                                                  (builtins.nil _p_A_T) v_Vgc))))) =>
                                   zen.Rnoteq basics.bool__t 
                                     (abst_mem (builtins.nil _p_A_T) v_Vgc) 
                                     v_Vqc) v_Vqc) v_Vnc) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_mem (builtins.nil _p_A_T) v_Vgc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_mem (builtins.nil _p_A_T) v_Vgc))) 
                               v_Vtc v_Vlc) v_Vic) v_Vkc) abst_mem_empty_spec) 
                   v_Vec) v_Vhc) v_Vfc) v_Vdc)).

def Utils__collection_create
  :=
  _p_A_T:cc.uT =>
  Utils__mk_record _p_A_T basics.unit__t (Utils__append _p_A_T) 
    (Utils__length _p_A_T) (Utils__mem _p_A_T) (Utils__rm _p_A_T) 
    (Utils__append_left_neutral _p_A_T (Utils__append _p_A_T)) 
    (Utils__append_neutral _p_A_T (Utils__append _p_A_T)) 
    (Utils__append_right_neutral _p_A_T (Utils__append _p_A_T)) 
    (Utils__append_spec _p_A_T (Utils__append _p_A_T) (Utils__mem _p_A_T)) 
    (Utils__mem_empty_spec _p_A_T (Utils__mem _p_A_T)) 
    (Utils__mem_spec _p_A_T (Utils__mem _p_A_T)) 
    (basics.Basic_object__parse basics.unit__t) 
    (basics.Basic_object__print basics.unit__t) 
    (Utils__nil_unique _p_A_T (Utils__append _p_A_T) 
       (Utils__append_left_neutral _p_A_T (Utils__append _p_A_T))) 
    (Utils__nil_neutral _p_A_T (Utils__append _p_A_T) 
       (Utils__append_left_neutral _p_A_T (Utils__append _p_A_T)) 
       (Utils__append_right_neutral _p_A_T (Utils__append _p_A_T))) 
    (Utils__mem_cons_head _p_A_T (Utils__mem _p_A_T) 
       (Utils__mem_spec _p_A_T (Utils__mem _p_A_T))) 
    (Utils__mem_cons_tail _p_A_T (Utils__mem _p_A_T) 
       (Utils__mem_spec _p_A_T (Utils__mem _p_A_T))) 
    (Utils__not_mem_empty _p_A_T (Utils__mem _p_A_T) 
       (Utils__mem_spec _p_A_T (Utils__mem _p_A_T))) 
    (Utils__mem_contains _p_A_T (Utils__mem _p_A_T) 
       (Utils__mem_empty_spec _p_A_T (Utils__mem _p_A_T)) 
       (Utils__mem_cons_head _p_A_T (Utils__mem _p_A_T) 
          (Utils__mem_spec _p_A_T (Utils__mem _p_A_T)))).

def Collection__add_contains1 :
  _p_Elt_T:cc.uT ->
  abst_T:cc.uT ->
  abst_add:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_contains:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_add_contains:(dk_logic.eP 
                       (dk_logic.forall abst_T 
                          (c:(cc.eT abst_T) =>
                           dk_logic.forall _p_Elt_T 
                             (e:(cc.eT _p_Elt_T) =>
                              dk_logic.forall _p_Elt_T 
                                (x:(cc.eT _p_Elt_T) =>
                                 dk_logic.eqv 
                                   (dk_logic.ebP 
                                      (abst_contains x (abst_add e c))) 
                                   (dk_logic.ebP 
                                      (basics._bar__bar_ 
                                         (basics._equal_ _p_Elt_T x e) 
                                         (abst_contains x c)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (c:(cc.eT abst_T) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.ebP (abst_contains e (abst_add e c)))))
  :=
  _p_Elt_T:cc.uT =>
  abst_T:cc.uT =>
  abst_add:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_add_contains:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (c:(cc.eT abst_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (x:(cc.eT _p_Elt_T) =>
               dk_logic.eqv (dk_logic.ebP (abst_contains x (abst_add e c))) 
                 (dk_logic.ebP 
                    (basics._bar__bar_ (basics._equal_ _p_Elt_T x e) 
                       (abst_contains x c)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.triangle 
             (focal.is_true (abst_contains v_Vac (abst_add v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_contains v_Vac (abst_add v_Vac v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.triangle 
             (focal.is_true (abst_contains v_Vac (abst_add v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_contains v_Vac (abst_add v_Vac v_Vcc))))))) =>
        zen.Rnotall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.triangle 
             (focal.is_true (abst_contains v_Vac (abst_add v_Vac v_Vcc)))) 
          (v_Vec:(zen.term _p_Elt_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_contains v_Vec (abst_add v_Vec v_Vcc)))))) =>
           zen.Rall abst_T 
             (v_Vzb:(zen.term abst_T) =>
              zen.forall _p_Elt_T 
                (v_Vac:(zen.term _p_Elt_T) =>
                 zen.forall _p_Elt_T 
                   (v_Vgc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_contains v_Vgc (abst_add v_Vac v_Vzb)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ 
                               (basics._equal_ _p_Elt_T v_Vgc v_Vac) 
                               (abst_contains v_Vgc v_Vzb))))))) v_Vcc 
             (v_Vhc:
              (zen.proof 
                 (zen.forall _p_Elt_T 
                    (v_Vac:(zen.term _p_Elt_T) =>
                     zen.forall _p_Elt_T 
                       (v_Vgc:(zen.term _p_Elt_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vgc (abst_add v_Vac v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._bar__bar_ 
                                   (basics._equal_ _p_Elt_T v_Vgc v_Vac) 
                                   (abst_contains v_Vgc v_Vcc)))))))) =>
              zen.Rall _p_Elt_T 
                (v_Vac:(zen.term _p_Elt_T) =>
                 zen.forall _p_Elt_T 
                   (v_Vgc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_contains v_Vgc (abst_add v_Vac v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ 
                               (basics._equal_ _p_Elt_T v_Vgc v_Vac) 
                               (abst_contains v_Vgc v_Vcc)))))) v_Vec 
                (v_Vic:
                 (zen.proof 
                    (zen.forall _p_Elt_T 
                       (v_Vgc:(zen.term _p_Elt_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vgc (abst_add v_Vec v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._bar__bar_ 
                                   (basics._equal_ _p_Elt_T v_Vgc v_Vec) 
                                   (abst_contains v_Vgc v_Vcc))))))) =>
                 zen.Rall _p_Elt_T 
                   (v_Vgc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_contains v_Vgc (abst_add v_Vec v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ 
                               (basics._equal_ _p_Elt_T v_Vgc v_Vec) 
                               (abst_contains v_Vgc v_Vcc))))) v_Vec 
                   (v_Vjc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vec (abst_add v_Vec v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._bar__bar_ 
                                   (basics._equal_ _p_Elt_T v_Vec v_Vec) 
                                   (abst_contains v_Vec v_Vcc)))))) =>
                    zen.Requiv 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_contains v_Vec (abst_add v_Vec v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ 
                               (basics._equal_ _p_Elt_T v_Vec v_Vec) 
                               (abst_contains v_Vec v_Vcc)))) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_contains v_Vec 
                                      (abst_add v_Vec v_Vcc)))))) =>
                       v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._bar__bar_ 
                                      (basics.syntactic_equal _p_Elt_T v_Vec 
                                         v_Vec) (abst_contains v_Vec v_Vcc)))))) =>
                       focal.zenon_focal_notor 
                         (basics.syntactic_equal _p_Elt_T v_Vec v_Vec) 
                         (abst_contains v_Vec v_Vcc) 
                         (v_Vlc:
                          (zen.proof 
                             (zen.not 
                                (zen.or 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics.syntactic_equal _p_Elt_T 
                                            v_Vec v_Vec))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_contains v_Vec v_Vcc)))))) =>
                          zen.Rnotor 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics.syntactic_equal _p_Elt_T v_Vec 
                                     v_Vec))) 
                            (zen.triangle 
                               (focal.is_true (abst_contains v_Vec v_Vcc))) 
                            (v_Vmc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics.syntactic_equal _p_Elt_T 
                                            v_Vec v_Vec))))) =>
                             v_Vnc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_contains v_Vec v_Vcc))))) =>
                             focal.zenon_not_syntactic_equal _p_Elt_T v_Vec 
                               v_Vec 
                               (v_Voc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_Elt_T v_Vec v_Vec)))) =>
                                zen.Rnoteq _p_Elt_T v_Vec v_Voc) v_Vmc) v_Vlc) 
                         v_Vkc) 
                      (v_Vpc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vec (abst_add v_Vec v_Vcc))))) =>
                       v_Vqc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._bar__bar_ 
                                   (basics.syntactic_equal _p_Elt_T v_Vec 
                                      v_Vec) (abst_contains v_Vec v_Vcc))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_contains v_Vec (abst_add v_Vec v_Vcc)))) 
                         v_Vpc v_Vfc) v_Vjc) v_Vic) v_Vhc) abst_add_contains) 
          v_Vdc) v_Vbc).

def Collection__add_contains2 :
  _p_Elt_T:cc.uT ->
  abst_T:cc.uT ->
  abst_add:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_contains:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_add_contains:(dk_logic.eP 
                       (dk_logic.forall abst_T 
                          (c:(cc.eT abst_T) =>
                           dk_logic.forall _p_Elt_T 
                             (e:(cc.eT _p_Elt_T) =>
                              dk_logic.forall _p_Elt_T 
                                (x:(cc.eT _p_Elt_T) =>
                                 dk_logic.eqv 
                                   (dk_logic.ebP 
                                      (abst_contains x (abst_add e c))) 
                                   (dk_logic.ebP 
                                      (basics._bar__bar_ 
                                         (basics._equal_ _p_Elt_T x e) 
                                         (abst_contains x c)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (c:(cc.eT abst_T) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.forall _p_Elt_T 
             (x:(cc.eT _p_Elt_T) =>
              dk_logic.imp 
                (dk_logic.not (dk_logic.ebP (basics._equal_ _p_Elt_T e x))) 
                (dk_logic.eqv 
                   (dk_logic.ebP (abst_contains x (abst_add e c))) 
                   (dk_logic.ebP (abst_contains x c)))))))
  :=
  _p_Elt_T:cc.uT =>
  abst_T:cc.uT =>
  abst_add:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_add_contains:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (c:(cc.eT abst_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (x:(cc.eT _p_Elt_T) =>
               dk_logic.eqv (dk_logic.ebP (abst_contains x (abst_add e c))) 
                 (dk_logic.ebP 
                    (basics._bar__bar_ (basics._equal_ _p_Elt_T x e) 
                       (abst_contains x c)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.forall _p_Elt_T 
             (v_Vbc:(zen.term _p_Elt_T) =>
              zen.imp 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (basics._equal_ _p_Elt_T v_Vac v_Vbc)))) 
                (zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_contains v_Vbc (abst_add v_Vac v_Vzb)))) 
                   (zen.triangle (focal.is_true (abst_contains v_Vbc v_Vzb)))))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.forall _p_Elt_T 
                    (v_Vbc:(zen.term _p_Elt_T) =>
                     zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._equal_ _p_Elt_T v_Vac v_Vbc)))) 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vbc (abst_add v_Vac v_Vzb)))) 
                          (zen.triangle 
                             (focal.is_true (abst_contains v_Vbc v_Vzb)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.forall _p_Elt_T 
             (v_Vbc:(zen.term _p_Elt_T) =>
              zen.imp 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (basics._equal_ _p_Elt_T v_Vac v_Vbc)))) 
                (zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_contains v_Vbc (abst_add v_Vac v_Vzb)))) 
                   (zen.triangle (focal.is_true (abst_contains v_Vbc v_Vzb))))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.forall _p_Elt_T 
                    (v_Vbc:(zen.term _p_Elt_T) =>
                     zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._equal_ _p_Elt_T v_Vac v_Vbc)))) 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vbc (abst_add v_Vac v_Vdc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_contains v_Vbc v_Vdc))))))))) =>
        zen.Rnotall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.forall _p_Elt_T 
             (v_Vbc:(zen.term _p_Elt_T) =>
              zen.imp 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (basics._equal_ _p_Elt_T v_Vac v_Vbc)))) 
                (zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_contains v_Vbc (abst_add v_Vac v_Vdc)))) 
                   (zen.triangle (focal.is_true (abst_contains v_Vbc v_Vdc)))))) 
          (v_Vfc:(zen.term _p_Elt_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_Elt_T 
                    (v_Vbc:(zen.term _p_Elt_T) =>
                     zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._equal_ _p_Elt_T v_Vfc v_Vbc)))) 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vbc (abst_add v_Vfc v_Vdc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_contains v_Vbc v_Vdc)))))))) =>
           zen.Rnotall _p_Elt_T 
             (v_Vbc:(zen.term _p_Elt_T) =>
              zen.imp 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (basics._equal_ _p_Elt_T v_Vfc v_Vbc)))) 
                (zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_contains v_Vbc (abst_add v_Vfc v_Vdc)))) 
                   (zen.triangle (focal.is_true (abst_contains v_Vbc v_Vdc))))) 
             (v_Vhc:(zen.term _p_Elt_T) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._equal_ _p_Elt_T v_Vfc v_Vhc)))) 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vhc (abst_add v_Vfc v_Vdc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_contains v_Vhc v_Vdc))))))) =>
              zen.Rnotimply 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true (basics._equal_ _p_Elt_T v_Vfc v_Vhc)))) 
                (zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_contains v_Vhc (abst_add v_Vfc v_Vdc)))) 
                   (zen.triangle (focal.is_true (abst_contains v_Vhc v_Vdc)))) 
                (v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal _p_Elt_T v_Vfc v_Vhc))))) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vhc (abst_add v_Vfc v_Vdc)))) 
                          (zen.triangle 
                             (focal.is_true (abst_contains v_Vhc v_Vdc)))))) =>
                 zen.Rnotequiv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_contains v_Vhc (abst_add v_Vfc v_Vdc)))) 
                   (zen.triangle (focal.is_true (abst_contains v_Vhc v_Vdc))) 
                   (v_Vlc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vhc (abst_add v_Vfc v_Vdc)))))) =>
                    v_Vmc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true (abst_contains v_Vhc v_Vdc)))) =>
                    zen.Rall abst_T 
                      (v_Vzb:(zen.term abst_T) =>
                       zen.forall _p_Elt_T 
                         (v_Vac:(zen.term _p_Elt_T) =>
                          zen.forall _p_Elt_T 
                            (v_Vbc:(zen.term _p_Elt_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_contains v_Vbc 
                                        (abst_add v_Vac v_Vzb)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._bar__bar_ 
                                        (basics._equal_ _p_Elt_T v_Vbc v_Vac) 
                                        (abst_contains v_Vbc v_Vzb))))))) 
                      v_Vdc 
                      (v_Vnc:
                       (zen.proof 
                          (zen.forall _p_Elt_T 
                             (v_Vac:(zen.term _p_Elt_T) =>
                              zen.forall _p_Elt_T 
                                (v_Vbc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_contains v_Vbc 
                                            (abst_add v_Vac v_Vdc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (basics._equal_ _p_Elt_T v_Vbc 
                                               v_Vac) 
                                            (abst_contains v_Vbc v_Vdc)))))))) =>
                       zen.Rall _p_Elt_T 
                         (v_Vac:(zen.term _p_Elt_T) =>
                          zen.forall _p_Elt_T 
                            (v_Vbc:(zen.term _p_Elt_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_contains v_Vbc 
                                        (abst_add v_Vac v_Vdc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._bar__bar_ 
                                        (basics._equal_ _p_Elt_T v_Vbc v_Vac) 
                                        (abst_contains v_Vbc v_Vdc)))))) 
                         v_Vfc 
                         (v_Voc:
                          (zen.proof 
                             (zen.forall _p_Elt_T 
                                (v_Vbc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_contains v_Vbc 
                                            (abst_add v_Vfc v_Vdc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (basics._equal_ _p_Elt_T v_Vbc 
                                               v_Vfc) 
                                            (abst_contains v_Vbc v_Vdc))))))) =>
                          zen.Rall _p_Elt_T 
                            (v_Vbc:(zen.term _p_Elt_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_contains v_Vbc 
                                        (abst_add v_Vfc v_Vdc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._bar__bar_ 
                                        (basics._equal_ _p_Elt_T v_Vbc v_Vfc) 
                                        (abst_contains v_Vbc v_Vdc))))) 
                            v_Vhc 
                            (v_Vpc:
                             (zen.proof 
                                (zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_contains v_Vhc 
                                            (abst_add v_Vfc v_Vdc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (basics._equal_ _p_Elt_T v_Vhc 
                                               v_Vfc) 
                                            (abst_contains v_Vhc v_Vdc)))))) =>
                             zen.Requiv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_contains v_Vhc 
                                        (abst_add v_Vfc v_Vdc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._bar__bar_ 
                                        (basics._equal_ _p_Elt_T v_Vhc v_Vfc) 
                                        (abst_contains v_Vhc v_Vdc)))) 
                               (v_Vlc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_contains v_Vhc 
                                               (abst_add v_Vfc v_Vdc)))))) =>
                                v_Vqc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._bar__bar_ 
                                               (basics.syntactic_equal 
                                                  _p_Elt_T v_Vhc v_Vfc) 
                                               (abst_contains v_Vhc v_Vdc)))))) =>
                                focal.zenon_focal_notor 
                                  (basics.syntactic_equal _p_Elt_T v_Vhc 
                                     v_Vfc) (abst_contains v_Vhc v_Vdc) 
                                  (v_Vrc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     _p_Elt_T v_Vhc v_Vfc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_contains v_Vhc v_Vdc)))))) =>
                                   zen.Rnotor 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics.syntactic_equal _p_Elt_T 
                                              v_Vhc v_Vfc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_contains v_Vhc v_Vdc))) 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     _p_Elt_T v_Vhc v_Vfc))))) =>
                                      v_Vtc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_contains v_Vhc v_Vdc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_contains v_Vhc v_Vdc))) 
                                        v_Vmc v_Vtc) v_Vrc) v_Vqc) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_contains v_Vhc 
                                            (abst_add v_Vfc v_Vdc))))) =>
                                v_Vvc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (basics.syntactic_equal _p_Elt_T 
                                               v_Vhc v_Vfc) 
                                            (abst_contains v_Vhc v_Vdc))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_contains v_Vhc 
                                           (abst_add v_Vfc v_Vdc)))) v_Vuc 
                                  v_Vlc) v_Vpc) v_Voc) v_Vnc) 
                      abst_add_contains) 
                   (v_Vuc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_contains v_Vhc (abst_add v_Vfc v_Vdc))))) =>
                    v_Vtc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_contains v_Vhc v_Vdc))))) =>
                    focal.zenon_not_syntactic_equal _p_Elt_T v_Vfc v_Vhc 
                      (v_Vwc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle (zen.equal _p_Elt_T v_Vfc v_Vhc)))) =>
                       zen.Rall abst_T 
                         (v_Vzb:(zen.term abst_T) =>
                          zen.forall _p_Elt_T 
                            (v_Vac:(zen.term _p_Elt_T) =>
                             zen.forall _p_Elt_T 
                               (v_Vbc:(zen.term _p_Elt_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_contains v_Vbc 
                                           (abst_add v_Vac v_Vzb)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ 
                                           (basics._equal_ _p_Elt_T v_Vbc 
                                              v_Vac) 
                                           (abst_contains v_Vbc v_Vzb))))))) 
                         v_Vdc 
                         (v_Vnc:
                          (zen.proof 
                             (zen.forall _p_Elt_T 
                                (v_Vac:(zen.term _p_Elt_T) =>
                                 zen.forall _p_Elt_T 
                                   (v_Vbc:(zen.term _p_Elt_T) =>
                                    zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_contains v_Vbc 
                                               (abst_add v_Vac v_Vdc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._bar__bar_ 
                                               (basics._equal_ _p_Elt_T 
                                                  v_Vbc v_Vac) 
                                               (abst_contains v_Vbc v_Vdc)))))))) =>
                          zen.Rall _p_Elt_T 
                            (v_Vac:(zen.term _p_Elt_T) =>
                             zen.forall _p_Elt_T 
                               (v_Vbc:(zen.term _p_Elt_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_contains v_Vbc 
                                           (abst_add v_Vac v_Vdc)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ 
                                           (basics._equal_ _p_Elt_T v_Vbc 
                                              v_Vac) 
                                           (abst_contains v_Vbc v_Vdc)))))) 
                            v_Vfc 
                            (v_Voc:
                             (zen.proof 
                                (zen.forall _p_Elt_T 
                                   (v_Vbc:(zen.term _p_Elt_T) =>
                                    zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_contains v_Vbc 
                                               (abst_add v_Vfc v_Vdc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._bar__bar_ 
                                               (basics._equal_ _p_Elt_T 
                                                  v_Vbc v_Vfc) 
                                               (abst_contains v_Vbc v_Vdc))))))) =>
                             zen.Rall _p_Elt_T 
                               (v_Vbc:(zen.term _p_Elt_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_contains v_Vbc 
                                           (abst_add v_Vfc v_Vdc)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ 
                                           (basics._equal_ _p_Elt_T v_Vbc 
                                              v_Vfc) 
                                           (abst_contains v_Vbc v_Vdc))))) 
                               v_Vhc 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_contains v_Vhc 
                                               (abst_add v_Vfc v_Vdc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._bar__bar_ 
                                               (basics._equal_ _p_Elt_T 
                                                  v_Vhc v_Vfc) 
                                               (abst_contains v_Vhc v_Vdc)))))) =>
                                zen.Requiv 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_contains v_Vhc 
                                           (abst_add v_Vfc v_Vdc)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ 
                                           (basics._equal_ _p_Elt_T v_Vhc 
                                              v_Vfc) 
                                           (abst_contains v_Vhc v_Vdc)))) 
                                  (v_Vlc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_contains v_Vhc 
                                                  (abst_add v_Vfc v_Vdc)))))) =>
                                   v_Vqc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._bar__bar_ 
                                                  (basics.syntactic_equal 
                                                     _p_Elt_T v_Vhc v_Vfc) 
                                                  (abst_contains v_Vhc v_Vdc)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_contains v_Vhc 
                                              (abst_add v_Vfc v_Vdc)))) 
                                     v_Vuc v_Vlc) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_contains v_Vhc 
                                               (abst_add v_Vfc v_Vdc))))) =>
                                   v_Vvc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._bar__bar_ 
                                               (basics.syntactic_equal 
                                                  _p_Elt_T v_Vhc v_Vfc) 
                                               (abst_contains v_Vhc v_Vdc))))) =>
                                   focal.zenon_focal_or 
                                     (basics.syntactic_equal _p_Elt_T v_Vhc 
                                        v_Vfc) (abst_contains v_Vhc v_Vdc) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     _p_Elt_T v_Vhc v_Vfc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_contains v_Vhc v_Vdc))))) =>
                                      zen.Ror 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal 
                                                 _p_Elt_T v_Vhc v_Vfc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_contains v_Vhc v_Vdc))) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     _p_Elt_T v_Vhc v_Vfc)))) =>
                                         focal.zenon_syntactic_equal 
                                           _p_Elt_T v_Vhc v_Vfc 
                                           (v_Vzc:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_Elt_T v_Vhc 
                                                     v_Vfc))) =>
                                            zen.Reqsym _p_Elt_T v_Vhc v_Vfc 
                                              v_Vzc v_Vwc) v_Vyc) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_contains v_Vhc v_Vdc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_contains v_Vhc v_Vdc))) 
                                           v_Vmc v_Vtc) v_Vxc) v_Vvc) v_Vpc) 
                               v_Voc) v_Vnc) abst_add_contains) v_Vjc) v_Vkc) 
                v_Vic) v_Vgc) v_Vec) v_Vcc).

def Sequence__contains :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  e:(cc.eT _p_Elt_T) ->
  l:(cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t
  :=
  _p_Elt_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  e:(cc.eT _p_Elt_T) => l:(cc.eT (basics.list__t _p_Elt_T)) => _p_L_mem l e.

def Sequence__empty :
  _p_Elt_T:cc.uT -> cc.eT (basics.list__t _p_Elt_T)
  :=
  _p_Elt_T:cc.uT => builtins.nil _p_Elt_T.

def Sequence__head :
  _p_Elt_T:cc.uT ->
  _p_Elt_element:(cc.eT _p_Elt_T) ->
  l:(cc.eT (basics.list__t _p_Elt_T)) -> cc.eT _p_Elt_T
  :=
  _p_Elt_T:cc.uT =>
  _p_Elt_element:(cc.eT _p_Elt_T) =>
  l:(cc.eT (basics.list__t _p_Elt_T)) =>
  basics.match__nil _p_Elt_T _p_Elt_T l _p_Elt_element 
    (basics.match__cons _p_Elt_T _p_Elt_T l 
       (pattern_var_0_:(cc.eT _p_Elt_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_Elt_T)) =>
        (h:(cc.eT _p_Elt_T) =>
         (_q:(cc.eT (basics.list__t _p_Elt_T)) => h) pattern_var_1_) 
          pattern_var_0_) (dk_fail.fail _p_Elt_T)).

def Sequence__is_empty :
  _p_Elt_T:cc.uT ->
  l:(cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t
  :=
  _p_Elt_T:cc.uT =>
  l:(cc.eT (basics.list__t _p_Elt_T)) =>
  basics._equal_ (basics.list__t _p_Elt_T) l (builtins.nil _p_Elt_T).

def Sequence__remove :
  _p_Elt_T:cc.uT ->
  (cc.eT _p_Elt_T) ->
  (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T).

[l, e, _p_Elt_T]
  Sequence__remove _p_Elt_T e l
  -->
  basics.match__nil _p_Elt_T (basics.list__t _p_Elt_T) l 
    (builtins.nil _p_Elt_T) 
    (basics.match__cons _p_Elt_T (basics.list__t _p_Elt_T) l 
       (pattern_var_0_:(cc.eT _p_Elt_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_Elt_T)) =>
        (h:(cc.eT _p_Elt_T) =>
         (t:(cc.eT (basics.list__t _p_Elt_T)) =>
          dk_bool.ite (basics.list__t _p_Elt_T) 
            (basics._equal_ _p_Elt_T h e) t 
            (builtins.cons _p_Elt_T h 
               ((_p_Elt_T:cc.uT =>
                 e:(cc.eT _p_Elt_T) =>
                 l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_builtins.call_by_value (basics.list__t _p_Elt_T) 
                   (basics.list__t _p_Elt_T) 
                   (dk_builtins.call_by_value _p_Elt_T 
                      (cc.Arrow (basics.list__t _p_Elt_T) 
                         (basics.list__t _p_Elt_T)) 
                      (Sequence__remove _p_Elt_T) e) l) _p_Elt_T e t))) 
           pattern_var_1_) pattern_var_0_) 
       (dk_fail.fail (basics.list__t _p_Elt_T))).

def Sequence__size :
  _p_Elt_T:cc.uT -> (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.int__t.

[l, _p_Elt_T]
  Sequence__size _p_Elt_T l
  -->
  basics.match__nil _p_Elt_T basics.int__t l (dk_int.from_nat builtins.0) 
    (basics.match__cons _p_Elt_T basics.int__t l 
       (pattern_var_0_:(cc.eT _p_Elt_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_Elt_T)) =>
        (_h:(cc.eT _p_Elt_T) =>
         (t:(cc.eT (basics.list__t _p_Elt_T)) =>
          basics._plus_ (dk_int.from_nat (builtins.S builtins.0)) 
            ((_p_Elt_T:cc.uT =>
              l:(cc.eT (basics.list__t _p_Elt_T)) =>
              dk_builtins.call_by_value (basics.list__t _p_Elt_T) 
                basics.int__t (Sequence__size _p_Elt_T) l) _p_Elt_T t)) 
           pattern_var_1_) pattern_var_0_) (dk_fail.fail basics.int__t)).

def Sequence__tail :
  _p_Elt_T:cc.uT ->
  l:(cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)
  :=
  _p_Elt_T:cc.uT =>
  l:(cc.eT (basics.list__t _p_Elt_T)) =>
  basics.match__nil _p_Elt_T (basics.list__t _p_Elt_T) l 
    (builtins.nil _p_Elt_T) 
    (basics.match__cons _p_Elt_T (basics.list__t _p_Elt_T) l 
       (pattern_var_0_:(cc.eT _p_Elt_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_Elt_T)) =>
        (_h:(cc.eT _p_Elt_T) =>
         (q:(cc.eT (basics.list__t _p_Elt_T)) => q) pattern_var_1_) 
          pattern_var_0_) (dk_fail.fail (basics.list__t _p_Elt_T))).

def Sequence__tolist :
  _p_Elt_T:cc.uT ->
  l:(cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)
  :=
  _p_Elt_T:cc.uT => l:(cc.eT (basics.list__t _p_Elt_T)) => l.

def Sequence__contains_empty :
  _p_Elt_T:cc.uT ->
  abst_T:cc.uT ->
  abst_contains:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_empty:(cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_Elt_T 
       (a:(cc.eT _p_Elt_T) =>
        dk_logic.ebP 
          (basics._equal_ basics.bool__t (abst_contains a abst_empty) 
             dk_bool.false)))
  :=
  _p_Elt_T:cc.uT =>
  abst_T:cc.uT =>
  abst_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_empty:(cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_Elt_T 
       (a:(cc.eT _p_Elt_T) =>
        dk_logic.ebP 
          (basics._equal_ basics.bool__t (abst_contains a abst_empty) 
             dk_bool.false))).

def Sequence__head_contains :
  _p_Elt_T:cc.uT ->
  _p_Elt_element:(cc.eT _p_Elt_T) ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem_cons_head:(dk_logic.eP 
                        (dk_logic.forall _p_Elt_T 
                           (x:(cc.eT _p_Elt_T) =>
                            dk_logic.forall (basics.list__t _p_Elt_T) 
                              (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                               dk_logic.ebP 
                                 (_p_L_mem (builtins.cons _p_Elt_T x l) x))))) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (c:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T c))) 
          (dk_logic.ebP 
             (Sequence__contains _p_Elt_T _p_L_mem 
                (Sequence__head _p_Elt_T _p_Elt_element c) c))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Elt_element:(cc.eT _p_Elt_T) =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem_cons_head:
  (dk_logic.eP 
     (dk_logic.forall _p_Elt_T 
        (x:(cc.eT _p_Elt_T) =>
         dk_logic.forall (basics.list__t _p_Elt_T) 
           (l:(cc.eT (basics.list__t _p_Elt_T)) =>
            dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T x l) x))))) =>
  (__J_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.imp 
         (dk_logic.ebP 
            (basics._tilda__tilda_ 
               (Sequence__is_empty _p_Elt_T (builtins.nil _p_Elt_T)))) 
         (dk_logic.ebP 
            (Sequence__contains _p_Elt_T _p_L_mem 
               (Sequence__head _p_Elt_T _p_Elt_element 
                  (builtins.nil _p_Elt_T)) (builtins.nil _p_Elt_T))))) =>
   (__J_2_LEMMA:
    (h:(cc.eT _p_Elt_T) ->
     l:(cc.eT (basics.list__t _p_Elt_T)) ->
     dk_logic.eP 
       (dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (Sequence__is_empty _p_Elt_T (builtins.cons _p_Elt_T h l)))) 
          (dk_logic.ebP 
             (Sequence__contains _p_Elt_T _p_L_mem 
                (Sequence__head _p_Elt_T _p_Elt_element 
                   (builtins.cons _p_Elt_T h l)) (builtins.cons _p_Elt_T h l))))) =>
    (__J_3_LEMMA:
     (dk_logic.eP 
        (dk_logic.forall (basics.list__t _p_Elt_T) 
           (l:(cc.eT (basics.list__t _p_Elt_T)) =>
            dk_logic.imp 
              (dk_logic.ebP 
                 (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
              (dk_logic.ebP 
                 (Sequence__contains _p_Elt_T _p_L_mem 
                    (Sequence__head _p_Elt_T _p_Elt_element l) l))))) =>
     zen.nnpp 
       (zen.forall (basics.list__t _p_Elt_T) 
          (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T v_Vzb)))) 
             (zen.triangle 
                (focal.is_true 
                   (Sequence__contains _p_Elt_T _p_L_mem 
                      (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) v_Vzb))))) 
       (v_Vac:
        (zen.proof 
           (zen.not 
              (zen.forall (basics.list__t _p_Elt_T) 
                 (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (Sequence__is_empty _p_Elt_T v_Vzb)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Sequence__contains _p_Elt_T _p_L_mem 
                             (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) 
                             v_Vzb))))))) =>
        zen.Raxiom 
          (zen.forall (basics.list__t _p_Elt_T) 
             (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ 
                         (Sequence__is_empty _p_Elt_T v_Vzb)))) 
                (zen.triangle 
                   (focal.is_true 
                      (Sequence__contains _p_Elt_T _p_L_mem 
                         (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) v_Vzb))))) 
          __J_3_LEMMA v_Vac)) 
      (dk_builtins.magic_prove 
         (dk_logic.forall (basics.list__t _p_Elt_T) 
            (l:(cc.eT (basics.list__t _p_Elt_T)) =>
             dk_logic.imp 
               (dk_logic.ebP 
                  (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
               (dk_logic.ebP 
                  (Sequence__contains _p_Elt_T _p_L_mem 
                     (Sequence__head _p_Elt_T _p_Elt_element l) l)))))) 
     (h:(cc.eT _p_Elt_T) =>
      l:(cc.eT (basics.list__t _p_Elt_T)) =>
      zen.nnpp 
        (zen.imp 
           (zen.triangle 
              (focal.is_true 
                 (basics._tilda__tilda_ 
                    (Sequence__is_empty _p_Elt_T (builtins.cons _p_Elt_T h l))))) 
           (zen.triangle 
              (focal.is_true 
                 (Sequence__contains _p_Elt_T _p_L_mem 
                    (Sequence__head _p_Elt_T _p_Elt_element 
                       (builtins.cons _p_Elt_T h l)) 
                    (builtins.cons _p_Elt_T h l))))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (Sequence__is_empty _p_Elt_T 
                              (builtins.cons _p_Elt_T h l))))) 
                  (zen.triangle 
                     (focal.is_true 
                        (Sequence__contains _p_Elt_T _p_L_mem 
                           (Sequence__head _p_Elt_T _p_Elt_element 
                              (builtins.cons _p_Elt_T h l)) 
                           (builtins.cons _p_Elt_T h l))))))) =>
         zen.Rnotimply 
           (zen.triangle 
              (focal.is_true 
                 (basics._tilda__tilda_ 
                    (Sequence__is_empty _p_Elt_T (builtins.cons _p_Elt_T h l))))) 
           (zen.triangle 
              (focal.is_true 
                 (Sequence__contains _p_Elt_T _p_L_mem 
                    (Sequence__head _p_Elt_T _p_Elt_element 
                       (builtins.cons _p_Elt_T h l)) 
                    (builtins.cons _p_Elt_T h l)))) 
           (v_Vac:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true 
                     (basics._tilda__tilda_ 
                        (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                           (builtins.cons _p_Elt_T h l) 
                           (builtins.nil _p_Elt_T)))))) =>
            v_Vbc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true (_p_L_mem (builtins.cons _p_Elt_T h l) h))))) =>
            zen.Rall _p_Elt_T 
              (v_Vcc:(zen.term _p_Elt_T) =>
               zen.forall (basics.list__t _p_Elt_T) 
                 (v_Vdc:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_L_mem (builtins.cons _p_Elt_T v_Vcc v_Vdc) v_Vcc)))) 
              h 
              (v_Vec:
               (zen.proof 
                  (zen.forall (basics.list__t _p_Elt_T) 
                     (v_Vdc:(zen.term (basics.list__t _p_Elt_T)) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_L_mem (builtins.cons _p_Elt_T h v_Vdc) h))))) =>
               zen.Rall (basics.list__t _p_Elt_T) 
                 (v_Vdc:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_L_mem (builtins.cons _p_Elt_T h v_Vdc) h))) l 
                 (v_Vfc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_L_mem (builtins.cons _p_Elt_T h l) h)))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem (builtins.cons _p_Elt_T h l) h))) v_Vfc 
                    v_Vbc) v_Vec) _p_L_mem_cons_head) v_Vzb))) 
    (zen.nnpp 
       (zen.imp 
          (zen.triangle 
             (focal.is_true 
                (basics._tilda__tilda_ 
                   (Sequence__is_empty _p_Elt_T (builtins.nil _p_Elt_T))))) 
          (zen.triangle 
             (focal.is_true 
                (Sequence__contains _p_Elt_T _p_L_mem 
                   (Sequence__head _p_Elt_T _p_Elt_element 
                      (builtins.nil _p_Elt_T)) (builtins.nil _p_Elt_T))))) 
       (v_Vzb:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._tilda__tilda_ 
                          (Sequence__is_empty _p_Elt_T 
                             (builtins.nil _p_Elt_T))))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Sequence__contains _p_Elt_T _p_L_mem 
                          (Sequence__head _p_Elt_T _p_Elt_element 
                             (builtins.nil _p_Elt_T)) (builtins.nil _p_Elt_T))))))) =>
        zen.Rnotimply 
          (zen.triangle 
             (focal.is_true 
                (basics._tilda__tilda_ 
                   (Sequence__is_empty _p_Elt_T (builtins.nil _p_Elt_T))))) 
          (zen.triangle 
             (focal.is_true 
                (Sequence__contains _p_Elt_T _p_L_mem 
                   (Sequence__head _p_Elt_T _p_Elt_element 
                      (builtins.nil _p_Elt_T)) (builtins.nil _p_Elt_T)))) 
          (v_Vac:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)))))) =>
           v_Vbc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (Sequence__contains _p_Elt_T _p_L_mem 
                          (Sequence__head _p_Elt_T _p_Elt_element 
                             (builtins.nil _p_Elt_T)) (builtins.nil _p_Elt_T)))))) =>
           focal.zenon_focal_not 
             (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
             (v_Vcc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                             (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)))))) =>
              focal.zenon_not_syntactic_equal (basics.list__t _p_Elt_T) 
                (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T) 
                (v_Vdc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal (basics.list__t _p_Elt_T) 
                             (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T))))) =>
                 zen.Rnoteq (basics.list__t _p_Elt_T) 
                   (builtins.nil _p_Elt_T) v_Vdc) v_Vcc) v_Vac) v_Vzb)).

def Sequence__is_empty_empty :
  _p_Elt_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.ebP 
       (basics._equal_ basics.bool__t 
          (Sequence__is_empty _p_Elt_T (Sequence__empty _p_Elt_T)) 
          dk_bool.true))
  :=
  _p_Elt_T:cc.uT =>
  (__K_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.forall basics.bool__t 
         (b:(cc.eT basics.bool__t) =>
          dk_logic.imp (dk_logic.ebP b) 
            (dk_logic.ebP (basics._equal_ basics.bool__t b dk_bool.true))))) =>
   zen.nnpp 
     (zen.triangle 
        (focal.is_true 
           (basics._equal_ basics.bool__t 
              (Sequence__is_empty _p_Elt_T (Sequence__empty _p_Elt_T)) 
              dk_bool.true))) 
     (v_Vzb:
      (zen.proof 
         (zen.not 
            (zen.triangle 
               (focal.is_true 
                  (basics.syntactic_equal basics.bool__t 
                     (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                        (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                     basics.true))))) =>
      focal.zenon_not_syntactic_equal basics.bool__t 
        (Sequence__is_empty _p_Elt_T (Sequence__empty _p_Elt_T)) 
        dk_bool.true 
        (v_Vac:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (zen.equal basics.bool__t 
                     (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                        (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                     basics.true)))) =>
         zen.Rall basics.bool__t 
           (v_Vbc:(zen.term basics.bool__t) =>
            zen.imp (zen.triangle (focal.is_true v_Vbc)) 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ basics.bool__t v_Vbc dk_bool.true)))) 
           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
              (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
           (v_Vcc:
            (zen.proof 
               (zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                           (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ basics.bool__t 
                           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                              (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                           dk_bool.true))))) =>
            zen.Rimply 
              (zen.triangle 
                 (focal.is_true 
                    (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                       (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)))) 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ basics.bool__t 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                       dk_bool.true))) 
              (v_Vdc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                              (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)))))) =>
               focal.zenon_not_syntactic_equal (basics.list__t _p_Elt_T) 
                 (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T) 
                 (v_Vec:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal (basics.list__t _p_Elt_T) 
                              (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T))))) =>
                  zen.Rnoteq (basics.list__t _p_Elt_T) 
                    (builtins.nil _p_Elt_T) v_Vec) v_Vdc) 
              (v_Vfc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (basics.syntactic_equal basics.bool__t 
                           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                              (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                           basics.true)))) =>
               focal.zenon_syntactic_equal basics.bool__t 
                 (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                    (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                 basics.true 
                 (v_Vgc:
                  (zen.proof 
                     (zen.triangle 
                        (zen.equal basics.bool__t 
                           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                              (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                           basics.true))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (zen.equal basics.bool__t 
                          (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                             (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
                          basics.true)) v_Vgc v_Vac) v_Vfc) v_Vcc) 
           __K_1_LEMMA) v_Vzb)) 
    (zen.nnpp 
       (zen.forall basics.bool__t 
          (v_Vzb:(zen.term basics.bool__t) =>
           zen.imp (zen.triangle (focal.is_true v_Vzb)) 
             (zen.triangle 
                (focal.is_true 
                   (basics._equal_ basics.bool__t v_Vzb dk_bool.true))))) 
       (v_Vac:
        (zen.proof 
           (zen.not 
              (zen.forall basics.bool__t 
                 (v_Vzb:(zen.term basics.bool__t) =>
                  zen.imp (zen.triangle (focal.is_true v_Vzb)) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t v_Vzb dk_bool.true))))))) =>
        focal.zenon_focal_not_all_bool 
          (v_Vzb:(zen.term basics.bool__t) =>
           zen.imp (zen.triangle (focal.is_true v_Vzb)) 
             (zen.triangle 
                (focal.is_true 
                   (basics._equal_ basics.bool__t v_Vzb dk_bool.true)))) 
          (v_Vbc:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true basics.true)) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t basics.true 
                             dk_bool.true)))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true basics.true)) 
             (zen.triangle 
                (focal.is_true 
                   (basics._equal_ basics.bool__t basics.true dk_bool.true))) 
             (v_Vcc:(zen.proof zen.True) =>
              v_Vdc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal basics.bool__t basics.true 
                             basics.true))))) =>
              focal.zenon_not_syntactic_equal basics.bool__t basics.true 
                basics.true 
                (v_Vec:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal basics.bool__t basics.true basics.true)))) =>
                 zen.Rnoteq basics.bool__t basics.true v_Vec) v_Vdc) v_Vbc) 
          (v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true basics.false)) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t basics.false 
                             dk_bool.true)))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true basics.false)) 
             (zen.triangle 
                (focal.is_true 
                   (basics._equal_ basics.bool__t basics.false dk_bool.true))) 
             (v_Vgc:(zen.proof zen.False) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal basics.bool__t 
                             basics.false basics.true))))) =>
              zen.Rfalse v_Vgc) v_Vfc) v_Vac)).

def Sequence__remove_contains :
  _p_Elt_T:cc.uT ->
  _p_Elt_equal:((cc.eT _p_Elt_T) -> (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_contains:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_remove:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (c:(cc.eT abst_T) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.forall _p_Elt_T 
             (x:(cc.eT _p_Elt_T) =>
              dk_logic.imp 
                (dk_logic.ebP (basics._tilda__tilda_ (_p_Elt_equal e x))) 
                (dk_logic.eqv 
                   (dk_logic.ebP (abst_contains x (abst_remove e c))) 
                   (dk_logic.ebP (abst_contains x c)))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Elt_equal:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_remove:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (c:(cc.eT abst_T) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.forall _p_Elt_T 
             (x:(cc.eT _p_Elt_T) =>
              dk_logic.imp 
                (dk_logic.ebP (basics._tilda__tilda_ (_p_Elt_equal e x))) 
                (dk_logic.eqv 
                   (dk_logic.ebP (abst_contains x (abst_remove e c))) 
                   (dk_logic.ebP (abst_contains x c))))))).

def Sequence__empty_has_no_element :
  _p_Elt_T:cc.uT ->
  abst_T:cc.uT ->
  abst_empty:(cc.eT abst_T) ->
  abst_size:((cc.eT abst_T) -> cc.eT basics.int__t) ->
  dk_logic.eP 
    (dk_logic.ebP 
       (basics._equal_ basics.int__t (abst_size abst_empty) 
          (dk_int.from_nat builtins.0)))
  :=
  _p_Elt_T:cc.uT =>
  abst_T:cc.uT =>
  abst_empty:(cc.eT abst_T) =>
  abst_size:((cc.eT abst_T) -> cc.eT basics.int__t) =>
  dk_builtins.magic_prove 
    (dk_logic.ebP 
       (basics._equal_ basics.int__t (abst_size abst_empty) 
          (dk_int.from_nat builtins.0))).

def Sequence__size_positive :
  _p_Elt_T:cc.uT ->
  abst_T:cc.uT ->
  abst_size:((cc.eT abst_T) -> cc.eT basics.int__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.ebP 
          (basics._lt__equal_ (dk_int.from_nat builtins.0) (abst_size a))))
  :=
  _p_Elt_T:cc.uT =>
  abst_T:cc.uT =>
  abst_size:((cc.eT abst_T) -> cc.eT basics.int__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.ebP 
          (basics._lt__equal_ (dk_int.from_nat builtins.0) (abst_size a)))).

def Sequence__head_tail_spec :
  _p_Elt_T:cc.uT ->
  _p_Elt_element:(cc.eT _p_Elt_T) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (l:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_Elt_T) 
                (Sequence__tolist _p_Elt_T l) 
                (builtins.cons _p_Elt_T 
                   (Sequence__head _p_Elt_T _p_Elt_element l) 
                   (Sequence__tolist _p_Elt_T (Sequence__tail _p_Elt_T l)))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Elt_element:(cc.eT _p_Elt_T) =>
  (__L_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.forall (basics.list__t _p_Elt_T) 
         (l:(cc.eT (basics.list__t _p_Elt_T)) =>
          dk_logic.imp 
            (dk_logic.ebP 
               (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
            (dk_logic.ebP 
               (basics._equal_ (basics.list__t _p_Elt_T) 
                  (Sequence__tolist _p_Elt_T l) 
                  (builtins.cons _p_Elt_T 
                     (Sequence__head _p_Elt_T _p_Elt_element l) 
                     (Sequence__tolist _p_Elt_T (Sequence__tail _p_Elt_T l)))))))) =>
   zen.nnpp 
     (zen.forall (basics.list__t _p_Elt_T) 
        (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.imp 
           (zen.triangle 
              (focal.is_true 
                 (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T v_Vzb)))) 
           (zen.triangle 
              (focal.is_true 
                 (basics._equal_ (basics.list__t _p_Elt_T) 
                    (Sequence__tolist _p_Elt_T v_Vzb) 
                    (builtins.cons _p_Elt_T 
                       (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) 
                       (Sequence__tolist _p_Elt_T 
                          (Sequence__tail _p_Elt_T v_Vzb)))))))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall (basics.list__t _p_Elt_T) 
               (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (Sequence__is_empty _p_Elt_T v_Vzb)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._equal_ (basics.list__t _p_Elt_T) 
                           (Sequence__tolist _p_Elt_T v_Vzb) 
                           (builtins.cons _p_Elt_T 
                              (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) 
                              (Sequence__tolist _p_Elt_T 
                                 (Sequence__tail _p_Elt_T v_Vzb)))))))))) =>
      zen.Raxiom 
        (zen.forall (basics.list__t _p_Elt_T) 
           (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (Sequence__is_empty _p_Elt_T v_Vzb)))) 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ (basics.list__t _p_Elt_T) 
                       (Sequence__tolist _p_Elt_T v_Vzb) 
                       (builtins.cons _p_Elt_T 
                          (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) 
                          (Sequence__tolist _p_Elt_T 
                             (Sequence__tail _p_Elt_T v_Vzb)))))))) 
        __L_1_LEMMA v_Vac)) 
    ((__L_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.forall (basics.list__t _p_Elt_T) 
            (l:(cc.eT (basics.list__t _p_Elt_T)) =>
             dk_logic.imp 
               (dk_logic.ebP 
                  (basics._tilda__tilda_ 
                     (basics._equal_ (basics.list__t _p_Elt_T) l 
                        (builtins.nil _p_Elt_T)))) 
               (dk_logic.ebP 
                  (basics._equal_ (basics.list__t _p_Elt_T) l 
                     (builtins.cons _p_Elt_T 
                        (Sequence__head _p_Elt_T _p_Elt_element l) 
                        (Sequence__tail _p_Elt_T l))))))) =>
      zen.nnpp 
        (zen.forall (basics.list__t _p_Elt_T) 
           (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (Sequence__is_empty _p_Elt_T v_Vzb)))) 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ (basics.list__t _p_Elt_T) 
                       (Sequence__tolist _p_Elt_T v_Vzb) 
                       (builtins.cons _p_Elt_T 
                          (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) 
                          (Sequence__tolist _p_Elt_T 
                             (Sequence__tail _p_Elt_T v_Vzb)))))))) 
        (v_Vac:
         (zen.proof 
            (zen.not 
               (zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (Sequence__is_empty _p_Elt_T v_Vzb)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ (basics.list__t _p_Elt_T) 
                              (Sequence__tolist _p_Elt_T v_Vzb) 
                              (builtins.cons _p_Elt_T 
                                 (Sequence__head _p_Elt_T _p_Elt_element 
                                    v_Vzb) 
                                 (Sequence__tolist _p_Elt_T 
                                    (Sequence__tail _p_Elt_T v_Vzb)))))))))) =>
         zen.Rnotall (basics.list__t _p_Elt_T) 
           (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (Sequence__is_empty _p_Elt_T v_Vzb)))) 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ (basics.list__t _p_Elt_T) 
                       (Sequence__tolist _p_Elt_T v_Vzb) 
                       (builtins.cons _p_Elt_T 
                          (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) 
                          (Sequence__tolist _p_Elt_T 
                             (Sequence__tail _p_Elt_T v_Vzb))))))) 
           (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
            v_Vcc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (Sequence__is_empty _p_Elt_T v_Vbc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ (basics.list__t _p_Elt_T) 
                              (Sequence__tolist _p_Elt_T v_Vbc) 
                              (builtins.cons _p_Elt_T 
                                 (Sequence__head _p_Elt_T _p_Elt_element 
                                    v_Vbc) 
                                 (Sequence__tolist _p_Elt_T 
                                    (Sequence__tail _p_Elt_T v_Vbc))))))))) =>
            zen.Rnotimply 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (Sequence__is_empty _p_Elt_T v_Vbc)))) 
              (zen.triangle 
                 (focal.is_true 
                    (basics._equal_ (basics.list__t _p_Elt_T) 
                       (Sequence__tolist _p_Elt_T v_Vbc) 
                       (builtins.cons _p_Elt_T 
                          (Sequence__head _p_Elt_T _p_Elt_element v_Vbc) 
                          (Sequence__tolist _p_Elt_T 
                             (Sequence__tail _p_Elt_T v_Vbc)))))) 
              (v_Vdc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                              v_Vbc (builtins.nil _p_Elt_T)))))) =>
               v_Vec:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                              v_Vbc 
                              (builtins.cons _p_Elt_T 
                                 (Sequence__head _p_Elt_T _p_Elt_element 
                                    v_Vbc) (Sequence__tail _p_Elt_T v_Vbc))))))) =>
               zen.Rall (basics.list__t _p_Elt_T) 
                 (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vzb 
                                (builtins.nil _p_Elt_T))))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ (basics.list__t _p_Elt_T) v_Vzb 
                             (builtins.cons _p_Elt_T 
                                (Sequence__head _p_Elt_T _p_Elt_element v_Vzb) 
                                (Sequence__tail _p_Elt_T v_Vzb)))))) v_Vbc 
                 (v_Vfc:
                  (zen.proof 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    v_Vbc (builtins.nil _p_Elt_T))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ (basics.list__t _p_Elt_T) 
                                 v_Vbc 
                                 (builtins.cons _p_Elt_T 
                                    (Sequence__head _p_Elt_T _p_Elt_element 
                                       v_Vbc) (Sequence__tail _p_Elt_T v_Vbc))))))) =>
                  zen.Rimply 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vbc 
                                (builtins.nil _p_Elt_T))))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ (basics.list__t _p_Elt_T) v_Vbc 
                             (builtins.cons _p_Elt_T 
                                (Sequence__head _p_Elt_T _p_Elt_element v_Vbc) 
                                (Sequence__tail _p_Elt_T v_Vbc))))) 
                    (v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics.syntactic_equal 
                                       (basics.list__t _p_Elt_T) v_Vbc 
                                       (builtins.nil _p_Elt_T))))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._tilda__tilda_ 
                                (basics.syntactic_equal 
                                   (basics.list__t _p_Elt_T) v_Vbc 
                                   (builtins.nil _p_Elt_T))))) v_Vdc v_Vgc) 
                    (v_Vhc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (basics.syntactic_equal 
                                 (basics.list__t _p_Elt_T) v_Vbc 
                                 (builtins.cons _p_Elt_T 
                                    (Sequence__head _p_Elt_T _p_Elt_element 
                                       v_Vbc) (Sequence__tail _p_Elt_T v_Vbc)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vbc 
                                (builtins.cons _p_Elt_T 
                                   (Sequence__head _p_Elt_T _p_Elt_element 
                                      v_Vbc) (Sequence__tail _p_Elt_T v_Vbc))))) 
                       v_Vhc v_Vec) v_Vfc) __L_1_1_LEMMA) v_Vcc) v_Vac)) 
       ((__L_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.imp 
               (dk_logic.ebP 
                  (basics._tilda__tilda_ 
                     (basics._equal_ 
                        (basics.list__t dk_builtins.weak_poly_var_ty) 
                        (builtins.nil dk_builtins.weak_poly_var_ty) 
                        (builtins.nil dk_builtins.weak_poly_var_ty)))) 
               (dk_logic.ebP 
                  (basics._equal_ (basics.list__t _p_Elt_T) 
                     (builtins.nil _p_Elt_T) 
                     (builtins.cons _p_Elt_T 
                        (Sequence__head _p_Elt_T _p_Elt_element 
                           (builtins.nil _p_Elt_T)) 
                        (Sequence__tail _p_Elt_T (builtins.nil _p_Elt_T))))))) =>
         (__L_1_1_2_LEMMA:
          (dk_logic.eP 
             (dk_logic.forall _p_Elt_T 
                (h:(cc.eT _p_Elt_T) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.imp 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics._tilda__tilda_ 
                               (basics._equal_ (basics.list__t _p_Elt_T) l 
                                  (builtins.nil _p_Elt_T)))) 
                         (dk_logic.ebP 
                            (basics._equal_ (basics.list__t _p_Elt_T) l 
                               (builtins.cons _p_Elt_T 
                                  (Sequence__head _p_Elt_T _p_Elt_element l) 
                                  (Sequence__tail _p_Elt_T l))))) 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics._tilda__tilda_ 
                               (basics._equal_ (basics.list__t _p_Elt_T) 
                                  (builtins.cons _p_Elt_T h l) 
                                  (builtins.nil _p_Elt_T)))) 
                         (dk_logic.ebP 
                            (basics._equal_ (basics.list__t _p_Elt_T) 
                               (builtins.cons _p_Elt_T h l) 
                               (builtins.cons _p_Elt_T 
                                  (Sequence__head _p_Elt_T _p_Elt_element 
                                     (builtins.cons _p_Elt_T h l)) 
                                  (Sequence__tail _p_Elt_T 
                                     (builtins.cons _p_Elt_T h l)))))))))) =>
          dk_builtins.magic_prove 
            (dk_logic.forall (basics.list__t _p_Elt_T) 
               (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                dk_logic.imp 
                  (dk_logic.ebP 
                     (basics._tilda__tilda_ 
                        (basics._equal_ (basics.list__t _p_Elt_T) l 
                           (builtins.nil _p_Elt_T)))) 
                  (dk_logic.ebP 
                     (basics._equal_ (basics.list__t _p_Elt_T) l 
                        (builtins.cons _p_Elt_T 
                           (Sequence__head _p_Elt_T _p_Elt_element l) 
                           (Sequence__tail _p_Elt_T l))))))) 
           ((__L_1_1_2_1_LEMMA:
             (h:(cc.eT _p_Elt_T) ->
              l:(cc.eT (basics.list__t _p_Elt_T)) ->
              I:(dk_logic.eP 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (basics._tilda__tilda_ 
                            (basics._equal_ (basics.list__t _p_Elt_T) l 
                               (builtins.nil _p_Elt_T)))) 
                      (dk_logic.ebP 
                         (basics._equal_ (basics.list__t _p_Elt_T) l 
                            (builtins.cons _p_Elt_T 
                               (Sequence__head _p_Elt_T _p_Elt_element l) 
                               (Sequence__tail _p_Elt_T l)))))) ->
              dk_logic.eP 
                (dk_logic.ebP 
                   (basics._equal_ (basics.list__t _p_Elt_T) 
                      (builtins.cons _p_Elt_T h l) 
                      (builtins.cons _p_Elt_T 
                         (Sequence__head _p_Elt_T _p_Elt_element 
                            (builtins.cons _p_Elt_T h l)) 
                         (Sequence__tail _p_Elt_T 
                            (builtins.cons _p_Elt_T h l)))))) =>
             zen.nnpp 
               (zen.forall _p_Elt_T 
                  (v_Vzb:(zen.term _p_Elt_T) =>
                   zen.forall (basics.list__t _p_Elt_T) 
                     (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                      zen.imp 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vac 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    v_Vac 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element v_Vac) 
                                       (Sequence__tail _p_Elt_T v_Vac)))))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) 
                                       (builtins.cons _p_Elt_T v_Vzb v_Vac) 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    (builtins.cons _p_Elt_T v_Vzb v_Vac) 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element 
                                          (builtins.cons _p_Elt_T v_Vzb v_Vac)) 
                                       (Sequence__tail _p_Elt_T 
                                          (builtins.cons _p_Elt_T v_Vzb v_Vac)))))))))) 
               (v_Vbc:
                (zen.proof 
                   (zen.not 
                      (zen.forall _p_Elt_T 
                         (v_Vzb:(zen.term _p_Elt_T) =>
                          zen.forall (basics.list__t _p_Elt_T) 
                            (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                             zen.imp 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (basics._equal_ 
                                              (basics.list__t _p_Elt_T) 
                                              v_Vac (builtins.nil _p_Elt_T))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) v_Vac 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element v_Vac) 
                                              (Sequence__tail _p_Elt_T v_Vac)))))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (basics._equal_ 
                                              (basics.list__t _p_Elt_T) 
                                              (builtins.cons _p_Elt_T v_Vzb 
                                                 v_Vac) 
                                              (builtins.nil _p_Elt_T))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) 
                                           (builtins.cons _p_Elt_T v_Vzb 
                                              v_Vac) 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vzb v_Vac)) 
                                              (Sequence__tail _p_Elt_T 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vzb v_Vac)))))))))))) =>
                zen.Rnotall _p_Elt_T 
                  (v_Vzb:(zen.term _p_Elt_T) =>
                   zen.forall (basics.list__t _p_Elt_T) 
                     (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                      zen.imp 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vac 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    v_Vac 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element v_Vac) 
                                       (Sequence__tail _p_Elt_T v_Vac)))))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) 
                                       (builtins.cons _p_Elt_T v_Vzb v_Vac) 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    (builtins.cons _p_Elt_T v_Vzb v_Vac) 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element 
                                          (builtins.cons _p_Elt_T v_Vzb v_Vac)) 
                                       (Sequence__tail _p_Elt_T 
                                          (builtins.cons _p_Elt_T v_Vzb v_Vac))))))))) 
                  (v_Vcc:(zen.term _p_Elt_T) =>
                   v_Vdc:
                   (zen.proof 
                      (zen.not 
                         (zen.forall (basics.list__t _p_Elt_T) 
                            (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                             zen.imp 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (basics._equal_ 
                                              (basics.list__t _p_Elt_T) 
                                              v_Vac (builtins.nil _p_Elt_T))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) v_Vac 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element v_Vac) 
                                              (Sequence__tail _p_Elt_T v_Vac)))))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (basics._equal_ 
                                              (basics.list__t _p_Elt_T) 
                                              (builtins.cons _p_Elt_T v_Vcc 
                                                 v_Vac) 
                                              (builtins.nil _p_Elt_T))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) 
                                           (builtins.cons _p_Elt_T v_Vcc 
                                              v_Vac) 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vac)) 
                                              (Sequence__tail _p_Elt_T 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vac))))))))))) =>
                   zen.Rnotall (basics.list__t _p_Elt_T) 
                     (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                      zen.imp 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vac 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    v_Vac 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element v_Vac) 
                                       (Sequence__tail _p_Elt_T v_Vac)))))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) 
                                       (builtins.cons _p_Elt_T v_Vcc v_Vac) 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    (builtins.cons _p_Elt_T v_Vcc v_Vac) 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element 
                                          (builtins.cons _p_Elt_T v_Vcc v_Vac)) 
                                       (Sequence__tail _p_Elt_T 
                                          (builtins.cons _p_Elt_T v_Vcc v_Vac)))))))) 
                     (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                      v_Vfc:
                      (zen.proof 
                         (zen.not 
                            (zen.imp 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (basics._equal_ 
                                              (basics.list__t _p_Elt_T) 
                                              v_Vec (builtins.nil _p_Elt_T))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) v_Vec 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element v_Vec) 
                                              (Sequence__tail _p_Elt_T v_Vec)))))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (basics._equal_ 
                                              (basics.list__t _p_Elt_T) 
                                              (builtins.cons _p_Elt_T v_Vcc 
                                                 v_Vec) 
                                              (builtins.nil _p_Elt_T))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) 
                                           (builtins.cons _p_Elt_T v_Vcc 
                                              v_Vec) 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec)) 
                                              (Sequence__tail _p_Elt_T 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec)))))))))) =>
                      zen.Rnotimply 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vec 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    v_Vec 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element v_Vec) 
                                       (Sequence__tail _p_Elt_T v_Vec)))))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) 
                                       (builtins.cons _p_Elt_T v_Vcc v_Vec) 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    (builtins.cons _p_Elt_T v_Vcc v_Vec) 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element 
                                          (builtins.cons _p_Elt_T v_Vcc v_Vec)) 
                                       (Sequence__tail _p_Elt_T 
                                          (builtins.cons _p_Elt_T v_Vcc v_Vec))))))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._tilda__tilda_ 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) v_Vec 
                                           (builtins.nil _p_Elt_T))))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ 
                                        (basics.list__t _p_Elt_T) v_Vec 
                                        (builtins.cons _p_Elt_T 
                                           (Sequence__head _p_Elt_T 
                                              _p_Elt_element v_Vec) 
                                           (Sequence__tail _p_Elt_T v_Vec))))))) =>
                         v_Vhc:
                         (zen.proof 
                            (zen.not 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._tilda__tilda_ 
                                           (basics._equal_ 
                                              (basics.list__t _p_Elt_T) 
                                              (builtins.cons _p_Elt_T v_Vcc 
                                                 v_Vec) 
                                              (builtins.nil _p_Elt_T))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (basics.list__t _p_Elt_T) 
                                           (builtins.cons _p_Elt_T v_Vcc 
                                              v_Vec) 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec)) 
                                              (Sequence__tail _p_Elt_T 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec))))))))) =>
                         zen.Rnotimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) 
                                       (builtins.cons _p_Elt_T v_Vcc v_Vec) 
                                       (builtins.nil _p_Elt_T))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    (builtins.cons _p_Elt_T v_Vcc v_Vec) 
                                    (builtins.cons _p_Elt_T 
                                       (Sequence__head _p_Elt_T 
                                          _p_Elt_element 
                                          (builtins.cons _p_Elt_T v_Vcc v_Vec)) 
                                       (Sequence__tail _p_Elt_T 
                                          (builtins.cons _p_Elt_T v_Vcc v_Vec)))))) 
                           (v_Vic:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._tilda__tilda_ 
                                        (basics.syntactic_equal 
                                           (basics.list__t _p_Elt_T) 
                                           (builtins.cons _p_Elt_T v_Vcc 
                                              v_Vec) (builtins.nil _p_Elt_T)))))) =>
                            v_Vjc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics.syntactic_equal 
                                           (basics.list__t _p_Elt_T) 
                                           (builtins.cons _p_Elt_T v_Vcc 
                                              v_Vec) 
                                           (builtins.cons _p_Elt_T 
                                              (Sequence__head _p_Elt_T 
                                                 _p_Elt_element 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec)) 
                                              (Sequence__tail _p_Elt_T 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec)))))))) =>
                            zen.Rall _p_Elt_T 
                              (v_Vzb:(zen.term _p_Elt_T) =>
                               zen.forall (basics.list__t _p_Elt_T) 
                                 (v_Vac:
                                  (zen.term (basics.list__t _p_Elt_T)) =>
                                  zen.imp 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._tilda__tilda_ 
                                                (basics._equal_ 
                                                   (basics.list__t _p_Elt_T) 
                                                   v_Vac 
                                                   (builtins.nil _p_Elt_T))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ 
                                                (basics.list__t _p_Elt_T) 
                                                v_Vac 
                                                (builtins.cons _p_Elt_T 
                                                   (Sequence__head _p_Elt_T 
                                                      _p_Elt_element v_Vac) 
                                                   (Sequence__tail _p_Elt_T 
                                                      v_Vac)))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._equal_ 
                                             (basics.list__t _p_Elt_T) 
                                             (builtins.cons _p_Elt_T v_Vzb 
                                                v_Vac) 
                                             (builtins.cons _p_Elt_T 
                                                (Sequence__head _p_Elt_T 
                                                   _p_Elt_element 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vzb v_Vac)) 
                                                (Sequence__tail _p_Elt_T 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vzb v_Vac)))))))) 
                              v_Vcc 
                              (v_Vkc:
                               (zen.proof 
                                  (zen.forall (basics.list__t _p_Elt_T) 
                                     (v_Vac:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._tilda__tilda_ 
                                                    (basics._equal_ 
                                                       (basics.list__t 
                                                          _p_Elt_T) v_Vac 
                                                       (builtins.nil _p_Elt_T))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._equal_ 
                                                    (basics.list__t _p_Elt_T) 
                                                    v_Vac 
                                                    (builtins.cons _p_Elt_T 
                                                       (Sequence__head 
                                                          _p_Elt_T 
                                                          _p_Elt_element 
                                                          v_Vac) 
                                                       (Sequence__tail 
                                                          _p_Elt_T v_Vac)))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._equal_ 
                                                 (basics.list__t _p_Elt_T) 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vac) 
                                                 (builtins.cons _p_Elt_T 
                                                    (Sequence__head _p_Elt_T 
                                                       _p_Elt_element 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          v_Vac)) 
                                                    (Sequence__tail _p_Elt_T 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          v_Vac))))))))) =>
                               zen.Rall (basics.list__t _p_Elt_T) 
                                 (v_Vac:
                                  (zen.term (basics.list__t _p_Elt_T)) =>
                                  zen.imp 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._tilda__tilda_ 
                                                (basics._equal_ 
                                                   (basics.list__t _p_Elt_T) 
                                                   v_Vac 
                                                   (builtins.nil _p_Elt_T))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ 
                                                (basics.list__t _p_Elt_T) 
                                                v_Vac 
                                                (builtins.cons _p_Elt_T 
                                                   (Sequence__head _p_Elt_T 
                                                      _p_Elt_element v_Vac) 
                                                   (Sequence__tail _p_Elt_T 
                                                      v_Vac)))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._equal_ 
                                             (basics.list__t _p_Elt_T) 
                                             (builtins.cons _p_Elt_T v_Vcc 
                                                v_Vac) 
                                             (builtins.cons _p_Elt_T 
                                                (Sequence__head _p_Elt_T 
                                                   _p_Elt_element 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vcc v_Vac)) 
                                                (Sequence__tail _p_Elt_T 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vcc v_Vac))))))) 
                                 v_Vec 
                                 (v_Vlc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._tilda__tilda_ 
                                                    (basics._equal_ 
                                                       (basics.list__t 
                                                          _p_Elt_T) v_Vec 
                                                       (builtins.nil _p_Elt_T))))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._equal_ 
                                                    (basics.list__t _p_Elt_T) 
                                                    v_Vec 
                                                    (builtins.cons _p_Elt_T 
                                                       (Sequence__head 
                                                          _p_Elt_T 
                                                          _p_Elt_element 
                                                          v_Vec) 
                                                       (Sequence__tail 
                                                          _p_Elt_T v_Vec)))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._equal_ 
                                                 (basics.list__t _p_Elt_T) 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec) 
                                                 (builtins.cons _p_Elt_T 
                                                    (Sequence__head _p_Elt_T 
                                                       _p_Elt_element 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          v_Vec)) 
                                                    (Sequence__tail _p_Elt_T 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          v_Vec)))))))) =>
                                  zen.Rimply 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._tilda__tilda_ 
                                                (basics._equal_ 
                                                   (basics.list__t _p_Elt_T) 
                                                   v_Vec 
                                                   (builtins.nil _p_Elt_T))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ 
                                                (basics.list__t _p_Elt_T) 
                                                v_Vec 
                                                (builtins.cons _p_Elt_T 
                                                   (Sequence__head _p_Elt_T 
                                                      _p_Elt_element v_Vec) 
                                                   (Sequence__tail _p_Elt_T 
                                                      v_Vec)))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._equal_ 
                                             (basics.list__t _p_Elt_T) 
                                             (builtins.cons _p_Elt_T v_Vcc 
                                                v_Vec) 
                                             (builtins.cons _p_Elt_T 
                                                (Sequence__head _p_Elt_T 
                                                   _p_Elt_element 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vcc v_Vec)) 
                                                (Sequence__tail _p_Elt_T 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vcc v_Vec)))))) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._tilda__tilda_ 
                                                       (basics._equal_ 
                                                          (basics.list__t 
                                                             _p_Elt_T) v_Vec 
                                                          (builtins.nil 
                                                             _p_Elt_T))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (basics.list__t 
                                                          _p_Elt_T) v_Vec 
                                                       (builtins.cons 
                                                          _p_Elt_T 
                                                          (Sequence__head 
                                                             _p_Elt_T 
                                                             _p_Elt_element 
                                                             v_Vec) 
                                                          (Sequence__tail 
                                                             _p_Elt_T v_Vec)))))))) =>
                                     zen.Raxiom 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._tilda__tilda_ 
                                                   (basics._equal_ 
                                                      (basics.list__t 
                                                         _p_Elt_T) v_Vec 
                                                      (builtins.nil _p_Elt_T))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (basics.list__t _p_Elt_T) 
                                                   v_Vec 
                                                   (builtins.cons _p_Elt_T 
                                                      (Sequence__head 
                                                         _p_Elt_T 
                                                         _p_Elt_element v_Vec) 
                                                      (Sequence__tail 
                                                         _p_Elt_T v_Vec)))))) 
                                       v_Vgc v_Vmc) 
                                    (v_Vnc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics.syntactic_equal 
                                                 (basics.list__t _p_Elt_T) 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vcc v_Vec) 
                                                 (builtins.cons _p_Elt_T 
                                                    (Sequence__head _p_Elt_T 
                                                       _p_Elt_element 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          v_Vec)) 
                                                    (Sequence__tail _p_Elt_T 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          v_Vec))))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ 
                                                (basics.list__t _p_Elt_T) 
                                                (builtins.cons _p_Elt_T 
                                                   v_Vcc v_Vec) 
                                                (builtins.cons _p_Elt_T 
                                                   (Sequence__head _p_Elt_T 
                                                      _p_Elt_element 
                                                      (builtins.cons 
                                                         _p_Elt_T v_Vcc v_Vec)) 
                                                   (Sequence__tail _p_Elt_T 
                                                      (builtins.cons 
                                                         _p_Elt_T v_Vcc v_Vec)))))) 
                                       v_Vnc v_Vjc) v_Vlc) v_Vkc) 
                              __L_1_1_2_1_LEMMA) v_Vhc) v_Vfc) v_Vdc) v_Vbc)) 
              (h:(cc.eT _p_Elt_T) =>
               l:(cc.eT (basics.list__t _p_Elt_T)) =>
               I:
               (dk_logic.eP 
                  (dk_logic.imp 
                     (dk_logic.ebP 
                        (basics._tilda__tilda_ 
                           (basics._equal_ (basics.list__t _p_Elt_T) l 
                              (builtins.nil _p_Elt_T)))) 
                     (dk_logic.ebP 
                        (basics._equal_ (basics.list__t _p_Elt_T) l 
                           (builtins.cons _p_Elt_T 
                              (Sequence__head _p_Elt_T _p_Elt_element l) 
                              (Sequence__tail _p_Elt_T l)))))) =>
               zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_Elt_T) 
                          (builtins.cons _p_Elt_T h l) 
                          (builtins.cons _p_Elt_T 
                             (Sequence__head _p_Elt_T _p_Elt_element 
                                (builtins.cons _p_Elt_T h l)) 
                             (Sequence__tail _p_Elt_T 
                                (builtins.cons _p_Elt_T h l)))))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (basics.syntactic_equal 
                                 (basics.list__t _p_Elt_T) 
                                 (builtins.cons _p_Elt_T h l) 
                                 (builtins.cons _p_Elt_T h l)))))) =>
                  focal.zenon_not_syntactic_equal (basics.list__t _p_Elt_T) 
                    (builtins.cons _p_Elt_T h l) 
                    (builtins.cons _p_Elt_T 
                       (Sequence__head _p_Elt_T _p_Elt_element 
                          (builtins.cons _p_Elt_T h l)) 
                       (Sequence__tail _p_Elt_T (builtins.cons _p_Elt_T h l))) 
                    (v_Vac:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal (basics.list__t _p_Elt_T) 
                                 (builtins.cons _p_Elt_T h l) 
                                 (builtins.cons _p_Elt_T h l))))) =>
                     zen.Rnoteq (basics.list__t _p_Elt_T) 
                       (builtins.cons _p_Elt_T h l) v_Vac) v_Vzb)))) 
          (zen.nnpp 
             (zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ 
                         (basics._equal_ 
                            (basics.list__t dk_builtins.weak_poly_var_ty) 
                            (builtins.nil dk_builtins.weak_poly_var_ty) 
                            (builtins.nil dk_builtins.weak_poly_var_ty))))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_Elt_T) 
                         (builtins.nil _p_Elt_T) 
                         (builtins.cons _p_Elt_T 
                            (Sequence__head _p_Elt_T _p_Elt_element 
                               (builtins.nil _p_Elt_T)) 
                            (Sequence__tail _p_Elt_T (builtins.nil _p_Elt_T))))))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._tilda__tilda_ 
                                (basics._equal_ 
                                   (basics.list__t 
                                      dk_builtins.weak_poly_var_ty) 
                                   (builtins.nil dk_builtins.weak_poly_var_ty) 
                                   (builtins.nil dk_builtins.weak_poly_var_ty))))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ (basics.list__t _p_Elt_T) 
                                (builtins.nil _p_Elt_T) 
                                (builtins.cons _p_Elt_T 
                                   (Sequence__head _p_Elt_T _p_Elt_element 
                                      (builtins.nil _p_Elt_T)) 
                                   (Sequence__tail _p_Elt_T 
                                      (builtins.nil _p_Elt_T))))))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ 
                         (basics._equal_ 
                            (basics.list__t dk_builtins.weak_poly_var_ty) 
                            (builtins.nil dk_builtins.weak_poly_var_ty) 
                            (builtins.nil dk_builtins.weak_poly_var_ty))))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_Elt_T) 
                         (builtins.nil _p_Elt_T) 
                         (builtins.cons _p_Elt_T 
                            (Sequence__head _p_Elt_T _p_Elt_element 
                               (builtins.nil _p_Elt_T)) 
                            (Sequence__tail _p_Elt_T (builtins.nil _p_Elt_T)))))) 
                (v_Vac:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics.syntactic_equal 
                                (basics.list__t dk_builtins.weak_poly_var_ty) 
                                (builtins.nil dk_builtins.weak_poly_var_ty) 
                                (builtins.nil dk_builtins.weak_poly_var_ty)))))) =>
                 v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal 
                                (basics.list__t _p_Elt_T) 
                                (builtins.nil _p_Elt_T) 
                                (builtins.cons _p_Elt_T 
                                   (Sequence__head _p_Elt_T _p_Elt_element 
                                      (builtins.nil _p_Elt_T)) 
                                   (Sequence__tail _p_Elt_T 
                                      (builtins.nil _p_Elt_T)))))))) =>
                 focal.zenon_focal_not 
                   (basics.syntactic_equal 
                      (basics.list__t dk_builtins.weak_poly_var_ty) 
                      (builtins.nil dk_builtins.weak_poly_var_ty) 
                      (builtins.nil dk_builtins.weak_poly_var_ty)) 
                   (v_Vcc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal 
                                   (basics.list__t 
                                      dk_builtins.weak_poly_var_ty) 
                                   (builtins.nil dk_builtins.weak_poly_var_ty) 
                                   (builtins.nil dk_builtins.weak_poly_var_ty)))))) =>
                    focal.zenon_not_syntactic_equal 
                      (basics.list__t dk_builtins.weak_poly_var_ty) 
                      (builtins.nil dk_builtins.weak_poly_var_ty) 
                      (builtins.nil dk_builtins.weak_poly_var_ty) 
                      (v_Vdc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal 
                                   (basics.list__t 
                                      dk_builtins.weak_poly_var_ty) 
                                   (builtins.nil dk_builtins.weak_poly_var_ty) 
                                   (builtins.nil dk_builtins.weak_poly_var_ty))))) =>
                       zen.Rnoteq 
                         (basics.list__t dk_builtins.weak_poly_var_ty) 
                         (builtins.nil dk_builtins.weak_poly_var_ty) v_Vdc) 
                      v_Vcc) v_Vac) v_Vzb)))).

def Sequence__tail_includes :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem_spec:(dk_logic.eP 
                   (dk_logic.forall (basics.list__t _p_Elt_T) 
                      (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                       dk_logic.forall _p_Elt_T 
                         (e:(cc.eT _p_Elt_T) =>
                          dk_logic.forall _p_Elt_T 
                            (h:(cc.eT _p_Elt_T) =>
                             dk_logic.eqv 
                               (dk_logic.or (dk_logic.ebP (_p_L_mem l e)) 
                                  (dk_logic.ebP (basics._equal_ _p_Elt_T e h))) 
                               (dk_logic.ebP 
                                  (_p_L_mem (builtins.cons _p_Elt_T h l) e))))))) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (c:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (_p_L_mem 
                   (Sequence__tolist _p_Elt_T (Sequence__tail _p_Elt_T c)) e)) 
             (dk_logic.ebP (Sequence__contains _p_Elt_T _p_L_mem e c)))))
  :=
  _p_Elt_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem_spec:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_Elt_T) 
        (l:(cc.eT (basics.list__t _p_Elt_T)) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (h:(cc.eT _p_Elt_T) =>
               dk_logic.eqv 
                 (dk_logic.or (dk_logic.ebP (_p_L_mem l e)) 
                    (dk_logic.ebP (basics._equal_ _p_Elt_T e h))) 
                 (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T h l) e))))))) =>
  (__M_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.forall (basics.list__t _p_Elt_T) 
         (c:(cc.eT (basics.list__t _p_Elt_T)) =>
          dk_logic.forall _p_Elt_T 
            (e:(cc.eT _p_Elt_T) =>
             dk_logic.imp 
               (dk_logic.ebP 
                  (_p_L_mem 
                     (Sequence__tolist _p_Elt_T (Sequence__tail _p_Elt_T c)) 
                     e)) 
               (dk_logic.ebP (Sequence__contains _p_Elt_T _p_L_mem e c)))))) =>
   zen.nnpp 
     (zen.forall (basics.list__t _p_Elt_T) 
        (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.forall _p_Elt_T 
           (v_Vac:(zen.term _p_Elt_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_L_mem 
                       (Sequence__tolist _p_Elt_T 
                          (Sequence__tail _p_Elt_T v_Vzb)) v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vzb)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall (basics.list__t _p_Elt_T) 
               (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.forall _p_Elt_T 
                  (v_Vac:(zen.term _p_Elt_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_L_mem 
                              (Sequence__tolist _p_Elt_T 
                                 (Sequence__tail _p_Elt_T v_Vzb)) v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vzb)))))))) =>
      zen.Raxiom 
        (zen.forall (basics.list__t _p_Elt_T) 
           (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall _p_Elt_T 
              (v_Vac:(zen.term _p_Elt_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem 
                          (Sequence__tolist _p_Elt_T 
                             (Sequence__tail _p_Elt_T v_Vzb)) v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vzb)))))) 
        __M_1_LEMMA v_Vbc)) 
    ((__M_1_1_LEMMA:
      (e:(cc.eT _p_Elt_T) ->
       H:(dk_logic.eP 
            (dk_logic.ebP 
               (_p_L_mem 
                  (Sequence__tolist _p_Elt_T 
                     (Sequence__tail _p_Elt_T (builtins.nil _p_Elt_T))) e))) ->
       dk_logic.eP 
         (dk_logic.ebP 
            (Sequence__contains _p_Elt_T _p_L_mem e (builtins.nil _p_Elt_T)))) =>
      (__M_1_2_LEMMA:
       (e:(cc.eT _p_Elt_T) ->
        h:(cc.eT _p_Elt_T) ->
        l:(cc.eT (basics.list__t _p_Elt_T)) ->
        I:(dk_logic.eP 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (_p_L_mem 
                      (Sequence__tolist _p_Elt_T (Sequence__tail _p_Elt_T l)) 
                      e)) 
                (dk_logic.ebP (Sequence__contains _p_Elt_T _p_L_mem e l)))) ->
        H:(dk_logic.eP 
             (dk_logic.ebP 
                (_p_L_mem 
                   (Sequence__tolist _p_Elt_T 
                      (Sequence__tail _p_Elt_T (builtins.cons _p_Elt_T h l))) 
                   e))) ->
        dk_logic.eP 
          (dk_logic.ebP 
             (Sequence__contains _p_Elt_T _p_L_mem e 
                (builtins.cons _p_Elt_T h l)))) =>
       dk_builtins.magic_prove 
         (dk_logic.forall (basics.list__t _p_Elt_T) 
            (c:(cc.eT (basics.list__t _p_Elt_T)) =>
             dk_logic.forall _p_Elt_T 
               (e:(cc.eT _p_Elt_T) =>
                dk_logic.imp 
                  (dk_logic.ebP 
                     (_p_L_mem 
                        (Sequence__tolist _p_Elt_T 
                           (Sequence__tail _p_Elt_T c)) e)) 
                  (dk_logic.ebP (Sequence__contains _p_Elt_T _p_L_mem e c)))))) 
        (e:(cc.eT _p_Elt_T) =>
         h:(cc.eT _p_Elt_T) =>
         l:(cc.eT (basics.list__t _p_Elt_T)) =>
         I:
         (dk_logic.eP 
            (dk_logic.imp 
               (dk_logic.ebP 
                  (_p_L_mem 
                     (Sequence__tolist _p_Elt_T (Sequence__tail _p_Elt_T l)) 
                     e)) 
               (dk_logic.ebP (Sequence__contains _p_Elt_T _p_L_mem e l)))) =>
         H:
         (dk_logic.eP 
            (dk_logic.ebP 
               (_p_L_mem 
                  (Sequence__tolist _p_Elt_T 
                     (Sequence__tail _p_Elt_T (builtins.cons _p_Elt_T h l))) 
                  e))) =>
         (__M_1_2_1_LEMMA:(dk_logic.eP (dk_logic.ebP (_p_L_mem l e))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (Sequence__contains _p_Elt_T _p_L_mem e 
                     (builtins.cons _p_Elt_T h l)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_L_mem (builtins.cons _p_Elt_T h l) e))))) =>
             zen.Rall (basics.list__t _p_Elt_T) 
               (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.forall _p_Elt_T 
                  (v_Vbc:(zen.term _p_Elt_T) =>
                   zen.forall _p_Elt_T 
                     (v_Vcc:(zen.term _p_Elt_T) =>
                      zen.eqv 
                        (zen.or 
                           (zen.triangle 
                              (focal.is_true (_p_L_mem v_Vac v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ _p_Elt_T v_Vbc v_Vcc)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.cons _p_Elt_T v_Vcc v_Vac) 
                                 v_Vbc)))))) l 
               (v_Vdc:
                (zen.proof 
                   (zen.forall _p_Elt_T 
                      (v_Vbc:(zen.term _p_Elt_T) =>
                       zen.forall _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.or 
                               (zen.triangle 
                                  (focal.is_true (_p_L_mem l v_Vbc))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_Elt_T v_Vbc v_Vcc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (builtins.cons _p_Elt_T v_Vcc l) 
                                     v_Vbc))))))) =>
                zen.Rall _p_Elt_T 
                  (v_Vbc:(zen.term _p_Elt_T) =>
                   zen.forall _p_Elt_T 
                     (v_Vcc:(zen.term _p_Elt_T) =>
                      zen.eqv 
                        (zen.or 
                           (zen.triangle (focal.is_true (_p_L_mem l v_Vbc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ _p_Elt_T v_Vbc v_Vcc)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.cons _p_Elt_T v_Vcc l) 
                                 v_Vbc))))) e 
                  (v_Vec:
                   (zen.proof 
                      (zen.forall _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.or 
                               (zen.triangle (focal.is_true (_p_L_mem l e))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_Elt_T e v_Vcc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (builtins.cons _p_Elt_T v_Vcc l) 
                                     e)))))) =>
                   zen.Rall _p_Elt_T 
                     (v_Vcc:(zen.term _p_Elt_T) =>
                      zen.eqv 
                        (zen.or 
                           (zen.triangle (focal.is_true (_p_L_mem l e))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ _p_Elt_T e v_Vcc)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.cons _p_Elt_T v_Vcc l) e)))) 
                     h 
                     (v_Vfc:
                      (zen.proof 
                         (zen.eqv 
                            (zen.or 
                               (zen.triangle (focal.is_true (_p_L_mem l e))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_Elt_T e h)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (builtins.cons _p_Elt_T h l) e))))) =>
                      zen.Requiv 
                        (zen.or 
                           (zen.triangle (focal.is_true (_p_L_mem l e))) 
                           (zen.triangle 
                              (focal.is_true (basics._equal_ _p_Elt_T e h)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.cons _p_Elt_T h l) e))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (_p_L_mem l e))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ _p_Elt_T e h)))))) =>
                         v_Vzb0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (builtins.cons _p_Elt_T h l) e))))) =>
                         zen.Rnotor 
                           (zen.triangle (focal.is_true (_p_L_mem l e))) 
                           (zen.triangle 
                              (focal.is_true (basics._equal_ _p_Elt_T e h))) 
                           (v_Vhc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (_p_L_mem l e))))) =>
                            v_Vic:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics.syntactic_equal _p_Elt_T e h))))) =>
                            zen.Raxiom 
                              (zen.triangle (focal.is_true (_p_L_mem l e))) 
                              __M_1_2_1_LEMMA v_Vhc) v_Vgc) 
                        (v_Vjc:
                         (zen.proof 
                            (zen.or 
                               (zen.triangle (focal.is_true (_p_L_mem l e))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_Elt_T e h))))) =>
                         v_Vkc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (builtins.cons _p_Elt_T h l) e)))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (builtins.cons _p_Elt_T h l) e))) 
                           v_Vkc v_Vzb) v_Vfc) v_Vec) v_Vdc) _p_L_mem_spec)) 
           (zen.nnpp (zen.triangle (focal.is_true (_p_L_mem l e))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not (zen.triangle (focal.is_true (_p_L_mem l e))))) =>
               zen.Raxiom (zen.triangle (focal.is_true (_p_L_mem l e))) H 
                 v_Vzb)))) 
       (e:(cc.eT _p_Elt_T) =>
        H:
        (dk_logic.eP 
           (dk_logic.ebP 
              (_p_L_mem 
                 (Sequence__tolist _p_Elt_T 
                    (Sequence__tail _p_Elt_T (builtins.nil _p_Elt_T))) e))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (Sequence__contains _p_Elt_T _p_L_mem e 
                   (builtins.nil _p_Elt_T)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true (_p_L_mem (builtins.nil _p_Elt_T) e))))) =>
           zen.Raxiom 
             (zen.triangle 
                (focal.is_true (_p_L_mem (builtins.nil _p_Elt_T) e))) H v_Vzb))).

def Sequence__tolist_contains :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (c:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.eqv 
             (dk_logic.ebP (Sequence__contains _p_Elt_T _p_L_mem e c)) 
             (dk_logic.ebP (_p_L_mem (Sequence__tolist _p_Elt_T c) e)))))
  :=
  _p_Elt_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall (basics.list__t _p_Elt_T) 
       (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
        zen.forall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vzb))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_L_mem (Sequence__tolist _p_Elt_T v_Vzb) v_Vac)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall (basics.list__t _p_Elt_T) 
              (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
               zen.forall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vzb))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem (Sequence__tolist _p_Elt_T v_Vzb) v_Vac)))))))) =>
     zen.Rnotall (basics.list__t _p_Elt_T) 
       (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
        zen.forall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vzb))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_L_mem (Sequence__tolist _p_Elt_T v_Vzb) v_Vac))))) 
       (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vcc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem (Sequence__tolist _p_Elt_T v_Vcc) v_Vac))))))) =>
        zen.Rnotall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Sequence__contains _p_Elt_T _p_L_mem v_Vac v_Vcc))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_L_mem (Sequence__tolist _p_Elt_T v_Vcc) v_Vac)))) 
          (v_Vec:(zen.term _p_Elt_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Sequence__contains _p_Elt_T _p_L_mem v_Vec v_Vcc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem (Sequence__tolist _p_Elt_T v_Vcc) v_Vec)))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Sequence__contains _p_Elt_T _p_L_mem v_Vec v_Vcc))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_L_mem (Sequence__tolist _p_Elt_T v_Vcc) v_Vec))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_L_mem v_Vcc v_Vec))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_L_mem v_Vcc v_Vec)))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (_p_L_mem v_Vcc v_Vec))) v_Vhc 
                v_Vgc) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_L_mem v_Vcc v_Vec)))) =>
              v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_L_mem v_Vcc v_Vec))))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (_p_L_mem v_Vcc v_Vec))) v_Vhc 
                v_Vgc) v_Vfc) v_Vdc) v_Vbc).

def Sequence__tolist_empty :
  _p_Elt_T:cc.uT ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (l:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.eqv (dk_logic.ebP (Sequence__is_empty _p_Elt_T l)) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_Elt_T) 
                (Sequence__tolist _p_Elt_T l) (builtins.nil _p_Elt_T)))))
  :=
  _p_Elt_T:cc.uT =>
  zen.nnpp 
    (zen.forall (basics.list__t _p_Elt_T) 
       (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
        zen.eqv 
          (zen.triangle (focal.is_true (Sequence__is_empty _p_Elt_T v_Vzb))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_Elt_T) 
                   (Sequence__tolist _p_Elt_T v_Vzb) (builtins.nil _p_Elt_T)))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall (basics.list__t _p_Elt_T) 
              (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
               zen.eqv 
                 (zen.triangle 
                    (focal.is_true (Sequence__is_empty _p_Elt_T v_Vzb))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_Elt_T) 
                          (Sequence__tolist _p_Elt_T v_Vzb) 
                          (builtins.nil _p_Elt_T)))))))) =>
     zen.Rnotall (basics.list__t _p_Elt_T) 
       (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
        zen.eqv 
          (zen.triangle (focal.is_true (Sequence__is_empty _p_Elt_T v_Vzb))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_Elt_T) 
                   (Sequence__tolist _p_Elt_T v_Vzb) (builtins.nil _p_Elt_T))))) 
       (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.eqv 
                 (zen.triangle 
                    (focal.is_true (Sequence__is_empty _p_Elt_T v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_Elt_T) 
                          (Sequence__tolist _p_Elt_T v_Vbc) 
                          (builtins.nil _p_Elt_T))))))) =>
        zen.Rnotequiv 
          (zen.triangle (focal.is_true (Sequence__is_empty _p_Elt_T v_Vbc))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_Elt_T) 
                   (Sequence__tolist _p_Elt_T v_Vbc) (builtins.nil _p_Elt_T)))) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          v_Vbc (builtins.nil _p_Elt_T)))))) =>
           v_Vec:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (basics.syntactic_equal (basics.list__t _p_Elt_T) v_Vbc 
                       (builtins.nil _p_Elt_T))))) =>
           focal.zenon_not_syntactic_equal (basics.list__t _p_Elt_T) v_Vbc 
             (builtins.nil _p_Elt_T) 
             (v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal (basics.list__t _p_Elt_T) v_Vbc 
                          (builtins.nil _p_Elt_T))))) =>
              focal.zenon_syntactic_equal (basics.list__t _p_Elt_T) v_Vbc 
                (builtins.nil _p_Elt_T) 
                (v_Vgc:
                 (zen.proof 
                    (zen.triangle 
                       (zen.equal (basics.list__t _p_Elt_T) v_Vbc 
                          (builtins.nil _p_Elt_T)))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (zen.equal (basics.list__t _p_Elt_T) v_Vbc 
                         (builtins.nil _p_Elt_T))) v_Vgc v_Vfc) v_Vec) v_Vdc) 
          (v_Vec:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (basics.syntactic_equal (basics.list__t _p_Elt_T) v_Vbc 
                       (builtins.nil _p_Elt_T))))) =>
           v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          v_Vbc (builtins.nil _p_Elt_T)))))) =>
           focal.zenon_syntactic_equal (basics.list__t _p_Elt_T) v_Vbc 
             (builtins.nil _p_Elt_T) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (zen.equal (basics.list__t _p_Elt_T) v_Vbc 
                       (builtins.nil _p_Elt_T)))) =>
              focal.zenon_not_syntactic_equal (basics.list__t _p_Elt_T) 
                v_Vbc (builtins.nil _p_Elt_T) 
                (v_Vfc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal (basics.list__t _p_Elt_T) v_Vbc 
                             (builtins.nil _p_Elt_T))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (zen.equal (basics.list__t _p_Elt_T) v_Vbc 
                         (builtins.nil _p_Elt_T))) v_Vgc v_Vfc) v_Vdc) v_Vec) 
          v_Vcc) v_Vac).

def Iterator__model_step_bis :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_Col_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  abst_model_step:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (it:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (it2:(cc.eT abst_T) =>
                            dk_logic.forall _p_Elt_T 
                              (e:(cc.eT _p_Elt_T) =>
                               dk_logic.forall (basics.list__t _p_Elt_T) 
                                 (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                                  dk_logic.forall _p_Col_T 
                                    (c:(cc.eT _p_Col_T) =>
                                     dk_logic.imp (abst_model it c l) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_has_next it)) 
                                          (dk_logic.imp 
                                             (dk_logic.ebP 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T e it2))) 
                                             (dk_logic.ebP (_p_L_mem l e))))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall _p_Col_T 
             (c:(cc.eT _p_Col_T) =>
              dk_logic.imp (abst_model it c l) 
                (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                   (dk_logic.ebP 
                      (_p_L_mem l 
                         (basics.fst _p_Elt_T abst_T (abst_step_it it)))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  abst_model_step:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (it:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (it2:(cc.eT abst_T) =>
            dk_logic.forall _p_Elt_T 
              (e:(cc.eT _p_Elt_T) =>
               dk_logic.forall (basics.list__t _p_Elt_T) 
                 (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                  dk_logic.forall _p_Col_T 
                    (c:(cc.eT _p_Col_T) =>
                     dk_logic.imp (abst_model it c l) 
                       (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                          (dk_logic.imp 
                             (dk_logic.ebP 
                                (basics._equal_ 
                                   (dk_tuple.prod _p_Elt_T abst_T) 
                                   (abst_step_it it) 
                                   (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                             (dk_logic.ebP (_p_L_mem l e))))))))))) =>
  (__P_1_LEMMA:
   (it:(cc.eT abst_T) ->
    l:(cc.eT (basics.list__t _p_Elt_T)) ->
    c:(cc.eT _p_Col_T) ->
    M:(dk_logic.eP (abst_model it c l)) ->
    N:(dk_logic.eP (dk_logic.ebP (abst_has_next it))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (_p_L_mem l (basics.fst _p_Elt_T abst_T (abst_step_it it))))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall _p_Col_T 
              (v_Vbc:(zen.term _p_Col_T) =>
               zen.imp (zen.triangle (abst_model v_Vzb v_Vbc v_Vac)) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_has_next v_Vzb))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem v_Vac 
                             (basics.fst _p_Elt_T abst_T (abst_step_it v_Vzb)))))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.forall _p_Col_T 
                     (v_Vbc:(zen.term _p_Col_T) =>
                      zen.imp (zen.triangle (abst_model v_Vzb v_Vbc v_Vac)) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_has_next v_Vzb))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem v_Vac 
                                    (basics.fst _p_Elt_T abst_T 
                                       (abst_step_it v_Vzb)))))))))))) =>
      zen.Raxiom 
        (zen.forall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.forall (basics.list__t _p_Elt_T) 
              (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
               zen.forall _p_Col_T 
                 (v_Vbc:(zen.term _p_Col_T) =>
                  zen.imp (zen.triangle (abst_model v_Vzb v_Vbc v_Vac)) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_has_next v_Vzb))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_L_mem v_Vac 
                                (basics.fst _p_Elt_T abst_T 
                                   (abst_step_it v_Vzb)))))))))) __P_1_LEMMA 
        v_Vcc)) 
    (it:(cc.eT abst_T) =>
     l:(cc.eT (basics.list__t _p_Elt_T)) =>
     c:(cc.eT _p_Col_T) =>
     M:(dk_logic.eP (abst_model it c l)) =>
     N:(dk_logic.eP (dk_logic.ebP (abst_has_next it))) =>
     (__P_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ (dk_tuple.prod _p_Elt_T abst_T) 
               (abst_step_it it) 
               (dk_tuple.pair _p_Elt_T abst_T 
                  (basics.fst _p_Elt_T abst_T (abst_step_it it)) 
                  (basics.snd _p_Elt_T abst_T (abst_step_it it)))))) =>
      (__P_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_L_mem l (basics.fst _p_Elt_T abst_T (abst_step_it it))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (_p_L_mem l (basics.fst _p_Elt_T abst_T (abst_step_it it))))) 
         (v_Vzb:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (_p_L_mem l 
                         (basics.fst _p_Elt_T abst_T (abst_step_it it))))))) =>
          zen.Raxiom 
            (zen.triangle 
               (focal.is_true 
                  (_p_L_mem l (basics.fst _p_Elt_T abst_T (abst_step_it it))))) 
            __P_1_2_LEMMA v_Vzb)) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (_p_L_mem l (basics.fst _p_Elt_T abst_T (abst_step_it it))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_L_mem l 
                           (basics.fst _p_Elt_T abst_T (abst_step_it it))))))) =>
            focal.zenon_syntactic_equal (dk_tuple.prod _p_Elt_T abst_T) 
              (abst_step_it it) 
              (dk_tuple.pair _p_Elt_T abst_T 
                 (basics.fst _p_Elt_T abst_T (abst_step_it it)) 
                 (basics.snd _p_Elt_T abst_T (abst_step_it it))) 
              (v_Vac:
               (zen.proof 
                  (zen.triangle 
                     (zen.equal (dk_tuple.prod _p_Elt_T abst_T) 
                        (abst_step_it it) 
                        (basics.pair _p_Elt_T abst_T 
                           (basics.fst _p_Elt_T abst_T (abst_step_it it)) 
                           (basics.snd _p_Elt_T abst_T (abst_step_it it)))))) =>
               zen.Rall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.forall _p_Elt_T 
                       (v_Vdc:(zen.term _p_Elt_T) =>
                        zen.forall (basics.list__t _p_Elt_T) 
                          (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                           zen.forall _p_Col_T 
                             (v_Vfc:(zen.term _p_Col_T) =>
                              zen.imp 
                                (zen.triangle (abst_model v_Vbc v_Vfc v_Vec)) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_has_next v_Vbc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it v_Vbc) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T v_Vdc v_Vcc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem v_Vec v_Vdc)))))))))) 
                 it 
                 (v_Vgc:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vcc:(zen.term abst_T) =>
                         zen.forall _p_Elt_T 
                           (v_Vdc:(zen.term _p_Elt_T) =>
                            zen.forall (basics.list__t _p_Elt_T) 
                              (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                               zen.forall _p_Col_T 
                                 (v_Vfc:(zen.term _p_Col_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_model it v_Vfc v_Vec)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_has_next it))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T v_Vdc v_Vcc)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem v_Vec v_Vdc))))))))))) =>
                  zen.Rall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.forall _p_Elt_T 
                       (v_Vdc:(zen.term _p_Elt_T) =>
                        zen.forall (basics.list__t _p_Elt_T) 
                          (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                           zen.forall _p_Col_T 
                             (v_Vfc:(zen.term _p_Col_T) =>
                              zen.imp 
                                (zen.triangle (abst_model it v_Vfc v_Vec)) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_has_next it))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it it) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T v_Vdc v_Vcc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem v_Vec v_Vdc))))))))) 
                    (basics.snd _p_Elt_T abst_T (abst_step_it it)) 
                    (v_Vhc:
                     (zen.proof 
                        (zen.forall _p_Elt_T 
                           (v_Vdc:(zen.term _p_Elt_T) =>
                            zen.forall (basics.list__t _p_Elt_T) 
                              (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                               zen.forall _p_Col_T 
                                 (v_Vfc:(zen.term _p_Col_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_model it v_Vfc v_Vec)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_has_next it))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T v_Vdc 
                                                      (basics.snd _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem v_Vec v_Vdc)))))))))) =>
                     zen.Rall _p_Elt_T 
                       (v_Vdc:(zen.term _p_Elt_T) =>
                        zen.forall (basics.list__t _p_Elt_T) 
                          (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                           zen.forall _p_Col_T 
                             (v_Vfc:(zen.term _p_Col_T) =>
                              zen.imp 
                                (zen.triangle (abst_model it v_Vfc v_Vec)) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_has_next it))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it it) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T v_Vdc 
                                                  (basics.snd _p_Elt_T 
                                                     abst_T (abst_step_it it)))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem v_Vec v_Vdc)))))))) 
                       (basics.fst _p_Elt_T abst_T (abst_step_it it)) 
                       (v_Vic:
                        (zen.proof 
                           (zen.forall (basics.list__t _p_Elt_T) 
                              (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                               zen.forall _p_Col_T 
                                 (v_Vfc:(zen.term _p_Col_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_model it v_Vfc v_Vec)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_has_next it))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T 
                                                      (basics.fst _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)) 
                                                      (basics.snd _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem v_Vec 
                                                   (basics.fst _p_Elt_T 
                                                      abst_T 
                                                      (abst_step_it it))))))))))) =>
                        zen.Rall (basics.list__t _p_Elt_T) 
                          (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
                           zen.forall _p_Col_T 
                             (v_Vfc:(zen.term _p_Col_T) =>
                              zen.imp 
                                (zen.triangle (abst_model it v_Vfc v_Vec)) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_has_next it))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it it) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T 
                                                  (basics.fst _p_Elt_T 
                                                     abst_T (abst_step_it it)) 
                                                  (basics.snd _p_Elt_T 
                                                     abst_T (abst_step_it it)))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem v_Vec 
                                               (basics.fst _p_Elt_T abst_T 
                                                  (abst_step_it it))))))))) 
                          l 
                          (v_Vjc:
                           (zen.proof 
                              (zen.forall _p_Col_T 
                                 (v_Vfc:(zen.term _p_Col_T) =>
                                  zen.imp 
                                    (zen.triangle (abst_model it v_Vfc l)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_has_next it))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T 
                                                      (basics.fst _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)) 
                                                      (basics.snd _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem l 
                                                   (basics.fst _p_Elt_T 
                                                      abst_T 
                                                      (abst_step_it it)))))))))) =>
                           zen.Rall _p_Col_T 
                             (v_Vfc:(zen.term _p_Col_T) =>
                              zen.imp (zen.triangle (abst_model it v_Vfc l)) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_has_next it))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it it) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T 
                                                  (basics.fst _p_Elt_T 
                                                     abst_T (abst_step_it it)) 
                                                  (basics.snd _p_Elt_T 
                                                     abst_T (abst_step_it it)))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem l 
                                               (basics.fst _p_Elt_T abst_T 
                                                  (abst_step_it it)))))))) c 
                             (v_Vkc:
                              (zen.proof 
                                 (zen.imp (zen.triangle (abst_model it c l)) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_has_next it))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T 
                                                      (basics.fst _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)) 
                                                      (basics.snd _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem l 
                                                   (basics.fst _p_Elt_T 
                                                      abst_T 
                                                      (abst_step_it it))))))))) =>
                              zen.Rimply (zen.triangle (abst_model it c l)) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_has_next it))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it it) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T 
                                                  (basics.fst _p_Elt_T 
                                                     abst_T (abst_step_it it)) 
                                                  (basics.snd _p_Elt_T 
                                                     abst_T (abst_step_it it)))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem l 
                                               (basics.fst _p_Elt_T abst_T 
                                                  (abst_step_it it))))))) 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (abst_model it c l)))) =>
                                 zen.Raxiom 
                                   (zen.triangle (abst_model it c l)) M v_Vlc) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_has_next it))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T 
                                                      (basics.fst _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)) 
                                                      (basics.snd _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem l 
                                                   (basics.fst _p_Elt_T 
                                                      abst_T 
                                                      (abst_step_it it)))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true (abst_has_next it))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it it) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T 
                                                  (basics.fst _p_Elt_T 
                                                     abst_T (abst_step_it it)) 
                                                  (basics.snd _p_Elt_T 
                                                     abst_T (abst_step_it it)))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem l 
                                               (basics.fst _p_Elt_T abst_T 
                                                  (abst_step_it it)))))) 
                                   (v_Vnc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_has_next it))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true (abst_has_next it))) 
                                      N v_Vnc) 
                                   (v_Voc:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics._equal_ 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      abst_T) 
                                                   (abst_step_it it) 
                                                   (dk_tuple.pair _p_Elt_T 
                                                      abst_T 
                                                      (basics.fst _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)) 
                                                      (basics.snd _p_Elt_T 
                                                         abst_T 
                                                         (abst_step_it it)))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem l 
                                                   (basics.fst _p_Elt_T 
                                                      abst_T 
                                                      (abst_step_it it))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T abst_T) 
                                               (abst_step_it it) 
                                               (dk_tuple.pair _p_Elt_T 
                                                  abst_T 
                                                  (basics.fst _p_Elt_T 
                                                     abst_T (abst_step_it it)) 
                                                  (basics.snd _p_Elt_T 
                                                     abst_T (abst_step_it it)))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem l 
                                               (basics.fst _p_Elt_T abst_T 
                                                  (abst_step_it it))))) 
                                      (v_Vpc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics.syntactic_equal 
                                                      (dk_tuple.prod 
                                                         _p_Elt_T abst_T) 
                                                      (abst_step_it it) 
                                                      (basics.pair _p_Elt_T 
                                                         abst_T 
                                                         (basics.fst 
                                                            _p_Elt_T abst_T 
                                                            (abst_step_it it)) 
                                                         (basics.snd 
                                                            _p_Elt_T abst_T 
                                                            (abst_step_it it)))))))) =>
                                       focal.zenon_not_syntactic_equal 
                                         (dk_tuple.prod _p_Elt_T abst_T) 
                                         (abst_step_it it) 
                                         (basics.pair _p_Elt_T abst_T 
                                            (basics.fst _p_Elt_T abst_T 
                                               (abst_step_it it)) 
                                            (basics.snd _p_Elt_T abst_T 
                                               (abst_step_it it))) 
                                         (v_Vqc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal 
                                                      (dk_tuple.prod 
                                                         _p_Elt_T abst_T) 
                                                      (abst_step_it it) 
                                                      (basics.pair _p_Elt_T 
                                                         abst_T 
                                                         (basics.fst 
                                                            _p_Elt_T abst_T 
                                                            (abst_step_it it)) 
                                                         (basics.snd 
                                                            _p_Elt_T abst_T 
                                                            (abst_step_it it))))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal 
                                                  (dk_tuple.prod _p_Elt_T 
                                                     abst_T) 
                                                  (abst_step_it it) 
                                                  (basics.pair _p_Elt_T 
                                                     abst_T 
                                                     (basics.fst _p_Elt_T 
                                                        abst_T 
                                                        (abst_step_it it)) 
                                                     (basics.snd _p_Elt_T 
                                                        abst_T 
                                                        (abst_step_it it))))) 
                                            v_Vac v_Vqc) v_Vpc) 
                                      (v_Vrc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem l 
                                                   (basics.fst _p_Elt_T 
                                                      abst_T 
                                                      (abst_step_it it)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem l 
                                                  (basics.fst _p_Elt_T 
                                                     abst_T (abst_step_it it))))) 
                                         v_Vrc v_Vzb) v_Voc) v_Vmc) v_Vkc) 
                             v_Vjc) v_Vic) v_Vhc) v_Vgc) abst_model_step) 
              __P_1_1_LEMMA))) 
       (dk_builtins.magic_prove 
          (dk_logic.ebP 
             (basics._equal_ (dk_tuple.prod _p_Elt_T abst_T) 
                (abst_step_it it) 
                (dk_tuple.pair _p_Elt_T abst_T 
                   (basics.fst _p_Elt_T abst_T (abst_step_it it)) 
                   (basics.snd _p_Elt_T abst_T (abst_step_it it))))))).

def IterTools__add :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_Col_add:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  e:(cc.eT _p_Elt_T) -> c:(cc.eT _p_Col_T) -> cc.eT _p_Col_T
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_Col_add:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
  e:(cc.eT _p_Elt_T) => c:(cc.eT _p_Col_T) => _p_Col_add e c.

def IterTools__it_order :
  _p_It_T:cc.uT ->
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) ->
  it1:(cc.eT _p_It_T) -> it2:(cc.eT _p_It_T) -> cc.eT basics.bool__t
  :=
  _p_It_T:cc.uT =>
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) =>
  it1:(cc.eT _p_It_T) =>
  it2:(cc.eT _p_It_T) =>
  basics._amper__amper_ 
    (basics._lt__equal_ (dk_int.from_nat builtins.0) (_p_It_measure_it it2)) 
    (basics._lt_ (_p_It_measure_it it1) (_p_It_measure_it it2)).

def IterTools__rec_call_decreases :
  _p_Elt_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) ->
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) ->
  _p_It_step_it:((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) ->
  _p_It_mea_positive:(dk_logic.eP 
                        (dk_logic.forall _p_It_T 
                           (a:(cc.eT _p_It_T) =>
                            dk_logic.ebP 
                              (basics._lt__equal_ 
                                 (dk_int.from_nat builtins.0) 
                                 (_p_It_measure_it a))))) ->
  _p_It_mea_decreases:(dk_logic.eP 
                         (dk_logic.forall _p_It_T 
                            (i1:(cc.eT _p_It_T) =>
                             dk_logic.forall 
                               (dk_tuple.prod _p_Elt_T _p_It_T) 
                               (res:
                                (cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                                dk_logic.imp 
                                  (dk_logic.ebP (_p_It_has_next i1)) 
                                  (dk_logic.imp 
                                     (dk_logic.ebP 
                                        (basics._equal_ 
                                           (dk_tuple.prod _p_Elt_T _p_It_T) 
                                           (_p_It_step_it i1) res)) 
                                     (dk_logic.ebP 
                                        (basics._lt_ 
                                           (_p_It_measure_it 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 res)) (_p_It_measure_it i1)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_It_T 
       (it:(cc.eT _p_It_T) =>
        dk_logic.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
          (res:(cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
           dk_logic.imp (dk_logic.ebP (_p_It_has_next it)) 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                      (_p_It_step_it it) res)) 
                (dk_logic.ebP 
                   (IterTools__it_order _p_It_T _p_It_measure_it 
                      (basics.snd _p_Elt_T _p_It_T res) it))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) =>
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) =>
  _p_It_step_it:
  ((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
  _p_It_mea_positive:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (a:(cc.eT _p_It_T) =>
         dk_logic.ebP 
           (basics._lt__equal_ (dk_int.from_nat builtins.0) 
              (_p_It_measure_it a))))) =>
  _p_It_mea_decreases:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (i1:(cc.eT _p_It_T) =>
         dk_logic.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
           (res:(cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
            dk_logic.imp (dk_logic.ebP (_p_It_has_next i1)) 
              (dk_logic.imp 
                 (dk_logic.ebP 
                    (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                       (_p_It_step_it i1) res)) 
                 (dk_logic.ebP 
                    (basics._lt_ 
                       (_p_It_measure_it (basics.snd _p_Elt_T _p_It_T res)) 
                       (_p_It_measure_it i1)))))))) =>
  zen.nnpp 
    (zen.forall _p_It_T 
       (v_Vzb:(zen.term _p_It_T) =>
        zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
          (v_Vac:(zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
           zen.imp (zen.triangle (focal.is_true (_p_It_has_next v_Vzb))) 
             (zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                         (_p_It_step_it v_Vzb) v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (IterTools__it_order _p_It_T _p_It_measure_it 
                         (basics.snd _p_Elt_T _p_It_T v_Vac) v_Vzb))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_It_T 
              (v_Vzb:(zen.term _p_It_T) =>
               zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
                 (v_Vac:(zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_It_has_next v_Vzb))) 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ 
                                (dk_tuple.prod _p_Elt_T _p_It_T) 
                                (_p_It_step_it v_Vzb) v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (IterTools__it_order _p_It_T _p_It_measure_it 
                                (basics.snd _p_Elt_T _p_It_T v_Vac) v_Vzb))))))))) =>
     zen.Rnotall _p_It_T 
       (v_Vzb:(zen.term _p_It_T) =>
        zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
          (v_Vac:(zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
           zen.imp (zen.triangle (focal.is_true (_p_It_has_next v_Vzb))) 
             (zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                         (_p_It_step_it v_Vzb) v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (IterTools__it_order _p_It_T _p_It_measure_it 
                         (basics.snd _p_Elt_T _p_It_T v_Vac) v_Vzb)))))) 
       (v_Vcc:(zen.term _p_It_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
                 (v_Vac:(zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_It_has_next v_Vcc))) 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ 
                                (dk_tuple.prod _p_Elt_T _p_It_T) 
                                (_p_It_step_it v_Vcc) v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (IterTools__it_order _p_It_T _p_It_measure_it 
                                (basics.snd _p_Elt_T _p_It_T v_Vac) v_Vcc)))))))) =>
        zen.Rnotall (dk_tuple.prod _p_Elt_T _p_It_T) 
          (v_Vac:(zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
           zen.imp (zen.triangle (focal.is_true (_p_It_has_next v_Vcc))) 
             (zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                         (_p_It_step_it v_Vcc) v_Vac))) 
                (zen.triangle 
                   (focal.is_true 
                      (IterTools__it_order _p_It_T _p_It_measure_it 
                         (basics.snd _p_Elt_T _p_It_T v_Vac) v_Vcc))))) 
          (v_Vec:(zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_It_has_next v_Vcc))) 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ 
                                (dk_tuple.prod _p_Elt_T _p_It_T) 
                                (_p_It_step_it v_Vcc) v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (IterTools__it_order _p_It_T _p_It_measure_it 
                                (basics.snd _p_Elt_T _p_It_T v_Vec) v_Vcc))))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (_p_It_has_next v_Vcc))) 
             (zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                         (_p_It_step_it v_Vcc) v_Vec))) 
                (zen.triangle 
                   (focal.is_true 
                      (IterTools__it_order _p_It_T _p_It_measure_it 
                         (basics.snd _p_Elt_T _p_It_T v_Vec) v_Vcc)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_It_has_next v_Vcc)))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ 
                                (dk_tuple.prod _p_Elt_T _p_It_T) 
                                (_p_It_step_it v_Vcc) v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (IterTools__it_order _p_It_T _p_It_measure_it 
                                (basics.snd _p_Elt_T _p_It_T v_Vec) v_Vcc)))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                         (_p_It_step_it v_Vcc) v_Vec))) 
                (zen.triangle 
                   (focal.is_true 
                      (IterTools__it_order _p_It_T _p_It_measure_it 
                         (basics.snd _p_Elt_T _p_It_T v_Vec) v_Vcc))) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal 
                             (dk_tuple.prod _p_Elt_T _p_It_T) 
                             (_p_It_step_it v_Vcc) v_Vec)))) =>
                 v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._amper__amper_ 
                                (basics._lt__equal_ 
                                   (dk_int.from_nat builtins.0) 
                                   (_p_It_measure_it v_Vcc)) 
                                (basics._lt_ 
                                   (_p_It_measure_it 
                                      (basics.snd _p_Elt_T _p_It_T v_Vec)) 
                                   (_p_It_measure_it v_Vcc))))))) =>
                 focal.zenon_focal_notand 
                   (basics._lt__equal_ (dk_int.from_nat builtins.0) 
                      (_p_It_measure_it v_Vcc)) 
                   (basics._lt_ 
                      (_p_It_measure_it (basics.snd _p_Elt_T _p_It_T v_Vec)) 
                      (_p_It_measure_it v_Vcc)) 
                   (v_Vkc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._lt__equal_ 
                                      (dk_int.from_nat builtins.0) 
                                      (_p_It_measure_it v_Vcc)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._lt_ 
                                      (_p_It_measure_it 
                                         (basics.snd _p_Elt_T _p_It_T v_Vec)) 
                                      (_p_It_measure_it v_Vcc))))))) =>
                    zen.Rnotand 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._lt__equal_ (dk_int.from_nat builtins.0) 
                               (_p_It_measure_it v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._lt_ 
                               (_p_It_measure_it 
                                  (basics.snd _p_Elt_T _p_It_T v_Vec)) 
                               (_p_It_measure_it v_Vcc)))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._lt__equal_ 
                                      (dk_int.from_nat builtins.0) 
                                      (_p_It_measure_it v_Vcc)))))) =>
                       zen.Rall _p_It_T 
                         (v_Vmc:(zen.term _p_It_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (basics._lt__equal_ 
                                  (dk_int.from_nat builtins.0) 
                                  (_p_It_measure_it v_Vmc)))) v_Vcc 
                         (v_Vnc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._lt__equal_ 
                                      (dk_int.from_nat builtins.0) 
                                      (_p_It_measure_it v_Vcc))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._lt__equal_ 
                                     (dk_int.from_nat builtins.0) 
                                     (_p_It_measure_it v_Vcc)))) v_Vnc v_Vlc) 
                         _p_It_mea_positive) 
                      (v_Voc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._lt_ 
                                      (_p_It_measure_it 
                                         (basics.snd _p_Elt_T _p_It_T v_Vec)) 
                                      (_p_It_measure_it v_Vcc)))))) =>
                       zen.Rall _p_It_T 
                         (v_Vpc:(zen.term _p_It_T) =>
                          zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
                            (v_Vac:
                             (zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_It_has_next v_Vpc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (dk_tuple.prod _p_Elt_T _p_It_T) 
                                           (_p_It_step_it v_Vpc) v_Vac))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._lt_ 
                                           (_p_It_measure_it 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 v_Vac)) 
                                           (_p_It_measure_it v_Vpc))))))) 
                         v_Vcc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
                                (v_Vac:
                                 (zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_It_has_next v_Vcc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T 
                                                  _p_It_T) 
                                               (_p_It_step_it v_Vcc) v_Vac))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._lt_ 
                                               (_p_It_measure_it 
                                                  (basics.snd _p_Elt_T 
                                                     _p_It_T v_Vac)) 
                                               (_p_It_measure_it v_Vcc)))))))) =>
                          zen.Rall (dk_tuple.prod _p_Elt_T _p_It_T) 
                            (v_Vac:
                             (zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_It_has_next v_Vcc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (dk_tuple.prod _p_Elt_T _p_It_T) 
                                           (_p_It_step_it v_Vcc) v_Vac))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._lt_ 
                                           (_p_It_measure_it 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 v_Vac)) 
                                           (_p_It_measure_it v_Vcc)))))) 
                            v_Vec 
                            (v_Vrc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_It_has_next v_Vcc))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T 
                                                  _p_It_T) 
                                               (_p_It_step_it v_Vcc) v_Vec))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._lt_ 
                                               (_p_It_measure_it 
                                                  (basics.snd _p_Elt_T 
                                                     _p_It_T v_Vec)) 
                                               (_p_It_measure_it v_Vcc))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true (_p_It_has_next v_Vcc))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (dk_tuple.prod _p_Elt_T _p_It_T) 
                                           (_p_It_step_it v_Vcc) v_Vec))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._lt_ 
                                           (_p_It_measure_it 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 v_Vec)) 
                                           (_p_It_measure_it v_Vcc))))) 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_It_has_next v_Vcc))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (_p_It_has_next v_Vcc))) 
                                  v_Vgc v_Vsc) 
                               (v_Vtc:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T 
                                                  _p_It_T) 
                                               (_p_It_step_it v_Vcc) v_Vec))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._lt_ 
                                               (_p_It_measure_it 
                                                  (basics.snd _p_Elt_T 
                                                     _p_It_T v_Vec)) 
                                               (_p_It_measure_it v_Vcc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ 
                                           (dk_tuple.prod _p_Elt_T _p_It_T) 
                                           (_p_It_step_it v_Vcc) v_Vec))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._lt_ 
                                           (_p_It_measure_it 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 v_Vec)) 
                                           (_p_It_measure_it v_Vcc)))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics.syntactic_equal 
                                                  (dk_tuple.prod _p_Elt_T 
                                                     _p_It_T) 
                                                  (_p_It_step_it v_Vcc) v_Vec))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._equal_ 
                                              (dk_tuple.prod _p_Elt_T _p_It_T) 
                                              (_p_It_step_it v_Vcc) v_Vec))) 
                                     v_Vic v_Vuc) 
                                  (v_Vvc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._lt_ 
                                               (_p_It_measure_it 
                                                  (basics.snd _p_Elt_T 
                                                     _p_It_T v_Vec)) 
                                               (_p_It_measure_it v_Vcc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._lt_ 
                                              (_p_It_measure_it 
                                                 (basics.snd _p_Elt_T 
                                                    _p_It_T v_Vec)) 
                                              (_p_It_measure_it v_Vcc)))) 
                                     v_Vvc v_Voc) v_Vtc) v_Vrc) v_Vqc) 
                         _p_It_mea_decreases) v_Vkc) v_Vjc) v_Vhc) v_Vfc) 
          v_Vdc) v_Vbc).

def IterTools__wf_it_order :
  _p_It_T:cc.uT ->
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) ->
  dk_logic.eP 
    (well_wrapper _p_It_T (IterTools__it_order _p_It_T _p_It_measure_it))
  :=
  _p_It_T:cc.uT =>
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) =>
  dk_builtins.magic_prove 
    (well_wrapper _p_It_T (IterTools__it_order _p_It_T _p_It_measure_it)).

def IterTools__copy_aux :
  _p_Col_T:cc.uT ->
  _p_Elt_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_Col_add:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) ->
  _p_It_step_it:((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) ->
  abst_it_order:((cc.eT _p_It_T) -> (cc.eT _p_It_T) -> cc.eT basics.bool__t) ->
  abst_rec_call_decreases:(dk_logic.eP 
                             (dk_logic.forall _p_It_T 
                                (it:(cc.eT _p_It_T) =>
                                 dk_logic.forall 
                                   (dk_tuple.prod _p_Elt_T _p_It_T) 
                                   (res:
                                    (cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                                    dk_logic.imp 
                                      (dk_logic.ebP (_p_It_has_next it)) 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T 
                                                  _p_It_T) 
                                               (_p_It_step_it it) res)) 
                                         (dk_logic.ebP 
                                            (abst_it_order 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  res) it))))))) ->
  abst_wf_it_order:(dk_logic.eP (well_wrapper _p_It_T abst_it_order)) ->
  (cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T.

[a, it, abst_wf_it_order, abst_rec_call_decreases, abst_it_order, _p_It_step_it, _p_It_has_next, _p_Col_add, _p_It_T, _p_Elt_T, _p_Col_T]
  IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add _p_It_has_next 
    _p_It_step_it abst_it_order abst_rec_call_decreases abst_wf_it_order it a
  -->
  dk_bool.ite _p_Col_T (_p_It_has_next it) 
    ((res:(cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
      (_p_Col_T:cc.uT =>
       _p_Elt_T:cc.uT =>
       _p_It_T:cc.uT =>
       _p_Col_add:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
       _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) =>
       _p_It_step_it:
       ((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
       abst_it_order:
       ((cc.eT _p_It_T) -> (cc.eT _p_It_T) -> cc.eT basics.bool__t) =>
       abst_rec_call_decreases:
       (dk_logic.eP 
          (dk_logic.forall _p_It_T 
             (it:(cc.eT _p_It_T) =>
              dk_logic.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
                (res:(cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                 dk_logic.imp (dk_logic.ebP (_p_It_has_next it)) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                            (_p_It_step_it it) res)) 
                      (dk_logic.ebP 
                         (abst_it_order (basics.snd _p_Elt_T _p_It_T res) it))))))) =>
       abst_wf_it_order:(dk_logic.eP (well_wrapper _p_It_T abst_it_order)) =>
       it:(cc.eT _p_It_T) =>
       a:(cc.eT _p_Col_T) =>
       dk_builtins.call_by_value _p_Col_T _p_Col_T 
         (dk_builtins.call_by_value _p_It_T (cc.Arrow _p_Col_T _p_Col_T) 
            (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
               _p_It_has_next _p_It_step_it abst_it_order 
               abst_rec_call_decreases abst_wf_it_order) it) a) _p_Col_T 
        _p_Elt_T _p_It_T _p_Col_add _p_It_has_next _p_It_step_it 
        abst_it_order abst_rec_call_decreases abst_wf_it_order 
        (basics.snd _p_Elt_T _p_It_T res) 
        (_p_Col_add (basics.fst _p_Elt_T _p_It_T res) a)) (_p_It_step_it it)) 
    a.

def IterTools__copy :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_Col_empty:(cc.eT _p_Col_T) ->
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) ->
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  c:(cc.eT _p_Col_T) -> cc.eT _p_Col_T
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_Col_empty:(cc.eT _p_Col_T) =>
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) =>
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
  c:(cc.eT _p_Col_T) => abst_copy_aux (_p_It_start c) _p_Col_empty.

def IterTools__copy_inv_prop :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_Col_contains:((cc.eT _p_Elt_T) ->
                   (cc.eT _p_Col_T) -> cc.eT basics.bool__t) ->
  _p_It_model:((cc.eT _p_It_T) ->
               (cc.eT _p_Col_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  it:(cc.eT _p_It_T) -> dk_logic.Prop
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_Col_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT basics.bool__t) =>
  _p_It_model:
  ((cc.eT _p_It_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
  it:(cc.eT _p_It_T) =>
  dk_logic.forall _p_Col_T 
    (a:(cc.eT _p_Col_T) =>
     dk_logic.forall _p_Col_T 
       (c:(cc.eT _p_Col_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.imp (_p_It_model it c l) 
             (dk_logic.imp 
                (dk_logic.forall _p_Elt_T 
                   (x:(cc.eT _p_Elt_T) =>
                    dk_logic.imp (dk_logic.ebP (_p_Col_contains x a)) 
                      (dk_logic.ebP (_p_Col_contains x c)))) 
                (dk_logic.forall _p_Elt_T 
                   (x:(cc.eT _p_Elt_T) =>
                    dk_logic.eqv 
                      (dk_logic.ebP (_p_Col_contains x (abst_copy_aux it a))) 
                      (dk_logic.ebP 
                         (basics._bar__bar_ (_p_L_mem l x) 
                            (_p_Col_contains x a))))))))).

def IterTools__copy_spec :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_Col_contains:((cc.eT _p_Elt_T) ->
                   (cc.eT _p_Col_T) -> cc.eT basics.bool__t) ->
  _p_Col_empty:(cc.eT _p_Col_T) ->
  _p_Col_tolist:((cc.eT _p_Col_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  _p_Col_tolist_contains:(dk_logic.eP 
                            (dk_logic.forall _p_Col_T 
                               (c:(cc.eT _p_Col_T) =>
                                dk_logic.forall _p_Elt_T 
                                  (e:(cc.eT _p_Elt_T) =>
                                   dk_logic.eqv 
                                     (dk_logic.ebP (_p_Col_contains e c)) 
                                     (dk_logic.ebP 
                                        (_p_L_mem (_p_Col_tolist c) e)))))) ->
  _p_It_model:((cc.eT _p_It_T) ->
               (cc.eT _p_Col_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) ->
  _p_It_model_start:(dk_logic.eP 
                       (dk_logic.forall _p_Col_T 
                          (c:(cc.eT _p_Col_T) =>
                           _p_It_model (_p_It_start c) c (_p_Col_tolist c)))) ->
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_Elt_T 
       (e:(cc.eT _p_Elt_T) =>
        dk_logic.forall _p_Col_T 
          (c:(cc.eT _p_Col_T) =>
           dk_logic.eqv (dk_logic.ebP (_p_Col_contains e c)) 
             (dk_logic.ebP 
                (_p_Col_contains e 
                   (IterTools__copy _p_Elt_T _p_Col_T _p_It_T _p_Col_empty 
                      _p_It_start abst_copy_aux c))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_Col_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT basics.bool__t) =>
  _p_Col_empty:(cc.eT _p_Col_T) =>
  _p_Col_tolist:((cc.eT _p_Col_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  _p_Col_tolist_contains:
  (dk_logic.eP 
     (dk_logic.forall _p_Col_T 
        (c:(cc.eT _p_Col_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.eqv (dk_logic.ebP (_p_Col_contains e c)) 
              (dk_logic.ebP (_p_L_mem (_p_Col_tolist c) e)))))) =>
  _p_It_model:
  ((cc.eT _p_It_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) =>
  _p_It_model_start:
  (dk_logic.eP 
     (dk_logic.forall _p_Col_T 
        (c:(cc.eT _p_Col_T) =>
         _p_It_model (_p_It_start c) c (_p_Col_tolist c)))) =>
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
  (__R_1_LEMMA:
   (e:(cc.eT _p_Elt_T) ->
    c:(cc.eT _p_Col_T) ->
    dk_logic.eP 
      (dk_logic.eqv (dk_logic.ebP (_p_Col_contains e c)) 
         (dk_logic.ebP 
            (_p_Col_contains e (abst_copy_aux (_p_It_start c) _p_Col_empty))))) =>
   zen.nnpp 
     (zen.forall _p_Elt_T 
        (v_Vzb:(zen.term _p_Elt_T) =>
         zen.forall _p_Col_T 
           (v_Vac:(zen.term _p_Col_T) =>
            zen.eqv 
              (zen.triangle (focal.is_true (_p_Col_contains v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (_p_Col_contains v_Vzb 
                       (IterTools__copy _p_Elt_T _p_Col_T _p_It_T 
                          _p_Col_empty _p_It_start abst_copy_aux v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_Elt_T 
               (v_Vzb:(zen.term _p_Elt_T) =>
                zen.forall _p_Col_T 
                  (v_Vac:(zen.term _p_Col_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true (_p_Col_contains v_Vzb v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_Col_contains v_Vzb 
                              (IterTools__copy _p_Elt_T _p_Col_T _p_It_T 
                                 _p_Col_empty _p_It_start abst_copy_aux v_Vac))))))))) =>
      zen.Rnotall _p_Elt_T 
        (v_Vzb:(zen.term _p_Elt_T) =>
         zen.forall _p_Col_T 
           (v_Vac:(zen.term _p_Col_T) =>
            zen.eqv 
              (zen.triangle (focal.is_true (_p_Col_contains v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (_p_Col_contains v_Vzb 
                       (IterTools__copy _p_Elt_T _p_Col_T _p_It_T 
                          _p_Col_empty _p_It_start abst_copy_aux v_Vac)))))) 
        (v_Vcc:(zen.term _p_Elt_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall _p_Col_T 
                  (v_Vac:(zen.term _p_Col_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true (_p_Col_contains v_Vcc v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_Col_contains v_Vcc 
                              (IterTools__copy _p_Elt_T _p_Col_T _p_It_T 
                                 _p_Col_empty _p_It_start abst_copy_aux v_Vac)))))))) =>
         zen.Rnotall _p_Col_T 
           (v_Vac:(zen.term _p_Col_T) =>
            zen.eqv 
              (zen.triangle (focal.is_true (_p_Col_contains v_Vcc v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (_p_Col_contains v_Vcc 
                       (IterTools__copy _p_Elt_T _p_Col_T _p_It_T 
                          _p_Col_empty _p_It_start abst_copy_aux v_Vac))))) 
           (v_Vec:(zen.term _p_Col_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.eqv 
                     (zen.triangle 
                        (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_Col_contains v_Vcc 
                              (IterTools__copy _p_Elt_T _p_Col_T _p_It_T 
                                 _p_Col_empty _p_It_start abst_copy_aux v_Vec))))))) =>
            zen.Rnotequiv 
              (zen.triangle (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
              (zen.triangle 
                 (focal.is_true 
                    (_p_Col_contains v_Vcc 
                       (IterTools__copy _p_Elt_T _p_Col_T _p_It_T 
                          _p_Col_empty _p_It_start abst_copy_aux v_Vec)))) 
              (v_Vgc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true (_p_Col_contains v_Vcc v_Vec))))) =>
               v_Vhc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_Col_contains v_Vcc 
                           (abst_copy_aux (_p_It_start v_Vec) _p_Col_empty))))) =>
               zen.Rall _p_Elt_T 
                 (v_Vzb:(zen.term _p_Elt_T) =>
                  zen.forall _p_Col_T 
                    (v_Vac:(zen.term _p_Col_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true (_p_Col_contains v_Vzb v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains v_Vzb 
                                (abst_copy_aux (_p_It_start v_Vac) 
                                   _p_Col_empty)))))) v_Vcc 
                 (v_Vic:
                  (zen.proof 
                     (zen.forall _p_Col_T 
                        (v_Vac:(zen.term _p_Col_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true (_p_Col_contains v_Vcc v_Vac))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains v_Vcc 
                                    (abst_copy_aux (_p_It_start v_Vac) 
                                       _p_Col_empty))))))) =>
                  zen.Rall _p_Col_T 
                    (v_Vac:(zen.term _p_Col_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true (_p_Col_contains v_Vcc v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains v_Vcc 
                                (abst_copy_aux (_p_It_start v_Vac) 
                                   _p_Col_empty))))) v_Vec 
                    (v_Vjc:
                     (zen.proof 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains v_Vcc 
                                    (abst_copy_aux (_p_It_start v_Vec) 
                                       _p_Col_empty)))))) =>
                     zen.Requiv 
                       (zen.triangle 
                          (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains v_Vcc 
                                (abst_copy_aux (_p_It_start v_Vec) 
                                   _p_Col_empty)))) 
                       (v_Vgc0:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains v_Vcc v_Vec))))) =>
                        v_Vkc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_Col_contains v_Vcc 
                                       (abst_copy_aux (_p_It_start v_Vec) 
                                          _p_Col_empty)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_Col_contains v_Vcc 
                                   (abst_copy_aux (_p_It_start v_Vec) 
                                      _p_Col_empty)))) v_Vhc v_Vkc) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (_p_Col_contains v_Vcc v_Vec)))) =>
                        v_Vhc0:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains v_Vcc 
                                    (abst_copy_aux (_p_It_start v_Vec) 
                                       _p_Col_empty))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
                          v_Vlc v_Vgc) v_Vjc) v_Vic) __R_1_LEMMA) 
              (v_Vlc:
               (zen.proof 
                  (zen.triangle (focal.is_true (_p_Col_contains v_Vcc v_Vec)))) =>
               v_Vkc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_Col_contains v_Vcc 
                              (abst_copy_aux (_p_It_start v_Vec) _p_Col_empty)))))) =>
               zen.Rall _p_Elt_T 
                 (v_Vzb:(zen.term _p_Elt_T) =>
                  zen.forall _p_Col_T 
                    (v_Vac:(zen.term _p_Col_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true (_p_Col_contains v_Vzb v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains v_Vzb 
                                (abst_copy_aux (_p_It_start v_Vac) 
                                   _p_Col_empty)))))) v_Vcc 
                 (v_Vic:
                  (zen.proof 
                     (zen.forall _p_Col_T 
                        (v_Vac:(zen.term _p_Col_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true (_p_Col_contains v_Vcc v_Vac))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains v_Vcc 
                                    (abst_copy_aux (_p_It_start v_Vac) 
                                       _p_Col_empty))))))) =>
                  zen.Rall _p_Col_T 
                    (v_Vac:(zen.term _p_Col_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true (_p_Col_contains v_Vcc v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains v_Vcc 
                                (abst_copy_aux (_p_It_start v_Vac) 
                                   _p_Col_empty))))) v_Vec 
                    (v_Vjc:
                     (zen.proof 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains v_Vcc 
                                    (abst_copy_aux (_p_It_start v_Vec) 
                                       _p_Col_empty)))))) =>
                     zen.Requiv 
                       (zen.triangle 
                          (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains v_Vcc 
                                (abst_copy_aux (_p_It_start v_Vec) 
                                   _p_Col_empty)))) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains v_Vcc v_Vec))))) =>
                        v_Vkc0:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_Col_contains v_Vcc 
                                       (abst_copy_aux (_p_It_start v_Vec) 
                                          _p_Col_empty)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (_p_Col_contains v_Vcc v_Vec))) 
                          v_Vlc v_Vgc) 
                       (v_Vlc0:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (_p_Col_contains v_Vcc v_Vec)))) =>
                        v_Vhc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains v_Vcc 
                                    (abst_copy_aux (_p_It_start v_Vec) 
                                       _p_Col_empty))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_Col_contains v_Vcc 
                                   (abst_copy_aux (_p_It_start v_Vec) 
                                      _p_Col_empty)))) v_Vhc v_Vkc) v_Vjc) 
                    v_Vic) __R_1_LEMMA) v_Vfc) v_Vdc) v_Vbc)) 
    (e:(cc.eT _p_Elt_T) =>
     c:(cc.eT _p_Col_T) =>
     (__R_1_0_LEMMA:
      (dk_logic.eP (_p_It_model (_p_It_start c) c (_p_Col_tolist c))) =>
      (__R_1_1_LEMMA:
       (H:(dk_logic.eP (dk_logic.ebP (_p_Col_contains e c))) ->
        dk_logic.eP 
          (dk_logic.ebP 
             (_p_Col_contains e (abst_copy_aux (_p_It_start c) _p_Col_empty)))) =>
       (__R_1_2_LEMMA:
        (H:(dk_logic.eP 
              (dk_logic.ebP 
                 (_p_Col_contains e 
                    (abst_copy_aux (_p_It_start c) _p_Col_empty)))) ->
         dk_logic.eP (dk_logic.ebP (_p_Col_contains e c))) =>
        zen.nnpp 
          (zen.eqv (zen.triangle (focal.is_true (_p_Col_contains e c))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_Col_contains e 
                      (abst_copy_aux (_p_It_start c) _p_Col_empty))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_Col_contains e 
                             (abst_copy_aux (_p_It_start c) _p_Col_empty))))))) =>
           zen.Rimply (zen.triangle (focal.is_true (_p_Col_contains e c))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_Col_contains e 
                      (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_Col_contains e c))))) =>
              zen.Rimply 
                (zen.triangle 
                   (focal.is_true 
                      (_p_Col_contains e 
                         (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
                (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains e 
                                (abst_copy_aux (_p_It_start c) _p_Col_empty)))))) =>
                 zen.Rnotequiv 
                   (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_Col_contains e 
                            (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
                   (v_Vac0:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_Col_contains e c))))) =>
                    v_Vcc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains e 
                                (abst_copy_aux (_p_It_start c) _p_Col_empty))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_Col_contains e 
                               (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
                      v_Vcc v_Vbc) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_Col_contains e c)))) =>
                    v_Vbc0:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_Col_contains e 
                                   (abst_copy_aux (_p_It_start c) 
                                      _p_Col_empty)))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                      v_Vdc v_Vac) v_Vzb) 
                (v_Vdc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_Col_contains e c)))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                   v_Vdc v_Vac) __R_1_2_LEMMA) 
             (v_Vcc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_Col_contains e 
                          (abst_copy_aux (_p_It_start c) _p_Col_empty))))) =>
              zen.Rimply 
                (zen.triangle 
                   (focal.is_true 
                      (_p_Col_contains e 
                         (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
                (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains e 
                                (abst_copy_aux (_p_It_start c) _p_Col_empty)))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_Col_contains e 
                            (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
                   v_Vcc v_Vbc) 
                (v_Vdc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_Col_contains e c)))) =>
                 zen.Rnotequiv 
                   (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_Col_contains e 
                            (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
                   (v_Vac:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_Col_contains e c))))) =>
                    v_Vcc0:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_Col_contains e 
                                (abst_copy_aux (_p_It_start c) _p_Col_empty))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                      v_Vdc v_Vac) 
                   (v_Vdc0:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_Col_contains e c)))) =>
                    v_Vbc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_Col_contains e 
                                   (abst_copy_aux (_p_It_start c) 
                                      _p_Col_empty)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_Col_contains e 
                               (abst_copy_aux (_p_It_start c) _p_Col_empty)))) 
                      v_Vcc v_Vbc) v_Vzb) __R_1_2_LEMMA) __R_1_1_LEMMA)) 
         (H:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_Col_contains e 
                   (abst_copy_aux (_p_It_start c) _p_Col_empty)))) =>
          (__R_1_2_1_LEMMA:
           (dk_logic.eP (dk_logic.ebP (_p_L_mem (_p_Col_tolist c) e))) =>
           zen.nnpp (zen.triangle (focal.is_true (_p_Col_contains e c))) 
             (v_Vac:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_Col_contains e c))))) =>
              zen.Rall _p_Col_T 
                (v_Vbc:(zen.term _p_Col_T) =>
                 zen.forall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true (_p_Col_contains v_Vcc v_Vbc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_L_mem (_p_Col_tolist v_Vbc) v_Vcc))))) c 
                (v_Vdc:
                 (zen.proof 
                    (zen.forall _p_Elt_T 
                       (v_Vcc:(zen.term _p_Elt_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (_p_Col_contains v_Vcc c))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (_p_Col_tolist c) v_Vcc)))))) =>
                 zen.Rall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_Col_contains v_Vcc c))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (_p_Col_tolist c) v_Vcc)))) 
                   e 
                   (v_Vec:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem (_p_Col_tolist c) e))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (_p_Col_tolist c) e))) 
                      (v_Vac0:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_Col_contains e c))))) =>
                       v_Vfc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem (_p_Col_tolist c) e))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_L_mem (_p_Col_tolist c) e))) 
                         __R_1_2_1_LEMMA v_Vfc) 
                      (v_Vgc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (_p_Col_contains e c)))) =>
                       __R_1_2_1_LEMMA0:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem (_p_Col_tolist c) e)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (_p_Col_contains e c))) 
                         v_Vgc v_Vac) v_Vec) v_Vdc) _p_Col_tolist_contains)) 
            (dk_builtins.magic_prove 
               (dk_logic.ebP (_p_L_mem (_p_Col_tolist c) e))))) 
        (H:(dk_logic.eP (dk_logic.ebP (_p_Col_contains e c))) =>
         dk_builtins.magic_prove 
           (dk_logic.ebP 
              (_p_Col_contains e (abst_copy_aux (_p_It_start c) _p_Col_empty))))) 
       (zen.nnpp 
          (zen.triangle (_p_It_model (_p_It_start c) c (_p_Col_tolist c))) 
          (v_Vcc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (_p_It_model (_p_It_start c) c (_p_Col_tolist c))))) =>
           zen.Rall _p_Col_T 
             (v_Vdc:(zen.term _p_Col_T) =>
              zen.triangle 
                (_p_It_model (_p_It_start v_Vdc) v_Vdc (_p_Col_tolist v_Vdc))) 
             c 
             (v_Vec:
              (zen.proof 
                 (zen.triangle 
                    (_p_It_model (_p_It_start c) c (_p_Col_tolist c)))) =>
              zen.Rsubst _p_It_T 
                (v_Vfc:(zen.term _p_It_T) =>
                 zen.triangle (_p_It_model v_Vfc c (_p_Col_tolist c))) 
                (_p_It_start c) (_p_It_start c) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal _p_It_T (_p_It_start c) (_p_It_start c))))) =>
                 zen.Rnoteq _p_It_T (_p_It_start c) v_Vgc) 
                (v_Vec0:
                 (zen.proof 
                    (zen.triangle 
                       (_p_It_model (_p_It_start c) c (_p_Col_tolist c)))) =>
                 zen.Rsubst _p_Col_T 
                   (v_Vhc:(zen.term _p_Col_T) =>
                    zen.triangle 
                      (_p_It_model (_p_It_start c) v_Vhc (_p_Col_tolist c))) 
                   c c 
                   (v_Vic:
                    (zen.proof 
                       (zen.not (zen.triangle (zen.equal _p_Col_T c c)))) =>
                    zen.Rnoteq _p_Col_T c v_Vic) 
                   (v_Vec1:
                    (zen.proof 
                       (zen.triangle 
                          (_p_It_model (_p_It_start c) c (_p_Col_tolist c)))) =>
                    zen.Rsubst (basics.list__t _p_Elt_T) 
                      (v_Vjc:(zen.term (basics.list__t _p_Elt_T)) =>
                       zen.triangle (_p_It_model (_p_It_start c) c v_Vjc)) 
                      (_p_Col_tolist c) (_p_Col_tolist c) 
                      (v_Vkc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal (basics.list__t _p_Elt_T) 
                                   (_p_Col_tolist c) (_p_Col_tolist c))))) =>
                       zen.Rnoteq (basics.list__t _p_Elt_T) 
                         (_p_Col_tolist c) v_Vkc) 
                      (v_Vec2:
                       (zen.proof 
                          (zen.triangle 
                             (_p_It_model (_p_It_start c) c (_p_Col_tolist c)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (_p_It_model (_p_It_start c) c (_p_Col_tolist c))) 
                         v_Vec2 v_Vcc) v_Vec1) v_Vec0) v_Vec) 
             _p_It_model_start))).

def IterTools__inductive_measure :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) ->
  abst_copy_inv_prop:((cc.eT _p_It_T) -> dk_logic.Prop) ->
  dk_logic.eP 
    (dk_logic.eqv 
       (dk_logic.forall _p_It_T 
          (it:(cc.eT _p_It_T) =>
           dk_logic.imp 
             (dk_logic.forall _p_It_T 
                (it2:(cc.eT _p_It_T) =>
                 dk_logic.imp 
                   (dk_logic.ebP 
                      (IterTools__it_order _p_It_T _p_It_measure_it it2 it)) 
                   (abst_copy_inv_prop it2))) (abst_copy_inv_prop it))) 
       (dk_logic.forall _p_It_T (it:(cc.eT _p_It_T) => abst_copy_inv_prop it)))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) =>
  abst_copy_inv_prop:((cc.eT _p_It_T) -> dk_logic.Prop) =>
  dk_builtins.magic_prove 
    (dk_logic.eqv 
       (dk_logic.forall _p_It_T 
          (it:(cc.eT _p_It_T) =>
           dk_logic.imp 
             (dk_logic.forall _p_It_T 
                (it2:(cc.eT _p_It_T) =>
                 dk_logic.imp 
                   (dk_logic.ebP 
                      (IterTools__it_order _p_It_T _p_It_measure_it it2 it)) 
                   (abst_copy_inv_prop it2))) (abst_copy_inv_prop it))) 
       (dk_logic.forall _p_It_T (it:(cc.eT _p_It_T) => abst_copy_inv_prop it))).

def IterTools__copy_new_invariant :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem_empty_spec:(dk_logic.eP 
                         (dk_logic.forall _p_Elt_T 
                            (x:(cc.eT _p_Elt_T) =>
                             dk_logic.ebP 
                               (basics._tilda__tilda_ 
                                  (_p_L_mem (builtins.nil _p_Elt_T) x))))) ->
  _p_Col_add:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  _p_Col_contains:((cc.eT _p_Elt_T) ->
                   (cc.eT _p_Col_T) -> cc.eT basics.bool__t) ->
  _p_Col_add_contains:(dk_logic.eP 
                         (dk_logic.forall _p_Col_T 
                            (c:(cc.eT _p_Col_T) =>
                             dk_logic.forall _p_Elt_T 
                               (e:(cc.eT _p_Elt_T) =>
                                dk_logic.forall _p_Elt_T 
                                  (x:(cc.eT _p_Elt_T) =>
                                   dk_logic.eqv 
                                     (dk_logic.ebP 
                                        (_p_Col_contains x (_p_Col_add e c))) 
                                     (dk_logic.ebP 
                                        (basics._bar__bar_ 
                                           (basics._equal_ _p_Elt_T x e) 
                                           (_p_Col_contains x c)))))))) ->
  _p_Col_add_contains1:(dk_logic.eP 
                          (dk_logic.forall _p_Col_T 
                             (c:(cc.eT _p_Col_T) =>
                              dk_logic.forall _p_Elt_T 
                                (e:(cc.eT _p_Elt_T) =>
                                 dk_logic.ebP 
                                   (_p_Col_contains e (_p_Col_add e c)))))) ->
  _p_Col_add_contains2:(dk_logic.eP 
                          (dk_logic.forall _p_Col_T 
                             (c:(cc.eT _p_Col_T) =>
                              dk_logic.forall _p_Elt_T 
                                (e:(cc.eT _p_Elt_T) =>
                                 dk_logic.forall _p_Elt_T 
                                   (x:(cc.eT _p_Elt_T) =>
                                    dk_logic.imp 
                                      (dk_logic.not 
                                         (dk_logic.ebP 
                                            (basics._equal_ _p_Elt_T e x))) 
                                      (dk_logic.eqv 
                                         (dk_logic.ebP 
                                            (_p_Col_contains x 
                                               (_p_Col_add e c))) 
                                         (dk_logic.ebP (_p_Col_contains x c)))))))) ->
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) ->
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) ->
  _p_It_model:((cc.eT _p_It_T) ->
               (cc.eT _p_Col_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  _p_It_step_it:((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) ->
  _p_It_mea_positive:(dk_logic.eP 
                        (dk_logic.forall _p_It_T 
                           (a:(cc.eT _p_It_T) =>
                            dk_logic.ebP 
                              (basics._lt__equal_ 
                                 (dk_int.from_nat builtins.0) 
                                 (_p_It_measure_it a))))) ->
  _p_It_model_includes:(dk_logic.eP 
                          (dk_logic.forall _p_It_T 
                             (it:(cc.eT _p_It_T) =>
                              dk_logic.forall _p_Col_T 
                                (c:(cc.eT _p_Col_T) =>
                                 dk_logic.forall (basics.list__t _p_Elt_T) 
                                   (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                                    dk_logic.imp (_p_It_model it c l) 
                                      (dk_logic.forall _p_Elt_T 
                                         (e:(cc.eT _p_Elt_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP (_p_L_mem l e)) 
                                            (dk_logic.ebP 
                                               (_p_Col_contains e c))))))))) ->
  _p_It_mea_decreases:(dk_logic.eP 
                         (dk_logic.forall _p_It_T 
                            (i1:(cc.eT _p_It_T) =>
                             dk_logic.forall 
                               (dk_tuple.prod _p_Elt_T _p_It_T) 
                               (res:
                                (cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                                dk_logic.imp 
                                  (dk_logic.ebP (_p_It_has_next i1)) 
                                  (dk_logic.imp 
                                     (dk_logic.ebP 
                                        (basics._equal_ 
                                           (dk_tuple.prod _p_Elt_T _p_It_T) 
                                           (_p_It_step_it i1) res)) 
                                     (dk_logic.ebP 
                                        (basics._lt_ 
                                           (_p_It_measure_it 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 res)) (_p_It_measure_it i1)))))))) ->
  _p_It_model_step:(dk_logic.eP 
                      (dk_logic.forall _p_It_T 
                         (it:(cc.eT _p_It_T) =>
                          dk_logic.forall _p_It_T 
                            (it2:(cc.eT _p_It_T) =>
                             dk_logic.forall _p_Elt_T 
                               (e:(cc.eT _p_Elt_T) =>
                                dk_logic.forall (basics.list__t _p_Elt_T) 
                                  (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                                   dk_logic.forall _p_Col_T 
                                     (c:(cc.eT _p_Col_T) =>
                                      dk_logic.imp (_p_It_model it c l) 
                                        (dk_logic.imp 
                                           (dk_logic.ebP (_p_It_has_next it)) 
                                           (dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (basics._equal_ 
                                                    (dk_tuple.prod _p_Elt_T 
                                                       _p_It_T) 
                                                    (_p_It_step_it it) 
                                                    (dk_tuple.pair _p_Elt_T 
                                                       _p_It_T e it2))) 
                                              (dk_logic.ebP (_p_L_mem l e))))))))))) ->
  _p_It_model_step_exists:(dk_logic.eP 
                             (dk_logic.forall _p_It_T 
                                (it:(cc.eT _p_It_T) =>
                                 dk_logic.forall _p_It_T 
                                   (it2:(cc.eT _p_It_T) =>
                                    dk_logic.forall _p_Col_T 
                                      (c:(cc.eT _p_Col_T) =>
                                       dk_logic.forall _p_Elt_T 
                                         (e:(cc.eT _p_Elt_T) =>
                                          dk_logic.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (l:
                                             (cc.eT (basics.list__t _p_Elt_T)) =>
                                             dk_logic.imp 
                                               (dk_logic.ebP 
                                                  (_p_It_has_next it)) 
                                               (dk_logic.imp 
                                                  (_p_It_model it c l) 
                                                  (dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T e it2))) 
                                                     (dk_logic.exists 
                                                        (basics.list__t 
                                                           _p_Elt_T) 
                                                        (l2:
                                                         (cc.eT 
                                                            (basics.list__t 
                                                               _p_Elt_T)) =>
                                                         _p_It_model it2 c l2))))))))))) ->
  _p_It_model_step_new2:(dk_logic.eP 
                           (dk_logic.forall _p_It_T 
                              (it:(cc.eT _p_It_T) =>
                               dk_logic.forall _p_It_T 
                                 (it2:(cc.eT _p_It_T) =>
                                  dk_logic.forall _p_Elt_T 
                                    (e:(cc.eT _p_Elt_T) =>
                                     dk_logic.forall 
                                       (basics.list__t _p_Elt_T) 
                                       (l:
                                        (cc.eT (basics.list__t _p_Elt_T)) =>
                                        dk_logic.forall _p_Col_T 
                                          (c:(cc.eT _p_Col_T) =>
                                           dk_logic.imp (_p_It_model it c l) 
                                             (dk_logic.imp 
                                                (dk_logic.ebP 
                                                   (_p_It_has_next it)) 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (basics._equal_ 
                                                         (dk_tuple.prod 
                                                            _p_Elt_T _p_It_T) 
                                                         (_p_It_step_it it) 
                                                         (dk_tuple.pair 
                                                            _p_Elt_T _p_It_T 
                                                            e it2))) 
                                                   (dk_logic.forall 
                                                      (basics.list__t 
                                                         _p_Elt_T) 
                                                      (l2:
                                                       (cc.eT 
                                                          (basics.list__t 
                                                             _p_Elt_T)) =>
                                                       dk_logic.imp 
                                                         (_p_It_model it2 c 
                                                            l2) 
                                                         (dk_logic.forall 
                                                            _p_Elt_T 
                                                            (y:
                                                             (cc.eT _p_Elt_T) =>
                                                             dk_logic.not 
                                                               (dk_logic.imp 
                                                                  (dk_logic.ebP 
                                                                    (basics._equal_ 
                                                                    _p_Elt_T 
                                                                    e y)) 
                                                                  (dk_logic.eqv 
                                                                    (dk_logic.ebP 
                                                                    (_p_L_mem 
                                                                    l y)) 
                                                                    (dk_logic.ebP 
                                                                    (_p_L_mem 
                                                                    l2 y))))))))))))))))) ->
  abst_rec_call_decreases:(dk_logic.eP 
                             (dk_logic.forall _p_It_T 
                                (it:(cc.eT _p_It_T) =>
                                 dk_logic.forall 
                                   (dk_tuple.prod _p_Elt_T _p_It_T) 
                                   (res:
                                    (cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                                    dk_logic.imp 
                                      (dk_logic.ebP (_p_It_has_next it)) 
                                      (dk_logic.imp 
                                         (dk_logic.ebP 
                                            (basics._equal_ 
                                               (dk_tuple.prod _p_Elt_T 
                                                  _p_It_T) 
                                               (_p_It_step_it it) res)) 
                                         (dk_logic.ebP 
                                            (IterTools__it_order _p_It_T 
                                               _p_It_measure_it 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  res) it))))))) ->
  abst_wf_it_order:(dk_logic.eP 
                      (well_wrapper _p_It_T 
                         (IterTools__it_order _p_It_T _p_It_measure_it))) ->
  abst_inductive_measure:(dk_logic.eP 
                            (dk_logic.eqv 
                               (dk_logic.forall _p_It_T 
                                  (it:(cc.eT _p_It_T) =>
                                   dk_logic.imp 
                                     (dk_logic.forall _p_It_T 
                                        (it2:(cc.eT _p_It_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (IterTools__it_order _p_It_T 
                                                 _p_It_measure_it it2 it)) 
                                           (IterTools__copy_inv_prop 
                                              _p_Elt_T _p_Col_T _p_It_T 
                                              _p_L_mem _p_Col_contains 
                                              _p_It_model 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order) it2))) 
                                     (IterTools__copy_inv_prop _p_Elt_T 
                                        _p_Col_T _p_It_T _p_L_mem 
                                        _p_Col_contains _p_It_model 
                                        (IterTools__copy_aux _p_Col_T 
                                           _p_Elt_T _p_It_T _p_Col_add 
                                           _p_It_has_next _p_It_step_it 
                                           (IterTools__it_order _p_It_T 
                                              _p_It_measure_it) 
                                           abst_rec_call_decreases 
                                           abst_wf_it_order) it))) 
                               (dk_logic.forall _p_It_T 
                                  (it:(cc.eT _p_It_T) =>
                                   IterTools__copy_inv_prop _p_Elt_T 
                                     _p_Col_T _p_It_T _p_L_mem 
                                     _p_Col_contains _p_It_model 
                                     (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                        _p_It_T _p_Col_add _p_It_has_next 
                                        _p_It_step_it 
                                        (IterTools__it_order _p_It_T 
                                           _p_It_measure_it) 
                                        abst_rec_call_decreases 
                                        abst_wf_it_order) it)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_It_T 
       (it:(cc.eT _p_It_T) =>
        IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
          _p_Col_contains _p_It_model 
          (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
             _p_It_has_next _p_It_step_it 
             (IterTools__it_order _p_It_T _p_It_measure_it) 
             abst_rec_call_decreases abst_wf_it_order) it))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem_empty_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_Elt_T 
        (x:(cc.eT _p_Elt_T) =>
         dk_logic.ebP 
           (basics._tilda__tilda_ (_p_L_mem (builtins.nil _p_Elt_T) x))))) =>
  _p_Col_add:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
  _p_Col_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT basics.bool__t) =>
  _p_Col_add_contains:
  (dk_logic.eP 
     (dk_logic.forall _p_Col_T 
        (c:(cc.eT _p_Col_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (x:(cc.eT _p_Elt_T) =>
               dk_logic.eqv 
                 (dk_logic.ebP (_p_Col_contains x (_p_Col_add e c))) 
                 (dk_logic.ebP 
                    (basics._bar__bar_ (basics._equal_ _p_Elt_T x e) 
                       (_p_Col_contains x c)))))))) =>
  _p_Col_add_contains1:
  (dk_logic.eP 
     (dk_logic.forall _p_Col_T 
        (c:(cc.eT _p_Col_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.ebP (_p_Col_contains e (_p_Col_add e c)))))) =>
  _p_Col_add_contains2:
  (dk_logic.eP 
     (dk_logic.forall _p_Col_T 
        (c:(cc.eT _p_Col_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (x:(cc.eT _p_Elt_T) =>
               dk_logic.imp 
                 (dk_logic.not (dk_logic.ebP (basics._equal_ _p_Elt_T e x))) 
                 (dk_logic.eqv 
                    (dk_logic.ebP (_p_Col_contains x (_p_Col_add e c))) 
                    (dk_logic.ebP (_p_Col_contains x c)))))))) =>
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) =>
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) =>
  _p_It_model:
  ((cc.eT _p_It_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  _p_It_step_it:
  ((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
  _p_It_mea_positive:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (a:(cc.eT _p_It_T) =>
         dk_logic.ebP 
           (basics._lt__equal_ (dk_int.from_nat builtins.0) 
              (_p_It_measure_it a))))) =>
  _p_It_model_includes:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (it:(cc.eT _p_It_T) =>
         dk_logic.forall _p_Col_T 
           (c:(cc.eT _p_Col_T) =>
            dk_logic.forall (basics.list__t _p_Elt_T) 
              (l:(cc.eT (basics.list__t _p_Elt_T)) =>
               dk_logic.imp (_p_It_model it c l) 
                 (dk_logic.forall _p_Elt_T 
                    (e:(cc.eT _p_Elt_T) =>
                     dk_logic.imp (dk_logic.ebP (_p_L_mem l e)) 
                       (dk_logic.ebP (_p_Col_contains e c))))))))) =>
  _p_It_mea_decreases:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (i1:(cc.eT _p_It_T) =>
         dk_logic.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
           (res:(cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
            dk_logic.imp (dk_logic.ebP (_p_It_has_next i1)) 
              (dk_logic.imp 
                 (dk_logic.ebP 
                    (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                       (_p_It_step_it i1) res)) 
                 (dk_logic.ebP 
                    (basics._lt_ 
                       (_p_It_measure_it (basics.snd _p_Elt_T _p_It_T res)) 
                       (_p_It_measure_it i1)))))))) =>
  _p_It_model_step:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (it:(cc.eT _p_It_T) =>
         dk_logic.forall _p_It_T 
           (it2:(cc.eT _p_It_T) =>
            dk_logic.forall _p_Elt_T 
              (e:(cc.eT _p_Elt_T) =>
               dk_logic.forall (basics.list__t _p_Elt_T) 
                 (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                  dk_logic.forall _p_Col_T 
                    (c:(cc.eT _p_Col_T) =>
                     dk_logic.imp (_p_It_model it c l) 
                       (dk_logic.imp (dk_logic.ebP (_p_It_has_next it)) 
                          (dk_logic.imp 
                             (dk_logic.ebP 
                                (basics._equal_ 
                                   (dk_tuple.prod _p_Elt_T _p_It_T) 
                                   (_p_It_step_it it) 
                                   (dk_tuple.pair _p_Elt_T _p_It_T e it2))) 
                             (dk_logic.ebP (_p_L_mem l e))))))))))) =>
  _p_It_model_step_exists:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (it:(cc.eT _p_It_T) =>
         dk_logic.forall _p_It_T 
           (it2:(cc.eT _p_It_T) =>
            dk_logic.forall _p_Col_T 
              (c:(cc.eT _p_Col_T) =>
               dk_logic.forall _p_Elt_T 
                 (e:(cc.eT _p_Elt_T) =>
                  dk_logic.forall (basics.list__t _p_Elt_T) 
                    (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                     dk_logic.imp (dk_logic.ebP (_p_It_has_next it)) 
                       (dk_logic.imp (_p_It_model it c l) 
                          (dk_logic.imp 
                             (dk_logic.ebP 
                                (basics._equal_ 
                                   (dk_tuple.prod _p_Elt_T _p_It_T) 
                                   (_p_It_step_it it) 
                                   (dk_tuple.pair _p_Elt_T _p_It_T e it2))) 
                             (dk_logic.exists (basics.list__t _p_Elt_T) 
                                (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                 _p_It_model it2 c l2))))))))))) =>
  _p_It_model_step_new2:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (it:(cc.eT _p_It_T) =>
         dk_logic.forall _p_It_T 
           (it2:(cc.eT _p_It_T) =>
            dk_logic.forall _p_Elt_T 
              (e:(cc.eT _p_Elt_T) =>
               dk_logic.forall (basics.list__t _p_Elt_T) 
                 (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                  dk_logic.forall _p_Col_T 
                    (c:(cc.eT _p_Col_T) =>
                     dk_logic.imp (_p_It_model it c l) 
                       (dk_logic.imp (dk_logic.ebP (_p_It_has_next it)) 
                          (dk_logic.imp 
                             (dk_logic.ebP 
                                (basics._equal_ 
                                   (dk_tuple.prod _p_Elt_T _p_It_T) 
                                   (_p_It_step_it it) 
                                   (dk_tuple.pair _p_Elt_T _p_It_T e it2))) 
                             (dk_logic.forall (basics.list__t _p_Elt_T) 
                                (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                 dk_logic.imp (_p_It_model it2 c l2) 
                                   (dk_logic.forall _p_Elt_T 
                                      (y:(cc.eT _p_Elt_T) =>
                                       dk_logic.not 
                                         (dk_logic.imp 
                                            (dk_logic.ebP 
                                               (basics._equal_ _p_Elt_T e y)) 
                                            (dk_logic.eqv 
                                               (dk_logic.ebP (_p_L_mem l y)) 
                                               (dk_logic.ebP (_p_L_mem l2 y))))))))))))))))) =>
  abst_rec_call_decreases:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (it:(cc.eT _p_It_T) =>
         dk_logic.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
           (res:(cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
            dk_logic.imp (dk_logic.ebP (_p_It_has_next it)) 
              (dk_logic.imp 
                 (dk_logic.ebP 
                    (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                       (_p_It_step_it it) res)) 
                 (dk_logic.ebP 
                    (IterTools__it_order _p_It_T _p_It_measure_it 
                       (basics.snd _p_Elt_T _p_It_T res) it))))))) =>
  abst_wf_it_order:
  (dk_logic.eP 
     (well_wrapper _p_It_T (IterTools__it_order _p_It_T _p_It_measure_it))) =>
  abst_inductive_measure:
  (dk_logic.eP 
     (dk_logic.eqv 
        (dk_logic.forall _p_It_T 
           (it:(cc.eT _p_It_T) =>
            dk_logic.imp 
              (dk_logic.forall _p_It_T 
                 (it2:(cc.eT _p_It_T) =>
                  dk_logic.imp 
                    (dk_logic.ebP 
                       (IterTools__it_order _p_It_T _p_It_measure_it it2 it)) 
                    (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                       _p_L_mem _p_Col_contains _p_It_model 
                       (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                          _p_Col_add _p_It_has_next _p_It_step_it 
                          (IterTools__it_order _p_It_T _p_It_measure_it) 
                          abst_rec_call_decreases abst_wf_it_order) it2))) 
              (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
                 _p_Col_contains _p_It_model 
                 (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                    _p_It_has_next _p_It_step_it 
                    (IterTools__it_order _p_It_T _p_It_measure_it) 
                    abst_rec_call_decreases abst_wf_it_order) it))) 
        (dk_logic.forall _p_It_T 
           (it:(cc.eT _p_It_T) =>
            IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
              _p_Col_contains _p_It_model 
              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                 _p_It_has_next _p_It_step_it 
                 (IterTools__it_order _p_It_T _p_It_measure_it) 
                 abst_rec_call_decreases abst_wf_it_order) it)))) =>
  (__S_1_LEMMA:
   (it:(cc.eT _p_It_T) ->
    R:(dk_logic.eP 
         (dk_logic.forall _p_It_T 
            (it2:(cc.eT _p_It_T) =>
             dk_logic.imp 
               (dk_logic.ebP 
                  (IterTools__it_order _p_It_T _p_It_measure_it it2 it)) 
               (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
                  _p_Col_contains _p_It_model 
                  (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                     _p_It_has_next _p_It_step_it 
                     (IterTools__it_order _p_It_T _p_It_measure_it) 
                     abst_rec_call_decreases abst_wf_it_order) it2)))) ->
    dk_logic.eP 
      (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
         _p_Col_contains _p_It_model 
         (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
            _p_It_has_next _p_It_step_it 
            (IterTools__it_order _p_It_T _p_It_measure_it) 
            abst_rec_call_decreases abst_wf_it_order) it)) =>
   zen.nnpp 
     (zen.forall _p_It_T 
        (v_Vzb:(zen.term _p_It_T) =>
         zen.triangle 
           (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
              _p_Col_contains _p_It_model 
              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                 _p_It_has_next _p_It_step_it 
                 (IterTools__it_order _p_It_T _p_It_measure_it) 
                 abst_rec_call_decreases abst_wf_it_order) v_Vzb))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall _p_It_T 
               (v_Vzb:(zen.term _p_It_T) =>
                zen.triangle 
                  (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                     _p_L_mem _p_Col_contains _p_It_model 
                     (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                        _p_Col_add _p_It_has_next _p_It_step_it 
                        (IterTools__it_order _p_It_T _p_It_measure_it) 
                        abst_rec_call_decreases abst_wf_it_order) v_Vzb))))) =>
      zen.Requiv 
        (zen.forall _p_It_T 
           (v_Vzb:(zen.term _p_It_T) =>
            zen.imp 
              (zen.forall _p_It_T 
                 (v_Vbc:(zen.term _p_It_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (IterTools__it_order _p_It_T _p_It_measure_it 
                             v_Vbc v_Vzb))) 
                    (zen.triangle 
                       (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                          _p_L_mem _p_Col_contains _p_It_model 
                          (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                             _p_Col_add _p_It_has_next _p_It_step_it 
                             (IterTools__it_order _p_It_T _p_It_measure_it) 
                             abst_rec_call_decreases abst_wf_it_order) v_Vbc)))) 
              (zen.triangle 
                 (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                    _p_L_mem _p_Col_contains _p_It_model 
                    (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                       _p_Col_add _p_It_has_next _p_It_step_it 
                       (IterTools__it_order _p_It_T _p_It_measure_it) 
                       abst_rec_call_decreases abst_wf_it_order) v_Vzb)))) 
        (zen.forall _p_It_T 
           (v_Vzb:(zen.term _p_It_T) =>
            zen.triangle 
              (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
                 _p_Col_contains _p_It_model 
                 (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                    _p_It_has_next _p_It_step_it 
                    (IterTools__it_order _p_It_T _p_It_measure_it) 
                    abst_rec_call_decreases abst_wf_it_order) v_Vzb))) 
        (v_Vcc:
         (zen.proof 
            (zen.not 
               (zen.forall _p_It_T 
                  (v_Vzb:(zen.term _p_It_T) =>
                   zen.imp 
                     (zen.forall _p_It_T 
                        (v_Vbc:(zen.term _p_It_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it v_Vbc v_Vzb))) 
                           (zen.triangle 
                              (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                                 _p_It_T _p_L_mem _p_Col_contains 
                                 _p_It_model 
                                 (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                    _p_It_T _p_Col_add _p_It_has_next 
                                    _p_It_step_it 
                                    (IterTools__it_order _p_It_T 
                                       _p_It_measure_it) 
                                    abst_rec_call_decreases abst_wf_it_order) 
                                 v_Vbc)))) 
                     (zen.triangle 
                        (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                           _p_L_mem _p_Col_contains _p_It_model 
                           (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                              _p_Col_add _p_It_has_next _p_It_step_it 
                              (IterTools__it_order _p_It_T _p_It_measure_it) 
                              abst_rec_call_decreases abst_wf_it_order) v_Vzb)))))) =>
         v_Vac0:
         (zen.proof 
            (zen.not 
               (zen.forall _p_It_T 
                  (v_Vzb:(zen.term _p_It_T) =>
                   zen.triangle 
                     (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                        _p_L_mem _p_Col_contains _p_It_model 
                        (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                           _p_Col_add _p_It_has_next _p_It_step_it 
                           (IterTools__it_order _p_It_T _p_It_measure_it) 
                           abst_rec_call_decreases abst_wf_it_order) v_Vzb))))) =>
         zen.Raxiom 
           (zen.forall _p_It_T 
              (v_Vzb:(zen.term _p_It_T) =>
               zen.imp 
                 (zen.forall _p_It_T 
                    (v_Vbc:(zen.term _p_It_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (IterTools__it_order _p_It_T _p_It_measure_it 
                                v_Vbc v_Vzb))) 
                       (zen.triangle 
                          (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                             _p_It_T _p_L_mem _p_Col_contains _p_It_model 
                             (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                _p_Col_add _p_It_has_next _p_It_step_it 
                                (IterTools__it_order _p_It_T _p_It_measure_it) 
                                abst_rec_call_decreases abst_wf_it_order) 
                             v_Vbc)))) 
                 (zen.triangle 
                    (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                       _p_L_mem _p_Col_contains _p_It_model 
                       (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                          _p_Col_add _p_It_has_next _p_It_step_it 
                          (IterTools__it_order _p_It_T _p_It_measure_it) 
                          abst_rec_call_decreases abst_wf_it_order) v_Vzb)))) 
           __S_1_LEMMA v_Vcc) 
        (__S_1_LEMMA0:
         (zen.proof 
            (zen.forall _p_It_T 
               (v_Vzb:(zen.term _p_It_T) =>
                zen.imp 
                  (zen.forall _p_It_T 
                     (v_Vbc:(zen.term _p_It_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (IterTools__it_order _p_It_T _p_It_measure_it 
                                 v_Vbc v_Vzb))) 
                        (zen.triangle 
                           (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                              _p_It_T _p_L_mem _p_Col_contains _p_It_model 
                              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                 _p_Col_add _p_It_has_next _p_It_step_it 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it) 
                                 abst_rec_call_decreases abst_wf_it_order) 
                              v_Vbc)))) 
                  (zen.triangle 
                     (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                        _p_L_mem _p_Col_contains _p_It_model 
                        (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                           _p_Col_add _p_It_has_next _p_It_step_it 
                           (IterTools__it_order _p_It_T _p_It_measure_it) 
                           abst_rec_call_decreases abst_wf_it_order) v_Vzb))))) =>
         v_Vdc:
         (zen.proof 
            (zen.forall _p_It_T 
               (v_Vzb:(zen.term _p_It_T) =>
                zen.triangle 
                  (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                     _p_L_mem _p_Col_contains _p_It_model 
                     (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                        _p_Col_add _p_It_has_next _p_It_step_it 
                        (IterTools__it_order _p_It_T _p_It_measure_it) 
                        abst_rec_call_decreases abst_wf_it_order) v_Vzb)))) =>
         zen.Raxiom 
           (zen.forall _p_It_T 
              (v_Vzb:(zen.term _p_It_T) =>
               zen.triangle 
                 (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                    _p_L_mem _p_Col_contains _p_It_model 
                    (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                       _p_Col_add _p_It_has_next _p_It_step_it 
                       (IterTools__it_order _p_It_T _p_It_measure_it) 
                       abst_rec_call_decreases abst_wf_it_order) v_Vzb))) 
           v_Vdc v_Vac) abst_inductive_measure)) 
    (it:(cc.eT _p_It_T) =>
     R:
     (dk_logic.eP 
        (dk_logic.forall _p_It_T 
           (it2:(cc.eT _p_It_T) =>
            dk_logic.imp 
              (dk_logic.ebP 
                 (IterTools__it_order _p_It_T _p_It_measure_it it2 it)) 
              (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
                 _p_Col_contains _p_It_model 
                 (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                    _p_It_has_next _p_It_step_it 
                    (IterTools__it_order _p_It_T _p_It_measure_it) 
                    abst_rec_call_decreases abst_wf_it_order) it2)))) =>
     (__S_1_1_LEMMA:
      (a:(cc.eT _p_Col_T) ->
       c:(cc.eT _p_Col_T) ->
       l:(cc.eT (basics.list__t _p_Elt_T)) ->
       M:(dk_logic.eP (_p_It_model it c l)) ->
       A:(dk_logic.eP 
            (dk_logic.forall _p_Elt_T 
               (x:(cc.eT _p_Elt_T) =>
                dk_logic.imp (dk_logic.ebP (_p_Col_contains x a)) 
                  (dk_logic.ebP (_p_Col_contains x c))))) ->
       x:(cc.eT _p_Elt_T) ->
       dk_logic.eP 
         (dk_logic.eqv 
            (dk_logic.ebP 
               (_p_Col_contains x 
                  (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                     _p_It_has_next _p_It_step_it 
                     (IterTools__it_order _p_It_T _p_It_measure_it) 
                     abst_rec_call_decreases abst_wf_it_order it a))) 
            (dk_logic.ebP 
               (basics._bar__bar_ (_p_L_mem l x) (_p_Col_contains x a))))) =>
      zen.nnpp 
        (zen.triangle 
           (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
              _p_Col_contains _p_It_model 
              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T _p_Col_add 
                 _p_It_has_next _p_It_step_it 
                 (IterTools__it_order _p_It_T _p_It_measure_it) 
                 abst_rec_call_decreases abst_wf_it_order) it)) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.forall _p_Col_T 
                  (v_Vac:(zen.term _p_Col_T) =>
                   zen.forall _p_Col_T 
                     (v_Vbc:(zen.term _p_Col_T) =>
                      zen.forall (basics.list__t _p_Elt_T) 
                        (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                         zen.imp (zen.triangle (_p_It_model it v_Vbc v_Vcc)) 
                           (zen.imp 
                              (zen.forall _p_Elt_T 
                                 (v_Vdc:(zen.term _p_Elt_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains v_Vdc v_Vac))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains v_Vdc v_Vbc))))) 
                              (zen.forall _p_Elt_T 
                                 (v_Vdc:(zen.term _p_Elt_T) =>
                                  zen.eqv 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains v_Vdc 
                                             (IterTools__copy_aux _p_Col_T 
                                                _p_Elt_T _p_It_T _p_Col_add 
                                                _p_It_has_next _p_It_step_it 
                                                (IterTools__it_order _p_It_T 
                                                   _p_It_measure_it) 
                                                abst_rec_call_decreases 
                                                abst_wf_it_order it v_Vac)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._bar__bar_ 
                                             (_p_L_mem v_Vcc v_Vdc) 
                                             (_p_Col_contains v_Vdc v_Vac))))))))))))) =>
         zen.Raxiom 
           (zen.forall _p_Col_T 
              (v_Vac:(zen.term _p_Col_T) =>
               zen.forall _p_Col_T 
                 (v_Vbc:(zen.term _p_Col_T) =>
                  zen.forall (basics.list__t _p_Elt_T) 
                    (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.imp (zen.triangle (_p_It_model it v_Vbc v_Vcc)) 
                       (zen.imp 
                          (zen.forall _p_Elt_T 
                             (v_Vdc:(zen.term _p_Elt_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_Col_contains v_Vdc v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_Col_contains v_Vdc v_Vbc))))) 
                          (zen.forall _p_Elt_T 
                             (v_Vdc:(zen.term _p_Elt_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_Col_contains v_Vdc 
                                         (IterTools__copy_aux _p_Col_T 
                                            _p_Elt_T _p_It_T _p_Col_add 
                                            _p_It_has_next _p_It_step_it 
                                            (IterTools__it_order _p_It_T 
                                               _p_It_measure_it) 
                                            abst_rec_call_decreases 
                                            abst_wf_it_order it v_Vac)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._bar__bar_ 
                                         (_p_L_mem v_Vcc v_Vdc) 
                                         (_p_Col_contains v_Vdc v_Vac))))))))))) 
           __S_1_1_LEMMA v_Vzb)) 
       (a:(cc.eT _p_Col_T) =>
        c:(cc.eT _p_Col_T) =>
        l:(cc.eT (basics.list__t _p_Elt_T)) =>
        M:(dk_logic.eP (_p_It_model it c l)) =>
        A:
        (dk_logic.eP 
           (dk_logic.forall _p_Elt_T 
              (x:(cc.eT _p_Elt_T) =>
               dk_logic.imp (dk_logic.ebP (_p_Col_contains x a)) 
                 (dk_logic.ebP (_p_Col_contains x c))))) =>
        x:(cc.eT _p_Elt_T) =>
        (__S_1_1_1_LEMMA:
         (N:(dk_logic.eP (dk_logic.ebP (_p_It_has_next it))) ->
          dk_logic.eP 
            (dk_logic.eqv 
               (dk_logic.ebP 
                  (_p_Col_contains x 
                     (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                        _p_Col_add _p_It_has_next _p_It_step_it 
                        (IterTools__it_order _p_It_T _p_It_measure_it) 
                        abst_rec_call_decreases abst_wf_it_order it a))) 
               (dk_logic.ebP 
                  (basics._bar__bar_ (_p_L_mem l x) (_p_Col_contains x a))))) =>
         (__S_1_1_2_LEMMA:
          (N:(dk_logic.eP 
                (dk_logic.ebP (basics._tilda__tilda_ (_p_It_has_next it)))) ->
           dk_logic.eP 
             (dk_logic.eqv 
                (dk_logic.ebP 
                   (_p_Col_contains x 
                      (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                         _p_Col_add _p_It_has_next _p_It_step_it 
                         (IterTools__it_order _p_It_T _p_It_measure_it) 
                         abst_rec_call_decreases abst_wf_it_order it a))) 
                (dk_logic.ebP 
                   (basics._bar__bar_ (_p_L_mem l x) (_p_Col_contains x a))))) =>
          zen.nnpp 
            (zen.eqv 
               (zen.triangle 
                  (focal.is_true 
                     (_p_Col_contains x 
                        (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                           _p_Col_add _p_It_has_next _p_It_step_it 
                           (IterTools__it_order _p_It_T _p_It_measure_it) 
                           abst_rec_call_decreases abst_wf_it_order it a)))) 
               (zen.triangle 
                  (focal.is_true 
                     (basics._bar__bar_ (_p_L_mem l x) (_p_Col_contains x a))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_Col_contains x 
                               (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                  _p_It_T _p_Col_add _p_It_has_next 
                                  _p_It_step_it 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it) 
                                  abst_rec_call_decreases abst_wf_it_order 
                                  it a)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ (_p_L_mem l x) 
                               (_p_Col_contains x a))))))) =>
             zen.Rimply (zen.triangle (focal.is_true (_p_It_has_next it))) 
               (zen.eqv 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_Col_contains x 
                           (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                              _p_Col_add _p_It_has_next _p_It_step_it 
                              (IterTools__it_order _p_It_T _p_It_measure_it) 
                              abst_rec_call_decreases abst_wf_it_order it a)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._bar__bar_ (_p_L_mem l x) 
                           (_p_Col_contains x a))))) 
               (v_Vac:
                (zen.proof 
                   (zen.not 
                      (zen.triangle (focal.is_true (_p_It_has_next it))))) =>
                zen.Rimply 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ (_p_It_has_next it)))) 
                  (zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_Col_contains x 
                              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                 _p_Col_add _p_It_has_next _p_It_step_it 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it) 
                                 abst_rec_call_decreases abst_wf_it_order it 
                                 a)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._bar__bar_ (_p_L_mem l x) 
                              (_p_Col_contains x a))))) 
                  (v_Vbc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ (_p_It_has_next it)))))) =>
                   focal.zenon_focal_notnot (_p_It_has_next it) 
                     (v_Vcc:
                      (zen.proof 
                         (zen.triangle (focal.is_true (_p_It_has_next it)))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (_p_It_has_next it))) 
                        v_Vcc v_Vac) v_Vbc) 
                  (v_Vdc:
                   (zen.proof 
                      (zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_Col_contains x 
                                  (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                     _p_It_T _p_Col_add _p_It_has_next 
                                     _p_It_step_it 
                                     (IterTools__it_order _p_It_T 
                                        _p_It_measure_it) 
                                     abst_rec_call_decreases 
                                     abst_wf_it_order it a)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._bar__bar_ (_p_L_mem l x) 
                                  (_p_Col_contains x a)))))) =>
                   zen.Raxiom 
                     (zen.eqv 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_Col_contains x 
                                 (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                    _p_It_T _p_Col_add _p_It_has_next 
                                    _p_It_step_it 
                                    (IterTools__it_order _p_It_T 
                                       _p_It_measure_it) 
                                    abst_rec_call_decreases abst_wf_it_order 
                                    it a)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._bar__bar_ (_p_L_mem l x) 
                                 (_p_Col_contains x a))))) v_Vdc v_Vzb) 
                  __S_1_1_2_LEMMA) 
               (v_Vdc:
                (zen.proof 
                   (zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_Col_contains x 
                               (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                  _p_It_T _p_Col_add _p_It_has_next 
                                  _p_It_step_it 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it) 
                                  abst_rec_call_decreases abst_wf_it_order 
                                  it a)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ (_p_L_mem l x) 
                               (_p_Col_contains x a)))))) =>
                zen.Raxiom 
                  (zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_Col_contains x 
                              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                 _p_Col_add _p_It_has_next _p_It_step_it 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it) 
                                 abst_rec_call_decreases abst_wf_it_order it 
                                 a)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._bar__bar_ (_p_L_mem l x) 
                              (_p_Col_contains x a))))) v_Vdc v_Vzb) 
               __S_1_1_1_LEMMA)) 
           (N:
            (dk_logic.eP 
               (dk_logic.ebP (basics._tilda__tilda_ (_p_It_has_next it)))) =>
            (__S_1_1_2_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (basics._equal_ (basics.list__t _p_Elt_T) l 
                      (builtins.nil _p_Elt_T)))) =>
             (__S_1_1_2_2_LEMMA:
              (dk_logic.eP 
                 (dk_logic.ebP (basics._tilda__tilda_ (_p_L_mem l x)))) =>
              (__S_1_1_2_3_LEMMA:
               (dk_logic.eP 
                  (dk_logic.ebP 
                     (basics._equal_ _p_Col_T 
                        (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                           _p_Col_add _p_It_has_next _p_It_step_it 
                           (IterTools__it_order _p_It_T _p_It_measure_it) 
                           abst_rec_call_decreases abst_wf_it_order it a) a))) =>
               zen.nnpp 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_Col_contains x 
                             (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                _p_Col_add _p_It_has_next _p_It_step_it 
                                (IterTools__it_order _p_It_T _p_It_measure_it) 
                                abst_rec_call_decreases abst_wf_it_order it a)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (_p_L_mem l x) 
                             (_p_Col_contains x a))))) 
                 (v_Vfc:
                  (zen.proof 
                     (zen.not 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order it a)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._bar__bar_ (_p_L_mem l x) 
                                    (_p_Col_contains x a))))))) =>
                  zen.Rnotequiv 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_Col_contains x 
                             (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                _p_Col_add _p_It_has_next _p_It_step_it 
                                (IterTools__it_order _p_It_T _p_It_measure_it) 
                                abst_rec_call_decreases abst_wf_it_order it a)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._bar__bar_ (_p_L_mem l x) 
                             (_p_Col_contains x a)))) 
                    (v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order it a)))))) =>
                     v_Vhc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._bar__bar_ (_p_L_mem l x) 
                                 (_p_Col_contains x a))))) =>
                     focal.zenon_focal_or (_p_L_mem l x) 
                       (_p_Col_contains x a) 
                       (v_Vic:
                        (zen.proof 
                           (zen.or 
                              (zen.triangle (focal.is_true (_p_L_mem l x))) 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains x a))))) =>
                        zen.Ror 
                          (zen.triangle (focal.is_true (_p_L_mem l x))) 
                          (zen.triangle (focal.is_true (_p_Col_contains x a))) 
                          (v_Vjc:
                           (zen.proof 
                              (zen.triangle (focal.is_true (_p_L_mem l x)))) =>
                           focal.zenon_focal_not (_p_L_mem l x) 
                             (v_Vkc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (_p_L_mem l x))))) =>
                              zen.Raxiom 
                                (zen.triangle (focal.is_true (_p_L_mem l x))) 
                                v_Vjc v_Vkc) __S_1_1_2_2_LEMMA) 
                          (v_Vlc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains x a)))) =>
                           focal.zenon_syntactic_equal _p_Col_T 
                             (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                _p_Col_add _p_It_has_next _p_It_step_it 
                                (IterTools__it_order _p_It_T _p_It_measure_it) 
                                abst_rec_call_decreases abst_wf_it_order it a) 
                             a 
                             (v_Vmc:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal _p_Col_T 
                                       (IterTools__copy_aux _p_Col_T 
                                          _p_Elt_T _p_It_T _p_Col_add 
                                          _p_It_has_next _p_It_step_it 
                                          (IterTools__it_order _p_It_T 
                                             _p_It_measure_it) 
                                          abst_rec_call_decreases 
                                          abst_wf_it_order it a) a))) =>
                              zen.Rsubst basics.bool__t 
                                (v_Vnc:(zen.term basics.bool__t) =>
                                 zen.triangle (focal.is_true v_Vnc)) 
                                (_p_Col_contains x a) 
                                (_p_Col_contains x 
                                   (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                      _p_It_T _p_Col_add _p_It_has_next 
                                      _p_It_step_it 
                                      (IterTools__it_order _p_It_T 
                                         _p_It_measure_it) 
                                      abst_rec_call_decreases 
                                      abst_wf_it_order it a)) 
                                (v_Voc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_Col_contains x a) 
                                             (_p_Col_contains x 
                                                (IterTools__copy_aux 
                                                   _p_Col_T _p_Elt_T _p_It_T 
                                                   _p_Col_add _p_It_has_next 
                                                   _p_It_step_it 
                                                   (IterTools__it_order 
                                                      _p_It_T 
                                                      _p_It_measure_it) 
                                                   abst_rec_call_decreases 
                                                   abst_wf_it_order it a)))))) =>
                                 zen.Rsubst _p_Elt_T 
                                   (v_Vpc:(zen.term _p_Elt_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_Col_contains v_Vpc a) 
                                            (_p_Col_contains x 
                                               (IterTools__copy_aux _p_Col_T 
                                                  _p_Elt_T _p_It_T 
                                                  _p_Col_add _p_It_has_next 
                                                  _p_It_step_it 
                                                  (IterTools__it_order 
                                                     _p_It_T _p_It_measure_it) 
                                                  abst_rec_call_decreases 
                                                  abst_wf_it_order it a))))) 
                                   x x 
                                   (v_Vqc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_Elt_T x x)))) =>
                                    zen.Rnoteq _p_Elt_T x v_Vqc) 
                                   (v_Voc0:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_Col_contains x a) 
                                                (_p_Col_contains x 
                                                   (IterTools__copy_aux 
                                                      _p_Col_T _p_Elt_T 
                                                      _p_It_T _p_Col_add 
                                                      _p_It_has_next 
                                                      _p_It_step_it 
                                                      (IterTools__it_order 
                                                         _p_It_T 
                                                         _p_It_measure_it) 
                                                      abst_rec_call_decreases 
                                                      abst_wf_it_order it a)))))) =>
                                    zen.Rsubst _p_Col_T 
                                      (v_Vrc:(zen.term _p_Col_T) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_Col_contains x v_Vrc) 
                                               (_p_Col_contains x 
                                                  (IterTools__copy_aux 
                                                     _p_Col_T _p_Elt_T 
                                                     _p_It_T _p_Col_add 
                                                     _p_It_has_next 
                                                     _p_It_step_it 
                                                     (IterTools__it_order 
                                                        _p_It_T 
                                                        _p_It_measure_it) 
                                                     abst_rec_call_decreases 
                                                     abst_wf_it_order it a))))) 
                                      a 
                                      (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                         _p_It_T _p_Col_add _p_It_has_next 
                                         _p_It_step_it 
                                         (IterTools__it_order _p_It_T 
                                            _p_It_measure_it) 
                                         abst_rec_call_decreases 
                                         abst_wf_it_order it a) 
                                      (v_Vsc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_Col_T a 
                                                   (IterTools__copy_aux 
                                                      _p_Col_T _p_Elt_T 
                                                      _p_It_T _p_Col_add 
                                                      _p_It_has_next 
                                                      _p_It_step_it 
                                                      (IterTools__it_order 
                                                         _p_It_T 
                                                         _p_It_measure_it) 
                                                      abst_rec_call_decreases 
                                                      abst_wf_it_order it a))))) =>
                                       zen.Reqsym _p_Col_T 
                                         (IterTools__copy_aux _p_Col_T 
                                            _p_Elt_T _p_It_T _p_Col_add 
                                            _p_It_has_next _p_It_step_it 
                                            (IterTools__it_order _p_It_T 
                                               _p_It_measure_it) 
                                            abst_rec_call_decreases 
                                            abst_wf_it_order it a) a v_Vmc 
                                         v_Vsc) 
                                      (v_Vtc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_Col_contains x 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order it 
                                                         a)) 
                                                   (_p_Col_contains x 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order it 
                                                         a)))))) =>
                                       zen.Rnoteq basics.bool__t 
                                         (_p_Col_contains x 
                                            (IterTools__copy_aux _p_Col_T 
                                               _p_Elt_T _p_It_T _p_Col_add 
                                               _p_It_has_next _p_It_step_it 
                                               (IterTools__it_order _p_It_T 
                                                  _p_It_measure_it) 
                                               abst_rec_call_decreases 
                                               abst_wf_it_order it a)) v_Vtc) 
                                      v_Voc0) v_Voc) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains x 
                                             (IterTools__copy_aux _p_Col_T 
                                                _p_Elt_T _p_It_T _p_Col_add 
                                                _p_It_has_next _p_It_step_it 
                                                (IterTools__it_order _p_It_T 
                                                   _p_It_measure_it) 
                                                abst_rec_call_decreases 
                                                abst_wf_it_order it a))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains x 
                                            (IterTools__copy_aux _p_Col_T 
                                               _p_Elt_T _p_It_T _p_Col_add 
                                               _p_It_has_next _p_It_step_it 
                                               (IterTools__it_order _p_It_T 
                                                  _p_It_measure_it) 
                                               abst_rec_call_decreases 
                                               abst_wf_it_order it a)))) 
                                   v_Vuc v_Vgc) v_Vlc) __S_1_1_2_3_LEMMA) 
                          v_Vic) v_Vhc) 
                    (v_Vuc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_Col_contains x 
                                 (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                    _p_It_T _p_Col_add _p_It_has_next 
                                    _p_It_step_it 
                                    (IterTools__it_order _p_It_T 
                                       _p_It_measure_it) 
                                    abst_rec_call_decreases abst_wf_it_order 
                                    it a))))) =>
                     v_Vvc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._bar__bar_ (_p_L_mem l x) 
                                    (_p_Col_contains x a)))))) =>
                     focal.zenon_focal_notor (_p_L_mem l x) 
                       (_p_Col_contains x a) 
                       (v_Vwc:
                        (zen.proof 
                           (zen.not 
                              (zen.or 
                                 (zen.triangle (focal.is_true (_p_L_mem l x))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_Col_contains x a)))))) =>
                        zen.Rnotor 
                          (zen.triangle (focal.is_true (_p_L_mem l x))) 
                          (zen.triangle (focal.is_true (_p_Col_contains x a))) 
                          (v_Vkc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (focal.is_true (_p_L_mem l x))))) =>
                           v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (_p_Col_contains x a))))) =>
                           focal.zenon_syntactic_equal _p_Col_T 
                             (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                _p_Col_add _p_It_has_next _p_It_step_it 
                                (IterTools__it_order _p_It_T _p_It_measure_it) 
                                abst_rec_call_decreases abst_wf_it_order it a) 
                             a 
                             (v_Vmc:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal _p_Col_T 
                                       (IterTools__copy_aux _p_Col_T 
                                          _p_Elt_T _p_It_T _p_Col_add 
                                          _p_It_has_next _p_It_step_it 
                                          (IterTools__it_order _p_It_T 
                                             _p_It_measure_it) 
                                          abst_rec_call_decreases 
                                          abst_wf_it_order it a) a))) =>
                              zen.Rsubst basics.bool__t 
                                (v_Vnc:(zen.term basics.bool__t) =>
                                 zen.triangle (focal.is_true v_Vnc)) 
                                (_p_Col_contains x 
                                   (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                      _p_It_T _p_Col_add _p_It_has_next 
                                      _p_It_step_it 
                                      (IterTools__it_order _p_It_T 
                                         _p_It_measure_it) 
                                      abst_rec_call_decreases 
                                      abst_wf_it_order it a)) 
                                (_p_Col_contains x a) 
                                (v_Vyc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_Col_contains x 
                                                (IterTools__copy_aux 
                                                   _p_Col_T _p_Elt_T _p_It_T 
                                                   _p_Col_add _p_It_has_next 
                                                   _p_It_step_it 
                                                   (IterTools__it_order 
                                                      _p_It_T 
                                                      _p_It_measure_it) 
                                                   abst_rec_call_decreases 
                                                   abst_wf_it_order it a)) 
                                             (_p_Col_contains x a))))) =>
                                 zen.Rsubst _p_Elt_T 
                                   (v_Vzc:(zen.term _p_Elt_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_Col_contains v_Vzc 
                                               (IterTools__copy_aux _p_Col_T 
                                                  _p_Elt_T _p_It_T 
                                                  _p_Col_add _p_It_has_next 
                                                  _p_It_step_it 
                                                  (IterTools__it_order 
                                                     _p_It_T _p_It_measure_it) 
                                                  abst_rec_call_decreases 
                                                  abst_wf_it_order it a)) 
                                            (_p_Col_contains x a)))) x x 
                                   (v_Vqc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_Elt_T x x)))) =>
                                    zen.Rnoteq _p_Elt_T x v_Vqc) 
                                   (v_Vyc0:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_Col_contains x 
                                                   (IterTools__copy_aux 
                                                      _p_Col_T _p_Elt_T 
                                                      _p_It_T _p_Col_add 
                                                      _p_It_has_next 
                                                      _p_It_step_it 
                                                      (IterTools__it_order 
                                                         _p_It_T 
                                                         _p_It_measure_it) 
                                                      abst_rec_call_decreases 
                                                      abst_wf_it_order it a)) 
                                                (_p_Col_contains x a))))) =>
                                    zen.Rsubst _p_Col_T 
                                      (v_Vrc:(zen.term _p_Col_T) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_Col_contains x v_Vrc) 
                                               (_p_Col_contains x a)))) 
                                      (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                         _p_It_T _p_Col_add _p_It_has_next 
                                         _p_It_step_it 
                                         (IterTools__it_order _p_It_T 
                                            _p_It_measure_it) 
                                         abst_rec_call_decreases 
                                         abst_wf_it_order it a) a 
                                      (v_Vad:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_Col_T 
                                                   (IterTools__copy_aux 
                                                      _p_Col_T _p_Elt_T 
                                                      _p_It_T _p_Col_add 
                                                      _p_It_has_next 
                                                      _p_It_step_it 
                                                      (IterTools__it_order 
                                                         _p_It_T 
                                                         _p_It_measure_it) 
                                                      abst_rec_call_decreases 
                                                      abst_wf_it_order it a) 
                                                   a)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal _p_Col_T 
                                               (IterTools__copy_aux _p_Col_T 
                                                  _p_Elt_T _p_It_T 
                                                  _p_Col_add _p_It_has_next 
                                                  _p_It_step_it 
                                                  (IterTools__it_order 
                                                     _p_It_T _p_It_measure_it) 
                                                  abst_rec_call_decreases 
                                                  abst_wf_it_order it a) a)) 
                                         v_Vmc v_Vad) 
                                      (v_Vbd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_Col_contains x a) 
                                                   (_p_Col_contains x a))))) =>
                                       zen.Rnoteq basics.bool__t 
                                         (_p_Col_contains x a) v_Vbd) v_Vyc0) 
                                   v_Vyc) 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true (_p_Col_contains x a)))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (_p_Col_contains x a))) 
                                   v_Vlc v_Vxc) v_Vuc) __S_1_1_2_3_LEMMA) 
                          v_Vwc) v_Vvc) v_Vfc)) 
                (zen.nnpp 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._equal_ _p_Col_T 
                            (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                               _p_Col_add _p_It_has_next _p_It_step_it 
                               (IterTools__it_order _p_It_T _p_It_measure_it) 
                               abst_rec_call_decreases abst_wf_it_order it a) 
                            a))) 
                   (v_Vbc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal _p_Col_T 
                                   (dk_bool.ite _p_Col_T (_p_It_has_next it) 
                                      (dk_builtins.call_by_value _p_Col_T 
                                         _p_Col_T 
                                         (dk_builtins.call_by_value _p_It_T 
                                            (zen.arrow _p_Col_T _p_Col_T) 
                                            (IterTools__copy_aux _p_Col_T 
                                               _p_Elt_T _p_It_T _p_Col_add 
                                               _p_It_has_next _p_It_step_it 
                                               (IterTools__it_order _p_It_T 
                                                  _p_It_measure_it) 
                                               abst_rec_call_decreases 
                                               abst_wf_it_order) 
                                            (basics.snd _p_Elt_T _p_It_T 
                                               (_p_It_step_it it))) 
                                         (_p_Col_add 
                                            (basics.fst _p_Elt_T _p_It_T 
                                               (_p_It_step_it it)) a)) a) a))))) =>
                    focal.zenon_focal_not (_p_It_has_next it) 
                      (v_Vcc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_It_has_next it))))) =>
                       focal.zenon_not_syntactic_equal _p_Col_T 
                         (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                            _p_Col_add _p_It_has_next _p_It_step_it 
                            (IterTools__it_order _p_It_T _p_It_measure_it) 
                            abst_rec_call_decreases abst_wf_it_order it a) a 
                         (v_Vdc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_Col_T 
                                      (dk_bool.ite _p_Col_T 
                                         (_p_It_has_next it) 
                                         (dk_builtins.call_by_value _p_Col_T 
                                            _p_Col_T 
                                            (dk_builtins.call_by_value 
                                               _p_It_T 
                                               (zen.arrow _p_Col_T _p_Col_T) 
                                               (IterTools__copy_aux _p_Col_T 
                                                  _p_Elt_T _p_It_T 
                                                  _p_Col_add _p_It_has_next 
                                                  _p_It_step_it 
                                                  (IterTools__it_order 
                                                     _p_It_T _p_It_measure_it) 
                                                  abst_rec_call_decreases 
                                                  abst_wf_it_order) 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it))) 
                                            (_p_Col_add 
                                               (basics.fst _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it)) a)) a) 
                                      a)))) =>
                          focal.zenon_focal_ite_rel_nl _p_Col_T _p_Col_T 
                            (v_Vec:(zen.term _p_Col_T) =>
                             v_Vfc:(zen.term _p_Col_T) =>
                             zen.triangle (zen.equal _p_Col_T v_Vec v_Vfc)) 
                            (_p_It_has_next it) 
                            (dk_builtins.call_by_value _p_Col_T _p_Col_T 
                               (dk_builtins.call_by_value _p_It_T 
                                  (zen.arrow _p_Col_T _p_Col_T) 
                                  (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                     _p_It_T _p_Col_add _p_It_has_next 
                                     _p_It_step_it 
                                     (IterTools__it_order _p_It_T 
                                        _p_It_measure_it) 
                                     abst_rec_call_decreases abst_wf_it_order) 
                                  (basics.snd _p_Elt_T _p_It_T 
                                     (_p_It_step_it it))) 
                               (_p_Col_add 
                                  (basics.fst _p_Elt_T _p_It_T 
                                     (_p_It_step_it it)) a)) a a 
                            (v_Vgc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_It_has_next it)))) =>
                             v_Vhc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_Col_T 
                                         (dk_builtins.call_by_value _p_Col_T 
                                            _p_Col_T 
                                            (dk_builtins.call_by_value 
                                               _p_It_T 
                                               (zen.arrow _p_Col_T _p_Col_T) 
                                               (IterTools__copy_aux _p_Col_T 
                                                  _p_Elt_T _p_It_T 
                                                  _p_Col_add _p_It_has_next 
                                                  _p_It_step_it 
                                                  (IterTools__it_order 
                                                     _p_It_T _p_It_measure_it) 
                                                  abst_rec_call_decreases 
                                                  abst_wf_it_order) 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it))) 
                                            (_p_Col_add 
                                               (basics.fst _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it)) a)) a)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_It_has_next it))) v_Vgc 
                               v_Vcc) 
                            (v_Vcc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_It_has_next it))))) =>
                             v_Vic:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_Col_T a a)))) =>
                             zen.Rnoteq _p_Col_T a v_Vic) v_Vdc) v_Vbc) N))) 
               (zen.nnpp 
                  (zen.triangle 
                     (focal.is_true (basics._tilda__tilda_ (_p_L_mem l x)))) 
                  (v_Vcc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ (_p_L_mem l x)))))) =>
                   focal.zenon_syntactic_equal (basics.list__t _p_Elt_T) l 
                     (builtins.nil _p_Elt_T) 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (zen.equal (basics.list__t _p_Elt_T) l 
                               (builtins.nil _p_Elt_T)))) =>
                      focal.zenon_focal_notnot (_p_L_mem l x) 
                        (v_Vec:
                         (zen.proof 
                            (zen.triangle (focal.is_true (_p_L_mem l x)))) =>
                         zen.Rall _p_Elt_T 
                           (v_Vfc:(zen.term _p_Elt_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (_p_L_mem (builtins.nil _p_Elt_T) v_Vfc)))) 
                           x 
                           (v_Vgc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._tilda__tilda_ 
                                        (_p_L_mem (builtins.nil _p_Elt_T) x))))) =>
                            focal.zenon_focal_not 
                              (_p_L_mem (builtins.nil _p_Elt_T) x) 
                              (v_Vhc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_L_mem (builtins.nil _p_Elt_T) 
                                              x))))) =>
                               zen.Rsubst basics.bool__t 
                                 (v_Vic:(zen.term basics.bool__t) =>
                                  zen.triangle (focal.is_true v_Vic)) 
                                 (_p_L_mem l x) 
                                 (_p_L_mem (builtins.nil _p_Elt_T) x) 
                                 (v_Vjc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_L_mem l x) 
                                              (_p_L_mem 
                                                 (builtins.nil _p_Elt_T) x))))) =>
                                  zen.Rsubst (basics.list__t _p_Elt_T) 
                                    (v_Vkc:
                                     (zen.term (basics.list__t _p_Elt_T)) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_L_mem v_Vkc x) 
                                             (_p_L_mem 
                                                (builtins.nil _p_Elt_T) x)))) 
                                    l (builtins.nil _p_Elt_T) 
                                    (v_Vlc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal 
                                                 (basics.list__t _p_Elt_T) l 
                                                 (builtins.nil _p_Elt_T))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal 
                                             (basics.list__t _p_Elt_T) l 
                                             (builtins.nil _p_Elt_T))) v_Vdc 
                                       v_Vlc) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_L_mem 
                                                    (builtins.nil _p_Elt_T) x) 
                                                 (_p_L_mem 
                                                    (builtins.nil _p_Elt_T) x))))) =>
                                     zen.Rsubst _p_Elt_T 
                                       (v_Vnc:(zen.term _p_Elt_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_L_mem 
                                                   (builtins.nil _p_Elt_T) 
                                                   v_Vnc) 
                                                (_p_L_mem 
                                                   (builtins.nil _p_Elt_T) x)))) 
                                       x x 
                                       (v_Voc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_Elt_T x x)))) =>
                                        zen.Rnoteq _p_Elt_T x v_Voc) 
                                       (v_Vmc0:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_L_mem 
                                                       (builtins.nil _p_Elt_T) 
                                                       x) 
                                                    (_p_L_mem 
                                                       (builtins.nil _p_Elt_T) 
                                                       x))))) =>
                                        zen.Rnoteq basics.bool__t 
                                          (_p_L_mem (builtins.nil _p_Elt_T) x) 
                                          v_Vmc0) v_Vmc) v_Vjc) 
                                 (v_Vpc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_L_mem (builtins.nil _p_Elt_T) 
                                              x)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem (builtins.nil _p_Elt_T) x))) 
                                    v_Vpc v_Vhc) v_Vec) v_Vgc) 
                           _p_L_mem_empty_spec) v_Vcc) __S_1_1_2_1_LEMMA))) 
              (dk_builtins.magic_prove 
                 (dk_logic.ebP 
                    (basics._equal_ (basics.list__t _p_Elt_T) l 
                       (builtins.nil _p_Elt_T)))))) 
          (N:(dk_logic.eP (dk_logic.ebP (_p_It_has_next it))) =>
           (__S_1_1_1_0_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                     (_p_It_step_it it) 
                     (dk_tuple.pair _p_Elt_T _p_It_T 
                        (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) 
                        (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)))))) =>
            (__S_1_1_1_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (IterTools__it_order _p_It_T _p_It_measure_it 
                      (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) it))) =>
             (__S_1_1_1_2_LEMMA:
              (dk_logic.eP 
                 (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                    _p_L_mem _p_Col_contains _p_It_model 
                    (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                       _p_Col_add _p_It_has_next _p_It_step_it 
                       (IterTools__it_order _p_It_T _p_It_measure_it) 
                       abst_rec_call_decreases abst_wf_it_order) 
                    (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)))) =>
              (__S_1_1_1_3_LEMMA:
               (dk_logic.eP 
                  (dk_logic.ebP 
                     (basics._equal_ _p_Col_T 
                        (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                           _p_Col_add _p_It_has_next _p_It_step_it 
                           (IterTools__it_order _p_It_T _p_It_measure_it) 
                           abst_rec_call_decreases abst_wf_it_order it a) 
                        (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                           _p_Col_add _p_It_has_next _p_It_step_it 
                           (IterTools__it_order _p_It_T _p_It_measure_it) 
                           abst_rec_call_decreases abst_wf_it_order 
                           (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) 
                           (_p_Col_add 
                              (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) 
                              a))))) =>
               (__S_1_1_1_4_LEMMA:
                (y:(cc.eT _p_Elt_T) ->
                 A2:(dk_logic.eP 
                       (dk_logic.ebP 
                          (_p_Col_contains y 
                             (_p_Col_add 
                                (basics.fst _p_Elt_T _p_It_T 
                                   (_p_It_step_it it)) a)))) ->
                 dk_logic.eP (dk_logic.ebP (_p_Col_contains y c))) =>
                (__S_1_1_1_5_LEMMA:
                 (l2:(cc.eT (basics.list__t _p_Elt_T)) ->
                  M2:(dk_logic.eP 
                        (_p_It_model 
                           (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) 
                           c l2)) ->
                  dk_logic.eP 
                    (dk_logic.eqv 
                       (dk_logic.ebP 
                          (_p_Col_contains x 
                             (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                _p_Col_add _p_It_has_next _p_It_step_it 
                                (IterTools__it_order _p_It_T _p_It_measure_it) 
                                abst_rec_call_decreases abst_wf_it_order it a))) 
                       (dk_logic.ebP 
                          (basics._bar__bar_ (_p_L_mem l x) 
                             (_p_Col_contains x a))))) =>
                 zen.nnpp 
                   (zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_Col_contains x 
                               (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                  _p_It_T _p_Col_add _p_It_has_next 
                                  _p_It_step_it 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it) 
                                  abst_rec_call_decreases abst_wf_it_order 
                                  it a)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._bar__bar_ (_p_L_mem l x) 
                               (_p_Col_contains x a))))) 
                   (v_Vzb:
                    (zen.proof 
                       (zen.not 
                          (zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_Col_contains x 
                                      (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                         _p_It_T _p_Col_add _p_It_has_next 
                                         _p_It_step_it 
                                         (IterTools__it_order _p_It_T 
                                            _p_It_measure_it) 
                                         abst_rec_call_decreases 
                                         abst_wf_it_order it a)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._bar__bar_ (_p_L_mem l x) 
                                      (_p_Col_contains x a))))))) =>
                    focal.zenon_syntactic_equal 
                      (dk_tuple.prod _p_Elt_T _p_It_T) (_p_It_step_it it) 
                      (dk_tuple.pair _p_Elt_T _p_It_T 
                         (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) 
                         (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it))) 
                      (v_Vac:
                       (zen.proof 
                          (zen.triangle 
                             (zen.equal (dk_tuple.prod _p_Elt_T _p_It_T) 
                                (_p_It_step_it it) 
                                (basics.pair _p_Elt_T _p_It_T 
                                   (basics.fst _p_Elt_T _p_It_T 
                                      (_p_It_step_it it)) 
                                   (basics.snd _p_Elt_T _p_It_T 
                                      (_p_It_step_it it)))))) =>
                       zen.Rall _p_It_T 
                         (v_Vbc:(zen.term _p_It_T) =>
                          zen.forall _p_It_T 
                            (v_Vcc:(zen.term _p_It_T) =>
                             zen.forall _p_Col_T 
                               (v_Vdc:(zen.term _p_Col_T) =>
                                zen.forall _p_Elt_T 
                                  (v_Vec:(zen.term _p_Elt_T) =>
                                   zen.forall (basics.list__t _p_Elt_T) 
                                     (v_Vfc:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_It_has_next v_Vbc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (_p_It_model v_Vbc v_Vdc v_Vfc)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it v_Vbc) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          v_Vec v_Vcc)))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model v_Vcc v_Vdc 
                                                       v_Vgc)))))))))) it 
                         (v_Vhc:
                          (zen.proof 
                             (zen.forall _p_It_T 
                                (v_Vcc:(zen.term _p_It_T) =>
                                 zen.forall _p_Col_T 
                                   (v_Vdc:(zen.term _p_Col_T) =>
                                    zen.forall _p_Elt_T 
                                      (v_Vec:(zen.term _p_Elt_T) =>
                                       zen.forall (basics.list__t _p_Elt_T) 
                                         (v_Vfc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_It_has_next it))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it v_Vdc v_Vfc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T v_Vec 
                                                              v_Vcc)))) 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model v_Vcc 
                                                           v_Vdc v_Vgc))))))))))) =>
                          zen.Rall _p_It_T 
                            (v_Vcc:(zen.term _p_It_T) =>
                             zen.forall _p_Col_T 
                               (v_Vdc:(zen.term _p_Col_T) =>
                                zen.forall _p_Elt_T 
                                  (v_Vec:(zen.term _p_Elt_T) =>
                                   zen.forall (basics.list__t _p_Elt_T) 
                                     (v_Vfc:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (_p_It_has_next it))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (_p_It_model it v_Vdc v_Vfc)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it it) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          v_Vec v_Vcc)))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model v_Vcc v_Vdc 
                                                       v_Vgc))))))))) 
                            (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) 
                            (v_Vic:
                             (zen.proof 
                                (zen.forall _p_Col_T 
                                   (v_Vdc:(zen.term _p_Col_T) =>
                                    zen.forall _p_Elt_T 
                                      (v_Vec:(zen.term _p_Elt_T) =>
                                       zen.forall (basics.list__t _p_Elt_T) 
                                         (v_Vfc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_It_has_next it))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it v_Vdc v_Vfc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T v_Vec 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)))))) 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) v_Vdc 
                                                           v_Vgc)))))))))) =>
                             zen.Rall _p_Col_T 
                               (v_Vdc:(zen.term _p_Col_T) =>
                                zen.forall _p_Elt_T 
                                  (v_Vec:(zen.term _p_Elt_T) =>
                                   zen.forall (basics.list__t _p_Elt_T) 
                                     (v_Vfc:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (_p_It_has_next it))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (_p_It_model it v_Vdc v_Vfc)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it it) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          v_Vec 
                                                          (basics.snd 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)))))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       v_Vdc v_Vgc)))))))) c 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.forall _p_Elt_T 
                                      (v_Vec:(zen.term _p_Elt_T) =>
                                       zen.forall (basics.list__t _p_Elt_T) 
                                         (v_Vfc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_It_has_next it))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it c v_Vfc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T v_Vec 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)))))) 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) c v_Vgc))))))))) =>
                                zen.Rall _p_Elt_T 
                                  (v_Vec:(zen.term _p_Elt_T) =>
                                   zen.forall (basics.list__t _p_Elt_T) 
                                     (v_Vfc:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (_p_It_has_next it))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (_p_It_model it c v_Vfc)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it it) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          v_Vec 
                                                          (basics.snd 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)))))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       c v_Vgc))))))) 
                                  (basics.fst _p_Elt_T _p_It_T 
                                     (_p_It_step_it it)) 
                                  (v_Vkc:
                                   (zen.proof 
                                      (zen.forall (basics.list__t _p_Elt_T) 
                                         (v_Vfc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_It_has_next it))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it c v_Vfc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)))))) 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) c v_Vgc)))))))) =>
                                   zen.Rall (basics.list__t _p_Elt_T) 
                                     (v_Vfc:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (_p_It_has_next it))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (_p_It_model it c v_Vfc)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it it) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) 
                                                          (basics.snd 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)))))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       c v_Vgc)))))) l 
                                     (v_Vlc:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_It_has_next it))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it c l)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)))))) 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) c v_Vgc))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true (_p_It_has_next it))) 
                                        (zen.imp 
                                           (zen.triangle (_p_It_model it c l)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it it) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) 
                                                          (basics.snd 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)))))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       c v_Vgc))))) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next it))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_It_has_next it))) N 
                                           v_Vmc) 
                                        (v_Vnc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it c l)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)))))) 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) c v_Vgc)))))) =>
                                         zen.Rimply 
                                           (zen.triangle (_p_It_model it c l)) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it it) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) 
                                                          (basics.snd 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)))))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       c v_Vgc)))) 
                                           (v_Voc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (_p_It_model it c l)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (_p_It_model it c l)) M 
                                              v_Voc) 
                                           (v_Vpc:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it it) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)))))) 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) c v_Vgc))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ 
                                                       (dk_tuple.prod 
                                                          _p_Elt_T _p_It_T) 
                                                       (_p_It_step_it it) 
                                                       (dk_tuple.pair 
                                                          _p_Elt_T _p_It_T 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) 
                                                          (basics.snd 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)))))) 
                                              (zen.exists 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       c v_Vgc))) 
                                              (v_Vqc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics.syntactic_equal 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (basics.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)))))))) =>
                                               focal.zenon_not_syntactic_equal 
                                                 (dk_tuple.prod _p_Elt_T 
                                                    _p_It_T) 
                                                 (_p_It_step_it it) 
                                                 (basics.pair _p_Elt_T 
                                                    _p_It_T 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) 
                                                    (basics.snd _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it))) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (basics.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it))))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          (dk_tuple.prod 
                                                             _p_Elt_T _p_It_T) 
                                                          (_p_It_step_it it) 
                                                          (basics.pair 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it))))) 
                                                    v_Vac v_Vrc) v_Vqc) 
                                              (v_Vsc:
                                               (zen.proof 
                                                  (zen.exists 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vgc:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) c v_Vgc)))) =>
                                               zen.Rex 
                                                 (basics.list__t _p_Elt_T) 
                                                 (v_Vgc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  zen.triangle 
                                                    (_p_It_model 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       c v_Vgc)) 
                                                 (v_Vtc:
                                                  (zen.term 
                                                     (basics.list__t _p_Elt_T)) =>
                                                  v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) c v_Vtc))) =>
                                                  zen.Rall 
                                                    (basics.list__t _p_Elt_T) 
                                                    (v_Vgc:
                                                     (zen.term 
                                                        (basics.list__t 
                                                           _p_Elt_T)) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (_p_It_model 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) c 
                                                             v_Vgc)) 
                                                       (zen.eqv 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   x 
                                                                   (IterTools__copy_aux 
                                                                    _p_Col_T 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    _p_Col_add 
                                                                    _p_It_has_next 
                                                                    _p_It_step_it 
                                                                    (IterTools__it_order 
                                                                    _p_It_T 
                                                                    _p_It_measure_it) 
                                                                    abst_rec_call_decreases 
                                                                    abst_wf_it_order 
                                                                    it a)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (basics._bar__bar_ 
                                                                   (_p_L_mem 
                                                                    l x) 
                                                                   (_p_Col_contains 
                                                                    x a)))))) 
                                                    v_Vtc 
                                                    (v_Vvc:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (_p_It_model 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) c 
                                                                 v_Vtc)) 
                                                           (zen.eqv 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    x 
                                                                    (IterTools__copy_aux 
                                                                    _p_Col_T 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    _p_Col_add 
                                                                    _p_It_has_next 
                                                                    _p_It_step_it 
                                                                    (IterTools__it_order 
                                                                    _p_It_T 
                                                                    _p_It_measure_it) 
                                                                    abst_rec_call_decreases 
                                                                    abst_wf_it_order 
                                                                    it a)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    basics._bar__bar_ 
                                                                    (_p_L_mem 
                                                                    l x) 
                                                                    (_p_Col_contains 
                                                                    x a))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (_p_It_model 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) c 
                                                             v_Vtc)) 
                                                       (zen.eqv 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   x 
                                                                   (IterTools__copy_aux 
                                                                    _p_Col_T 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    _p_Col_add 
                                                                    _p_It_has_next 
                                                                    _p_It_step_it 
                                                                    (IterTools__it_order 
                                                                    _p_It_T 
                                                                    _p_It_measure_it) 
                                                                    abst_rec_call_decreases 
                                                                    abst_wf_it_order 
                                                                    it a)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (basics._bar__bar_ 
                                                                   (_p_L_mem 
                                                                    l x) 
                                                                   (_p_Col_contains 
                                                                    x a))))) 
                                                       (v_Vwc:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (_p_It_model 
                                                                    (
                                                                    basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) c 
                                                                    v_Vtc)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (_p_It_model 
                                                                (basics.snd 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) c 
                                                                v_Vtc)) 
                                                          v_Vuc v_Vwc) 
                                                       (v_Vxc:
                                                        (zen.proof 
                                                           (zen.eqv 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    x 
                                                                    (IterTools__copy_aux 
                                                                    _p_Col_T 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    _p_Col_add 
                                                                    _p_It_has_next 
                                                                    _p_It_step_it 
                                                                    (IterTools__it_order 
                                                                    _p_It_T 
                                                                    _p_It_measure_it) 
                                                                    abst_rec_call_decreases 
                                                                    abst_wf_it_order 
                                                                    it a)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    basics._bar__bar_ 
                                                                    (_p_L_mem 
                                                                    l x) 
                                                                    (_p_Col_contains 
                                                                    x a)))))) =>
                                                        zen.Raxiom 
                                                          (zen.eqv 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_Col_contains 
                                                                    x 
                                                                    (IterTools__copy_aux 
                                                                    _p_Col_T 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    _p_Col_add 
                                                                    _p_It_has_next 
                                                                    _p_It_step_it 
                                                                    (IterTools__it_order 
                                                                    _p_It_T 
                                                                    _p_It_measure_it) 
                                                                    abst_rec_call_decreases 
                                                                    abst_wf_it_order 
                                                                    it a)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (basics._bar__bar_ 
                                                                    (_p_L_mem 
                                                                    l x) 
                                                                    (_p_Col_contains 
                                                                    x a))))) 
                                                          v_Vxc v_Vzb) v_Vvc) 
                                                    __S_1_1_1_5_LEMMA) v_Vsc) 
                                              v_Vpc) v_Vnc) v_Vlc) v_Vkc) 
                                  v_Vjc) v_Vic) v_Vhc) 
                         _p_It_model_step_exists) __S_1_1_1_0_LEMMA)) 
                  (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                   M2:
                   (dk_logic.eP 
                      (_p_It_model 
                         (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) c 
                         l2)) =>
                   (__S_1_1_1_5_0_LEMMA:
                    (dk_logic.eP 
                       (dk_logic.eqv 
                          (dk_logic.ebP 
                             (_p_Col_contains x 
                                (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                   _p_It_T _p_Col_add _p_It_has_next 
                                   _p_It_step_it 
                                   (IterTools__it_order _p_It_T 
                                      _p_It_measure_it) 
                                   abst_rec_call_decreases abst_wf_it_order 
                                   (basics.snd _p_Elt_T _p_It_T 
                                      (_p_It_step_it it)) 
                                   (_p_Col_add 
                                      (basics.fst _p_Elt_T _p_It_T 
                                         (_p_It_step_it it)) a)))) 
                          (dk_logic.ebP 
                             (basics._bar__bar_ (_p_L_mem l2 x) 
                                (_p_Col_contains x 
                                   (_p_Col_add 
                                      (basics.fst _p_Elt_T _p_It_T 
                                         (_p_It_step_it it)) a)))))) =>
                    (__S_1_1_1_5_1_LEMMA:
                     (H:(dk_logic.eP 
                           (dk_logic.ebP 
                              (_p_Col_contains x 
                                 (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                    _p_It_T _p_Col_add _p_It_has_next 
                                    _p_It_step_it 
                                    (IterTools__it_order _p_It_T 
                                       _p_It_measure_it) 
                                    abst_rec_call_decreases abst_wf_it_order 
                                    it a)))) ->
                      dk_logic.eP 
                        (dk_logic.ebP 
                           (basics._bar__bar_ (_p_L_mem l x) 
                              (_p_Col_contains x a)))) =>
                     (__S_1_1_1_5_2_LEMMA:
                      (H:(dk_logic.eP 
                            (dk_logic.ebP 
                               (basics._bar__bar_ (_p_L_mem l x) 
                                  (_p_Col_contains x a)))) ->
                       dk_logic.eP 
                         (dk_logic.ebP 
                            (_p_Col_contains x 
                               (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                  _p_It_T _p_Col_add _p_It_has_next 
                                  _p_It_step_it 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it) 
                                  abst_rec_call_decreases abst_wf_it_order 
                                  it a)))) =>
                      zen.nnpp 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order it a)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._bar__bar_ (_p_L_mem l x) 
                                    (_p_Col_contains x a))))) 
                        (v_Vzb:
                         (zen.proof 
                            (zen.not 
                               (zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_Col_contains x 
                                           (IterTools__copy_aux _p_Col_T 
                                              _p_Elt_T _p_It_T _p_Col_add 
                                              _p_It_has_next _p_It_step_it 
                                              (IterTools__it_order _p_It_T 
                                                 _p_It_measure_it) 
                                              abst_rec_call_decreases 
                                              abst_wf_it_order it a)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ (_p_L_mem l x) 
                                           (_p_Col_contains x a))))))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order it a)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._bar__bar_ (_p_L_mem l x) 
                                    (_p_Col_contains x a)))) 
                           (v_Vac:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_Col_contains x 
                                           (IterTools__copy_aux _p_Col_T 
                                              _p_Elt_T _p_It_T _p_Col_add 
                                              _p_It_has_next _p_It_step_it 
                                              (IterTools__it_order _p_It_T 
                                                 _p_It_measure_it) 
                                              abst_rec_call_decreases 
                                              abst_wf_it_order it a)))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._bar__bar_ (_p_L_mem l x) 
                                       (_p_Col_contains x a)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_Col_contains x 
                                       (IterTools__copy_aux _p_Col_T 
                                          _p_Elt_T _p_It_T _p_Col_add 
                                          _p_It_has_next _p_It_step_it 
                                          (IterTools__it_order _p_It_T 
                                             _p_It_measure_it) 
                                          abst_rec_call_decreases 
                                          abst_wf_it_order it a)))) 
                              (v_Vbc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._bar__bar_ (_p_L_mem l x) 
                                              (_p_Col_contains x a)))))) =>
                               zen.Rnotequiv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_Col_contains x 
                                          (IterTools__copy_aux _p_Col_T 
                                             _p_Elt_T _p_It_T _p_Col_add 
                                             _p_It_has_next _p_It_step_it 
                                             (IterTools__it_order _p_It_T 
                                                _p_It_measure_it) 
                                             abst_rec_call_decreases 
                                             abst_wf_it_order it a)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._bar__bar_ (_p_L_mem l x) 
                                          (_p_Col_contains x a)))) 
                                 (v_Vac0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_Col_contains x 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order it a)))))) =>
                                  v_Vcc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._bar__bar_ (_p_L_mem l x) 
                                              (_p_Col_contains x a))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._bar__bar_ (_p_L_mem l x) 
                                             (_p_Col_contains x a)))) v_Vcc 
                                    v_Vbc) 
                                 (v_Vdc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_Col_contains x 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order it a))))) =>
                                  v_Vbc0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._bar__bar_ 
                                                 (_p_L_mem l x) 
                                                 (_p_Col_contains x a)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains x 
                                             (IterTools__copy_aux _p_Col_T 
                                                _p_Elt_T _p_It_T _p_Col_add 
                                                _p_It_has_next _p_It_step_it 
                                                (IterTools__it_order _p_It_T 
                                                   _p_It_measure_it) 
                                                abst_rec_call_decreases 
                                                abst_wf_it_order it a)))) 
                                    v_Vdc v_Vac) v_Vzb) 
                              (v_Vdc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_Col_contains x 
                                           (IterTools__copy_aux _p_Col_T 
                                              _p_Elt_T _p_It_T _p_Col_add 
                                              _p_It_has_next _p_It_step_it 
                                              (IterTools__it_order _p_It_T 
                                                 _p_It_measure_it) 
                                              abst_rec_call_decreases 
                                              abst_wf_it_order it a))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_Col_contains x 
                                          (IterTools__copy_aux _p_Col_T 
                                             _p_Elt_T _p_It_T _p_Col_add 
                                             _p_It_has_next _p_It_step_it 
                                             (IterTools__it_order _p_It_T 
                                                _p_It_measure_it) 
                                             abst_rec_call_decreases 
                                             abst_wf_it_order it a)))) v_Vdc 
                                 v_Vac) __S_1_1_1_5_2_LEMMA) 
                           (v_Vcc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._bar__bar_ (_p_L_mem l x) 
                                        (_p_Col_contains x a))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._bar__bar_ (_p_L_mem l x) 
                                       (_p_Col_contains x a)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_Col_contains x 
                                       (IterTools__copy_aux _p_Col_T 
                                          _p_Elt_T _p_It_T _p_Col_add 
                                          _p_It_has_next _p_It_step_it 
                                          (IterTools__it_order _p_It_T 
                                             _p_It_measure_it) 
                                          abst_rec_call_decreases 
                                          abst_wf_it_order it a)))) 
                              (v_Vbc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._bar__bar_ (_p_L_mem l x) 
                                              (_p_Col_contains x a)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._bar__bar_ (_p_L_mem l x) 
                                          (_p_Col_contains x a)))) v_Vcc 
                                 v_Vbc) 
                              (v_Vdc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_Col_contains x 
                                           (IterTools__copy_aux _p_Col_T 
                                              _p_Elt_T _p_It_T _p_Col_add 
                                              _p_It_has_next _p_It_step_it 
                                              (IterTools__it_order _p_It_T 
                                                 _p_It_measure_it) 
                                              abst_rec_call_decreases 
                                              abst_wf_it_order it a))))) =>
                               zen.Rnotequiv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_Col_contains x 
                                          (IterTools__copy_aux _p_Col_T 
                                             _p_Elt_T _p_It_T _p_Col_add 
                                             _p_It_has_next _p_It_step_it 
                                             (IterTools__it_order _p_It_T 
                                                _p_It_measure_it) 
                                             abst_rec_call_decreases 
                                             abst_wf_it_order it a)))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._bar__bar_ (_p_L_mem l x) 
                                          (_p_Col_contains x a)))) 
                                 (v_Vac:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_Col_contains x 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order it a)))))) =>
                                  v_Vcc0:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._bar__bar_ (_p_L_mem l x) 
                                              (_p_Col_contains x a))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains x 
                                             (IterTools__copy_aux _p_Col_T 
                                                _p_Elt_T _p_It_T _p_Col_add 
                                                _p_It_has_next _p_It_step_it 
                                                (IterTools__it_order _p_It_T 
                                                   _p_It_measure_it) 
                                                abst_rec_call_decreases 
                                                abst_wf_it_order it a)))) 
                                    v_Vdc v_Vac) 
                                 (v_Vdc0:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_Col_contains x 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order it a))))) =>
                                  v_Vbc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._bar__bar_ 
                                                 (_p_L_mem l x) 
                                                 (_p_Col_contains x a)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._bar__bar_ (_p_L_mem l x) 
                                             (_p_Col_contains x a)))) v_Vcc 
                                    v_Vbc) v_Vzb) __S_1_1_1_5_2_LEMMA) 
                           __S_1_1_1_5_1_LEMMA)) 
                       (H:
                        (dk_logic.eP 
                           (dk_logic.ebP 
                              (basics._bar__bar_ (_p_L_mem l x) 
                                 (_p_Col_contains x a)))) =>
                        (__S_1_1_1_5_2_1_LEMMA:
                         (dk_logic.eP 
                            (dk_logic.ebP 
                               (_p_Col_contains x 
                                  (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                     _p_It_T _p_Col_add _p_It_has_next 
                                     _p_It_step_it 
                                     (IterTools__it_order _p_It_T 
                                        _p_It_measure_it) 
                                     abst_rec_call_decreases 
                                     abst_wf_it_order 
                                     (basics.snd _p_Elt_T _p_It_T 
                                        (_p_It_step_it it)) 
                                     (_p_Col_add 
                                        (basics.fst _p_Elt_T _p_It_T 
                                           (_p_It_step_it it)) a))))) =>
                         zen.nnpp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order it a)))) 
                           (v_Vcc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_Col_contains x 
                                           (IterTools__copy_aux _p_Col_T 
                                              _p_Elt_T _p_It_T _p_Col_add 
                                              _p_It_has_next _p_It_step_it 
                                              (IterTools__it_order _p_It_T 
                                                 _p_It_measure_it) 
                                              abst_rec_call_decreases 
                                              abst_wf_it_order it a)))))) =>
                            focal.zenon_syntactic_equal _p_Col_T 
                              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                 _p_Col_add _p_It_has_next _p_It_step_it 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it) 
                                 abst_rec_call_decreases abst_wf_it_order it 
                                 a) 
                              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                 _p_Col_add _p_It_has_next _p_It_step_it 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it) 
                                 abst_rec_call_decreases abst_wf_it_order 
                                 (basics.snd _p_Elt_T _p_It_T 
                                    (_p_It_step_it it)) 
                                 (_p_Col_add 
                                    (basics.fst _p_Elt_T _p_It_T 
                                       (_p_It_step_it it)) a)) 
                              (v_Vdc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal _p_Col_T 
                                        (IterTools__copy_aux _p_Col_T 
                                           _p_Elt_T _p_It_T _p_Col_add 
                                           _p_It_has_next _p_It_step_it 
                                           (IterTools__it_order _p_It_T 
                                              _p_It_measure_it) 
                                           abst_rec_call_decreases 
                                           abst_wf_it_order it a) 
                                        (IterTools__copy_aux _p_Col_T 
                                           _p_Elt_T _p_It_T _p_Col_add 
                                           _p_It_has_next _p_It_step_it 
                                           (IterTools__it_order _p_It_T 
                                              _p_It_measure_it) 
                                           abst_rec_call_decreases 
                                           abst_wf_it_order 
                                           (basics.snd _p_Elt_T _p_It_T 
                                              (_p_It_step_it it)) 
                                           (_p_Col_add 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) a))))) =>
                               zen.Rsubst basics.bool__t 
                                 (v_Vec:(zen.term basics.bool__t) =>
                                  zen.triangle (focal.is_true v_Vec)) 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order 
                                       (basics.snd _p_Elt_T _p_It_T 
                                          (_p_It_step_it it)) 
                                       (_p_Col_add 
                                          (basics.fst _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) a))) 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order it a)) 
                                 (v_Vfc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_Col_contains x 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order 
                                                    (basics.snd _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) 
                                                    (_p_Col_add 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       a))) 
                                              (_p_Col_contains x 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order it a)))))) =>
                                  zen.Rsubst _p_Elt_T 
                                    (v_Vgc:(zen.term _p_Elt_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_Col_contains v_Vgc 
                                                (IterTools__copy_aux 
                                                   _p_Col_T _p_Elt_T _p_It_T 
                                                   _p_Col_add _p_It_has_next 
                                                   _p_It_step_it 
                                                   (IterTools__it_order 
                                                      _p_It_T 
                                                      _p_It_measure_it) 
                                                   abst_rec_call_decreases 
                                                   abst_wf_it_order 
                                                   (basics.snd _p_Elt_T 
                                                      _p_It_T 
                                                      (_p_It_step_it it)) 
                                                   (_p_Col_add 
                                                      (basics.fst _p_Elt_T 
                                                         _p_It_T 
                                                         (_p_It_step_it it)) 
                                                      a))) 
                                             (_p_Col_contains x 
                                                (IterTools__copy_aux 
                                                   _p_Col_T _p_Elt_T _p_It_T 
                                                   _p_Col_add _p_It_has_next 
                                                   _p_It_step_it 
                                                   (IterTools__it_order 
                                                      _p_It_T 
                                                      _p_It_measure_it) 
                                                   abst_rec_call_decreases 
                                                   abst_wf_it_order it a))))) 
                                    x x 
                                    (v_Vhc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_Elt_T x x)))) =>
                                     zen.Rnoteq _p_Elt_T x v_Vhc) 
                                    (v_Vfc0:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_Col_contains x 
                                                    (IterTools__copy_aux 
                                                       _p_Col_T _p_Elt_T 
                                                       _p_It_T _p_Col_add 
                                                       _p_It_has_next 
                                                       _p_It_step_it 
                                                       (IterTools__it_order 
                                                          _p_It_T 
                                                          _p_It_measure_it) 
                                                       abst_rec_call_decreases 
                                                       abst_wf_it_order 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       (_p_Col_add 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) a))) 
                                                 (_p_Col_contains x 
                                                    (IterTools__copy_aux 
                                                       _p_Col_T _p_Elt_T 
                                                       _p_It_T _p_Col_add 
                                                       _p_It_has_next 
                                                       _p_It_step_it 
                                                       (IterTools__it_order 
                                                          _p_It_T 
                                                          _p_It_measure_it) 
                                                       abst_rec_call_decreases 
                                                       abst_wf_it_order it a)))))) =>
                                     zen.Rsubst _p_Col_T 
                                       (v_Vic:(zen.term _p_Col_T) =>
                                        zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_Col_contains x v_Vic) 
                                                (_p_Col_contains x 
                                                   (IterTools__copy_aux 
                                                      _p_Col_T _p_Elt_T 
                                                      _p_It_T _p_Col_add 
                                                      _p_It_has_next 
                                                      _p_It_step_it 
                                                      (IterTools__it_order 
                                                         _p_It_T 
                                                         _p_It_measure_it) 
                                                      abst_rec_call_decreases 
                                                      abst_wf_it_order it a))))) 
                                       (IterTools__copy_aux _p_Col_T 
                                          _p_Elt_T _p_It_T _p_Col_add 
                                          _p_It_has_next _p_It_step_it 
                                          (IterTools__it_order _p_It_T 
                                             _p_It_measure_it) 
                                          abst_rec_call_decreases 
                                          abst_wf_it_order 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) 
                                          (_p_Col_add 
                                             (basics.fst _p_Elt_T _p_It_T 
                                                (_p_It_step_it it)) a)) 
                                       (IterTools__copy_aux _p_Col_T 
                                          _p_Elt_T _p_It_T _p_Col_add 
                                          _p_It_has_next _p_It_step_it 
                                          (IterTools__it_order _p_It_T 
                                             _p_It_measure_it) 
                                          abst_rec_call_decreases 
                                          abst_wf_it_order it a) 
                                       (v_Vjc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_Col_T 
                                                    (IterTools__copy_aux 
                                                       _p_Col_T _p_Elt_T 
                                                       _p_It_T _p_Col_add 
                                                       _p_It_has_next 
                                                       _p_It_step_it 
                                                       (IterTools__it_order 
                                                          _p_It_T 
                                                          _p_It_measure_it) 
                                                       abst_rec_call_decreases 
                                                       abst_wf_it_order 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       (_p_Col_add 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) a)) 
                                                    (IterTools__copy_aux 
                                                       _p_Col_T _p_Elt_T 
                                                       _p_It_T _p_Col_add 
                                                       _p_It_has_next 
                                                       _p_It_step_it 
                                                       (IterTools__it_order 
                                                          _p_It_T 
                                                          _p_It_measure_it) 
                                                       abst_rec_call_decreases 
                                                       abst_wf_it_order it a))))) =>
                                        zen.Reqsym _p_Col_T 
                                          (IterTools__copy_aux _p_Col_T 
                                             _p_Elt_T _p_It_T _p_Col_add 
                                             _p_It_has_next _p_It_step_it 
                                             (IterTools__it_order _p_It_T 
                                                _p_It_measure_it) 
                                             abst_rec_call_decreases 
                                             abst_wf_it_order it a) 
                                          (IterTools__copy_aux _p_Col_T 
                                             _p_Elt_T _p_It_T _p_Col_add 
                                             _p_It_has_next _p_It_step_it 
                                             (IterTools__it_order _p_It_T 
                                                _p_It_measure_it) 
                                             abst_rec_call_decreases 
                                             abst_wf_it_order 
                                             (basics.snd _p_Elt_T _p_It_T 
                                                (_p_It_step_it it)) 
                                             (_p_Col_add 
                                                (basics.fst _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) a)) 
                                          v_Vdc v_Vjc) 
                                       (v_Vkc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_Col_contains x 
                                                       (IterTools__copy_aux 
                                                          _p_Col_T _p_Elt_T 
                                                          _p_It_T _p_Col_add 
                                                          _p_It_has_next 
                                                          _p_It_step_it 
                                                          (IterTools__it_order 
                                                             _p_It_T 
                                                             _p_It_measure_it) 
                                                          abst_rec_call_decreases 
                                                          abst_wf_it_order 
                                                          it a)) 
                                                    (_p_Col_contains x 
                                                       (IterTools__copy_aux 
                                                          _p_Col_T _p_Elt_T 
                                                          _p_It_T _p_Col_add 
                                                          _p_It_has_next 
                                                          _p_It_step_it 
                                                          (IterTools__it_order 
                                                             _p_It_T 
                                                             _p_It_measure_it) 
                                                          abst_rec_call_decreases 
                                                          abst_wf_it_order 
                                                          it a)))))) =>
                                        zen.Rnoteq basics.bool__t 
                                          (_p_Col_contains x 
                                             (IterTools__copy_aux _p_Col_T 
                                                _p_Elt_T _p_It_T _p_Col_add 
                                                _p_It_has_next _p_It_step_it 
                                                (IterTools__it_order _p_It_T 
                                                   _p_It_measure_it) 
                                                abst_rec_call_decreases 
                                                abst_wf_it_order it a)) v_Vkc) 
                                       v_Vfc0) v_Vfc) 
                                 (v_Vlc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_Col_contains x 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order it a))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains x 
                                             (IterTools__copy_aux _p_Col_T 
                                                _p_Elt_T _p_It_T _p_Col_add 
                                                _p_It_has_next _p_It_step_it 
                                                (IterTools__it_order _p_It_T 
                                                   _p_It_measure_it) 
                                                abst_rec_call_decreases 
                                                abst_wf_it_order it a)))) 
                                    v_Vlc v_Vcc) __S_1_1_1_5_2_1_LEMMA) 
                              __S_1_1_1_3_LEMMA)) 
                          ((__S_1_1_1_5_2_1_1_LEMMA:
                            (dk_logic.eP 
                               (dk_logic.ebP 
                                  (basics._bar__bar_ (_p_L_mem l2 x) 
                                     (_p_Col_contains x 
                                        (_p_Col_add 
                                           (basics.fst _p_Elt_T _p_It_T 
                                              (_p_It_step_it it)) a))))) =>
                            zen.nnpp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_Col_contains x 
                                       (IterTools__copy_aux _p_Col_T 
                                          _p_Elt_T _p_It_T _p_Col_add 
                                          _p_It_has_next _p_It_step_it 
                                          (IterTools__it_order _p_It_T 
                                             _p_It_measure_it) 
                                          abst_rec_call_decreases 
                                          abst_wf_it_order 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) 
                                          (_p_Col_add 
                                             (basics.fst _p_Elt_T _p_It_T 
                                                (_p_It_step_it it)) a))))) 
                              (v_Vzb:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_Col_contains x 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order 
                                                 (basics.snd _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) 
                                                 (_p_Col_add 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) a))))))) =>
                               zen.Requiv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_Col_contains x 
                                          (IterTools__copy_aux _p_Col_T 
                                             _p_Elt_T _p_It_T _p_Col_add 
                                             _p_It_has_next _p_It_step_it 
                                             (IterTools__it_order _p_It_T 
                                                _p_It_measure_it) 
                                             abst_rec_call_decreases 
                                             abst_wf_it_order 
                                             (basics.snd _p_Elt_T _p_It_T 
                                                (_p_It_step_it it)) 
                                             (_p_Col_add 
                                                (basics.fst _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) a))))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._bar__bar_ (_p_L_mem l2 x) 
                                          (_p_Col_contains x 
                                             (_p_Col_add 
                                                (basics.fst _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) a))))) 
                                 (v_Vzb0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_Col_contains x 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order 
                                                    (basics.snd _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) 
                                                    (_p_Col_add 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       a))))))) =>
                                  v_Vac:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._bar__bar_ 
                                                 (_p_L_mem l2 x) 
                                                 (_p_Col_contains x 
                                                    (_p_Col_add 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       a))))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._bar__bar_ (_p_L_mem l2 x) 
                                             (_p_Col_contains x 
                                                (_p_Col_add 
                                                   (basics.fst _p_Elt_T 
                                                      _p_It_T 
                                                      (_p_It_step_it it)) a))))) 
                                    __S_1_1_1_5_2_1_1_LEMMA v_Vac) 
                                 (v_Vbc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_Col_contains x 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order 
                                                 (basics.snd _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) 
                                                 (_p_Col_add 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) a)))))) =>
                                  __S_1_1_1_5_2_1_1_LEMMA0:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._bar__bar_ 
                                              (_p_L_mem l2 x) 
                                              (_p_Col_contains x 
                                                 (_p_Col_add 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) a)))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_Col_contains x 
                                             (IterTools__copy_aux _p_Col_T 
                                                _p_Elt_T _p_It_T _p_Col_add 
                                                _p_It_has_next _p_It_step_it 
                                                (IterTools__it_order _p_It_T 
                                                   _p_It_measure_it) 
                                                abst_rec_call_decreases 
                                                abst_wf_it_order 
                                                (basics.snd _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) 
                                                (_p_Col_add 
                                                   (basics.fst _p_Elt_T 
                                                      _p_It_T 
                                                      (_p_It_step_it it)) a))))) 
                                    v_Vbc v_Vzb) __S_1_1_1_5_0_LEMMA)) 
                             ((__S_1_1_1_5_2_1_1_1_LEMMA:
                               (XE:(dk_logic.eP 
                                      (dk_logic.ebP 
                                         (basics._equal_ _p_Elt_T 
                                            (basics.fst _p_Elt_T _p_It_T 
                                               (_p_It_step_it it)) x))) ->
                                dk_logic.eP 
                                  (dk_logic.ebP 
                                     (_p_Col_contains x 
                                        (_p_Col_add 
                                           (basics.fst _p_Elt_T _p_It_T 
                                              (_p_It_step_it it)) a)))) =>
                               (__S_1_1_1_5_2_1_1_2_LEMMA:
                                (XE:(dk_logic.eP 
                                       (dk_logic.not 
                                          (dk_logic.ebP 
                                             (basics._equal_ _p_Elt_T 
                                                (basics.fst _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) x)))) ->
                                 dk_logic.eP 
                                   (dk_logic.ebP 
                                      (basics._bar__bar_ (_p_L_mem l2 x) 
                                         (_p_Col_contains x 
                                            (_p_Col_add 
                                               (basics.fst _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it)) a))))) =>
                                zen.nnpp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ (_p_L_mem l2 x) 
                                           (_p_Col_contains x 
                                              (_p_Col_add 
                                                 (basics.fst _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) a))))) 
                                  (v_Vzb:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._bar__bar_ 
                                                  (_p_L_mem l2 x) 
                                                  (_p_Col_contains x 
                                                     (_p_Col_add 
                                                        (basics.fst _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        a))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._equal_ _p_Elt_T 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) x))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_Col_contains x 
                                              (_p_Col_add 
                                                 (basics.fst _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) a)))) 
                                     (v_Vac:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics.syntactic_equal 
                                                     _p_Elt_T 
                                                     (basics.fst _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)) x))))) =>
                                      zen.Rimply 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._equal_ _p_Elt_T 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) x)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._bar__bar_ 
                                                 (_p_L_mem l2 x) 
                                                 (_p_Col_contains x 
                                                    (_p_Col_add 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       a))))) 
                                        (v_Vbc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           _p_Elt_T 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) x)))))) =>
                                         zen.Raxiom 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ _p_Elt_T 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       x)))) v_Vac v_Vbc) 
                                        (v_Vcc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._bar__bar_ 
                                                     (_p_L_mem l2 x) 
                                                     (_p_Col_contains x 
                                                        (_p_Col_add 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) a)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._bar__bar_ 
                                                    (_p_L_mem l2 x) 
                                                    (_p_Col_contains x 
                                                       (_p_Col_add 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) a))))) 
                                           v_Vcc v_Vzb) 
                                        __S_1_1_1_5_2_1_1_2_LEMMA) 
                                     (v_Vdc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_Col_contains x 
                                                  (_p_Col_add 
                                                     (basics.fst _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)) a))))) =>
                                      focal.zenon_focal_notor 
                                        (_p_L_mem l2 x) 
                                        (_p_Col_contains x 
                                           (_p_Col_add 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) a)) 
                                        (v_Vec:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.or 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l2 x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_Col_contains x 
                                                           (_p_Col_add 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) a))))))) =>
                                         zen.Rnotor 
                                           (zen.triangle 
                                              (focal.is_true (_p_L_mem l2 x))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_Col_contains x 
                                                    (_p_Col_add 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       a)))) 
                                           (v_Vfc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l2 x))))) =>
                                            v_Vgc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_Col_contains x 
                                                           (_p_Col_add 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) a)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_Col_contains x 
                                                       (_p_Col_add 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) a)))) 
                                              v_Vdc v_Vgc) v_Vec) v_Vzb) 
                                     __S_1_1_1_5_2_1_1_1_LEMMA)) 
                                 (XE:
                                  (dk_logic.eP 
                                     (dk_logic.not 
                                        (dk_logic.ebP 
                                           (basics._equal_ _p_Elt_T 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) x)))) =>
                                  (__S_1_1_1_5_2_1_1_2_1_LEMMA:
                                   (HH:(dk_logic.eP 
                                          (dk_logic.ebP (_p_L_mem l x))) ->
                                    dk_logic.eP 
                                      (dk_logic.ebP (_p_L_mem l2 x))) =>
                                   (__S_1_1_1_5_2_1_1_2_2_LEMMA:
                                    (HH:(dk_logic.eP 
                                           (dk_logic.ebP 
                                              (_p_Col_contains x a))) ->
                                     dk_logic.eP 
                                       (dk_logic.ebP 
                                          (_p_Col_contains x 
                                             (_p_Col_add 
                                                (basics.fst _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) a)))) =>
                                    zen.nnpp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._bar__bar_ 
                                               (_p_L_mem l2 x) 
                                               (_p_Col_contains x 
                                                  (_p_Col_add 
                                                     (basics.fst _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)) a))))) 
                                      (v_Vzb:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._bar__bar_ 
                                                      (_p_L_mem l2 x) 
                                                      (_p_Col_contains x 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem l x))) 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem l2 x))) 
                                         (v_Vac:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem l x))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_Col_contains x a))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_Col_contains x 
                                                     (_p_Col_add 
                                                        (basics.fst _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        a)))) 
                                            (v_Vbc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_Col_contains x a))))) =>
                                             focal.zenon_focal_or 
                                               (_p_L_mem l x) 
                                               (_p_Col_contains x a) 
                                               (v_Vcc:
                                                (zen.proof 
                                                   (zen.or 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_L_mem l x))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_Col_contains 
                                                               x a))))) =>
                                                zen.Ror 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_Col_contains x a))) 
                                                  (v_Vdc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_L_mem l x)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem l x))) 
                                                     v_Vdc v_Vac) 
                                                  (v_Vec:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_Col_contains 
                                                               x a)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_Col_contains 
                                                              x a))) v_Vec 
                                                     v_Vbc) v_Vcc) H) 
                                            (v_Vfc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains x 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))) =>
                                             focal.zenon_focal_notor 
                                               (_p_L_mem l2 x) 
                                               (_p_Col_contains x 
                                                  (_p_Col_add 
                                                     (basics.fst _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)) a)) 
                                               (v_Vgc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.or 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l2 x))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_Col_contains 
                                                                  x 
                                                                  (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a))))))) =>
                                                zen.Rnotor 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l2 x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_Col_contains x 
                                                           (_p_Col_add 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) a)))) 
                                                  (v_Vhc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l2 x))))) =>
                                                   v_Vic:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_Col_contains 
                                                                  x 
                                                                  (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_Col_contains 
                                                              x 
                                                              (_p_Col_add 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) a)))) 
                                                     v_Vfc v_Vic) v_Vgc) 
                                               v_Vzb) 
                                            __S_1_1_1_5_2_1_1_2_2_LEMMA) 
                                         (v_Vjc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem l2 x)))) =>
                                          focal.zenon_focal_notor 
                                            (_p_L_mem l2 x) 
                                            (_p_Col_contains x 
                                               (_p_Col_add 
                                                  (basics.fst _p_Elt_T 
                                                     _p_It_T 
                                                     (_p_It_step_it it)) a)) 
                                            (v_Vgc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.or 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_L_mem l2 x))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_Col_contains 
                                                               x 
                                                               (_p_Col_add 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a))))))) =>
                                             zen.Rnotor 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_L_mem l2 x))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_Col_contains x 
                                                        (_p_Col_add 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) a)))) 
                                               (v_Vhc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_L_mem l2 x))))) =>
                                                v_Vic:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_Col_contains 
                                                               x 
                                                               (_p_Col_add 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l2 x))) 
                                                  v_Vjc v_Vhc) v_Vgc) v_Vzb) 
                                         __S_1_1_1_5_2_1_1_2_1_LEMMA)) 
                                     (HH:
                                      (dk_logic.eP 
                                         (dk_logic.ebP (_p_Col_contains x a))) =>
                                      zen.nnpp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_Col_contains x 
                                                 (_p_Col_add 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) a)))) 
                                        (v_Vzb:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_Col_contains x 
                                                        (_p_Col_add 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) a)))))) =>
                                         zen.Rall _p_Col_T 
                                           (v_Vac:(zen.term _p_Col_T) =>
                                            zen.forall _p_Elt_T 
                                              (v_Vbc:(zen.term _p_Elt_T) =>
                                               zen.forall _p_Elt_T 
                                                 (v_Vcc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vcc 
                                                             (_p_Col_add 
                                                                v_Vbc v_Vac)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (basics._equal_ 
                                                                _p_Elt_T 
                                                                v_Vcc v_Vbc) 
                                                             (_p_Col_contains 
                                                                v_Vcc v_Vac))))))) 
                                           a 
                                           (v_Vdc:
                                            (zen.proof 
                                               (zen.forall _p_Elt_T 
                                                  (v_Vbc:
                                                   (zen.term _p_Elt_T) =>
                                                   zen.forall _p_Elt_T 
                                                     (v_Vcc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vcc 
                                                                 (_p_Col_add 
                                                                    v_Vbc a)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (basics._equal_ 
                                                                    _p_Elt_T 
                                                                    v_Vcc 
                                                                    v_Vbc) 
                                                                 (_p_Col_contains 
                                                                    v_Vcc a)))))))) =>
                                            zen.Rall _p_Elt_T 
                                              (v_Vbc:(zen.term _p_Elt_T) =>
                                               zen.forall _p_Elt_T 
                                                 (v_Vcc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vcc 
                                                             (_p_Col_add 
                                                                v_Vbc a)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (basics._equal_ 
                                                                _p_Elt_T 
                                                                v_Vcc v_Vbc) 
                                                             (_p_Col_contains 
                                                                v_Vcc a)))))) 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) 
                                              (v_Vec:
                                               (zen.proof 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vcc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vcc 
                                                                 (_p_Col_add 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (basics._equal_ 
                                                                    _p_Elt_T 
                                                                    v_Vcc 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                 (_p_Col_contains 
                                                                    v_Vcc a))))))) =>
                                               zen.Rall _p_Elt_T 
                                                 (v_Vcc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vcc 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (basics._equal_ 
                                                                _p_Elt_T 
                                                                v_Vcc 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it))) 
                                                             (_p_Col_contains 
                                                                v_Vcc a))))) 
                                                 x 
                                                 (v_Vfc:
                                                  (zen.proof 
                                                     (zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 x 
                                                                 (_p_Col_add 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (basics._equal_ 
                                                                    _p_Elt_T 
                                                                    x 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                 (_p_Col_contains 
                                                                    x a)))))) =>
                                                  zen.Requiv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains x 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (basics._equal_ 
                                                                _p_Elt_T x 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it))) 
                                                             (_p_Col_contains 
                                                                x a)))) 
                                                    (v_Vzb0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    x 
                                                                    (
                                                                    _p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))))) =>
                                                     v_Vgc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._bar__bar_ 
                                                                    (
                                                                    basics.syntactic_equal 
                                                                    _p_Elt_T 
                                                                    x 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (
                                                                    _p_Col_contains 
                                                                    x a)))))) =>
                                                     focal.zenon_focal_notor 
                                                       (basics.syntactic_equal 
                                                          _p_Elt_T x 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it))) 
                                                       (_p_Col_contains x a) 
                                                       (v_Vhc:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.or 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (basics.syntactic_equal 
                                                                    _p_Elt_T 
                                                                    x 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_Col_contains 
                                                                    x a)))))) =>
                                                        zen.Rnotor 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (basics.syntactic_equal 
                                                                   _p_Elt_T 
                                                                   x 
                                                                   (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   x a))) 
                                                          (v_Vic:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (basics.syntactic_equal 
                                                                    _p_Elt_T 
                                                                    x 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                           v_Vjc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_Col_contains 
                                                                    x a))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_Col_contains 
                                                                    x a))) 
                                                             HH v_Vjc) v_Vhc) 
                                                       v_Vgc) 
                                                    (v_Vkc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 x 
                                                                 (_p_Col_add 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a))))) =>
                                                     v_Vlc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (basics.syntactic_equal 
                                                                    _p_Elt_T 
                                                                    x 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                 (_p_Col_contains 
                                                                    x a))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_Col_contains 
                                                                x 
                                                                (_p_Col_add 
                                                                   (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))) 
                                                       v_Vkc v_Vzb) v_Vfc) 
                                                 v_Vec) v_Vdc) 
                                           _p_Col_add_contains))) 
                                    (HH:
                                     (dk_logic.eP 
                                        (dk_logic.ebP (_p_L_mem l x))) =>
                                     (__S_1_1_1_5_2_1_1_2_1_1_LEMMA:
                                      (dk_logic.eP 
                                         (dk_logic.forall _p_Elt_T 
                                            (y:(cc.eT _p_Elt_T) =>
                                             dk_logic.not 
                                               (dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (basics._equal_ 
                                                        _p_Elt_T 
                                                        (basics.fst _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        y)) 
                                                  (dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (_p_L_mem l y)) 
                                                     (dk_logic.ebP 
                                                        (_p_L_mem l2 y))))))) =>
                                      (__S_1_1_1_5_2_1_1_2_1_2_LEMMA:
                                       (dk_logic.eP 
                                          (dk_logic.forall _p_Elt_T 
                                             (x0:(cc.eT _p_Elt_T) =>
                                              dk_logic.not 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (basics._equal_ 
                                                         _p_Elt_T 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         x0)) 
                                                   (dk_logic.imp 
                                                      (dk_logic.ebP 
                                                         (_p_L_mem l x0)) 
                                                      (dk_logic.ebP 
                                                         (_p_L_mem l2 x0))))))) =>
                                       zen.nnpp 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem l2 x))) 
                                         (v_Vzb:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem l2 x))))) =>
                                          zen.Rall _p_Elt_T 
                                            (v_Vac:(zen.term _p_Elt_T) =>
                                             zen.not 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           _p_Elt_T 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) v_Vac))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem l v_Vac))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem l2 v_Vac)))))) 
                                            x 
                                            (v_Vbc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               _p_Elt_T 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (_p_It_step_it 
                                                                    it)) x))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l x))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l2 x))))))) =>
                                             zen.Rnotimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._equal_ 
                                                        _p_Elt_T 
                                                        (basics.fst _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        x))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l2 x)))) 
                                               (v_Vcc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics.syntactic_equal 
                                                            _p_Elt_T 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) x)))) =>
                                                v_Vdc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l x))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l2 x)))))) =>
                                                zen.Rnotimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l x))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_L_mem l2 x))) 
                                                  (HH0:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_L_mem l x)))) =>
                                                   v_Vzb0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l2 x))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              _p_Elt_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) x))) 
                                                     v_Vcc XE) v_Vdc) v_Vbc) 
                                            __S_1_1_1_5_2_1_1_2_1_2_LEMMA)) 
                                        (zen.nnpp 
                                           (zen.forall _p_Elt_T 
                                              (v_Vzb:(zen.term _p_Elt_T) =>
                                               zen.not 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._equal_ 
                                                             _p_Elt_T 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) v_Vzb))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem l 
                                                                v_Vzb))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem l2 
                                                                v_Vzb))))))) 
                                           (v_Vac:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vzb:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.not 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    _p_Elt_T 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    v_Vzb))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_L_mem 
                                                                    l v_Vzb))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_L_mem 
                                                                    l2 v_Vzb))))))))) =>
                                            zen.Raxiom 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vzb:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.not 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics._equal_ 
                                                                _p_Elt_T 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) 
                                                                v_Vzb))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_L_mem l 
                                                                   v_Vzb))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_L_mem l2 
                                                                   v_Vzb))))))) 
                                              __S_1_1_1_5_2_1_1_2_1_1_LEMMA 
                                              v_Vac))) 
                                       (dk_builtins.magic_prove 
                                          (dk_logic.forall _p_Elt_T 
                                             (y:(cc.eT _p_Elt_T) =>
                                              dk_logic.not 
                                                (dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (basics._equal_ 
                                                         _p_Elt_T 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         y)) 
                                                   (dk_logic.imp 
                                                      (dk_logic.ebP 
                                                         (_p_L_mem l y)) 
                                                      (dk_logic.ebP 
                                                         (_p_L_mem l2 y)))))))))) 
                                (XE:
                                 (dk_logic.eP 
                                    (dk_logic.ebP 
                                       (basics._equal_ _p_Elt_T 
                                          (basics.fst _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) x))) =>
                                 zen.nnpp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains x 
                                            (_p_Col_add 
                                               (basics.fst _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it)) a)))) 
                                   (v_Vec:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_Col_contains x 
                                                   (_p_Col_add 
                                                      (basics.fst _p_Elt_T 
                                                         _p_It_T 
                                                         (_p_It_step_it it)) 
                                                      a)))))) =>
                                    focal.zenon_syntactic_equal _p_Elt_T 
                                      (basics.fst _p_Elt_T _p_It_T 
                                         (_p_It_step_it it)) x 
                                      (v_Vfc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_Elt_T 
                                                (basics.fst _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) x))) =>
                                       zen.Rall _p_Col_T 
                                         (v_Vgc:(zen.term _p_Col_T) =>
                                          zen.forall _p_Elt_T 
                                            (v_Vhc:(zen.term _p_Elt_T) =>
                                             zen.triangle 
                                               (focal.is_true 
                                                  (_p_Col_contains v_Vhc 
                                                     (_p_Col_add v_Vhc v_Vgc))))) 
                                         a 
                                         (v_Vic:
                                          (zen.proof 
                                             (zen.forall _p_Elt_T 
                                                (v_Vhc:(zen.term _p_Elt_T) =>
                                                 zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains v_Vhc 
                                                         (_p_Col_add v_Vhc a)))))) =>
                                          zen.Rall _p_Elt_T 
                                            (v_Vhc:(zen.term _p_Elt_T) =>
                                             zen.triangle 
                                               (focal.is_true 
                                                  (_p_Col_contains v_Vhc 
                                                     (_p_Col_add v_Vhc a)))) 
                                            x 
                                            (v_Vjc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains x 
                                                         (_p_Col_add x a))))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vkc:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vkc)) 
                                               (_p_Col_contains x 
                                                  (_p_Col_add x a)) 
                                               (_p_Col_contains x 
                                                  (_p_Col_add 
                                                     (basics.fst _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)) a)) 
                                               (v_Vlc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_Col_contains 
                                                               x 
                                                               (_p_Col_add x 
                                                                  a)) 
                                                            (_p_Col_contains 
                                                               x 
                                                               (_p_Col_add 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))))) =>
                                                zen.Rsubst _p_Elt_T 
                                                  (v_Vmc:
                                                   (zen.term _p_Elt_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_Col_contains 
                                                              v_Vmc 
                                                              (_p_Col_add x a)) 
                                                           (_p_Col_contains 
                                                              x 
                                                              (_p_Col_add 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) a))))) 
                                                  x x 
                                                  (v_Vnc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_Elt_T x x)))) =>
                                                   zen.Rnoteq _p_Elt_T x 
                                                     v_Vnc) 
                                                  (v_Vlc0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_Col_contains 
                                                                  x 
                                                                  (_p_Col_add 
                                                                    x a)) 
                                                               (_p_Col_contains 
                                                                  x 
                                                                  (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))))) =>
                                                   zen.Rsubst _p_Col_T 
                                                     (v_Voc:
                                                      (zen.term _p_Col_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_Col_contains 
                                                                 x v_Voc) 
                                                              (_p_Col_contains 
                                                                 x 
                                                                 (_p_Col_add 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a))))) 
                                                     (_p_Col_add x a) 
                                                     (_p_Col_add 
                                                        (basics.fst _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        a) 
                                                     (v_Vpc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_Col_T 
                                                                  (_p_Col_add 
                                                                    x a) 
                                                                  (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a))))) =>
                                                      zen.Rsubst _p_Elt_T 
                                                        (v_Vqc:
                                                         (zen.term _p_Elt_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_Col_T 
                                                                 (_p_Col_add 
                                                                    v_Vqc a) 
                                                                 (_p_Col_add 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))) 
                                                        x 
                                                        (basics.fst _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        (v_Vrc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_Elt_T 
                                                                    x 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) =>
                                                         zen.Reqsym _p_Elt_T 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) x 
                                                           v_Vfc v_Vrc) 
                                                        (v_Vsc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_Col_T 
                                                                    (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a) 
                                                                    (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a))))) =>
                                                         zen.Rsubst _p_Col_T 
                                                           (v_Vtc:
                                                            (zen.term 
                                                               _p_Col_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_Col_T 
                                                                    (
                                                                    _p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    v_Vtc) 
                                                                    (
                                                                    _p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))) 
                                                           a a 
                                                           (v_Vuc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_Col_T 
                                                                    a a)))) =>
                                                            zen.Rnoteq 
                                                              _p_Col_T a 
                                                              v_Vuc) 
                                                           (v_Vsc0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_Col_T 
                                                                    (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a) 
                                                                    (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a))))) =>
                                                            zen.Rnoteq 
                                                              _p_Col_T 
                                                              (_p_Col_add 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) a) 
                                                              v_Vsc0) v_Vsc) 
                                                        v_Vpc) 
                                                     (v_Vvc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_Col_contains 
                                                                    x 
                                                                    (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)) 
                                                                  (_p_Col_contains 
                                                                    x 
                                                                    (_p_Col_add 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) a)))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (_p_Col_contains x 
                                                           (_p_Col_add 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) a)) 
                                                        v_Vvc) v_Vlc0) v_Vlc) 
                                               (v_Vwc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_Col_contains x 
                                                            (_p_Col_add 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (_p_It_step_it 
                                                                    it)) a))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_Col_contains x 
                                                           (_p_Col_add 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) a)))) 
                                                  v_Vwc v_Vec) v_Vjc) v_Vic) 
                                         _p_Col_add_contains1) XE)))))) 
                      (H:
                       (dk_logic.eP 
                          (dk_logic.ebP 
                             (_p_Col_contains x 
                                (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                   _p_It_T _p_Col_add _p_It_has_next 
                                   _p_It_step_it 
                                   (IterTools__it_order _p_It_T 
                                      _p_It_measure_it) 
                                   abst_rec_call_decreases abst_wf_it_order 
                                   it a)))) =>
                       (__S_1_1_1_5_1_0_LEMMA:
                        (dk_logic.eP 
                           (dk_logic.ebP 
                              (_p_Col_contains x 
                                 (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                    _p_It_T _p_Col_add _p_It_has_next 
                                    _p_It_step_it 
                                    (IterTools__it_order _p_It_T 
                                       _p_It_measure_it) 
                                    abst_rec_call_decreases abst_wf_it_order 
                                    (basics.snd _p_Elt_T _p_It_T 
                                       (_p_It_step_it it)) 
                                    (_p_Col_add 
                                       (basics.fst _p_Elt_T _p_It_T 
                                          (_p_It_step_it it)) a))))) =>
                        (__S_1_1_1_5_1_1_LEMMA:
                         (XE:(dk_logic.eP 
                                (dk_logic.ebP 
                                   (basics._equal_ _p_Elt_T x 
                                      (basics.fst _p_Elt_T _p_It_T 
                                         (_p_It_step_it it))))) ->
                          dk_logic.eP (dk_logic.ebP (_p_L_mem l x))) =>
                         (__S_1_1_1_5_1_2_LEMMA:
                          (XE:(dk_logic.eP 
                                 (dk_logic.not 
                                    (dk_logic.ebP 
                                       (basics._equal_ _p_Elt_T x 
                                          (basics.fst _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)))))) ->
                           dk_logic.eP 
                             (dk_logic.ebP 
                                (basics._bar__bar_ (_p_L_mem l x) 
                                   (_p_Col_contains x a)))) =>
                          zen.nnpp 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem l x) 
                                     (_p_Col_contains x a)))) 
                            (v_Vzb:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ (_p_L_mem l x) 
                                            (_p_Col_contains x a)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_Elt_T x 
                                        (basics.fst _p_Elt_T _p_It_T 
                                           (_p_It_step_it it))))) 
                               (zen.triangle (focal.is_true (_p_L_mem l x))) 
                               (v_Vac:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics.syntactic_equal _p_Elt_T 
                                               x 
                                               (basics.fst _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it))))))) =>
                                zen.Rimply 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._equal_ _p_Elt_T x 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ (_p_L_mem l x) 
                                           (_p_Col_contains x a)))) 
                                  (v_Vbc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ _p_Elt_T x 
                                                     (basics.fst _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)))))))) =>
                                   zen.Rnotnot 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._equal_ _p_Elt_T x 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it))))) 
                                     (v_Vcc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics.syntactic_equal 
                                                  _p_Elt_T x 
                                                  (basics.fst _p_Elt_T 
                                                     _p_It_T 
                                                     (_p_It_step_it it)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (basics._equal_ _p_Elt_T x 
                                                 (basics.fst _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it))))) 
                                        v_Vcc v_Vac) v_Vbc) 
                                  (v_Vdc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._bar__bar_ 
                                               (_p_L_mem l x) 
                                               (_p_Col_contains x a))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics._bar__bar_ (_p_L_mem l x) 
                                              (_p_Col_contains x a)))) v_Vdc 
                                     v_Vzb) __S_1_1_1_5_1_2_LEMMA) 
                               (v_Vec:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem l x)))) =>
                                focal.zenon_focal_notor (_p_L_mem l x) 
                                  (_p_Col_contains x a) 
                                  (v_Vfc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true (_p_L_mem l x))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_Col_contains x a)))))) =>
                                   zen.Rnotor 
                                     (zen.triangle 
                                        (focal.is_true (_p_L_mem l x))) 
                                     (zen.triangle 
                                        (focal.is_true (_p_Col_contains x a))) 
                                     (v_Vgc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true (_p_L_mem l x))))) =>
                                      v_Vhc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_Col_contains x a))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true (_p_L_mem l x))) 
                                        v_Vec v_Vgc) v_Vfc) v_Vzb) 
                               __S_1_1_1_5_1_1_LEMMA)) 
                           (XE:
                            (dk_logic.eP 
                               (dk_logic.not 
                                  (dk_logic.ebP 
                                     (basics._equal_ _p_Elt_T x 
                                        (basics.fst _p_Elt_T _p_It_T 
                                           (_p_It_step_it it)))))) =>
                            (__S_1_1_1_5_1_2_1_LEMMA:
                             (dk_logic.eP 
                                (dk_logic.eqv (dk_logic.ebP (_p_L_mem l x)) 
                                   (dk_logic.ebP (_p_L_mem l2 x)))) =>
                             dk_builtins.magic_prove 
                               (dk_logic.ebP 
                                  (basics._bar__bar_ (_p_L_mem l x) 
                                     (_p_Col_contains x a)))) 
                              (dk_builtins.magic_prove 
                                 (dk_logic.eqv (dk_logic.ebP (_p_L_mem l x)) 
                                    (dk_logic.ebP (_p_L_mem l2 x)))))) 
                          (XE:
                           (dk_logic.eP 
                              (dk_logic.ebP 
                                 (basics._equal_ _p_Elt_T x 
                                    (basics.fst _p_Elt_T _p_It_T 
                                       (_p_It_step_it it))))) =>
                           zen.nnpp 
                             (zen.triangle (focal.is_true (_p_L_mem l x))) 
                             (v_Vfc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (_p_L_mem l x))))) =>
                              focal.zenon_syntactic_equal _p_Elt_T x 
                                (basics.fst _p_Elt_T _p_It_T 
                                   (_p_It_step_it it)) 
                                (v_Vgc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal _p_Elt_T x 
                                          (basics.fst _p_Elt_T _p_It_T 
                                             (_p_It_step_it it))))) =>
                                 focal.zenon_syntactic_equal 
                                   (dk_tuple.prod _p_Elt_T _p_It_T) 
                                   (_p_It_step_it it) 
                                   (dk_tuple.pair _p_Elt_T _p_It_T 
                                      (basics.fst _p_Elt_T _p_It_T 
                                         (_p_It_step_it it)) 
                                      (basics.snd _p_Elt_T _p_It_T 
                                         (_p_It_step_it it))) 
                                   (v_Vhc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal 
                                             (dk_tuple.prod _p_Elt_T _p_It_T) 
                                             (_p_It_step_it it) 
                                             (basics.pair _p_Elt_T _p_It_T 
                                                (basics.fst _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)) 
                                                (basics.snd _p_Elt_T _p_It_T 
                                                   (_p_It_step_it it)))))) =>
                                    zen.Rall _p_It_T 
                                      (v_Vic:(zen.term _p_It_T) =>
                                       zen.forall _p_It_T 
                                         (v_Vjc:(zen.term _p_It_T) =>
                                          zen.forall _p_Elt_T 
                                            (v_Vkc:(zen.term _p_Elt_T) =>
                                             zen.forall 
                                               (basics.list__t _p_Elt_T) 
                                               (v_Vlc:
                                                (zen.term 
                                                   (basics.list__t _p_Elt_T)) =>
                                                zen.forall _p_Col_T 
                                                  (v_Vmc:
                                                   (zen.term _p_Col_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model v_Vic 
                                                           v_Vmc v_Vlc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_It_has_next 
                                                                 v_Vic))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    v_Vic) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Vkc 
                                                                    v_Vjc)))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc)))))))))) 
                                      it 
                                      (v_Vnc:
                                       (zen.proof 
                                          (zen.forall _p_It_T 
                                             (v_Vjc:(zen.term _p_It_T) =>
                                              zen.forall _p_Elt_T 
                                                (v_Vkc:(zen.term _p_Elt_T) =>
                                                 zen.forall 
                                                   (basics.list__t _p_Elt_T) 
                                                   (v_Vlc:
                                                    (zen.term 
                                                       (basics.list__t 
                                                          _p_Elt_T)) =>
                                                    zen.forall _p_Col_T 
                                                      (v_Vmc:
                                                       (zen.term _p_Col_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model it 
                                                               v_Vmc v_Vlc)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_It_has_next 
                                                                    it))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (basics._equal_ 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Vkc 
                                                                    v_Vjc)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc))))))))))) =>
                                       zen.Rall _p_It_T 
                                         (v_Vjc:(zen.term _p_It_T) =>
                                          zen.forall _p_Elt_T 
                                            (v_Vkc:(zen.term _p_Elt_T) =>
                                             zen.forall 
                                               (basics.list__t _p_Elt_T) 
                                               (v_Vlc:
                                                (zen.term 
                                                   (basics.list__t _p_Elt_T)) =>
                                                zen.forall _p_Col_T 
                                                  (v_Vmc:
                                                   (zen.term _p_Col_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model it 
                                                           v_Vmc v_Vlc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_It_has_next 
                                                                 it))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Vkc 
                                                                    v_Vjc)))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc))))))))) 
                                         (basics.snd _p_Elt_T _p_It_T 
                                            (_p_It_step_it it)) 
                                         (v_Voc:
                                          (zen.proof 
                                             (zen.forall _p_Elt_T 
                                                (v_Vkc:(zen.term _p_Elt_T) =>
                                                 zen.forall 
                                                   (basics.list__t _p_Elt_T) 
                                                   (v_Vlc:
                                                    (zen.term 
                                                       (basics.list__t 
                                                          _p_Elt_T)) =>
                                                    zen.forall _p_Col_T 
                                                      (v_Vmc:
                                                       (zen.term _p_Col_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model it 
                                                               v_Vmc v_Vlc)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_It_has_next 
                                                                    it))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (basics._equal_ 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Vkc 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc)))))))))) =>
                                          zen.Rall _p_Elt_T 
                                            (v_Vkc:(zen.term _p_Elt_T) =>
                                             zen.forall 
                                               (basics.list__t _p_Elt_T) 
                                               (v_Vlc:
                                                (zen.term 
                                                   (basics.list__t _p_Elt_T)) =>
                                                zen.forall _p_Col_T 
                                                  (v_Vmc:
                                                   (zen.term _p_Col_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model it 
                                                           v_Vmc v_Vlc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_It_has_next 
                                                                 it))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Vkc 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc)))))))) 
                                            x 
                                            (v_Vpc:
                                             (zen.proof 
                                                (zen.forall 
                                                   (basics.list__t _p_Elt_T) 
                                                   (v_Vlc:
                                                    (zen.term 
                                                       (basics.list__t 
                                                          _p_Elt_T)) =>
                                                    zen.forall _p_Col_T 
                                                      (v_Vmc:
                                                       (zen.term _p_Col_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model it 
                                                               v_Vmc v_Vlc)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_It_has_next 
                                                                    it))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (basics._equal_ 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc x))))))))) =>
                                             zen.Rall 
                                               (basics.list__t _p_Elt_T) 
                                               (v_Vlc:
                                                (zen.term 
                                                   (basics.list__t _p_Elt_T)) =>
                                                zen.forall _p_Col_T 
                                                  (v_Vmc:
                                                   (zen.term _p_Col_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model it 
                                                           v_Vmc v_Vlc)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_It_has_next 
                                                                 it))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem 
                                                                    v_Vlc x))))))) 
                                               l 
                                               (v_Vqc:
                                                (zen.proof 
                                                   (zen.forall _p_Col_T 
                                                      (v_Vmc:
                                                       (zen.term _p_Col_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model it 
                                                               v_Vmc l)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_It_has_next 
                                                                    it))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (basics._equal_ 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l x)))))))) =>
                                                zen.Rall _p_Col_T 
                                                  (v_Vmc:
                                                   (zen.term _p_Col_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model it 
                                                           v_Vmc l)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_It_has_next 
                                                                 it))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem l 
                                                                    x)))))) 
                                                  c 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model it 
                                                               c l)) 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_It_has_next 
                                                                    it))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (basics._equal_ 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l x))))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (_p_It_model it c l)) 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_It_has_next 
                                                                 it))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem l 
                                                                    x))))) 
                                                     (v_Vsc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (_p_It_model 
                                                                  it c l)))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (_p_It_model it c 
                                                              l)) M v_Vsc) 
                                                     (v_Vtc:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_It_has_next 
                                                                    it))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (basics._equal_ 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l x)))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_It_has_next 
                                                                 it))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem l 
                                                                    x)))) 
                                                        (v_Vuc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_It_has_next 
                                                                    it))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_It_has_next 
                                                                    it))) N 
                                                           v_Vuc) 
                                                        (v_Vvc:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (basics._equal_ 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l x))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._equal_ 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_L_mem l 
                                                                    x))) 
                                                           (v_Vwc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (basics.syntactic_equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))))) =>
                                                            focal.zenon_not_syntactic_equal 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (basics.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T x 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it))) 
                                                              (v_Vxc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                               zen.Rsubst 
                                                                 (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                 (v_Vyc:
                                                                  (zen.term 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T)) =>
                                                                  zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    v_Vyc 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))) 
                                                                 (_p_It_step_it 
                                                                    it) 
                                                                 (_p_It_step_it 
                                                                    it) 
                                                                 (v_Vzc:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                                  zen.Rcut 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (
                                                                    v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it)))) =>
                                                                    zen.Rsubst 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (v_Vbd:
                                                                    (zen.term 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T)) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    v_Vbd 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (v_Vzc0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                                    zen.Rnoteq 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    v_Vzc0) 
                                                                    (v_Vad0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it)))) =>
                                                                    zen.Rsubst 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (v_Vcd:
                                                                    (zen.term 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T)) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) v_Vcd)) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (v_Vzc0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                                    zen.Rnoteq 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    v_Vzc0) 
                                                                    (v_Vad1:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    v_Vad1 
                                                                    v_Vzc) 
                                                                    v_Vad0) 
                                                                    v_Vad) 
                                                                    (
                                                                    v_Vzc0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                                    zen.Rnoteq 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    v_Vzc0)) 
                                                                 (v_Vhc0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) =>
                                                                  zen.Rsubst 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    v_Vcd:
                                                                    (
                                                                    zen.term 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T)) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) v_Vcd)) 
                                                                    (
                                                                    basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (
                                                                    basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (
                                                                    v_Vdd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_Elt_T 
                                                                    (v_Ved:
                                                                    (zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Ved 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) x 
                                                                    (v_Vfd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_Elt_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) x)))) =>
                                                                    zen.Reqsym 
                                                                    _p_Elt_T 
                                                                    x 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    v_Vgc 
                                                                    v_Vfd) 
                                                                    (v_Vgd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                                    zen.Rsubst 
                                                                    _p_It_T 
                                                                    (v_Vhd:
                                                                    (zen.term 
                                                                    _p_It_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x v_Vhd) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (v_Vid:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_It_T 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_It_T 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    v_Vid) 
                                                                    (v_Vgd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                                    zen.Rnoteq 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    v_Vgd0) 
                                                                    v_Vgd) 
                                                                    v_Vdd) 
                                                                    (
                                                                    v_Vjd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    x 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))) 
                                                                    v_Vjd 
                                                                    v_Vxc) 
                                                                    v_Vhc0) 
                                                                 v_Vhc) v_Vwc) 
                                                           (v_Vkd:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l x)))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_L_mem 
                                                                    l x))) 
                                                              v_Vkd v_Vfc) 
                                                           v_Vvc) v_Vtc) 
                                                     v_Vrc) v_Vqc) v_Vpc) 
                                            v_Voc) v_Vnc) _p_It_model_step) 
                                   __S_1_1_1_0_LEMMA) XE))) 
                         (zen.nnpp 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains x 
                                     (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                        _p_It_T _p_Col_add _p_It_has_next 
                                        _p_It_step_it 
                                        (IterTools__it_order _p_It_T 
                                           _p_It_measure_it) 
                                        abst_rec_call_decreases 
                                        abst_wf_it_order 
                                        (basics.snd _p_Elt_T _p_It_T 
                                           (_p_It_step_it it)) 
                                        (_p_Col_add 
                                           (basics.fst _p_Elt_T _p_It_T 
                                              (_p_It_step_it it)) a))))) 
                            (v_Vcc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains x 
                                            (IterTools__copy_aux _p_Col_T 
                                               _p_Elt_T _p_It_T _p_Col_add 
                                               _p_It_has_next _p_It_step_it 
                                               (IterTools__it_order _p_It_T 
                                                  _p_It_measure_it) 
                                               abst_rec_call_decreases 
                                               abst_wf_it_order 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it)) 
                                               (_p_Col_add 
                                                  (basics.fst _p_Elt_T 
                                                     _p_It_T 
                                                     (_p_It_step_it it)) a))))))) =>
                             focal.zenon_syntactic_equal _p_Col_T 
                               (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                  _p_It_T _p_Col_add _p_It_has_next 
                                  _p_It_step_it 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it) 
                                  abst_rec_call_decreases abst_wf_it_order 
                                  it a) 
                               (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                  _p_It_T _p_Col_add _p_It_has_next 
                                  _p_It_step_it 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it) 
                                  abst_rec_call_decreases abst_wf_it_order 
                                  (basics.snd _p_Elt_T _p_It_T 
                                     (_p_It_step_it it)) 
                                  (_p_Col_add 
                                     (basics.fst _p_Elt_T _p_It_T 
                                        (_p_It_step_it it)) a)) 
                               (v_Vdc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_Col_T 
                                         (IterTools__copy_aux _p_Col_T 
                                            _p_Elt_T _p_It_T _p_Col_add 
                                            _p_It_has_next _p_It_step_it 
                                            (IterTools__it_order _p_It_T 
                                               _p_It_measure_it) 
                                            abst_rec_call_decreases 
                                            abst_wf_it_order it a) 
                                         (IterTools__copy_aux _p_Col_T 
                                            _p_Elt_T _p_It_T _p_Col_add 
                                            _p_It_has_next _p_It_step_it 
                                            (IterTools__it_order _p_It_T 
                                               _p_It_measure_it) 
                                            abst_rec_call_decreases 
                                            abst_wf_it_order 
                                            (basics.snd _p_Elt_T _p_It_T 
                                               (_p_It_step_it it)) 
                                            (_p_Col_add 
                                               (basics.fst _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it)) a))))) =>
                                zen.Rsubst basics.bool__t 
                                  (v_Vec:(zen.term basics.bool__t) =>
                                   zen.triangle (focal.is_true v_Vec)) 
                                  (_p_Col_contains x 
                                     (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                        _p_It_T _p_Col_add _p_It_has_next 
                                        _p_It_step_it 
                                        (IterTools__it_order _p_It_T 
                                           _p_It_measure_it) 
                                        abst_rec_call_decreases 
                                        abst_wf_it_order it a)) 
                                  (_p_Col_contains x 
                                     (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                        _p_It_T _p_Col_add _p_It_has_next 
                                        _p_It_step_it 
                                        (IterTools__it_order _p_It_T 
                                           _p_It_measure_it) 
                                        abst_rec_call_decreases 
                                        abst_wf_it_order 
                                        (basics.snd _p_Elt_T _p_It_T 
                                           (_p_It_step_it it)) 
                                        (_p_Col_add 
                                           (basics.fst _p_Elt_T _p_It_T 
                                              (_p_It_step_it it)) a))) 
                                  (v_Vfc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_Col_contains x 
                                                  (IterTools__copy_aux 
                                                     _p_Col_T _p_Elt_T 
                                                     _p_It_T _p_Col_add 
                                                     _p_It_has_next 
                                                     _p_It_step_it 
                                                     (IterTools__it_order 
                                                        _p_It_T 
                                                        _p_It_measure_it) 
                                                     abst_rec_call_decreases 
                                                     abst_wf_it_order it a)) 
                                               (_p_Col_contains x 
                                                  (IterTools__copy_aux 
                                                     _p_Col_T _p_Elt_T 
                                                     _p_It_T _p_Col_add 
                                                     _p_It_has_next 
                                                     _p_It_step_it 
                                                     (IterTools__it_order 
                                                        _p_It_T 
                                                        _p_It_measure_it) 
                                                     abst_rec_call_decreases 
                                                     abst_wf_it_order 
                                                     (basics.snd _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)) 
                                                     (_p_Col_add 
                                                        (basics.fst _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        a))))))) =>
                                   zen.Rsubst _p_Elt_T 
                                     (v_Vgc:(zen.term _p_Elt_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_Col_contains v_Vgc 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order it a)) 
                                              (_p_Col_contains x 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order 
                                                    (basics.snd _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) 
                                                    (_p_Col_add 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       a)))))) x x 
                                     (v_Vhc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_Elt_T x x)))) =>
                                      zen.Rnoteq _p_Elt_T x v_Vhc) 
                                     (v_Vfc0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_Col_contains x 
                                                     (IterTools__copy_aux 
                                                        _p_Col_T _p_Elt_T 
                                                        _p_It_T _p_Col_add 
                                                        _p_It_has_next 
                                                        _p_It_step_it 
                                                        (IterTools__it_order 
                                                           _p_It_T 
                                                           _p_It_measure_it) 
                                                        abst_rec_call_decreases 
                                                        abst_wf_it_order it a)) 
                                                  (_p_Col_contains x 
                                                     (IterTools__copy_aux 
                                                        _p_Col_T _p_Elt_T 
                                                        _p_It_T _p_Col_add 
                                                        _p_It_has_next 
                                                        _p_It_step_it 
                                                        (IterTools__it_order 
                                                           _p_It_T 
                                                           _p_It_measure_it) 
                                                        abst_rec_call_decreases 
                                                        abst_wf_it_order 
                                                        (basics.snd _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        (_p_Col_add 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) a))))))) =>
                                      zen.Rsubst _p_Col_T 
                                        (v_Vic:(zen.term _p_Col_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_Col_contains x v_Vic) 
                                                 (_p_Col_contains x 
                                                    (IterTools__copy_aux 
                                                       _p_Col_T _p_Elt_T 
                                                       _p_It_T _p_Col_add 
                                                       _p_It_has_next 
                                                       _p_It_step_it 
                                                       (IterTools__it_order 
                                                          _p_It_T 
                                                          _p_It_measure_it) 
                                                       abst_rec_call_decreases 
                                                       abst_wf_it_order 
                                                       (basics.snd _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       (_p_Col_add 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) a)))))) 
                                        (IterTools__copy_aux _p_Col_T 
                                           _p_Elt_T _p_It_T _p_Col_add 
                                           _p_It_has_next _p_It_step_it 
                                           (IterTools__it_order _p_It_T 
                                              _p_It_measure_it) 
                                           abst_rec_call_decreases 
                                           abst_wf_it_order it a) 
                                        (IterTools__copy_aux _p_Col_T 
                                           _p_Elt_T _p_It_T _p_Col_add 
                                           _p_It_has_next _p_It_step_it 
                                           (IterTools__it_order _p_It_T 
                                              _p_It_measure_it) 
                                           abst_rec_call_decreases 
                                           abst_wf_it_order 
                                           (basics.snd _p_Elt_T _p_It_T 
                                              (_p_It_step_it it)) 
                                           (_p_Col_add 
                                              (basics.fst _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) a)) 
                                        (v_Vjc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_Col_T 
                                                     (IterTools__copy_aux 
                                                        _p_Col_T _p_Elt_T 
                                                        _p_It_T _p_Col_add 
                                                        _p_It_has_next 
                                                        _p_It_step_it 
                                                        (IterTools__it_order 
                                                           _p_It_T 
                                                           _p_It_measure_it) 
                                                        abst_rec_call_decreases 
                                                        abst_wf_it_order it a) 
                                                     (IterTools__copy_aux 
                                                        _p_Col_T _p_Elt_T 
                                                        _p_It_T _p_Col_add 
                                                        _p_It_has_next 
                                                        _p_It_step_it 
                                                        (IterTools__it_order 
                                                           _p_It_T 
                                                           _p_It_measure_it) 
                                                        abst_rec_call_decreases 
                                                        abst_wf_it_order 
                                                        (basics.snd _p_Elt_T 
                                                           _p_It_T 
                                                           (_p_It_step_it it)) 
                                                        (_p_Col_add 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) a)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_Col_T 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order it a) 
                                                 (IterTools__copy_aux 
                                                    _p_Col_T _p_Elt_T 
                                                    _p_It_T _p_Col_add 
                                                    _p_It_has_next 
                                                    _p_It_step_it 
                                                    (IterTools__it_order 
                                                       _p_It_T 
                                                       _p_It_measure_it) 
                                                    abst_rec_call_decreases 
                                                    abst_wf_it_order 
                                                    (basics.snd _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) 
                                                    (_p_Col_add 
                                                       (basics.fst _p_Elt_T 
                                                          _p_It_T 
                                                          (_p_It_step_it it)) 
                                                       a)))) v_Vdc v_Vjc) 
                                        (v_Vkc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_Col_contains x 
                                                        (IterTools__copy_aux 
                                                           _p_Col_T _p_Elt_T 
                                                           _p_It_T 
                                                           _p_Col_add 
                                                           _p_It_has_next 
                                                           _p_It_step_it 
                                                           (IterTools__it_order 
                                                              _p_It_T 
                                                              _p_It_measure_it) 
                                                           abst_rec_call_decreases 
                                                           abst_wf_it_order 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) 
                                                           (_p_Col_add 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) a))) 
                                                     (_p_Col_contains x 
                                                        (IterTools__copy_aux 
                                                           _p_Col_T _p_Elt_T 
                                                           _p_It_T 
                                                           _p_Col_add 
                                                           _p_It_has_next 
                                                           _p_It_step_it 
                                                           (IterTools__it_order 
                                                              _p_It_T 
                                                              _p_It_measure_it) 
                                                           abst_rec_call_decreases 
                                                           abst_wf_it_order 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it)) 
                                                           (_p_Col_add 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (_p_It_step_it 
                                                                    it)) a))))))) =>
                                         zen.Rnoteq basics.bool__t 
                                           (_p_Col_contains x 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order 
                                                 (basics.snd _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) 
                                                 (_p_Col_add 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) a))) 
                                           v_Vkc) v_Vfc0) v_Vfc) 
                                  (v_Vlc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_Col_contains x 
                                               (IterTools__copy_aux _p_Col_T 
                                                  _p_Elt_T _p_It_T 
                                                  _p_Col_add _p_It_has_next 
                                                  _p_It_step_it 
                                                  (IterTools__it_order 
                                                     _p_It_T _p_It_measure_it) 
                                                  abst_rec_call_decreases 
                                                  abst_wf_it_order 
                                                  (basics.snd _p_Elt_T 
                                                     _p_It_T 
                                                     (_p_It_step_it it)) 
                                                  (_p_Col_add 
                                                     (basics.fst _p_Elt_T 
                                                        _p_It_T 
                                                        (_p_It_step_it it)) a)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_Col_contains x 
                                              (IterTools__copy_aux _p_Col_T 
                                                 _p_Elt_T _p_It_T _p_Col_add 
                                                 _p_It_has_next 
                                                 _p_It_step_it 
                                                 (IterTools__it_order 
                                                    _p_It_T _p_It_measure_it) 
                                                 abst_rec_call_decreases 
                                                 abst_wf_it_order 
                                                 (basics.snd _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) 
                                                 (_p_Col_add 
                                                    (basics.fst _p_Elt_T 
                                                       _p_It_T 
                                                       (_p_It_step_it it)) a))))) 
                                     v_Vlc v_Vcc) H) __S_1_1_1_3_LEMMA)))) 
                     (zen.nnpp 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_Col_contains x 
                                    (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                       _p_It_T _p_Col_add _p_It_has_next 
                                       _p_It_step_it 
                                       (IterTools__it_order _p_It_T 
                                          _p_It_measure_it) 
                                       abst_rec_call_decreases 
                                       abst_wf_it_order 
                                       (basics.snd _p_Elt_T _p_It_T 
                                          (_p_It_step_it it)) 
                                       (_p_Col_add 
                                          (basics.fst _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) a))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._bar__bar_ (_p_L_mem l2 x) 
                                    (_p_Col_contains x 
                                       (_p_Col_add 
                                          (basics.fst _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) a)))))) 
                        (v_Vzb:
                         (zen.proof 
                            (zen.not 
                               (zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_Col_contains x 
                                           (IterTools__copy_aux _p_Col_T 
                                              _p_Elt_T _p_It_T _p_Col_add 
                                              _p_It_has_next _p_It_step_it 
                                              (IterTools__it_order _p_It_T 
                                                 _p_It_measure_it) 
                                              abst_rec_call_decreases 
                                              abst_wf_it_order 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) 
                                              (_p_Col_add 
                                                 (basics.fst _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) a))))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._bar__bar_ (_p_L_mem l2 x) 
                                           (_p_Col_contains x 
                                              (_p_Col_add 
                                                 (basics.fst _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) a)))))))) =>
                         zen.Rall _p_Col_T 
                           (v_Vac:(zen.term _p_Col_T) =>
                            zen.forall _p_Col_T 
                              (v_Vbc:(zen.term _p_Col_T) =>
                               zen.forall (basics.list__t _p_Elt_T) 
                                 (v_Vcc:
                                  (zen.term (basics.list__t _p_Elt_T)) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (_p_It_model 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) v_Vbc v_Vcc)) 
                                    (zen.imp 
                                       (zen.forall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      v_Vac))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      v_Vbc))))) 
                                       (zen.forall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order 
                                                         (basics.snd 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         v_Vac)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._bar__bar_ 
                                                      (_p_L_mem v_Vcc v_Vdc) 
                                                      (_p_Col_contains v_Vdc 
                                                         v_Vac)))))))))) 
                           (_p_Col_add 
                              (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) 
                              a) 
                           (v_Vec:
                            (zen.proof 
                               (zen.forall _p_Col_T 
                                  (v_Vbc:(zen.term _p_Col_T) =>
                                   zen.forall (basics.list__t _p_Elt_T) 
                                     (v_Vcc:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (_p_It_model 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) v_Vbc 
                                              v_Vcc)) 
                                        (zen.imp 
                                           (zen.forall _p_Elt_T 
                                              (v_Vdc:(zen.term _p_Elt_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vdc 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vdc v_Vbc))))) 
                                           (zen.forall _p_Elt_T 
                                              (v_Vdc:(zen.term _p_Elt_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vdc 
                                                          (IterTools__copy_aux 
                                                             _p_Col_T 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             _p_Col_add 
                                                             _p_It_has_next 
                                                             _p_It_step_it 
                                                             (IterTools__it_order 
                                                                _p_It_T 
                                                                _p_It_measure_it) 
                                                             abst_rec_call_decreases 
                                                             abst_wf_it_order 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._bar__bar_ 
                                                          (_p_L_mem v_Vcc 
                                                             v_Vdc) 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a)))))))))))) =>
                            zen.Rall _p_Col_T 
                              (v_Vbc:(zen.term _p_Col_T) =>
                               zen.forall (basics.list__t _p_Elt_T) 
                                 (v_Vcc:
                                  (zen.term (basics.list__t _p_Elt_T)) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (_p_It_model 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) v_Vbc v_Vcc)) 
                                    (zen.imp 
                                       (zen.forall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      (_p_Col_add 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      v_Vbc))))) 
                                       (zen.forall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order 
                                                         (basics.snd 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._bar__bar_ 
                                                      (_p_L_mem v_Vcc v_Vdc) 
                                                      (_p_Col_contains v_Vdc 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a)))))))))) 
                              c 
                              (v_Vfc:
                               (zen.proof 
                                  (zen.forall (basics.list__t _p_Elt_T) 
                                     (v_Vcc:
                                      (zen.term (basics.list__t _p_Elt_T)) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (_p_It_model 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) c v_Vcc)) 
                                        (zen.imp 
                                           (zen.forall _p_Elt_T 
                                              (v_Vgc:(zen.term _p_Elt_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vgc 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vgc c))))) 
                                           (zen.forall _p_Elt_T 
                                              (v_Vdc:(zen.term _p_Elt_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vdc 
                                                          (IterTools__copy_aux 
                                                             _p_Col_T 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             _p_Col_add 
                                                             _p_It_has_next 
                                                             _p_It_step_it 
                                                             (IterTools__it_order 
                                                                _p_It_T 
                                                                _p_It_measure_it) 
                                                             abst_rec_call_decreases 
                                                             abst_wf_it_order 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._bar__bar_ 
                                                          (_p_L_mem v_Vcc 
                                                             v_Vdc) 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))))))))) =>
                               zen.Rall (basics.list__t _p_Elt_T) 
                                 (v_Vcc:
                                  (zen.term (basics.list__t _p_Elt_T)) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (_p_It_model 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) c v_Vcc)) 
                                    (zen.imp 
                                       (zen.forall _p_Elt_T 
                                          (v_Vgc:(zen.term _p_Elt_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vgc 
                                                      (_p_Col_add 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vgc c))))) 
                                       (zen.forall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order 
                                                         (basics.snd 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._bar__bar_ 
                                                      (_p_L_mem v_Vcc v_Vdc) 
                                                      (_p_Col_contains v_Vdc 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))))))) 
                                 l2 
                                 (v_Vhc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (_p_It_model 
                                              (basics.snd _p_Elt_T _p_It_T 
                                                 (_p_It_step_it it)) c l2)) 
                                        (zen.imp 
                                           (zen.forall _p_Elt_T 
                                              (v_Vgc:(zen.term _p_Elt_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vgc 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vgc c))))) 
                                           (zen.forall _p_Elt_T 
                                              (v_Vdc:(zen.term _p_Elt_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vdc 
                                                          (IterTools__copy_aux 
                                                             _p_Col_T 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             _p_Col_add 
                                                             _p_It_has_next 
                                                             _p_It_step_it 
                                                             (IterTools__it_order 
                                                                _p_It_T 
                                                                _p_It_measure_it) 
                                                             abst_rec_call_decreases 
                                                             abst_wf_it_order 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._bar__bar_ 
                                                          (_p_L_mem l2 v_Vdc) 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a)))))))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (_p_It_model 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) c l2)) 
                                    (zen.imp 
                                       (zen.forall _p_Elt_T 
                                          (v_Vgc:(zen.term _p_Elt_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vgc 
                                                      (_p_Col_add 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vgc c))))) 
                                       (zen.forall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order 
                                                         (basics.snd 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._bar__bar_ 
                                                      (_p_L_mem l2 v_Vdc) 
                                                      (_p_Col_contains v_Vdc 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a)))))))) 
                                    (v_Vic:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (_p_It_model 
                                                 (basics.snd _p_Elt_T 
                                                    _p_It_T 
                                                    (_p_It_step_it it)) c l2)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (_p_It_model 
                                             (basics.snd _p_Elt_T _p_It_T 
                                                (_p_It_step_it it)) c l2)) 
                                       M2 v_Vic) 
                                    (v_Vjc:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.forall _p_Elt_T 
                                              (v_Vgc:(zen.term _p_Elt_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vgc 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vgc c))))) 
                                           (zen.forall _p_Elt_T 
                                              (v_Vdc:(zen.term _p_Elt_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vdc 
                                                          (IterTools__copy_aux 
                                                             _p_Col_T 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             _p_Col_add 
                                                             _p_It_has_next 
                                                             _p_It_step_it 
                                                             (IterTools__it_order 
                                                                _p_It_T 
                                                                _p_It_measure_it) 
                                                             abst_rec_call_decreases 
                                                             abst_wf_it_order 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._bar__bar_ 
                                                          (_p_L_mem l2 v_Vdc) 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))))))) =>
                                     zen.Rimply 
                                       (zen.forall _p_Elt_T 
                                          (v_Vgc:(zen.term _p_Elt_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vgc 
                                                      (_p_Col_add 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vgc c))))) 
                                       (zen.forall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order 
                                                         (basics.snd 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._bar__bar_ 
                                                      (_p_L_mem l2 v_Vdc) 
                                                      (_p_Col_contains v_Vdc 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))))) 
                                       (v_Vkc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vgc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vgc 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vgc c))))))) =>
                                        zen.Raxiom 
                                          (zen.forall _p_Elt_T 
                                             (v_Vgc:(zen.term _p_Elt_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains v_Vgc 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains v_Vgc 
                                                         c))))) 
                                          __S_1_1_1_4_LEMMA v_Vkc) 
                                       (v_Vlc:
                                        (zen.proof 
                                           (zen.forall _p_Elt_T 
                                              (v_Vdc:(zen.term _p_Elt_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vdc 
                                                          (IterTools__copy_aux 
                                                             _p_Col_T 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             _p_Col_add 
                                                             _p_It_has_next 
                                                             _p_It_step_it 
                                                             (IterTools__it_order 
                                                                _p_It_T 
                                                                _p_It_measure_it) 
                                                             abst_rec_call_decreases 
                                                             abst_wf_it_order 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._bar__bar_ 
                                                          (_p_L_mem l2 v_Vdc) 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a)))))))) =>
                                        zen.Rall _p_Elt_T 
                                          (v_Vdc:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vdc 
                                                      (IterTools__copy_aux 
                                                         _p_Col_T _p_Elt_T 
                                                         _p_It_T _p_Col_add 
                                                         _p_It_has_next 
                                                         _p_It_step_it 
                                                         (IterTools__it_order 
                                                            _p_It_T 
                                                            _p_It_measure_it) 
                                                         abst_rec_call_decreases 
                                                         abst_wf_it_order 
                                                         (basics.snd 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._bar__bar_ 
                                                      (_p_L_mem l2 v_Vdc) 
                                                      (_p_Col_contains v_Vdc 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a)))))) 
                                          x 
                                          (v_Vmc:
                                           (zen.proof 
                                              (zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains x 
                                                          (IterTools__copy_aux 
                                                             _p_Col_T 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             _p_Col_add 
                                                             _p_It_has_next 
                                                             _p_It_step_it 
                                                             (IterTools__it_order 
                                                                _p_It_T 
                                                                _p_It_measure_it) 
                                                             abst_rec_call_decreases 
                                                             abst_wf_it_order 
                                                             (basics.snd 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._bar__bar_ 
                                                          (_p_L_mem l2 x) 
                                                          (_p_Col_contains x 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a))))))) =>
                                           zen.Raxiom 
                                             (zen.eqv 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains x 
                                                         (IterTools__copy_aux 
                                                            _p_Col_T 
                                                            _p_Elt_T _p_It_T 
                                                            _p_Col_add 
                                                            _p_It_has_next 
                                                            _p_It_step_it 
                                                            (IterTools__it_order 
                                                               _p_It_T 
                                                               _p_It_measure_it) 
                                                            abst_rec_call_decreases 
                                                            abst_wf_it_order 
                                                            (basics.snd 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) 
                                                            (_p_Col_add 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (_p_It_step_it 
                                                                    it)) a))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._bar__bar_ 
                                                         (_p_L_mem l2 x) 
                                                         (_p_Col_contains x 
                                                            (_p_Col_add 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (_p_It_step_it 
                                                                    it)) a)))))) 
                                             v_Vmc v_Vzb) v_Vlc) v_Vjc) v_Vhc) 
                                 v_Vfc) v_Vec) __S_1_1_1_2_LEMMA)))) 
                 (y:(cc.eT _p_Elt_T) =>
                  A2:
                  (dk_logic.eP 
                     (dk_logic.ebP 
                        (_p_Col_contains y 
                           (_p_Col_add 
                              (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) 
                              a)))) =>
                  (__S_1_1_1_4_1_LEMMA:
                   (YE:(dk_logic.eP 
                          (dk_logic.ebP 
                             (basics._equal_ _p_Elt_T 
                                (basics.fst _p_Elt_T _p_It_T 
                                   (_p_It_step_it it)) y))) ->
                    dk_logic.eP (dk_logic.ebP (_p_Col_contains y c))) =>
                   (__S_1_1_1_4_2_LEMMA:
                    (YE:(dk_logic.eP 
                           (dk_logic.not 
                              (dk_logic.ebP 
                                 (basics._equal_ _p_Elt_T 
                                    (basics.fst _p_Elt_T _p_It_T 
                                       (_p_It_step_it it)) y)))) ->
                     dk_logic.eP (dk_logic.ebP (_p_Col_contains y c))) =>
                    zen.nnpp 
                      (zen.triangle (focal.is_true (_p_Col_contains y c))) 
                      (v_Vzb:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_Col_contains y c))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._equal_ _p_Elt_T 
                                  (basics.fst _p_Elt_T _p_It_T 
                                     (_p_It_step_it it)) y))) 
                         (zen.triangle (focal.is_true (_p_Col_contains y c))) 
                         (v_Vac:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal _p_Elt_T 
                                         (basics.fst _p_Elt_T _p_It_T 
                                            (_p_It_step_it it)) y))))) =>
                          zen.Rimply 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_Elt_T 
                                        (basics.fst _p_Elt_T _p_It_T 
                                           (_p_It_step_it it)) y)))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains y c))) 
                            (v_Vbc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ _p_Elt_T 
                                               (basics.fst _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it)) y)))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._equal_ _p_Elt_T 
                                        (basics.fst _p_Elt_T _p_It_T 
                                           (_p_It_step_it it)) y))) 
                               (v_Vcc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics.syntactic_equal _p_Elt_T 
                                            (basics.fst _p_Elt_T _p_It_T 
                                               (_p_It_step_it it)) y)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ _p_Elt_T 
                                           (basics.fst _p_Elt_T _p_It_T 
                                              (_p_It_step_it it)) y))) v_Vcc 
                                  v_Vac) v_Vbc) 
                            (v_Vdc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_Col_contains y c)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_Col_contains y c))) 
                               v_Vdc v_Vzb) __S_1_1_1_4_2_LEMMA) 
                         (v_Vdc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_Col_contains y c)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains y c))) v_Vdc 
                            v_Vzb) __S_1_1_1_4_1_LEMMA)) 
                     (YE:
                      (dk_logic.eP 
                         (dk_logic.not 
                            (dk_logic.ebP 
                               (basics._equal_ _p_Elt_T 
                                  (basics.fst _p_Elt_T _p_It_T 
                                     (_p_It_step_it it)) y)))) =>
                      zen.nnpp 
                        (zen.triangle (focal.is_true (_p_Col_contains y c))) 
                        (v_Vzb:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (_p_Col_contains y c))))) =>
                         zen.Rall _p_Elt_T 
                           (v_Vac:(zen.term _p_Elt_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains v_Vac a))) 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains v_Vac c)))) 
                           y 
                           (v_Vbc:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_Col_contains y a))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_Col_contains y c))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains y a))) 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains y c))) 
                              (v_Vcc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true (_p_Col_contains y a))))) =>
                               zen.Rall _p_Col_T 
                                 (v_Vdc:(zen.term _p_Col_T) =>
                                  zen.forall _p_Elt_T 
                                    (v_Vec:(zen.term _p_Elt_T) =>
                                     zen.forall _p_Elt_T 
                                       (v_Vac:(zen.term _p_Elt_T) =>
                                        zen.imp 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      v_Vec v_Vac)))) 
                                          (zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vac 
                                                      (_p_Col_add v_Vec v_Vdc)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vac 
                                                      v_Vdc))))))) a 
                                 (v_Vfc:
                                  (zen.proof 
                                     (zen.forall _p_Elt_T 
                                        (v_Vec:(zen.term _p_Elt_T) =>
                                         zen.forall _p_Elt_T 
                                           (v_Vac:(zen.term _p_Elt_T) =>
                                            zen.imp 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._equal_ 
                                                          _p_Elt_T v_Vec 
                                                          v_Vac)))) 
                                              (zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vac 
                                                          (_p_Col_add v_Vec a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vac a)))))))) =>
                                  zen.Rall _p_Elt_T 
                                    (v_Vec:(zen.term _p_Elt_T) =>
                                     zen.forall _p_Elt_T 
                                       (v_Vac:(zen.term _p_Elt_T) =>
                                        zen.imp 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      v_Vec v_Vac)))) 
                                          (zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vac 
                                                      (_p_Col_add v_Vec a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vac a)))))) 
                                    (basics.fst _p_Elt_T _p_It_T 
                                       (_p_It_step_it it)) 
                                    (v_Vgc:
                                     (zen.proof 
                                        (zen.forall _p_Elt_T 
                                           (v_Vac:(zen.term _p_Elt_T) =>
                                            zen.imp 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._equal_ 
                                                          _p_Elt_T 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) v_Vac)))) 
                                              (zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vac 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains 
                                                          v_Vac a))))))) =>
                                     zen.Rall _p_Elt_T 
                                       (v_Vac:(zen.term _p_Elt_T) =>
                                        zen.imp 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      (basics.fst _p_Elt_T 
                                                         _p_It_T 
                                                         (_p_It_step_it it)) 
                                                      v_Vac)))) 
                                          (zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vac 
                                                      (_p_Col_add 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains v_Vac a))))) 
                                       y 
                                       (v_Vhc:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._equal_ 
                                                          _p_Elt_T 
                                                          (basics.fst 
                                                             _p_Elt_T 
                                                             _p_It_T 
                                                             (_p_It_step_it 
                                                                it)) y)))) 
                                              (zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains y 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains y a)))))) =>
                                        zen.Rimply 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      (basics.fst _p_Elt_T 
                                                         _p_It_T 
                                                         (_p_It_step_it it)) 
                                                      y)))) 
                                          (zen.eqv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains y 
                                                      (_p_Col_add 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains y a)))) 
                                          (v_Vic:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._equal_ 
                                                             _p_Elt_T 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) y)))))) =>
                                           zen.Raxiom 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._equal_ 
                                                         _p_Elt_T 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         y)))) YE v_Vic) 
                                          (v_Vjc:
                                           (zen.proof 
                                              (zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains y 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains y a))))) =>
                                           zen.Requiv 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains y 
                                                      (_p_Col_add 
                                                         (basics.fst 
                                                            _p_Elt_T _p_It_T 
                                                            (_p_It_step_it it)) 
                                                         a)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_Col_contains y a))) 
                                             (v_Vkc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains y 
                                                             (_p_Col_add 
                                                                (basics.fst 
                                                                   _p_Elt_T 
                                                                   _p_It_T 
                                                                   (_p_It_step_it 
                                                                    it)) a)))))) =>
                                              v_Vcc0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains y 
                                                             a))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains y 
                                                         (_p_Col_add 
                                                            (basics.fst 
                                                               _p_Elt_T 
                                                               _p_It_T 
                                                               (_p_It_step_it 
                                                                  it)) a)))) 
                                                A2 v_Vkc) 
                                             (A3:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains y 
                                                          (_p_Col_add 
                                                             (basics.fst 
                                                                _p_Elt_T 
                                                                _p_It_T 
                                                                (_p_It_step_it 
                                                                   it)) a))))) =>
                                              v_Vlc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_Col_contains y a)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_Col_contains y a))) 
                                                v_Vlc v_Vcc) v_Vjc) v_Vhc) 
                                       v_Vgc) v_Vfc) _p_Col_add_contains2) 
                              (v_Vmc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true (_p_Col_contains y c)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true (_p_Col_contains y c))) 
                                 v_Vmc v_Vzb) v_Vbc) A))) 
                    (YE:
                     (dk_logic.eP 
                        (dk_logic.ebP 
                           (basics._equal_ _p_Elt_T 
                              (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) 
                              y))) =>
                     zen.nnpp 
                       (zen.triangle (focal.is_true (_p_Col_contains y c))) 
                       (v_Vfc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (_p_Col_contains y c))))) =>
                        focal.zenon_syntactic_equal _p_Elt_T 
                          (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) y 
                          (v_Vgc:
                           (zen.proof 
                              (zen.triangle 
                                 (zen.equal _p_Elt_T 
                                    (basics.fst _p_Elt_T _p_It_T 
                                       (_p_It_step_it it)) y))) =>
                           focal.zenon_syntactic_equal 
                             (dk_tuple.prod _p_Elt_T _p_It_T) 
                             (_p_It_step_it it) 
                             (dk_tuple.pair _p_Elt_T _p_It_T 
                                (basics.fst _p_Elt_T _p_It_T 
                                   (_p_It_step_it it)) 
                                (basics.snd _p_Elt_T _p_It_T 
                                   (_p_It_step_it it))) 
                             (v_Vhc:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal 
                                       (dk_tuple.prod _p_Elt_T _p_It_T) 
                                       (_p_It_step_it it) 
                                       (basics.pair _p_Elt_T _p_It_T 
                                          (basics.fst _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)) 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it)))))) =>
                              zen.Rall _p_It_T 
                                (v_Vic:(zen.term _p_It_T) =>
                                 zen.forall _p_It_T 
                                   (v_Vjc:(zen.term _p_It_T) =>
                                    zen.forall _p_Elt_T 
                                      (v_Vkc:(zen.term _p_Elt_T) =>
                                       zen.forall (basics.list__t _p_Elt_T) 
                                         (v_Vlc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.forall _p_Col_T 
                                            (v_Vmc:(zen.term _p_Col_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vic v_Vmc 
                                                     v_Vlc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next v_Vic))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 v_Vic) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 v_Vkc v_Vjc)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem v_Vlc 
                                                              v_Vkc)))))))))) 
                                it 
                                (v_Vnc:
                                 (zen.proof 
                                    (zen.forall _p_It_T 
                                       (v_Vjc:(zen.term _p_It_T) =>
                                        zen.forall _p_Elt_T 
                                          (v_Vkc:(zen.term _p_Elt_T) =>
                                           zen.forall 
                                             (basics.list__t _p_Elt_T) 
                                             (v_Vlc:
                                              (zen.term 
                                                 (basics.list__t _p_Elt_T)) =>
                                              zen.forall _p_Col_T 
                                                (v_Vmc:(zen.term _p_Col_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (_p_It_model it v_Vmc 
                                                         v_Vlc)) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_It_has_next 
                                                               it))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._equal_ 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    it) 
                                                                  (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Vkc 
                                                                    v_Vjc)))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem 
                                                                  v_Vlc v_Vkc))))))))))) =>
                                 zen.Rall _p_It_T 
                                   (v_Vjc:(zen.term _p_It_T) =>
                                    zen.forall _p_Elt_T 
                                      (v_Vkc:(zen.term _p_Elt_T) =>
                                       zen.forall (basics.list__t _p_Elt_T) 
                                         (v_Vlc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.forall _p_Col_T 
                                            (v_Vmc:(zen.term _p_Col_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it v_Vmc v_Vlc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next it))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 v_Vkc v_Vjc)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem v_Vlc 
                                                              v_Vkc))))))))) 
                                   (basics.snd _p_Elt_T _p_It_T 
                                      (_p_It_step_it it)) 
                                   (v_Voc:
                                    (zen.proof 
                                       (zen.forall _p_Elt_T 
                                          (v_Vkc:(zen.term _p_Elt_T) =>
                                           zen.forall 
                                             (basics.list__t _p_Elt_T) 
                                             (v_Vlc:
                                              (zen.term 
                                                 (basics.list__t _p_Elt_T)) =>
                                              zen.forall _p_Col_T 
                                                (v_Vmc:(zen.term _p_Col_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (_p_It_model it v_Vmc 
                                                         v_Vlc)) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_It_has_next 
                                                               it))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._equal_ 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    it) 
                                                                  (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Vkc 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem 
                                                                  v_Vlc v_Vkc)))))))))) =>
                                    zen.Rall _p_Elt_T 
                                      (v_Vkc:(zen.term _p_Elt_T) =>
                                       zen.forall (basics.list__t _p_Elt_T) 
                                         (v_Vlc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.forall _p_Col_T 
                                            (v_Vmc:(zen.term _p_Col_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it v_Vmc v_Vlc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next it))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 v_Vkc 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)))))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem v_Vlc 
                                                              v_Vkc)))))))) 
                                      y 
                                      (v_Vpc:
                                       (zen.proof 
                                          (zen.forall 
                                             (basics.list__t _p_Elt_T) 
                                             (v_Vlc:
                                              (zen.term 
                                                 (basics.list__t _p_Elt_T)) =>
                                              zen.forall _p_Col_T 
                                                (v_Vmc:(zen.term _p_Col_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (_p_It_model it v_Vmc 
                                                         v_Vlc)) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_It_has_next 
                                                               it))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._equal_ 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    it) 
                                                                  (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem 
                                                                  v_Vlc y))))))))) =>
                                       zen.Rall (basics.list__t _p_Elt_T) 
                                         (v_Vlc:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.forall _p_Col_T 
                                            (v_Vmc:(zen.term _p_Col_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it v_Vmc v_Vlc)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next it))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T y 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)))))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem v_Vlc y))))))) 
                                         l 
                                         (v_Vqc:
                                          (zen.proof 
                                             (zen.forall _p_Col_T 
                                                (v_Vmc:(zen.term _p_Col_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (_p_It_model it v_Vmc l)) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_It_has_next 
                                                               it))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._equal_ 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    it) 
                                                                  (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l y)))))))) =>
                                          zen.Rall _p_Col_T 
                                            (v_Vmc:(zen.term _p_Col_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model it v_Vmc l)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next it))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T y 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)))))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem l y)))))) 
                                            c 
                                            (v_Vrc:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (_p_It_model it c l)) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_It_has_next 
                                                               it))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._equal_ 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    it) 
                                                                  (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l y))))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (_p_It_model it c l)) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next it))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T y 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)))))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem l y))))) 
                                               (v_Vsc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (_p_It_model it c l)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (_p_It_model it c l)) M 
                                                  v_Vsc) 
                                               (v_Vtc:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_It_has_next 
                                                               it))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._equal_ 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    it) 
                                                                  (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l y)))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next it))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T y 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)))))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem l y)))) 
                                                  (v_Vuc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_It_has_next 
                                                                  it))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_It_has_next it))) 
                                                     N v_Vuc) 
                                                  (v_Vvc:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._equal_ 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    it) 
                                                                  (dk_tuple.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l y))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T y 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)))))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_L_mem l y))) 
                                                     (v_Vwc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (basics.syntactic_equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))))) =>
                                                      focal.zenon_not_syntactic_equal 
                                                        (dk_tuple.prod 
                                                           _p_Elt_T _p_It_T) 
                                                        (_p_It_step_it it) 
                                                        (basics.pair 
                                                           _p_Elt_T _p_It_T 
                                                           y 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (_p_It_step_it 
                                                                 it))) 
                                                        (v_Vxc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                         zen.Rsubst 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (v_Vyc:
                                                            (zen.term 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T)) =>
                                                            zen.triangle 
                                                              (zen.equal 
                                                                 (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                 v_Vyc 
                                                                 (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (
                                                                    basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))) 
                                                           (_p_It_step_it it) 
                                                           (_p_It_step_it it) 
                                                           (v_Vzc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                            zen.Rcut 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it))) 
                                                              (v_Vad:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it)))) =>
                                                               zen.Rsubst 
                                                                 (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                 (v_Vbd:
                                                                  (zen.term 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T)) =>
                                                                  zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    v_Vbd 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                 (_p_It_step_it 
                                                                    it) 
                                                                 (_p_It_step_it 
                                                                    it) 
                                                                 (v_Vzc0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                                  zen.Rnoteq 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    v_Vzc0) 
                                                                 (v_Vad0:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it)))) =>
                                                                  zen.Rsubst 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    v_Vcd:
                                                                    (
                                                                    zen.term 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T)) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) v_Vcd)) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) 
                                                                    (
                                                                    v_Vzc0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                                    zen.Rnoteq 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    v_Vzc0) 
                                                                    (
                                                                    v_Vad1:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    v_Vad1 
                                                                    v_Vzc) 
                                                                    v_Vad0) 
                                                                 v_Vad) 
                                                              (v_Vzc0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (_p_It_step_it 
                                                                    it))))) =>
                                                               zen.Rnoteq 
                                                                 (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                 (_p_It_step_it 
                                                                    it) 
                                                                 v_Vzc0)) 
                                                           (v_Vhc0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) =>
                                                            zen.Rsubst 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (v_Vcd:
                                                               (zen.term 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T)) =>
                                                               zen.triangle 
                                                                 (zen.equal 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it) v_Vcd)) 
                                                              (basics.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it))) 
                                                              (basics.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T y 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it))) 
                                                              (v_Vdd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                               zen.Rsubst 
                                                                 _p_Elt_T 
                                                                 (v_Ved:
                                                                  (zen.term 
                                                                    _p_Elt_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    v_Ved 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (
                                                                    _p_It_step_it 
                                                                    it)) y 
                                                                 (v_Vfd:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_Elt_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) y)))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_Elt_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) y)) 
                                                                    v_Vgc 
                                                                    v_Vfd) 
                                                                 (v_Vgd:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                                  zen.Rsubst 
                                                                    _p_It_T 
                                                                    (
                                                                    v_Vhd:
                                                                    (
                                                                    zen.term 
                                                                    _p_It_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y v_Vhd) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) 
                                                                    (
                                                                    basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (
                                                                    basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (
                                                                    v_Vid:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_It_T 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_It_T 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)) 
                                                                    v_Vid) 
                                                                    (
                                                                    v_Vgd0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))))) =>
                                                                    zen.Rnoteq 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))) 
                                                                    v_Vgd0) 
                                                                    v_Vgd) 
                                                                 v_Vdd) 
                                                              (v_Vjd:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it)))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                    (_p_It_step_it 
                                                                    it) 
                                                                    (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    y 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (_p_It_step_it 
                                                                    it))))) 
                                                                 v_Vjd v_Vxc) 
                                                              v_Vhc0) v_Vhc) 
                                                        v_Vwc) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_L_mem l y)))) =>
                                                      zen.Rall _p_It_T 
                                                        (v_Vic:
                                                         (zen.term _p_It_T) =>
                                                         zen.forall _p_Col_T 
                                                           (v_Vmc:
                                                            (zen.term 
                                                               _p_Col_T) =>
                                                            zen.forall 
                                                              (basics.list__t 
                                                                 _p_Elt_T) 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  (basics.list__t 
                                                                    _p_Elt_T)) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    _p_It_model 
                                                                    v_Vic 
                                                                    v_Vmc 
                                                                    v_Vlc)) 
                                                                 (zen.forall 
                                                                    _p_Elt_T 
                                                                    (
                                                                    v_Vkc:
                                                                    (
                                                                    zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc 
                                                                    v_Vmc)))))))) 
                                                        it 
                                                        (v_Vld:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               _p_Col_T 
                                                               (v_Vmc:
                                                                (zen.term 
                                                                   _p_Col_T) =>
                                                                zen.forall 
                                                                  (basics.list__t 
                                                                    _p_Elt_T) 
                                                                  (v_Vlc:
                                                                   (zen.term 
                                                                    (basics.list__t 
                                                                    _p_Elt_T)) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (_p_It_model 
                                                                    it v_Vmc 
                                                                    v_Vlc)) 
                                                                    (zen.forall 
                                                                    _p_Elt_T 
                                                                    (v_Vkc:
                                                                    (zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc 
                                                                    v_Vmc))))))))) =>
                                                         zen.Rall _p_Col_T 
                                                           (v_Vmc:
                                                            (zen.term 
                                                               _p_Col_T) =>
                                                            zen.forall 
                                                              (basics.list__t 
                                                                 _p_Elt_T) 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  (basics.list__t 
                                                                    _p_Elt_T)) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    _p_It_model 
                                                                    it v_Vmc 
                                                                    v_Vlc)) 
                                                                 (zen.forall 
                                                                    _p_Elt_T 
                                                                    (
                                                                    v_Vkc:
                                                                    (
                                                                    zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                           c 
                                                           (v_Vmd:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  (basics.list__t 
                                                                    _p_Elt_T) 
                                                                  (v_Vlc:
                                                                   (zen.term 
                                                                    (basics.list__t 
                                                                    _p_Elt_T)) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (_p_It_model 
                                                                    it c 
                                                                    v_Vlc)) 
                                                                    (zen.forall 
                                                                    _p_Elt_T 
                                                                    (v_Vkc:
                                                                    (zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc c)))))))) =>
                                                            zen.Rall 
                                                              (basics.list__t 
                                                                 _p_Elt_T) 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  (basics.list__t 
                                                                    _p_Elt_T)) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    _p_It_model 
                                                                    it c 
                                                                    v_Vlc)) 
                                                                 (zen.forall 
                                                                    _p_Elt_T 
                                                                    (
                                                                    v_Vkc:
                                                                    (
                                                                    zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc c)))))) 
                                                              l 
                                                              (v_Vnd:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (_p_It_model 
                                                                    it c l)) 
                                                                    (zen.forall 
                                                                    _p_Elt_T 
                                                                    (v_Vkc:
                                                                    (zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc c))))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    _p_It_model 
                                                                    it c l)) 
                                                                 (zen.forall 
                                                                    _p_Elt_T 
                                                                    (
                                                                    v_Vkc:
                                                                    (
                                                                    zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc c))))) 
                                                                 (v_Vsc:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (_p_It_model 
                                                                    it c l)))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (_p_It_model 
                                                                    it c l)) 
                                                                    M v_Vsc) 
                                                                 (v_Vod:
                                                                  (zen.proof 
                                                                    (zen.forall 
                                                                    _p_Elt_T 
                                                                    (v_Vkc:
                                                                    (zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc c)))))) =>
                                                                  zen.Rall 
                                                                    _p_Elt_T 
                                                                    (
                                                                    v_Vkc:
                                                                    (
                                                                    zen.term 
                                                                    _p_Elt_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vkc c)))) 
                                                                    y 
                                                                    (
                                                                    v_Vpd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    y c))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l y))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    y c))) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_L_mem 
                                                                    l y))) 
                                                                    v_Vkd 
                                                                    v_Vqd) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    y c)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_Col_contains 
                                                                    y c))) 
                                                                    v_Vrd 
                                                                    v_Vfc) 
                                                                    v_Vpd) 
                                                                    v_Vod) 
                                                                 v_Vnd) v_Vmd) 
                                                           v_Vld) 
                                                        _p_It_model_includes) 
                                                     v_Vvc) v_Vtc) v_Vrc) 
                                            v_Vqc) v_Vpc) v_Voc) v_Vnc) 
                                _p_It_model_step) __S_1_1_1_0_LEMMA) YE)))) 
                (dk_builtins.magic_prove 
                   (dk_logic.ebP 
                      (basics._equal_ _p_Col_T 
                         (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                            _p_Col_add _p_It_has_next _p_It_step_it 
                            (IterTools__it_order _p_It_T _p_It_measure_it) 
                            abst_rec_call_decreases abst_wf_it_order it a) 
                         (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                            _p_Col_add _p_It_has_next _p_It_step_it 
                            (IterTools__it_order _p_It_T _p_It_measure_it) 
                            abst_rec_call_decreases abst_wf_it_order 
                            (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) 
                            (_p_Col_add 
                               (basics.fst _p_Elt_T _p_It_T 
                                  (_p_It_step_it it)) a)))))) 
               (zen.nnpp 
                  (zen.triangle 
                     (IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T 
                        _p_L_mem _p_Col_contains _p_It_model 
                        (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                           _p_Col_add _p_It_has_next _p_It_step_it 
                           (IterTools__it_order _p_It_T _p_It_measure_it) 
                           abst_rec_call_decreases abst_wf_it_order) 
                        (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)))) 
                  (v_Vzb:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                               _p_It_T _p_L_mem _p_Col_contains _p_It_model 
                               (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                  _p_It_T _p_Col_add _p_It_has_next 
                                  _p_It_step_it 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it) 
                                  abst_rec_call_decreases abst_wf_it_order) 
                               (basics.snd _p_Elt_T _p_It_T 
                                  (_p_It_step_it it)))))) =>
                   zen.Rall _p_It_T 
                     (v_Vac:(zen.term _p_It_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (IterTools__it_order _p_It_T _p_It_measure_it 
                                 v_Vac it))) 
                        (zen.triangle 
                           (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                              _p_It_T _p_L_mem _p_Col_contains _p_It_model 
                              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                 _p_Col_add _p_It_has_next _p_It_step_it 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it) 
                                 abst_rec_call_decreases abst_wf_it_order) 
                              v_Vac))) 
                     (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) 
                     (v_Vbc:
                      (zen.proof 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (IterTools__it_order _p_It_T 
                                     _p_It_measure_it 
                                     (basics.snd _p_Elt_T _p_It_T 
                                        (_p_It_step_it it)) it))) 
                            (zen.triangle 
                               (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                                  _p_It_T _p_L_mem _p_Col_contains 
                                  _p_It_model 
                                  (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                     _p_It_T _p_Col_add _p_It_has_next 
                                     _p_It_step_it 
                                     (IterTools__it_order _p_It_T 
                                        _p_It_measure_it) 
                                     abst_rec_call_decreases abst_wf_it_order) 
                                  (basics.snd _p_Elt_T _p_It_T 
                                     (_p_It_step_it it)))))) =>
                      zen.Rimply 
                        (zen.triangle 
                           (focal.is_true 
                              (IterTools__it_order _p_It_T _p_It_measure_it 
                                 (basics.snd _p_Elt_T _p_It_T 
                                    (_p_It_step_it it)) it))) 
                        (zen.triangle 
                           (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                              _p_It_T _p_L_mem _p_Col_contains _p_It_model 
                              (IterTools__copy_aux _p_Col_T _p_Elt_T _p_It_T 
                                 _p_Col_add _p_It_has_next _p_It_step_it 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it) 
                                 abst_rec_call_decreases abst_wf_it_order) 
                              (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)))) 
                        (v_Vcc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (IterTools__it_order _p_It_T 
                                        _p_It_measure_it 
                                        (basics.snd _p_Elt_T _p_It_T 
                                           (_p_It_step_it it)) it))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (IterTools__it_order _p_It_T 
                                    _p_It_measure_it 
                                    (basics.snd _p_Elt_T _p_It_T 
                                       (_p_It_step_it it)) it))) 
                           __S_1_1_1_1_LEMMA v_Vcc) 
                        (v_Vdc:
                         (zen.proof 
                            (zen.triangle 
                               (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                                  _p_It_T _p_L_mem _p_Col_contains 
                                  _p_It_model 
                                  (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                     _p_It_T _p_Col_add _p_It_has_next 
                                     _p_It_step_it 
                                     (IterTools__it_order _p_It_T 
                                        _p_It_measure_it) 
                                     abst_rec_call_decreases abst_wf_it_order) 
                                  (basics.snd _p_Elt_T _p_It_T 
                                     (_p_It_step_it it))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                                 _p_It_T _p_L_mem _p_Col_contains 
                                 _p_It_model 
                                 (IterTools__copy_aux _p_Col_T _p_Elt_T 
                                    _p_It_T _p_Col_add _p_It_has_next 
                                    _p_It_step_it 
                                    (IterTools__it_order _p_It_T 
                                       _p_It_measure_it) 
                                    abst_rec_call_decreases abst_wf_it_order) 
                                 (basics.snd _p_Elt_T _p_It_T 
                                    (_p_It_step_it it)))) v_Vdc v_Vzb) v_Vbc) 
                     R))) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (IterTools__it_order _p_It_T _p_It_measure_it 
                          (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it)) it))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._amper__amper_ 
                                 (basics._lt__equal_ 
                                    (dk_int.from_nat builtins.0) 
                                    (_p_It_measure_it it)) 
                                 (basics._lt_ 
                                    (_p_It_measure_it 
                                       (basics.snd _p_Elt_T _p_It_T 
                                          (_p_It_step_it it))) 
                                    (_p_It_measure_it it))))))) =>
                  focal.zenon_focal_notand 
                    (basics._lt__equal_ (dk_int.from_nat builtins.0) 
                       (_p_It_measure_it it)) 
                    (basics._lt_ 
                       (_p_It_measure_it 
                          (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it))) 
                       (_p_It_measure_it it)) 
                    (v_Vac:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._lt__equal_ 
                                       (dk_int.from_nat builtins.0) 
                                       (_p_It_measure_it it)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._lt_ 
                                       (_p_It_measure_it 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it))) 
                                       (_p_It_measure_it it))))))) =>
                     zen.Rnotand 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._lt__equal_ 
                                (dk_int.from_nat builtins.0) 
                                (_p_It_measure_it it)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._lt_ 
                                (_p_It_measure_it 
                                   (basics.snd _p_Elt_T _p_It_T 
                                      (_p_It_step_it it))) 
                                (_p_It_measure_it it)))) 
                       (v_Vbc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._lt__equal_ 
                                       (dk_int.from_nat builtins.0) 
                                       (_p_It_measure_it it)))))) =>
                        zen.Rall _p_It_T 
                          (v_Vcc:(zen.term _p_It_T) =>
                           zen.triangle 
                             (focal.is_true 
                                (basics._lt__equal_ 
                                   (dk_int.from_nat builtins.0) 
                                   (_p_It_measure_it v_Vcc)))) it 
                          (v_Vdc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._lt__equal_ 
                                       (dk_int.from_nat builtins.0) 
                                       (_p_It_measure_it it))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._lt__equal_ 
                                      (dk_int.from_nat builtins.0) 
                                      (_p_It_measure_it it)))) v_Vdc v_Vbc) 
                          _p_It_mea_positive) 
                       (v_Vec:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics._lt_ 
                                       (_p_It_measure_it 
                                          (basics.snd _p_Elt_T _p_It_T 
                                             (_p_It_step_it it))) 
                                       (_p_It_measure_it it)))))) =>
                        zen.Rall _p_It_T 
                          (v_Vfc:(zen.term _p_It_T) =>
                           zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
                             (v_Vgc:
                              (zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (_p_It_has_next v_Vfc))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ 
                                            (dk_tuple.prod _p_Elt_T _p_It_T) 
                                            (_p_It_step_it v_Vfc) v_Vgc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._lt_ 
                                            (_p_It_measure_it 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  v_Vgc)) 
                                            (_p_It_measure_it v_Vfc))))))) 
                          it 
                          (v_Vhc:
                           (zen.proof 
                              (zen.forall (dk_tuple.prod _p_Elt_T _p_It_T) 
                                 (v_Vgc:
                                  (zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_It_has_next it))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ 
                                                (dk_tuple.prod _p_Elt_T 
                                                   _p_It_T) 
                                                (_p_It_step_it it) v_Vgc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._lt_ 
                                                (_p_It_measure_it 
                                                   (basics.snd _p_Elt_T 
                                                      _p_It_T v_Vgc)) 
                                                (_p_It_measure_it it)))))))) =>
                           zen.Rall (dk_tuple.prod _p_Elt_T _p_It_T) 
                             (v_Vgc:
                              (zen.term (dk_tuple.prod _p_Elt_T _p_It_T)) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (_p_It_has_next it))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ 
                                            (dk_tuple.prod _p_Elt_T _p_It_T) 
                                            (_p_It_step_it it) v_Vgc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._lt_ 
                                            (_p_It_measure_it 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  v_Vgc)) 
                                            (_p_It_measure_it it)))))) 
                             (_p_It_step_it it) 
                             (v_Vic:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_It_has_next it))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ 
                                                (dk_tuple.prod _p_Elt_T 
                                                   _p_It_T) 
                                                (_p_It_step_it it) 
                                                (_p_It_step_it it)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._lt_ 
                                                (_p_It_measure_it 
                                                   (basics.snd _p_Elt_T 
                                                      _p_It_T 
                                                      (_p_It_step_it it))) 
                                                (_p_It_measure_it it))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true (_p_It_has_next it))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ 
                                            (dk_tuple.prod _p_Elt_T _p_It_T) 
                                            (_p_It_step_it it) 
                                            (_p_It_step_it it)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._lt_ 
                                            (_p_It_measure_it 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it))) 
                                            (_p_It_measure_it it))))) 
                                (v_Vjc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (_p_It_has_next it))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (_p_It_has_next it))) N 
                                   v_Vjc) 
                                (v_Vkc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ 
                                                (dk_tuple.prod _p_Elt_T 
                                                   _p_It_T) 
                                                (_p_It_step_it it) 
                                                (_p_It_step_it it)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._lt_ 
                                                (_p_It_measure_it 
                                                   (basics.snd _p_Elt_T 
                                                      _p_It_T 
                                                      (_p_It_step_it it))) 
                                                (_p_It_measure_it it)))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._equal_ 
                                            (dk_tuple.prod _p_Elt_T _p_It_T) 
                                            (_p_It_step_it it) 
                                            (_p_It_step_it it)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._lt_ 
                                            (_p_It_measure_it 
                                               (basics.snd _p_Elt_T _p_It_T 
                                                  (_p_It_step_it it))) 
                                            (_p_It_measure_it it)))) 
                                   (v_Vlc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (basics.syntactic_equal 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      _p_It_T) 
                                                   (_p_It_step_it it) 
                                                   (_p_It_step_it it)))))) =>
                                    focal.zenon_not_syntactic_equal 
                                      (dk_tuple.prod _p_Elt_T _p_It_T) 
                                      (_p_It_step_it it) (_p_It_step_it it) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal 
                                                   (dk_tuple.prod _p_Elt_T 
                                                      _p_It_T) 
                                                   (_p_It_step_it it) 
                                                   (_p_It_step_it it))))) =>
                                       zen.Rnoteq 
                                         (dk_tuple.prod _p_Elt_T _p_It_T) 
                                         (_p_It_step_it it) v_Vmc) v_Vlc) 
                                   (v_Vnc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._lt_ 
                                                (_p_It_measure_it 
                                                   (basics.snd _p_Elt_T 
                                                      _p_It_T 
                                                      (_p_It_step_it it))) 
                                                (_p_It_measure_it it))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._lt_ 
                                               (_p_It_measure_it 
                                                  (basics.snd _p_Elt_T 
                                                     _p_It_T 
                                                     (_p_It_step_it it))) 
                                               (_p_It_measure_it it)))) 
                                      v_Vnc v_Vec) v_Vkc) v_Vic) v_Vhc) 
                          _p_It_mea_decreases) v_Vac) v_Vzb))) 
             (dk_builtins.magic_prove 
                (dk_logic.ebP 
                   (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                      (_p_It_step_it it) 
                      (dk_tuple.pair _p_Elt_T _p_It_T 
                         (basics.fst _p_Elt_T _p_It_T (_p_It_step_it it)) 
                         (basics.snd _p_Elt_T _p_It_T (_p_It_step_it it))))))))).

def IterTools__copy_invariant :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_Col_contains:((cc.eT _p_Elt_T) ->
                   (cc.eT _p_Col_T) -> cc.eT basics.bool__t) ->
  _p_It_model:((cc.eT _p_It_T) ->
               (cc.eT _p_Col_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  abst_copy_new_invariant:(dk_logic.eP 
                             (dk_logic.forall _p_It_T 
                                (it:(cc.eT _p_It_T) =>
                                 IterTools__copy_inv_prop _p_Elt_T _p_Col_T 
                                   _p_It_T _p_L_mem _p_Col_contains 
                                   _p_It_model abst_copy_aux it))) ->
  dk_logic.eP 
    (dk_logic.forall _p_It_T 
       (it:(cc.eT _p_It_T) =>
        dk_logic.forall _p_Col_T 
          (a:(cc.eT _p_Col_T) =>
           dk_logic.forall _p_Col_T 
             (c:(cc.eT _p_Col_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.imp (_p_It_model it c l) 
                   (dk_logic.imp 
                      (dk_logic.forall _p_Elt_T 
                         (x:(cc.eT _p_Elt_T) =>
                          dk_logic.imp (dk_logic.ebP (_p_Col_contains x a)) 
                            (dk_logic.ebP (_p_Col_contains x c)))) 
                      (dk_logic.forall _p_Elt_T 
                         (x:(cc.eT _p_Elt_T) =>
                          dk_logic.eqv 
                            (dk_logic.ebP 
                               (_p_Col_contains x (abst_copy_aux it a))) 
                            (dk_logic.ebP 
                               (basics._bar__bar_ (_p_L_mem l x) 
                                  (_p_Col_contains x a)))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_Col_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT basics.bool__t) =>
  _p_It_model:
  ((cc.eT _p_It_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_copy_aux:((cc.eT _p_It_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
  abst_copy_new_invariant:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (it:(cc.eT _p_It_T) =>
         IterTools__copy_inv_prop _p_Elt_T _p_Col_T _p_It_T _p_L_mem 
           _p_Col_contains _p_It_model abst_copy_aux it))) =>
  zen.nnpp 
    (zen.forall _p_It_T 
       (v_Vzb:(zen.term _p_It_T) =>
        zen.forall _p_Col_T 
          (v_Vac:(zen.term _p_Col_T) =>
           zen.forall _p_Col_T 
             (v_Vbc:(zen.term _p_Col_T) =>
              zen.forall (basics.list__t _p_Elt_T) 
                (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                 zen.imp (zen.triangle (_p_It_model v_Vzb v_Vbc v_Vcc)) 
                   (zen.imp 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vac))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vbc))))) 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vzb v_Vac)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vcc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vac)))))))))))) 
    (v_Vec:
     (zen.proof 
        (zen.not 
           (zen.forall _p_It_T 
              (v_Vzb:(zen.term _p_It_T) =>
               zen.forall _p_Col_T 
                 (v_Vac:(zen.term _p_Col_T) =>
                  zen.forall _p_Col_T 
                    (v_Vbc:(zen.term _p_Col_T) =>
                     zen.forall (basics.list__t _p_Elt_T) 
                       (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                        zen.imp 
                          (zen.triangle (_p_It_model v_Vzb v_Vbc v_Vcc)) 
                          (zen.imp 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vac))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vbc))))) 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc 
                                            (abst_copy_aux v_Vzb v_Vac)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vcc v_Vdc) 
                                            (_p_Col_contains v_Vdc v_Vac)))))))))))))) =>
     zen.Rnotall _p_It_T 
       (v_Vzb:(zen.term _p_It_T) =>
        zen.forall _p_Col_T 
          (v_Vac:(zen.term _p_Col_T) =>
           zen.forall _p_Col_T 
             (v_Vbc:(zen.term _p_Col_T) =>
              zen.forall (basics.list__t _p_Elt_T) 
                (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                 zen.imp (zen.triangle (_p_It_model v_Vzb v_Vbc v_Vcc)) 
                   (zen.imp 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vac))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vbc))))) 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vzb v_Vac)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vcc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vac))))))))))) 
       (v_Vfc:(zen.term _p_It_T) =>
        v_Vgc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_Col_T 
                 (v_Vac:(zen.term _p_Col_T) =>
                  zen.forall _p_Col_T 
                    (v_Vbc:(zen.term _p_Col_T) =>
                     zen.forall (basics.list__t _p_Elt_T) 
                       (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                        zen.imp 
                          (zen.triangle (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                          (zen.imp 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vac))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vbc))))) 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc 
                                            (abst_copy_aux v_Vfc v_Vac)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vcc v_Vdc) 
                                            (_p_Col_contains v_Vdc v_Vac))))))))))))) =>
        zen.Rnotall _p_Col_T 
          (v_Vac:(zen.term _p_Col_T) =>
           zen.forall _p_Col_T 
             (v_Vbc:(zen.term _p_Col_T) =>
              zen.forall (basics.list__t _p_Elt_T) 
                (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                 zen.imp (zen.triangle (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                   (zen.imp 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vac))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vbc))))) 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vfc v_Vac)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vcc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vac)))))))))) 
          (v_Vhc:(zen.term _p_Col_T) =>
           v_Vic:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_Col_T 
                    (v_Vbc:(zen.term _p_Col_T) =>
                     zen.forall (basics.list__t _p_Elt_T) 
                       (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                        zen.imp 
                          (zen.triangle (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                          (zen.imp 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vhc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vbc))))) 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc 
                                            (abst_copy_aux v_Vfc v_Vhc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vcc v_Vdc) 
                                            (_p_Col_contains v_Vdc v_Vhc)))))))))))) =>
           zen.Rnotall _p_Col_T 
             (v_Vbc:(zen.term _p_Col_T) =>
              zen.forall (basics.list__t _p_Elt_T) 
                (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                 zen.imp (zen.triangle (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                   (zen.imp 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vhc))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vbc))))) 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vfc v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vcc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vhc))))))))) 
             (v_Vjc:(zen.term _p_Col_T) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.forall (basics.list__t _p_Elt_T) 
                       (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                        zen.imp 
                          (zen.triangle (_p_It_model v_Vfc v_Vjc v_Vcc)) 
                          (zen.imp 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vhc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vjc))))) 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc 
                                            (abst_copy_aux v_Vfc v_Vhc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vcc v_Vdc) 
                                            (_p_Col_contains v_Vdc v_Vhc))))))))))) =>
              zen.Rnotall (basics.list__t _p_Elt_T) 
                (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                 zen.imp (zen.triangle (_p_It_model v_Vfc v_Vjc v_Vcc)) 
                   (zen.imp 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vhc))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vjc))))) 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vfc v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vcc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vhc)))))))) 
                (v_Vlc:(zen.term (basics.list__t _p_Elt_T)) =>
                 v_Vmc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle (_p_It_model v_Vfc v_Vjc v_Vlc)) 
                          (zen.imp 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vhc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vjc))))) 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc 
                                            (abst_copy_aux v_Vfc v_Vhc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vlc v_Vdc) 
                                            (_p_Col_contains v_Vdc v_Vhc)))))))))) =>
                 zen.Rnotimply 
                   (zen.triangle (_p_It_model v_Vfc v_Vjc v_Vlc)) 
                   (zen.imp 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vhc))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vjc))))) 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vfc v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vlc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vhc))))))) 
                   (v_Vnc:
                    (zen.proof (zen.triangle (_p_It_model v_Vfc v_Vjc v_Vlc))) =>
                    v_Voc:
                    (zen.proof 
                       (zen.not 
                          (zen.imp 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vhc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc v_Vjc))))) 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc 
                                            (abst_copy_aux v_Vfc v_Vhc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vlc v_Vdc) 
                                            (_p_Col_contains v_Vdc v_Vhc))))))))) =>
                    zen.Rnotimply 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vhc))) 
                            (zen.triangle 
                               (focal.is_true (_p_Col_contains v_Vdc v_Vjc))))) 
                      (zen.forall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vfc v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vlc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vhc)))))) 
                      (v_Vpc:
                       (zen.proof 
                          (zen.forall _p_Elt_T 
                             (v_Vdc:(zen.term _p_Elt_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_Col_contains v_Vdc v_Vhc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_Col_contains v_Vdc v_Vjc)))))) =>
                       v_Vqc:
                       (zen.proof 
                          (zen.not 
                             (zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vdc 
                                            (abst_copy_aux v_Vfc v_Vhc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vlc v_Vdc) 
                                            (_p_Col_contains v_Vdc v_Vhc)))))))) =>
                       zen.Rnotall _p_Elt_T 
                         (v_Vdc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vdc 
                                     (abst_copy_aux v_Vfc v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vlc v_Vdc) 
                                     (_p_Col_contains v_Vdc v_Vhc))))) 
                         (v_Vrc:(zen.term _p_Elt_T) =>
                          v_Vsc:
                          (zen.proof 
                             (zen.not 
                                (zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vrc 
                                            (abst_copy_aux v_Vfc v_Vhc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vlc v_Vrc) 
                                            (_p_Col_contains v_Vrc v_Vhc))))))) =>
                          zen.Rnotequiv 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_Col_contains v_Vrc 
                                     (abst_copy_aux v_Vfc v_Vhc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._bar__bar_ (_p_L_mem v_Vlc v_Vrc) 
                                     (_p_Col_contains v_Vrc v_Vhc)))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_Col_contains v_Vrc 
                                            (abst_copy_aux v_Vfc v_Vhc)))))) =>
                             v_Vuc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._bar__bar_ 
                                         (_p_L_mem v_Vlc v_Vrc) 
                                         (_p_Col_contains v_Vrc v_Vhc))))) =>
                             zen.Rall _p_It_T 
                               (v_Vzb:(zen.term _p_It_T) =>
                                zen.triangle 
                                  (IterTools__copy_inv_prop _p_Elt_T 
                                     _p_Col_T _p_It_T _p_L_mem 
                                     _p_Col_contains _p_It_model 
                                     abst_copy_aux v_Vzb)) v_Vfc 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.forall _p_Col_T 
                                      (v_Vac:(zen.term _p_Col_T) =>
                                       zen.forall _p_Col_T 
                                         (v_Vbc:(zen.term _p_Col_T) =>
                                          zen.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (v_Vcc:
                                             (zen.term 
                                                (basics.list__t _p_Elt_T)) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vbc 
                                                     v_Vcc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vac))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vbc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vac)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vcc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vac)))))))))))) =>
                                zen.Rall _p_Col_T 
                                  (v_Vac:(zen.term _p_Col_T) =>
                                   zen.forall _p_Col_T 
                                     (v_Vbc:(zen.term _p_Col_T) =>
                                      zen.forall (basics.list__t _p_Elt_T) 
                                        (v_Vcc:
                                         (zen.term (basics.list__t _p_Elt_T)) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vac))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vbc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vac)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vcc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vac)))))))))) 
                                  v_Vhc 
                                  (v_Vwc:
                                   (zen.proof 
                                      (zen.forall _p_Col_T 
                                         (v_Vbc:(zen.term _p_Col_T) =>
                                          zen.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (v_Vcc:
                                             (zen.term 
                                                (basics.list__t _p_Elt_T)) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vbc 
                                                     v_Vcc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vbc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vcc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))))))))))) =>
                                   zen.Rall _p_Col_T 
                                     (v_Vbc:(zen.term _p_Col_T) =>
                                      zen.forall (basics.list__t _p_Elt_T) 
                                        (v_Vcc:
                                         (zen.term (basics.list__t _p_Elt_T)) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vbc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vcc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc))))))))) 
                                     v_Vjc 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (v_Vcc:
                                             (zen.term 
                                                (basics.list__t _p_Elt_T)) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vjc 
                                                     v_Vcc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vjc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vcc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc)))))))))) =>
                                      zen.Rall (basics.list__t _p_Elt_T) 
                                        (v_Vcc:
                                         (zen.term (basics.list__t _p_Elt_T)) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vjc v_Vcc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vcc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc)))))))) 
                                        v_Vlc 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vjc 
                                                     v_Vlc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vjc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vjc v_Vlc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc))))))) 
                                           (v_Vzc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (_p_It_model v_Vfc 
                                                        v_Vjc v_Vlc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (_p_It_model v_Vfc v_Vjc 
                                                    v_Vlc)) v_Vnc v_Vzc) 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vjc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc)))))))) =>
                                            zen.Rimply 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc)))))) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.forall _p_Elt_T 
                                                        (v_Vdc:
                                                         (zen.term _p_Elt_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vjc))))))) =>
                                               zen.Rnotall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc)))) 
                                                 (v_Vcd:
                                                  (zen.term _p_Elt_T) =>
                                                  v_Vdd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc)))))) =>
                                                  zen.Rnotimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vcd v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vcd v_Vjc))) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vcd v_Vhc)))) =>
                                                     v_Vfd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc))))) =>
                                                     zen.Rall _p_Elt_T 
                                                       (v_Vdc:
                                                        (zen.term _p_Elt_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vdc 
                                                                   v_Vhc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vdc 
                                                                   v_Vjc)))) 
                                                       v_Vcd 
                                                       (v_Vgd:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vcd 
                                                                   v_Vhc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vcd 
                                                                   v_Vjc))) 
                                                          (v_Vhd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))) 
                                                             v_Ved v_Vhd) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc))) 
                                                             v_Vid v_Vfd) 
                                                          v_Vgd) v_Vpc) v_Vdd) 
                                                 v_Vbd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))))))) =>
                                               zen.Rall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc))))) 
                                                 v_Vrc 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vrc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vrc) 
                                                                 (_p_Col_contains 
                                                                    v_Vrc 
                                                                    v_Vhc)))))) =>
                                                  zen.Requiv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vrc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vrc) 
                                                             (_p_Col_contains 
                                                                v_Vrc v_Vhc)))) 
                                                    (v_Vtc0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vrc 
                                                                    (
                                                                    abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))))) =>
                                                     v_Vld:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._bar__bar_ 
                                                                    (
                                                                    _p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vrc) 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vrc 
                                                                    v_Vhc)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics._bar__bar_ 
                                                                (_p_L_mem 
                                                                   v_Vlc 
                                                                   v_Vrc) 
                                                                (_p_Col_contains 
                                                                   v_Vrc 
                                                                   v_Vhc)))) 
                                                       v_Vuc v_Vld) 
                                                    (v_Vmd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vrc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc))))) =>
                                                     v_Vuc0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vrc) 
                                                                 (_p_Col_contains 
                                                                    v_Vrc 
                                                                    v_Vhc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_Col_contains 
                                                                v_Vrc 
                                                                (abst_copy_aux 
                                                                   v_Vfc 
                                                                   v_Vhc)))) 
                                                       v_Vmd v_Vtc) v_Vkd) 
                                                 v_Vjd) v_Vad) v_Vyc) v_Vxc) 
                                     v_Vwc) v_Vvc) abst_copy_new_invariant) 
                            (v_Vmd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_Col_contains v_Vrc 
                                         (abst_copy_aux v_Vfc v_Vhc))))) =>
                             v_Vld:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (basics._bar__bar_ 
                                            (_p_L_mem v_Vlc v_Vrc) 
                                            (_p_Col_contains v_Vrc v_Vhc)))))) =>
                             zen.Rall _p_It_T 
                               (v_Vzb:(zen.term _p_It_T) =>
                                zen.triangle 
                                  (IterTools__copy_inv_prop _p_Elt_T 
                                     _p_Col_T _p_It_T _p_L_mem 
                                     _p_Col_contains _p_It_model 
                                     abst_copy_aux v_Vzb)) v_Vfc 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.forall _p_Col_T 
                                      (v_Vac:(zen.term _p_Col_T) =>
                                       zen.forall _p_Col_T 
                                         (v_Vbc:(zen.term _p_Col_T) =>
                                          zen.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (v_Vcc:
                                             (zen.term 
                                                (basics.list__t _p_Elt_T)) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vbc 
                                                     v_Vcc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vac))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vbc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vac)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vcc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vac)))))))))))) =>
                                zen.Rall _p_Col_T 
                                  (v_Vac:(zen.term _p_Col_T) =>
                                   zen.forall _p_Col_T 
                                     (v_Vbc:(zen.term _p_Col_T) =>
                                      zen.forall (basics.list__t _p_Elt_T) 
                                        (v_Vcc:
                                         (zen.term (basics.list__t _p_Elt_T)) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vac))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vbc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vac)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vcc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vac)))))))))) 
                                  v_Vhc 
                                  (v_Vwc:
                                   (zen.proof 
                                      (zen.forall _p_Col_T 
                                         (v_Vbc:(zen.term _p_Col_T) =>
                                          zen.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (v_Vcc:
                                             (zen.term 
                                                (basics.list__t _p_Elt_T)) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vbc 
                                                     v_Vcc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vbc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vcc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))))))))))) =>
                                   zen.Rall _p_Col_T 
                                     (v_Vbc:(zen.term _p_Col_T) =>
                                      zen.forall (basics.list__t _p_Elt_T) 
                                        (v_Vcc:
                                         (zen.term (basics.list__t _p_Elt_T)) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vbc v_Vcc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vbc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vcc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc))))))))) 
                                     v_Vjc 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (v_Vcc:
                                             (zen.term 
                                                (basics.list__t _p_Elt_T)) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vjc 
                                                     v_Vcc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vjc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vcc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc)))))))))) =>
                                      zen.Rall (basics.list__t _p_Elt_T) 
                                        (v_Vcc:
                                         (zen.term (basics.list__t _p_Elt_T)) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vjc v_Vcc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vcc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc)))))))) 
                                        v_Vlc 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (_p_It_model v_Vfc v_Vjc 
                                                     v_Vlc)) 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vjc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (_p_It_model v_Vfc v_Vjc v_Vlc)) 
                                           (zen.imp 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc))))))) 
                                           (v_Vzc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (_p_It_model v_Vfc 
                                                        v_Vjc v_Vlc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (_p_It_model v_Vfc v_Vjc 
                                                    v_Vlc)) v_Vnc v_Vzc) 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vhc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc v_Vjc))))) 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc)))))))) =>
                                            zen.Rimply 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc))))) 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc)))))) 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.forall _p_Elt_T 
                                                        (v_Vdc:
                                                         (zen.term _p_Elt_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vjc))))))) =>
                                               zen.Rnotall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc v_Vjc)))) 
                                                 (v_Vcd:
                                                  (zen.term _p_Elt_T) =>
                                                  v_Vdd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc)))))) =>
                                                  zen.Rnotimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vcd v_Vhc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vcd v_Vjc))) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vcd v_Vhc)))) =>
                                                     v_Vfd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc))))) =>
                                                     zen.Rall _p_Elt_T 
                                                       (v_Vdc:
                                                        (zen.term _p_Elt_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vdc 
                                                                   v_Vhc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vdc 
                                                                   v_Vjc)))) 
                                                       v_Vcd 
                                                       (v_Vgd:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vcd 
                                                                   v_Vhc))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_Col_contains 
                                                                   v_Vcd 
                                                                   v_Vjc))) 
                                                          (v_Vhd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vhc))) 
                                                             v_Ved v_Vhd) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_Col_contains 
                                                                    v_Vcd 
                                                                    v_Vjc))) 
                                                             v_Vid v_Vfd) 
                                                          v_Vgd) v_Vpc) v_Vdd) 
                                                 v_Vbd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.forall _p_Elt_T 
                                                     (v_Vdc:
                                                      (zen.term _p_Elt_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vdc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vdc) 
                                                                 (_p_Col_contains 
                                                                    v_Vdc 
                                                                    v_Vhc))))))) =>
                                               zen.Rall _p_Elt_T 
                                                 (v_Vdc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vdc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vdc) 
                                                             (_p_Col_contains 
                                                                v_Vdc v_Vhc))))) 
                                                 v_Vrc 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vrc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vrc) 
                                                                 (_p_Col_contains 
                                                                    v_Vrc 
                                                                    v_Vhc)))))) =>
                                                  zen.Requiv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_Col_contains 
                                                             v_Vrc 
                                                             (abst_copy_aux 
                                                                v_Vfc v_Vhc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._bar__bar_ 
                                                             (_p_L_mem v_Vlc 
                                                                v_Vrc) 
                                                             (_p_Col_contains 
                                                                v_Vrc v_Vhc)))) 
                                                    (v_Vtc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_Col_contains 
                                                                    v_Vrc 
                                                                    (
                                                                    abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc)))))) =>
                                                     v_Vld0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (basics._bar__bar_ 
                                                                    (
                                                                    _p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vrc) 
                                                                    (
                                                                    _p_Col_contains 
                                                                    v_Vrc 
                                                                    v_Vhc)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_Col_contains 
                                                                v_Vrc 
                                                                (abst_copy_aux 
                                                                   v_Vfc 
                                                                   v_Vhc)))) 
                                                       v_Vmd v_Vtc) 
                                                    (v_Vmd0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_Col_contains 
                                                                 v_Vrc 
                                                                 (abst_copy_aux 
                                                                    v_Vfc 
                                                                    v_Vhc))))) =>
                                                     v_Vuc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._bar__bar_ 
                                                                 (_p_L_mem 
                                                                    v_Vlc 
                                                                    v_Vrc) 
                                                                 (_p_Col_contains 
                                                                    v_Vrc 
                                                                    v_Vhc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics._bar__bar_ 
                                                                (_p_L_mem 
                                                                   v_Vlc 
                                                                   v_Vrc) 
                                                                (_p_Col_contains 
                                                                   v_Vrc 
                                                                   v_Vhc)))) 
                                                       v_Vuc v_Vld) v_Vkd) 
                                                 v_Vjd) v_Vad) v_Vyc) v_Vxc) 
                                     v_Vwc) v_Vvc) abst_copy_new_invariant) 
                            v_Vsc) v_Vqc) v_Voc) v_Vmc) v_Vkc) v_Vic) v_Vgc) 
       v_Vec).

def SequenceIterator__includes :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_LCol_contains:((cc.eT _p_Elt_T) ->
                    (cc.eT _p_LCol_T) -> cc.eT basics.bool__t) ->
  l:(cc.eT (basics.list__t _p_Elt_T)) -> c:(cc.eT _p_LCol_T) -> dk_logic.Prop
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_LCol_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_LCol_T) -> cc.eT basics.bool__t) =>
  l:(cc.eT (basics.list__t _p_Elt_T)) =>
  c:(cc.eT _p_LCol_T) =>
  dk_logic.forall _p_Elt_T 
    (e:(cc.eT _p_Elt_T) =>
     dk_logic.imp (dk_logic.ebP (_p_L_mem l e)) 
       (dk_logic.ebP (_p_LCol_contains e c))).

def SequenceIterator__is_empty :
  _p_LCol_T:cc.uT ->
  _p_LCol_is_empty:((cc.eT _p_LCol_T) -> cc.eT basics.bool__t) ->
  l:(cc.eT _p_LCol_T) -> cc.eT basics.bool__t
  :=
  _p_LCol_T:cc.uT =>
  _p_LCol_is_empty:((cc.eT _p_LCol_T) -> cc.eT basics.bool__t) =>
  l:(cc.eT _p_LCol_T) => _p_LCol_is_empty l.

def SequenceIterator__measure_it :
  _p_LCol_T:cc.uT ->
  _p_LCol_size:((cc.eT _p_LCol_T) -> cc.eT basics.int__t) ->
  c:(cc.eT _p_LCol_T) -> cc.eT basics.int__t
  :=
  _p_LCol_T:cc.uT =>
  _p_LCol_size:((cc.eT _p_LCol_T) -> cc.eT basics.int__t) =>
  c:(cc.eT _p_LCol_T) => _p_LCol_size c.

def SequenceIterator__start :
  _p_LCol_T:cc.uT -> c:(cc.eT _p_LCol_T) -> cc.eT _p_LCol_T
  :=
  _p_LCol_T:cc.uT => c:(cc.eT _p_LCol_T) => c.

def SequenceIterator__tolist :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  l:(cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  l:(cc.eT _p_LCol_T) => _p_LCol_tolist l.

def SequenceIterator__has_next :
  _p_LCol_T:cc.uT ->
  abst_T:cc.uT ->
  abst_is_empty:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  it:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  _p_LCol_T:cc.uT =>
  abst_T:cc.uT =>
  abst_is_empty:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  it:(cc.eT abst_T) => basics._tilda__tilda_ (abst_is_empty it).

def SequenceIterator__model :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  it:(cc.eT abst_T) ->
  c:(cc.eT _p_LCol_T) -> l:(cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  it:(cc.eT abst_T) =>
  c:(cc.eT _p_LCol_T) =>
  l:(cc.eT (basics.list__t _p_Elt_T)) =>
  dk_logic.forall _p_Elt_T 
    (x:(cc.eT _p_Elt_T) =>
     dk_logic.eqv (dk_logic.ebP (_p_L_mem l x)) 
       (dk_logic.ebP (_p_L_mem (abst_tolist it) x))).

def SequenceIterator__has_next_spec :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  abst_T:cc.uT ->
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.eqv 
          (dk_logic.ebP 
             (basics._equal_ basics.bool__t (abst_has_next it) dk_bool.false)) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
                (builtins.nil _p_Elt_T)))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  abst_T:cc.uT =>
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.eqv 
          (dk_logic.ebP 
             (basics._equal_ basics.bool__t (abst_has_next it) dk_bool.false)) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
                (builtins.nil _p_Elt_T))))).

def SequenceIterator__step_it :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_LCol_head:((cc.eT _p_LCol_T) -> cc.eT _p_Elt_T) ->
  _p_LCol_tail:((cc.eT _p_LCol_T) -> cc.eT _p_LCol_T) ->
  abst_has_next:((cc.eT _p_LCol_T) -> cc.eT basics.bool__t) ->
  it:(cc.eT _p_LCol_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_LCol_T)
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_LCol_head:((cc.eT _p_LCol_T) -> cc.eT _p_Elt_T) =>
  _p_LCol_tail:((cc.eT _p_LCol_T) -> cc.eT _p_LCol_T) =>
  abst_has_next:((cc.eT _p_LCol_T) -> cc.eT basics.bool__t) =>
  it:(cc.eT _p_LCol_T) =>
  dk_bool.ite (dk_tuple.prod _p_Elt_T _p_LCol_T) (abst_has_next it) 
    (dk_tuple.pair _p_Elt_T _p_LCol_T (_p_LCol_head it) (_p_LCol_tail it)) 
    (basics.focalize_error (dk_tuple.prod _p_Elt_T _p_LCol_T) 
       (builtins.string_cons 
          (builtins.char_of_nat 
             (builtins.S 
                (builtins.S 
                   (builtins.S 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
          (builtins.string_cons 
             (builtins.char_of_nat 
                (builtins.S 
                   (builtins.S 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
             (builtins.string_cons 
                (builtins.char_of_nat 
                   (builtins.S 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))) 
                (builtins.string_cons 
                   (builtins.char_of_nat 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                   (builtins.string_cons 
                      (builtins.char_of_nat 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                      (builtins.string_cons 
                         (builtins.char_of_nat 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                         (builtins.string_cons 
                            (builtins.char_of_nat 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                            (builtins.string_cons 
                               (builtins.char_of_nat 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))) 
                               (builtins.string_cons 
                                  (builtins.char_of_nat 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                  (builtins.string_cons 
                                     (builtins.char_of_nat 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                     (builtins.string_cons 
                                        (builtins.char_of_nat 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                        (builtins.string_cons 
                                           (builtins.char_of_nat 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                           (builtins.string_cons 
                                              (builtins.char_of_nat 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                              (builtins.string_cons 
                                                 (builtins.char_of_nat 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                                 (builtins.string_cons 
                                                    (builtins.char_of_nat 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                                    builtins.string_nil)))))))))))))))).

def SequenceIterator__model_has_next_true :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem_contains:(dk_logic.eP 
                       (dk_logic.forall (basics.list__t _p_Elt_T) 
                          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                           dk_logic.eqv 
                             (dk_logic.ebP 
                                (basics._tilda__tilda_ 
                                   (basics._equal_ (basics.list__t _p_Elt_T) 
                                      l (builtins.nil _p_Elt_T)))) 
                             (dk_logic.exists _p_Elt_T 
                                (x:(cc.eT _p_Elt_T) =>
                                 dk_logic.ebP (_p_L_mem l x)))))) ->
  abst_T:cc.uT ->
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall _p_LCol_T 
             (c:(cc.eT _p_LCol_T) =>
              dk_logic.imp 
                (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
                   abst_tolist it c l) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ basics.bool__t (abst_has_next it) 
                         dk_bool.true)) 
                   (dk_logic.ebP 
                      (basics._tilda__tilda_ 
                         (basics._equal_ (basics.list__t _p_Elt_T) l 
                            (builtins.nil _p_Elt_T)))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem_contains:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_Elt_T) 
        (l:(cc.eT (basics.list__t _p_Elt_T)) =>
         dk_logic.eqv 
           (dk_logic.ebP 
              (basics._tilda__tilda_ 
                 (basics._equal_ (basics.list__t _p_Elt_T) l 
                    (builtins.nil _p_Elt_T)))) 
           (dk_logic.exists _p_Elt_T 
              (x:(cc.eT _p_Elt_T) => dk_logic.ebP (_p_L_mem l x)))))) =>
  abst_T:cc.uT =>
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  (__U_1_LEMMA:
   (it:(cc.eT abst_T) ->
    c:(cc.eT _p_LCol_T) ->
    l:(cc.eT (basics.list__t _p_Elt_T)) ->
    M:(dk_logic.eP 
         (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
            abst_tolist it c l)) ->
    N:(dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ basics.bool__t (abst_has_next it) dk_bool.true))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (basics._tilda__tilda_ 
            (basics._equal_ (basics.list__t _p_Elt_T) l 
               (builtins.nil _p_Elt_T))))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall _p_LCol_T 
              (v_Vbc:(zen.term _p_LCol_T) =>
               zen.imp 
                 (zen.triangle 
                    (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                       abst_T abst_tolist v_Vzb v_Vbc v_Vac)) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t 
                             (abst_has_next v_Vzb) dk_bool.true))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vac 
                                (builtins.nil _p_Elt_T)))))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.forall _p_LCol_T 
                     (v_Vbc:(zen.term _p_LCol_T) =>
                      zen.imp 
                        (zen.triangle 
                           (SequenceIterator__model _p_Elt_T _p_LCol_T 
                              _p_L_mem abst_T abst_tolist v_Vzb v_Vbc v_Vac)) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ basics.bool__t 
                                    (abst_has_next v_Vzb) dk_bool.true))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vac 
                                       (builtins.nil _p_Elt_T)))))))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall _p_LCol_T 
              (v_Vbc:(zen.term _p_LCol_T) =>
               zen.imp 
                 (zen.triangle 
                    (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                       abst_T abst_tolist v_Vzb v_Vbc v_Vac)) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t 
                             (abst_has_next v_Vzb) dk_bool.true))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vac 
                                (builtins.nil _p_Elt_T))))))))) 
        (v_Vdc:(zen.term abst_T) =>
         v_Vec:
         (zen.proof 
            (zen.not 
               (zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.forall _p_LCol_T 
                     (v_Vbc:(zen.term _p_LCol_T) =>
                      zen.imp 
                        (zen.triangle 
                           (SequenceIterator__model _p_Elt_T _p_LCol_T 
                              _p_L_mem abst_T abst_tolist v_Vdc v_Vbc v_Vac)) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ basics.bool__t 
                                    (abst_has_next v_Vdc) dk_bool.true))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vac 
                                       (builtins.nil _p_Elt_T))))))))))) =>
         zen.Rnotall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall _p_LCol_T 
              (v_Vbc:(zen.term _p_LCol_T) =>
               zen.imp 
                 (zen.triangle 
                    (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                       abst_T abst_tolist v_Vdc v_Vbc v_Vac)) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t 
                             (abst_has_next v_Vdc) dk_bool.true))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vac 
                                (builtins.nil _p_Elt_T)))))))) 
           (v_Vfc:(zen.term (basics.list__t _p_Elt_T)) =>
            v_Vgc:
            (zen.proof 
               (zen.not 
                  (zen.forall _p_LCol_T 
                     (v_Vbc:(zen.term _p_LCol_T) =>
                      zen.imp 
                        (zen.triangle 
                           (SequenceIterator__model _p_Elt_T _p_LCol_T 
                              _p_L_mem abst_T abst_tolist v_Vdc v_Vbc v_Vfc)) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ basics.bool__t 
                                    (abst_has_next v_Vdc) dk_bool.true))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vfc 
                                       (builtins.nil _p_Elt_T)))))))))) =>
            zen.Rnotall _p_LCol_T 
              (v_Vbc:(zen.term _p_LCol_T) =>
               zen.imp 
                 (zen.triangle 
                    (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                       abst_T abst_tolist v_Vdc v_Vbc v_Vfc)) 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ basics.bool__t 
                             (abst_has_next v_Vdc) dk_bool.true))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vfc 
                                (builtins.nil _p_Elt_T))))))) 
              (v_Vhc:(zen.term _p_LCol_T) =>
               v_Vic:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle 
                           (SequenceIterator__model _p_Elt_T _p_LCol_T 
                              _p_L_mem abst_T abst_tolist v_Vdc v_Vhc v_Vfc)) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._equal_ basics.bool__t 
                                    (abst_has_next v_Vdc) dk_bool.true))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics._equal_ 
                                       (basics.list__t _p_Elt_T) v_Vfc 
                                       (builtins.nil _p_Elt_T))))))))) =>
               zen.Rall abst_T 
                 (v_Vzb:(zen.term abst_T) =>
                  zen.forall _p_LCol_T 
                    (v_Vbc:(zen.term _p_LCol_T) =>
                     zen.forall (basics.list__t _p_Elt_T) 
                       (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                        zen.imp 
                          (zen.triangle 
                             (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                _p_L_mem abst_T abst_tolist v_Vzb v_Vbc v_Vac)) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ basics.bool__t 
                                      (abst_has_next v_Vzb) dk_bool.true))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (basics._equal_ 
                                         (basics.list__t _p_Elt_T) v_Vac 
                                         (builtins.nil _p_Elt_T))))))))) 
                 v_Vdc 
                 (v_Vjc:
                  (zen.proof 
                     (zen.forall _p_LCol_T 
                        (v_Vbc:(zen.term _p_LCol_T) =>
                         zen.forall (basics.list__t _p_Elt_T) 
                           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                            zen.imp 
                              (zen.triangle 
                                 (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                    _p_L_mem abst_T abst_tolist v_Vdc v_Vbc 
                                    v_Vac)) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._equal_ basics.bool__t 
                                          (abst_has_next v_Vdc) dk_bool.true))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (basics._equal_ 
                                             (basics.list__t _p_Elt_T) v_Vac 
                                             (builtins.nil _p_Elt_T)))))))))) =>
                  zen.Rall _p_LCol_T 
                    (v_Vbc:(zen.term _p_LCol_T) =>
                     zen.forall (basics.list__t _p_Elt_T) 
                       (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                        zen.imp 
                          (zen.triangle 
                             (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                _p_L_mem abst_T abst_tolist v_Vdc v_Vbc v_Vac)) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ basics.bool__t 
                                      (abst_has_next v_Vdc) dk_bool.true))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (basics._equal_ 
                                         (basics.list__t _p_Elt_T) v_Vac 
                                         (builtins.nil _p_Elt_T)))))))) 
                    v_Vhc 
                    (v_Vkc:
                     (zen.proof 
                        (zen.forall (basics.list__t _p_Elt_T) 
                           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                            zen.imp 
                              (zen.triangle 
                                 (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                    _p_L_mem abst_T abst_tolist v_Vdc v_Vhc 
                                    v_Vac)) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._equal_ basics.bool__t 
                                          (abst_has_next v_Vdc) dk_bool.true))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (basics._equal_ 
                                             (basics.list__t _p_Elt_T) v_Vac 
                                             (builtins.nil _p_Elt_T))))))))) =>
                     zen.Rall (basics.list__t _p_Elt_T) 
                       (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                        zen.imp 
                          (zen.triangle 
                             (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                _p_L_mem abst_T abst_tolist v_Vdc v_Vhc v_Vac)) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ basics.bool__t 
                                      (abst_has_next v_Vdc) dk_bool.true))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (basics._equal_ 
                                         (basics.list__t _p_Elt_T) v_Vac 
                                         (builtins.nil _p_Elt_T))))))) v_Vfc 
                       (v_Vlc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle 
                                 (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                    _p_L_mem abst_T abst_tolist v_Vdc v_Vhc 
                                    v_Vfc)) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._equal_ basics.bool__t 
                                          (abst_has_next v_Vdc) dk_bool.true))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (basics._equal_ 
                                             (basics.list__t _p_Elt_T) v_Vfc 
                                             (builtins.nil _p_Elt_T)))))))) =>
                        zen.Raxiom 
                          (zen.imp 
                             (zen.triangle 
                                (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                   _p_L_mem abst_T abst_tolist v_Vdc v_Vhc 
                                   v_Vfc)) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._equal_ basics.bool__t 
                                         (abst_has_next v_Vdc) dk_bool.true))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._tilda__tilda_ 
                                         (basics._equal_ 
                                            (basics.list__t _p_Elt_T) v_Vfc 
                                            (builtins.nil _p_Elt_T))))))) 
                          v_Vlc v_Vic) v_Vkc) v_Vjc) __U_1_LEMMA) v_Vgc) 
           v_Vec) v_Vcc)) 
    (it:(cc.eT abst_T) =>
     c:(cc.eT _p_LCol_T) =>
     l:(cc.eT (basics.list__t _p_Elt_T)) =>
     M:
     (dk_logic.eP 
        (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
           abst_tolist it c l)) =>
     N:
     (dk_logic.eP 
        (dk_logic.ebP 
           (basics._equal_ basics.bool__t (abst_has_next it) dk_bool.true))) =>
     (__U_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._tilda__tilda_ 
               (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
                  (builtins.nil _p_Elt_T))))) =>
      (__U_1_3_LEMMA:
       (dk_logic.eP 
          (dk_logic.exists _p_Elt_T 
             (x:(cc.eT _p_Elt_T) => dk_logic.ebP (_p_L_mem l x)))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (basics._tilda__tilda_ 
                  (basics._equal_ (basics.list__t _p_Elt_T) l 
                     (builtins.nil _p_Elt_T))))) 
         (v_Vzb:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ 
                         (basics.syntactic_equal (basics.list__t _p_Elt_T) l 
                            (builtins.nil _p_Elt_T))))))) =>
          focal.zenon_focal_notnot 
            (basics._equal_ (basics.list__t _p_Elt_T) l 
               (builtins.nil _p_Elt_T)) 
            (v_Vac:
             (zen.proof 
                (zen.triangle 
                   (focal.is_true 
                      (basics.syntactic_equal (basics.list__t _p_Elt_T) l 
                         (builtins.nil _p_Elt_T))))) =>
             zen.Rall (basics.list__t _p_Elt_T) 
               (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.eqv 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (basics._equal_ (basics.list__t _p_Elt_T) v_Vbc 
                              (builtins.nil _p_Elt_T))))) 
                  (zen.exists _p_Elt_T 
                     (v_Vcc:(zen.term _p_Elt_T) =>
                      zen.triangle (focal.is_true (_p_L_mem v_Vbc v_Vcc))))) 
               l 
               (v_Vdc:
                (zen.proof 
                   (zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._tilda__tilda_ 
                               (basics._equal_ (basics.list__t _p_Elt_T) l 
                                  (builtins.nil _p_Elt_T))))) 
                      (zen.exists _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.triangle (focal.is_true (_p_L_mem l v_Vcc)))))) =>
                zen.Requiv 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (basics._equal_ (basics.list__t _p_Elt_T) l 
                              (builtins.nil _p_Elt_T))))) 
                  (zen.exists _p_Elt_T 
                     (v_Vcc:(zen.term _p_Elt_T) =>
                      zen.triangle (focal.is_true (_p_L_mem l v_Vcc)))) 
                  (v_Vzb0:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (basics.syntactic_equal 
                                     (basics.list__t _p_Elt_T) l 
                                     (builtins.nil _p_Elt_T))))))) =>
                   v_Vec:
                   (zen.proof 
                      (zen.not 
                         (zen.exists _p_Elt_T 
                            (v_Vcc:(zen.term _p_Elt_T) =>
                             zen.triangle (focal.is_true (_p_L_mem l v_Vcc)))))) =>
                   zen.Raxiom 
                     (zen.exists _p_Elt_T 
                        (v_Vcc:(zen.term _p_Elt_T) =>
                         zen.triangle (focal.is_true (_p_L_mem l v_Vcc)))) 
                     __U_1_3_LEMMA v_Vec) 
                  (v_Vfc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._tilda__tilda_ 
                               (basics.syntactic_equal 
                                  (basics.list__t _p_Elt_T) l 
                                  (builtins.nil _p_Elt_T)))))) =>
                   __U_1_3_LEMMA0:
                   (zen.proof 
                      (zen.exists _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.triangle (focal.is_true (_p_L_mem l v_Vcc))))) =>
                   focal.zenon_focal_not 
                     (basics.syntactic_equal (basics.list__t _p_Elt_T) l 
                        (builtins.nil _p_Elt_T)) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics.syntactic_equal 
                                     (basics.list__t _p_Elt_T) l 
                                     (builtins.nil _p_Elt_T)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (basics.syntactic_equal 
                                 (basics.list__t _p_Elt_T) l 
                                 (builtins.nil _p_Elt_T)))) v_Vac v_Vgc) 
                     v_Vfc) v_Vdc) _p_L_mem_contains) v_Vzb)) 
        (zen.nnpp 
           (zen.exists _p_Elt_T 
              (v_Vzb:(zen.term _p_Elt_T) =>
               zen.triangle (focal.is_true (_p_L_mem l v_Vzb)))) 
           (v_Vac:
            (zen.proof 
               (zen.not 
                  (zen.exists _p_Elt_T 
                     (v_Vzb:(zen.term _p_Elt_T) =>
                      zen.triangle (focal.is_true (_p_L_mem l v_Vzb)))))) =>
            focal.zenon_focal_not 
              (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
                 (builtins.nil _p_Elt_T)) 
              (v_Vbc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                              (abst_tolist it) (builtins.nil _p_Elt_T)))))) =>
               zen.Rall (basics.list__t _p_Elt_T) 
                 (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) v_Vcc 
                                (builtins.nil _p_Elt_T))))) 
                    (zen.exists _p_Elt_T 
                       (v_Vzb:(zen.term _p_Elt_T) =>
                        zen.triangle (focal.is_true (_p_L_mem v_Vcc v_Vzb))))) 
                 (abst_tolist it) 
                 (v_Vdc:
                  (zen.proof 
                     (zen.eqv 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    (abst_tolist it) (builtins.nil _p_Elt_T))))) 
                        (zen.exists _p_Elt_T 
                           (v_Vzb:(zen.term _p_Elt_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (abst_tolist it) v_Vzb)))))) =>
                  zen.Requiv 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (basics._equal_ (basics.list__t _p_Elt_T) 
                                (abst_tolist it) (builtins.nil _p_Elt_T))))) 
                    (zen.exists _p_Elt_T 
                       (v_Vzb:(zen.term _p_Elt_T) =>
                        zen.triangle 
                          (focal.is_true (_p_L_mem (abst_tolist it) v_Vzb)))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (basics.syntactic_equal 
                                       (basics.list__t _p_Elt_T) 
                                       (abst_tolist it) 
                                       (builtins.nil _p_Elt_T))))))) =>
                     v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.exists _p_Elt_T 
                              (v_Vzb:(zen.term _p_Elt_T) =>
                               zen.triangle 
                                 (focal.is_true 
                                    (_p_L_mem (abst_tolist it) v_Vzb)))))) =>
                     focal.zenon_focal_notnot 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          (abst_tolist it) (builtins.nil _p_Elt_T)) 
                       (v_Vgc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics.syntactic_equal 
                                    (basics.list__t _p_Elt_T) 
                                    (abst_tolist it) (builtins.nil _p_Elt_T))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal 
                                   (basics.list__t _p_Elt_T) 
                                   (abst_tolist it) (builtins.nil _p_Elt_T)))) 
                          v_Vgc v_Vbc) v_Vec) 
                    (__U_1_1_LEMMA0:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ 
                                 (basics.syntactic_equal 
                                    (basics.list__t _p_Elt_T) 
                                    (abst_tolist it) (builtins.nil _p_Elt_T)))))) =>
                     v_Vhc:
                     (zen.proof 
                        (zen.exists _p_Elt_T 
                           (v_Vzb:(zen.term _p_Elt_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (abst_tolist it) v_Vzb))))) =>
                     zen.Rex _p_Elt_T 
                       (v_Vzb:(zen.term _p_Elt_T) =>
                        zen.triangle 
                          (focal.is_true (_p_L_mem (abst_tolist it) v_Vzb))) 
                       (v_Vic:(zen.term _p_Elt_T) =>
                        v_Vjc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (abst_tolist it) v_Vic)))) =>
                        zen.Rall _p_Elt_T 
                          (v_Vzb:(zen.term _p_Elt_T) =>
                           zen.eqv 
                             (zen.triangle (focal.is_true (_p_L_mem l v_Vzb))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist it) v_Vzb)))) 
                          v_Vic 
                          (v_Vkc:
                           (zen.proof 
                              (zen.eqv 
                                 (zen.triangle 
                                    (focal.is_true (_p_L_mem l v_Vic))) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (abst_tolist it) v_Vic))))) =>
                           zen.Requiv 
                             (zen.triangle (focal.is_true (_p_L_mem l v_Vic))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist it) v_Vic))) 
                             (v_Vlc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (_p_L_mem l v_Vic))))) =>
                              v_Vmc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem (abst_tolist it) v_Vic))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist it) v_Vic))) 
                                v_Vjc v_Vmc) 
                             (v_Vnc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (_p_L_mem l v_Vic)))) =>
                              v_Vjc0:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (abst_tolist it) v_Vic)))) =>
                              zen.Rnotex _p_Elt_T 
                                (v_Vzb:(zen.term _p_Elt_T) =>
                                 zen.triangle 
                                   (focal.is_true (_p_L_mem l v_Vzb))) v_Vic 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (_p_L_mem l v_Vic))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem l v_Vic))) 
                                   v_Vnc v_Vlc) v_Vac) v_Vkc) M) v_Vhc) v_Vdc) 
                 _p_L_mem_contains) __U_1_1_LEMMA))) 
       (dk_builtins.magic_prove 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
                   (builtins.nil _p_Elt_T)))))).

def SequenceIterator__model_preserved :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  abst_T:cc.uT ->
  abst_includes:((cc.eT (basics.list__t _p_Elt_T)) ->
                 (cc.eT _p_LCol_T) -> dk_logic.Prop) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_LCol_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  c:(cc.eT _p_LCol_T) -> it:(cc.eT abst_T) -> dk_logic.Prop
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  abst_T:cc.uT =>
  abst_includes:
  ((cc.eT (basics.list__t _p_Elt_T)) -> (cc.eT _p_LCol_T) -> dk_logic.Prop) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_LCol_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  c:(cc.eT _p_LCol_T) =>
  it:(cc.eT abst_T) =>
  dk_logic.forall (basics.list__t _p_Elt_T) 
    (l:(cc.eT (basics.list__t _p_Elt_T)) =>
     dk_logic.imp (abst_model it c l) (abst_includes l c)).

def SequenceIterator__model_spec_list :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall _p_LCol_T 
          (c:(cc.eT _p_LCol_T) =>
           dk_logic.forall (basics.list__t _p_Elt_T) 
             (l:(cc.eT (basics.list__t _p_Elt_T)) =>
              dk_logic.eqv 
                (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
                   abst_tolist it c l) 
                (dk_logic.forall _p_Elt_T 
                   (x:(cc.eT _p_Elt_T) =>
                    dk_logic.eqv (dk_logic.ebP (_p_L_mem l x)) 
                      (dk_logic.ebP (_p_L_mem (abst_tolist it) x))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall _p_LCol_T 
          (v_Vac:(zen.term _p_LCol_T) =>
           zen.forall (basics.list__t _p_Elt_T) 
             (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.eqv 
                (zen.triangle 
                   (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                      abst_T abst_tolist v_Vzb v_Vac v_Vbc)) 
                (zen.forall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vbc v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vzb) v_Vcc))))))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall _p_LCol_T 
                 (v_Vac:(zen.term _p_LCol_T) =>
                  zen.forall (basics.list__t _p_Elt_T) 
                    (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.eqv 
                       (zen.triangle 
                          (SequenceIterator__model _p_Elt_T _p_LCol_T 
                             _p_L_mem abst_T abst_tolist v_Vzb v_Vac v_Vbc)) 
                       (zen.forall _p_Elt_T 
                          (v_Vcc:(zen.term _p_Elt_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vbc v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vzb) v_Vcc))))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall _p_LCol_T 
          (v_Vac:(zen.term _p_LCol_T) =>
           zen.forall (basics.list__t _p_Elt_T) 
             (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.eqv 
                (zen.triangle 
                   (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                      abst_T abst_tolist v_Vzb v_Vac v_Vbc)) 
                (zen.forall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vbc v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vzb) v_Vcc)))))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_LCol_T 
                 (v_Vac:(zen.term _p_LCol_T) =>
                  zen.forall (basics.list__t _p_Elt_T) 
                    (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.eqv 
                       (zen.triangle 
                          (SequenceIterator__model _p_Elt_T _p_LCol_T 
                             _p_L_mem abst_T abst_tolist v_Vec v_Vac v_Vbc)) 
                       (zen.forall _p_Elt_T 
                          (v_Vcc:(zen.term _p_Elt_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vbc v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vcc)))))))))) =>
        zen.Rnotall _p_LCol_T 
          (v_Vac:(zen.term _p_LCol_T) =>
           zen.forall (basics.list__t _p_Elt_T) 
             (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.eqv 
                (zen.triangle 
                   (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                      abst_T abst_tolist v_Vec v_Vac v_Vbc)) 
                (zen.forall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vbc v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vec) v_Vcc))))))) 
          (v_Vgc:(zen.term _p_LCol_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.forall (basics.list__t _p_Elt_T) 
                    (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.eqv 
                       (zen.triangle 
                          (SequenceIterator__model _p_Elt_T _p_LCol_T 
                             _p_L_mem abst_T abst_tolist v_Vec v_Vgc v_Vbc)) 
                       (zen.forall _p_Elt_T 
                          (v_Vcc:(zen.term _p_Elt_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vbc v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vcc))))))))) =>
           zen.Rnotall (basics.list__t _p_Elt_T) 
             (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.eqv 
                (zen.triangle 
                   (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                      abst_T abst_tolist v_Vec v_Vgc v_Vbc)) 
                (zen.forall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vbc v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vec) v_Vcc)))))) 
             (v_Vic:(zen.term (basics.list__t _p_Elt_T)) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.eqv 
                       (zen.triangle 
                          (SequenceIterator__model _p_Elt_T _p_LCol_T 
                             _p_L_mem abst_T abst_tolist v_Vec v_Vgc v_Vic)) 
                       (zen.forall _p_Elt_T 
                          (v_Vcc:(zen.term _p_Elt_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vcc)))))))) =>
              zen.Rnotequiv 
                (zen.triangle 
                   (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                      abst_T abst_tolist v_Vec v_Vgc v_Vic)) 
                (zen.forall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vec) v_Vcc))))) 
                (v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.forall _p_Elt_T 
                          (v_Vcc:(zen.term _p_Elt_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vcc))))))) =>
                 v_Vlc:
                 (zen.proof 
                    (zen.forall _p_Elt_T 
                       (v_Vcc:(zen.term _p_Elt_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (abst_tolist v_Vec) v_Vcc)))))) =>
                 zen.Rnotall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vec) v_Vcc)))) 
                   (v_Vmc:(zen.term _p_Elt_T) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vmc)))))) =>
                    zen.Rnotequiv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                      (v_Voc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vic v_Vmc))))) =>
                       v_Vpc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (abst_tolist v_Vec) v_Vmc)))) =>
                       zen.Rall _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vcc)))) 
                         v_Vmc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                            (v_Voc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vic v_Vmc))))) =>
                             v_Vrc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                               v_Vpc v_Vrc) 
                            (v_Vsc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc)))) =>
                             v_Vpc0:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                               v_Vsc v_Voc) v_Vqc) v_Vlc) 
                      (v_Vsc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem v_Vic v_Vmc)))) =>
                       v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                       zen.Rall _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vcc)))) 
                         v_Vmc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                            (v_Voc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vic v_Vmc))))) =>
                             v_Vrc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                               v_Vsc v_Voc) 
                            (v_Vsc0:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc)))) =>
                             v_Vpc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                               v_Vpc v_Vrc) v_Vqc) v_Vlc) v_Vnc) v_Vkc) 
                (v_Vlc:
                 (zen.proof 
                    (zen.forall _p_Elt_T 
                       (v_Vcc:(zen.term _p_Elt_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (abst_tolist v_Vec) v_Vcc)))))) =>
                 v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.forall _p_Elt_T 
                          (v_Vcc:(zen.term _p_Elt_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vcc))))))) =>
                 zen.Rnotall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vec) v_Vcc)))) 
                   (v_Vmc:(zen.term _p_Elt_T) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.eqv 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vmc)))))) =>
                    zen.Rnotequiv 
                      (zen.triangle (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                      (v_Voc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vic v_Vmc))))) =>
                       v_Vpc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (abst_tolist v_Vec) v_Vmc)))) =>
                       zen.Rall _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vcc)))) 
                         v_Vmc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                            (v_Voc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vic v_Vmc))))) =>
                             v_Vrc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                               v_Vpc v_Vrc) 
                            (v_Vsc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc)))) =>
                             v_Vpc0:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                               v_Vsc v_Voc) v_Vqc) v_Vlc) 
                      (v_Vsc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem v_Vic v_Vmc)))) =>
                       v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                       zen.Rall _p_Elt_T 
                         (v_Vcc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vcc)))) 
                         v_Vmc 
                         (v_Vqc:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                            (v_Voc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vic v_Vmc))))) =>
                             v_Vrc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem (abst_tolist v_Vec) v_Vmc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_L_mem v_Vic v_Vmc))) 
                               v_Vsc v_Voc) 
                            (v_Vsc0:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vic v_Vmc)))) =>
                             v_Vpc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_tolist v_Vec) v_Vmc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (abst_tolist v_Vec) v_Vmc))) 
                               v_Vpc v_Vrc) v_Vqc) v_Vlc) v_Vnc) v_Vkc) v_Vjc) 
             v_Vhc) v_Vfc) v_Vdc).

def SequenceIterator__model_start :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  dk_logic.eP 
    (dk_logic.forall _p_LCol_T 
       (c:(cc.eT _p_LCol_T) =>
        SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
          (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) 
          (SequenceIterator__start _p_LCol_T c) c (_p_LCol_tolist c)))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  zen.nnpp 
    (zen.forall _p_LCol_T 
       (v_Vzb:(zen.term _p_LCol_T) =>
        zen.triangle 
          (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
             (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) 
             (SequenceIterator__start _p_LCol_T v_Vzb) v_Vzb 
             (_p_LCol_tolist v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_LCol_T 
              (v_Vzb:(zen.term _p_LCol_T) =>
               zen.triangle 
                 (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_T 
                    (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                       _p_LCol_tolist) 
                    (SequenceIterator__start _p_LCol_T v_Vzb) v_Vzb 
                    (_p_LCol_tolist v_Vzb)))))) =>
     zen.Rnotall _p_LCol_T 
       (v_Vzb:(zen.term _p_LCol_T) =>
        zen.triangle 
          (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
             (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) 
             (SequenceIterator__start _p_LCol_T v_Vzb) v_Vzb 
             (_p_LCol_tolist v_Vzb))) 
       (v_Vbc:(zen.term _p_LCol_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_Elt_T 
                 (v_Vdc:(zen.term _p_Elt_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vdc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem 
                             (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                                _p_LCol_tolist 
                                (SequenceIterator__start _p_LCol_T v_Vbc)) 
                             v_Vdc))))))) =>
        zen.Rnotall _p_Elt_T 
          (v_Vdc:(zen.term _p_Elt_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vdc))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_L_mem 
                      (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                         _p_LCol_tolist 
                         (SequenceIterator__start _p_LCol_T v_Vbc)) v_Vdc)))) 
          (v_Vec:(zen.term _p_Elt_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem 
                             (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                                _p_LCol_tolist 
                                (SequenceIterator__start _p_LCol_T v_Vbc)) 
                             v_Vec)))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_L_mem 
                      (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                         _p_LCol_tolist 
                         (SequenceIterator__start _p_LCol_T v_Vbc)) v_Vec))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec))) 
                v_Vhc v_Vgc) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec)))) =>
              v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vec))) 
                v_Vhc v_Vgc) v_Vfc) v_Vcc) v_Vac).

def SequenceIterator__model_has_next_false :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_has_next_spec:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (it:(cc.eT abst_T) =>
                            dk_logic.eqv 
                              (dk_logic.ebP 
                                 (basics._equal_ basics.bool__t 
                                    (abst_has_next it) dk_bool.false)) 
                              (dk_logic.ebP 
                                 (basics._equal_ (basics.list__t _p_Elt_T) 
                                    (abst_tolist it) (builtins.nil _p_Elt_T)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall _p_LCol_T 
             (c:(cc.eT _p_LCol_T) =>
              dk_logic.imp 
                (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
                   abst_tolist it c l) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ basics.bool__t (abst_has_next it) 
                         dk_bool.false)) 
                   (dk_logic.ebP 
                      (basics._equal_ (basics.list__t _p_Elt_T) l 
                         (builtins.nil _p_Elt_T))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_tolist:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_has_next_spec:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (it:(cc.eT abst_T) =>
         dk_logic.eqv 
           (dk_logic.ebP 
              (basics._equal_ basics.bool__t (abst_has_next it) dk_bool.false)) 
           (dk_logic.ebP 
              (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
                 (builtins.nil _p_Elt_T)))))) =>
  (__X_1_LEMMA:
   (it:(cc.eT abst_T) ->
    c:(cc.eT _p_LCol_T) ->
    l:(cc.eT (basics.list__t _p_Elt_T)) ->
    M:(dk_logic.eP 
         (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
            abst_tolist it c l)) ->
    N:(dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ basics.bool__t (abst_has_next it) dk_bool.false))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (basics._equal_ (basics.list__t _p_Elt_T) l (builtins.nil _p_Elt_T)))) =>
   dk_builtins.magic_prove 
     (dk_logic.forall abst_T 
        (it:(cc.eT abst_T) =>
         dk_logic.forall (basics.list__t _p_Elt_T) 
           (l:(cc.eT (basics.list__t _p_Elt_T)) =>
            dk_logic.forall _p_LCol_T 
              (c:(cc.eT _p_LCol_T) =>
               dk_logic.imp 
                 (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
                    abst_tolist it c l) 
                 (dk_logic.imp 
                    (dk_logic.ebP 
                       (basics._equal_ basics.bool__t (abst_has_next it) 
                          dk_bool.false)) 
                    (dk_logic.ebP 
                       (basics._equal_ (basics.list__t _p_Elt_T) l 
                          (builtins.nil _p_Elt_T))))))))) 
    (it:(cc.eT abst_T) =>
     c:(cc.eT _p_LCol_T) =>
     l:(cc.eT (basics.list__t _p_Elt_T)) =>
     M:
     (dk_logic.eP 
        (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem abst_T 
           abst_tolist it c l)) =>
     N:
     (dk_logic.eP 
        (dk_logic.ebP 
           (basics._equal_ basics.bool__t (abst_has_next it) dk_bool.false))) =>
     (__X_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
               (builtins.nil _p_Elt_T)))) =>
      (__X_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.forall _p_Elt_T 
             (x:(cc.eT _p_Elt_T) =>
              dk_logic.imp (dk_logic.ebP (_p_L_mem l x)) 
                (dk_logic.ebP (_p_L_mem (builtins.nil _p_Elt_T) x))))) =>
       dk_builtins.magic_prove 
         (dk_logic.ebP 
            (basics._equal_ (basics.list__t _p_Elt_T) l 
               (builtins.nil _p_Elt_T)))) 
        (zen.nnpp 
           (zen.forall _p_Elt_T 
              (v_Vcc:(zen.term _p_Elt_T) =>
               zen.imp (zen.triangle (focal.is_true (_p_L_mem l v_Vcc))) 
                 (zen.triangle 
                    (focal.is_true (_p_L_mem (builtins.nil _p_Elt_T) v_Vcc))))) 
           (v_Vdc:
            (zen.proof 
               (zen.not 
                  (zen.forall _p_Elt_T 
                     (v_Vcc:(zen.term _p_Elt_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (_p_L_mem l v_Vcc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.nil _p_Elt_T) v_Vcc))))))) =>
            zen.Rnotall _p_Elt_T 
              (v_Vcc:(zen.term _p_Elt_T) =>
               zen.imp (zen.triangle (focal.is_true (_p_L_mem l v_Vcc))) 
                 (zen.triangle 
                    (focal.is_true (_p_L_mem (builtins.nil _p_Elt_T) v_Vcc)))) 
              (v_Vec:(zen.term _p_Elt_T) =>
               v_Vfc:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle (focal.is_true (_p_L_mem l v_Vec))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.nil _p_Elt_T) v_Vec)))))) =>
               zen.Rnotimply 
                 (zen.triangle (focal.is_true (_p_L_mem l v_Vec))) 
                 (zen.triangle 
                    (focal.is_true (_p_L_mem (builtins.nil _p_Elt_T) v_Vec))) 
                 (v_Vgc:
                  (zen.proof 
                     (zen.triangle (focal.is_true (_p_L_mem l v_Vec)))) =>
                  v_Vhc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.nil _p_Elt_T) v_Vec))))) =>
                  focal.zenon_syntactic_equal (basics.list__t _p_Elt_T) 
                    (abst_tolist it) (builtins.nil _p_Elt_T) 
                    (v_Vic:
                     (zen.proof 
                        (zen.triangle 
                           (zen.equal (basics.list__t _p_Elt_T) 
                              (abst_tolist it) (builtins.nil _p_Elt_T)))) =>
                     zen.Rall _p_Elt_T 
                       (v_Vcc:(zen.term _p_Elt_T) =>
                        zen.eqv 
                          (zen.triangle (focal.is_true (_p_L_mem l v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem (abst_tolist it) v_Vcc)))) 
                       v_Vec 
                       (v_Vjc:
                        (zen.proof 
                           (zen.eqv 
                              (zen.triangle 
                                 (focal.is_true (_p_L_mem l v_Vec))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_L_mem (abst_tolist it) v_Vec))))) =>
                        zen.Requiv 
                          (zen.triangle (focal.is_true (_p_L_mem l v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem (abst_tolist it) v_Vec))) 
                          (v_Vkc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (_p_L_mem l v_Vec))))) =>
                           v_Vlc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (abst_tolist it) v_Vec))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (_p_L_mem l v_Vec))) 
                             v_Vgc v_Vkc) 
                          (v_Vgc0:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true (_p_L_mem l v_Vec)))) =>
                           v_Vmc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_L_mem (abst_tolist it) v_Vec)))) =>
                           zen.Rsubst basics.bool__t 
                             (v_Vnc:(zen.term basics.bool__t) =>
                              zen.triangle (focal.is_true v_Vnc)) 
                             (_p_L_mem (abst_tolist it) v_Vec) 
                             (_p_L_mem (builtins.nil _p_Elt_T) v_Vec) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_L_mem (abst_tolist it) v_Vec) 
                                          (_p_L_mem (builtins.nil _p_Elt_T) 
                                             v_Vec))))) =>
                              zen.Rsubst (basics.list__t _p_Elt_T) 
                                (v_Vpc:
                                 (zen.term (basics.list__t _p_Elt_T)) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_L_mem v_Vpc v_Vec) 
                                         (_p_L_mem (builtins.nil _p_Elt_T) 
                                            v_Vec)))) (abst_tolist it) 
                                (builtins.nil _p_Elt_T) 
                                (v_Vqc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal 
                                             (basics.list__t _p_Elt_T) 
                                             (abst_tolist it) 
                                             (builtins.nil _p_Elt_T))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (zen.equal (basics.list__t _p_Elt_T) 
                                         (abst_tolist it) 
                                         (builtins.nil _p_Elt_T))) v_Vic 
                                   v_Vqc) 
                                (v_Vrc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_L_mem 
                                                (builtins.nil _p_Elt_T) v_Vec) 
                                             (_p_L_mem 
                                                (builtins.nil _p_Elt_T) v_Vec))))) =>
                                 zen.Rsubst _p_Elt_T 
                                   (v_Vsc:(zen.term _p_Elt_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_L_mem 
                                               (builtins.nil _p_Elt_T) v_Vsc) 
                                            (_p_L_mem 
                                               (builtins.nil _p_Elt_T) v_Vec)))) 
                                   v_Vec v_Vec 
                                   (v_Vtc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_Elt_T v_Vec v_Vec)))) =>
                                    zen.Rnoteq _p_Elt_T v_Vec v_Vtc) 
                                   (v_Vrc0:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_L_mem 
                                                   (builtins.nil _p_Elt_T) 
                                                   v_Vec) 
                                                (_p_L_mem 
                                                   (builtins.nil _p_Elt_T) 
                                                   v_Vec))))) =>
                                    zen.Rnoteq basics.bool__t 
                                      (_p_L_mem (builtins.nil _p_Elt_T) v_Vec) 
                                      v_Vrc0) v_Vrc) v_Voc) 
                             (v_Vuc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (builtins.nil _p_Elt_T) 
                                          v_Vec)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (builtins.nil _p_Elt_T) v_Vec))) 
                                v_Vuc v_Vhc) v_Vmc) v_Vjc) M) __X_1_1_LEMMA) 
                 v_Vfc) v_Vdc))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_Elt_T) (abst_tolist it) 
                   (builtins.nil _p_Elt_T)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          (abst_tolist it) (builtins.nil _p_Elt_T)))))) =>
           focal.zenon_syntactic_equal basics.bool__t (abst_has_next it) 
             dk_bool.false 
             (v_Vac:
              (zen.proof 
                 (zen.triangle 
                    (zen.equal basics.bool__t (abst_has_next it) basics.false))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._equal_ basics.bool__t 
                            (abst_has_next v_Vbc) dk_bool.false))) 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._equal_ (basics.list__t _p_Elt_T) 
                            (abst_tolist v_Vbc) (builtins.nil _p_Elt_T))))) 
                it 
                (v_Vcc:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ basics.bool__t 
                                (abst_has_next it) dk_bool.false))) 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._equal_ (basics.list__t _p_Elt_T) 
                                (abst_tolist it) (builtins.nil _p_Elt_T)))))) =>
                 zen.Requiv 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._equal_ basics.bool__t (abst_has_next it) 
                            dk_bool.false))) 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._equal_ (basics.list__t _p_Elt_T) 
                            (abst_tolist it) (builtins.nil _p_Elt_T)))) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal basics.bool__t 
                                   (abst_has_next it) basics.false))))) =>
                    v_Vzb0:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal 
                                   (basics.list__t _p_Elt_T) 
                                   (abst_tolist it) (builtins.nil _p_Elt_T)))))) =>
                    focal.zenon_not_syntactic_equal basics.bool__t 
                      (abst_has_next it) basics.false 
                      (v_Vec:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t (abst_has_next it) 
                                   basics.false)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (zen.equal basics.bool__t (abst_has_next it) 
                               basics.false)) v_Vac v_Vec) v_Vdc) 
                   (N0:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal basics.bool__t 
                                (abst_has_next it) basics.false)))) =>
                    v_Vfc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal 
                                (basics.list__t _p_Elt_T) (abst_tolist it) 
                                (builtins.nil _p_Elt_T))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._equal_ (basics.list__t _p_Elt_T) 
                               (abst_tolist it) (builtins.nil _p_Elt_T)))) 
                      v_Vfc v_Vzb) v_Vcc) abst_has_next_spec) N))).

def SequenceIterator__model_step :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_LCol_contains:((cc.eT _p_Elt_T) ->
                    (cc.eT _p_LCol_T) -> cc.eT basics.bool__t) ->
  _p_LCol_head:((cc.eT _p_LCol_T) -> cc.eT _p_Elt_T) ->
  _p_LCol_is_empty:((cc.eT _p_LCol_T) -> cc.eT basics.bool__t) ->
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  _p_LCol_head_contains:(dk_logic.eP 
                           (dk_logic.forall _p_LCol_T 
                              (c:(cc.eT _p_LCol_T) =>
                               dk_logic.imp 
                                 (dk_logic.ebP 
                                    (basics._tilda__tilda_ 
                                       (_p_LCol_is_empty c))) 
                                 (dk_logic.ebP 
                                    (_p_LCol_contains (_p_LCol_head c) c))))) ->
  _p_LCol_tolist_contains:(dk_logic.eP 
                             (dk_logic.forall _p_LCol_T 
                                (c:(cc.eT _p_LCol_T) =>
                                 dk_logic.forall _p_Elt_T 
                                   (e:(cc.eT _p_Elt_T) =>
                                    dk_logic.eqv 
                                      (dk_logic.ebP (_p_LCol_contains e c)) 
                                      (dk_logic.ebP 
                                         (_p_L_mem (_p_LCol_tolist c) e)))))) ->
  abst_step_it:((cc.eT _p_LCol_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_LCol_T)) ->
  dk_logic.eP 
    (dk_logic.forall _p_LCol_T 
       (it:(cc.eT _p_LCol_T) =>
        dk_logic.forall _p_LCol_T 
          (it2:(cc.eT _p_LCol_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall _p_LCol_T 
                   (c:(cc.eT _p_LCol_T) =>
                    dk_logic.imp 
                      (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                         _p_LCol_T 
                         (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                            _p_LCol_tolist) it c l) 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (SequenceIterator__has_next _p_LCol_T _p_LCol_T 
                               (SequenceIterator__is_empty _p_LCol_T 
                                  _p_LCol_is_empty) it)) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T _p_LCol_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T _p_LCol_T e it2))) 
                            (dk_logic.ebP (_p_L_mem l e))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_LCol_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_LCol_T) -> cc.eT basics.bool__t) =>
  _p_LCol_head:((cc.eT _p_LCol_T) -> cc.eT _p_Elt_T) =>
  _p_LCol_is_empty:((cc.eT _p_LCol_T) -> cc.eT basics.bool__t) =>
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  _p_LCol_head_contains:
  (dk_logic.eP 
     (dk_logic.forall _p_LCol_T 
        (c:(cc.eT _p_LCol_T) =>
         dk_logic.imp 
           (dk_logic.ebP (basics._tilda__tilda_ (_p_LCol_is_empty c))) 
           (dk_logic.ebP (_p_LCol_contains (_p_LCol_head c) c))))) =>
  _p_LCol_tolist_contains:
  (dk_logic.eP 
     (dk_logic.forall _p_LCol_T 
        (c:(cc.eT _p_LCol_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.eqv (dk_logic.ebP (_p_LCol_contains e c)) 
              (dk_logic.ebP (_p_L_mem (_p_LCol_tolist c) e)))))) =>
  abst_step_it:
  ((cc.eT _p_LCol_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_LCol_T)) =>
  (__Y_1_LEMMA:
   (it:(cc.eT _p_LCol_T) ->
    it2:(cc.eT _p_LCol_T) ->
    e:(cc.eT _p_Elt_T) ->
    l:(cc.eT (basics.list__t _p_Elt_T)) ->
    c:(cc.eT _p_LCol_T) ->
    M:(dk_logic.eP 
         (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
            (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) it 
            c l)) ->
    N:(dk_logic.eP 
         (dk_logic.ebP 
            (SequenceIterator__has_next _p_LCol_T _p_LCol_T 
               (SequenceIterator__is_empty _p_LCol_T _p_LCol_is_empty) it))) ->
    D:(dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ (dk_tuple.prod _p_Elt_T _p_LCol_T) 
               (abst_step_it it) (dk_tuple.pair _p_Elt_T _p_LCol_T e it2)))) ->
    dk_logic.eP (dk_logic.ebP (_p_L_mem l e))) =>
   zen.nnpp 
     (zen.forall _p_LCol_T 
        (v_Vzb:(zen.term _p_LCol_T) =>
         zen.forall _p_LCol_T 
           (v_Vac:(zen.term _p_LCol_T) =>
            zen.forall _p_Elt_T 
              (v_Vbc:(zen.term _p_Elt_T) =>
               zen.forall (basics.list__t _p_Elt_T) 
                 (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.forall _p_LCol_T 
                    (v_Vdc:(zen.term _p_LCol_T) =>
                     zen.imp 
                       (zen.triangle 
                          (SequenceIterator__model _p_Elt_T _p_LCol_T 
                             _p_L_mem _p_LCol_T 
                             (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                                _p_LCol_tolist) v_Vzb v_Vdc v_Vcc)) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (SequenceIterator__has_next _p_LCol_T 
                                   _p_LCol_T 
                                   (SequenceIterator__is_empty _p_LCol_T 
                                      _p_LCol_is_empty) v_Vzb))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._equal_ 
                                      (dk_tuple.prod _p_Elt_T _p_LCol_T) 
                                      (abst_step_it v_Vzb) 
                                      (dk_tuple.pair _p_Elt_T _p_LCol_T 
                                         v_Vbc v_Vac)))) 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vcc v_Vbc))))))))))) 
     (v_Vec:
      (zen.proof 
         (zen.not 
            (zen.forall _p_LCol_T 
               (v_Vzb:(zen.term _p_LCol_T) =>
                zen.forall _p_LCol_T 
                  (v_Vac:(zen.term _p_LCol_T) =>
                   zen.forall _p_Elt_T 
                     (v_Vbc:(zen.term _p_Elt_T) =>
                      zen.forall (basics.list__t _p_Elt_T) 
                        (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                         zen.forall _p_LCol_T 
                           (v_Vdc:(zen.term _p_LCol_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                    _p_L_mem _p_LCol_T 
                                    (SequenceIterator__tolist _p_Elt_T 
                                       _p_LCol_T _p_LCol_tolist) v_Vzb v_Vdc 
                                    v_Vcc)) 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (SequenceIterator__has_next _p_LCol_T 
                                          _p_LCol_T 
                                          (SequenceIterator__is_empty 
                                             _p_LCol_T _p_LCol_is_empty) 
                                          v_Vzb))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._equal_ 
                                             (dk_tuple.prod _p_Elt_T 
                                                _p_LCol_T) 
                                             (abst_step_it v_Vzb) 
                                             (dk_tuple.pair _p_Elt_T 
                                                _p_LCol_T v_Vbc v_Vac)))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_L_mem v_Vcc v_Vbc))))))))))))) =>
      zen.Raxiom 
        (zen.forall _p_LCol_T 
           (v_Vzb:(zen.term _p_LCol_T) =>
            zen.forall _p_LCol_T 
              (v_Vac:(zen.term _p_LCol_T) =>
               zen.forall _p_Elt_T 
                 (v_Vbc:(zen.term _p_Elt_T) =>
                  zen.forall (basics.list__t _p_Elt_T) 
                    (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.forall _p_LCol_T 
                       (v_Vdc:(zen.term _p_LCol_T) =>
                        zen.imp 
                          (zen.triangle 
                             (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                _p_L_mem _p_LCol_T 
                                (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                                   _p_LCol_tolist) v_Vzb v_Vdc v_Vcc)) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (SequenceIterator__has_next _p_LCol_T 
                                      _p_LCol_T 
                                      (SequenceIterator__is_empty _p_LCol_T 
                                         _p_LCol_is_empty) v_Vzb))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._equal_ 
                                         (dk_tuple.prod _p_Elt_T _p_LCol_T) 
                                         (abst_step_it v_Vzb) 
                                         (dk_tuple.pair _p_Elt_T _p_LCol_T 
                                            v_Vbc v_Vac)))) 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vcc v_Vbc))))))))))) 
        __Y_1_LEMMA v_Vec)) 
    (it:(cc.eT _p_LCol_T) =>
     it2:(cc.eT _p_LCol_T) =>
     e:(cc.eT _p_Elt_T) =>
     l:(cc.eT (basics.list__t _p_Elt_T)) =>
     c:(cc.eT _p_LCol_T) =>
     M:
     (dk_logic.eP 
        (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
           (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) it c 
           l)) =>
     N:
     (dk_logic.eP 
        (dk_logic.ebP 
           (SequenceIterator__has_next _p_LCol_T _p_LCol_T 
              (SequenceIterator__is_empty _p_LCol_T _p_LCol_is_empty) it))) =>
     D:
     (dk_logic.eP 
        (dk_logic.ebP 
           (basics._equal_ (dk_tuple.prod _p_Elt_T _p_LCol_T) 
              (abst_step_it it) (dk_tuple.pair _p_Elt_T _p_LCol_T e it2)))) =>
     (__Y_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP (basics._equal_ _p_Elt_T e (_p_LCol_head it)))) =>
      (__Y_1_2_LEMMA:(dk_logic.eP (dk_logic.ebP (_p_LCol_contains e it))) =>
       zen.nnpp (zen.triangle (focal.is_true (_p_L_mem l e))) 
         (v_Vac:
          (zen.proof (zen.not (zen.triangle (focal.is_true (_p_L_mem l e))))) =>
          zen.Rall _p_LCol_T 
            (v_Vbc:(zen.term _p_LCol_T) =>
             zen.forall _p_Elt_T 
               (v_Vcc:(zen.term _p_Elt_T) =>
                zen.eqv 
                  (zen.triangle 
                     (focal.is_true (_p_LCol_contains v_Vcc v_Vbc))) 
                  (zen.triangle 
                     (focal.is_true (_p_L_mem (_p_LCol_tolist v_Vbc) v_Vcc))))) 
            it 
            (v_Vdc:
             (zen.proof 
                (zen.forall _p_Elt_T 
                   (v_Vcc:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true (_p_LCol_contains v_Vcc it))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (_p_LCol_tolist it) v_Vcc)))))) =>
             zen.Rall _p_Elt_T 
               (v_Vcc:(zen.term _p_Elt_T) =>
                zen.eqv 
                  (zen.triangle (focal.is_true (_p_LCol_contains v_Vcc it))) 
                  (zen.triangle 
                     (focal.is_true (_p_L_mem (_p_LCol_tolist it) v_Vcc)))) 
               e 
               (v_Vec:
                (zen.proof 
                   (zen.eqv 
                      (zen.triangle (focal.is_true (_p_LCol_contains e it))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (_p_LCol_tolist it) e))))) =>
                zen.Requiv 
                  (zen.triangle (focal.is_true (_p_LCol_contains e it))) 
                  (zen.triangle 
                     (focal.is_true (_p_L_mem (_p_LCol_tolist it) e))) 
                  (v_Vfc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (_p_LCol_contains e it))))) =>
                   v_Vgc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (_p_L_mem (_p_LCol_tolist it) e))))) =>
                   zen.Raxiom 
                     (zen.triangle (focal.is_true (_p_LCol_contains e it))) 
                     __Y_1_2_LEMMA v_Vfc) 
                  (__Y_1_2_LEMMA0:
                   (zen.proof 
                      (zen.triangle (focal.is_true (_p_LCol_contains e it)))) =>
                   v_Vhc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (_p_LCol_tolist it) e)))) =>
                   zen.Rall _p_Elt_T 
                     (v_Vic:(zen.term _p_Elt_T) =>
                      zen.eqv 
                        (zen.triangle (focal.is_true (_p_L_mem l v_Vic))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceIterator__tolist _p_Elt_T 
                                    _p_LCol_T _p_LCol_tolist it) v_Vic)))) e 
                     (v_Vjc:
                      (zen.proof 
                         (zen.eqv 
                            (zen.triangle (focal.is_true (_p_L_mem l e))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem 
                                     (SequenceIterator__tolist _p_Elt_T 
                                        _p_LCol_T _p_LCol_tolist it) e))))) =>
                      zen.Requiv 
                        (zen.triangle (focal.is_true (_p_L_mem l e))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceIterator__tolist _p_Elt_T 
                                    _p_LCol_T _p_LCol_tolist it) e))) 
                        (v_Vac0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle (focal.is_true (_p_L_mem l e))))) =>
                         v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (_p_LCol_tolist it) e))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true (_p_L_mem (_p_LCol_tolist it) e))) 
                           v_Vhc v_Vgc) 
                        (v_Vkc:
                         (zen.proof 
                            (zen.triangle (focal.is_true (_p_L_mem l e)))) =>
                         v_Vhc0:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (_p_LCol_tolist it) e)))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (_p_L_mem l e))) 
                           v_Vkc v_Vac) v_Vjc) M) v_Vec) v_Vdc) 
            _p_LCol_tolist_contains)) 
        (zen.nnpp (zen.triangle (focal.is_true (_p_LCol_contains e it))) 
           (v_Vcc:
            (zen.proof 
               (zen.not 
                  (zen.triangle (focal.is_true (_p_LCol_contains e it))))) =>
            focal.zenon_syntactic_equal _p_Elt_T e (_p_LCol_head it) 
              (v_Vdc:
               (zen.proof 
                  (zen.triangle (zen.equal _p_Elt_T e (_p_LCol_head it)))) =>
               zen.Rall _p_LCol_T 
                 (v_Vec:(zen.term _p_LCol_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ (_p_LCol_is_empty v_Vec)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_LCol_contains (_p_LCol_head v_Vec) v_Vec)))) 
                 it 
                 (v_Vfc:
                  (zen.proof 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ (_p_LCol_is_empty it)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_LCol_contains (_p_LCol_head it) it))))) =>
                  zen.Rimply 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ (_p_LCol_is_empty it)))) 
                    (zen.triangle 
                       (focal.is_true (_p_LCol_contains (_p_LCol_head it) it))) 
                    (v_Vgc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ (_p_LCol_is_empty it)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._tilda__tilda_ (_p_LCol_is_empty it)))) 
                       N v_Vgc) 
                    (v_Vhc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_LCol_contains (_p_LCol_head it) it)))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vic:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vic)) 
                       (_p_LCol_contains (_p_LCol_head it) it) 
                       (_p_LCol_contains e it) 
                       (v_Vjc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_LCol_contains (_p_LCol_head it) it) 
                                    (_p_LCol_contains e it))))) =>
                        zen.Rsubst _p_Elt_T 
                          (v_Vkc:(zen.term _p_Elt_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_LCol_contains v_Vkc it) 
                                   (_p_LCol_contains e it)))) 
                          (_p_LCol_head it) e 
                          (v_Vlc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_Elt_T (_p_LCol_head it) e)))) =>
                           zen.Reqsym _p_Elt_T e (_p_LCol_head it) v_Vdc 
                             v_Vlc) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_LCol_contains e it) 
                                       (_p_LCol_contains e it))))) =>
                           zen.Rsubst _p_LCol_T 
                             (v_Vnc:(zen.term _p_LCol_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_LCol_contains e v_Vnc) 
                                      (_p_LCol_contains e it)))) it it 
                             (v_Voc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle (zen.equal _p_LCol_T it it)))) =>
                              zen.Rnoteq _p_LCol_T it v_Voc) 
                             (v_Vmc0:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_LCol_contains e it) 
                                          (_p_LCol_contains e it))))) =>
                              zen.Rnoteq basics.bool__t 
                                (_p_LCol_contains e it) v_Vmc0) v_Vmc) v_Vjc) 
                       (v_Vpc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (_p_LCol_contains e it)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (_p_LCol_contains e it))) v_Vpc 
                          v_Vcc) v_Vhc) v_Vfc) _p_LCol_head_contains) 
              __Y_1_1_LEMMA))) 
       (dk_builtins.magic_prove 
          (dk_logic.ebP (basics._equal_ _p_Elt_T e (_p_LCol_head it))))).

def SequenceIterator__model_step_exists :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_LCol_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_LCol_T 
             (c:(cc.eT _p_LCol_T) =>
              dk_logic.forall _p_Elt_T 
                (e:(cc.eT _p_Elt_T) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                      (dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.exists (basics.list__t _p_Elt_T) 
                               (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                abst_model it2 c l2))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_LCol_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_LCol_T 
             (c:(cc.eT _p_LCol_T) =>
              dk_logic.forall _p_Elt_T 
                (e:(cc.eT _p_Elt_T) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                      (dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.exists (basics.list__t _p_Elt_T) 
                               (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                abst_model it2 c l2)))))))))).

def SequenceIterator__model_step_new2 :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_LCol_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall _p_LCol_T 
                   (c:(cc.eT _p_LCol_T) =>
                    dk_logic.imp (abst_model it c l) 
                      (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.forall (basics.list__t _p_Elt_T) 
                               (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.forall _p_Elt_T 
                                     (y:(cc.eT _p_Elt_T) =>
                                      dk_logic.not 
                                        (dk_logic.imp 
                                           (dk_logic.ebP 
                                              (basics._equal_ _p_Elt_T e y)) 
                                           (dk_logic.eqv 
                                              (dk_logic.ebP (_p_L_mem l y)) 
                                              (dk_logic.ebP (_p_L_mem l2 y))))))))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_LCol_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall _p_LCol_T 
                   (c:(cc.eT _p_LCol_T) =>
                    dk_logic.imp (abst_model it c l) 
                      (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.forall (basics.list__t _p_Elt_T) 
                               (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.forall _p_Elt_T 
                                     (y:(cc.eT _p_Elt_T) =>
                                      dk_logic.not 
                                        (dk_logic.imp 
                                           (dk_logic.ebP 
                                              (basics._equal_ _p_Elt_T e y)) 
                                           (dk_logic.eqv 
                                              (dk_logic.ebP (_p_L_mem l y)) 
                                              (dk_logic.ebP (_p_L_mem l2 y)))))))))))))))).

def SequenceIterator__step_it_preserves_includes :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  abst_T:cc.uT ->
  abst_includes:((cc.eT (basics.list__t _p_Elt_T)) ->
                 (cc.eT _p_LCol_T) -> dk_logic.Prop) ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_LCol_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_LCol_T 
             (c:(cc.eT _p_LCol_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.forall _p_Elt_T 
                      (e:(cc.eT _p_Elt_T) =>
                       dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                            (dk_logic.imp 
                               (dk_logic.ebP 
                                  (basics._equal_ 
                                     (dk_tuple.prod _p_Elt_T abst_T) 
                                     (abst_step_it it) 
                                     (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                               (dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.imp (abst_includes l c) 
                                     (abst_includes l2 c))))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  abst_T:cc.uT =>
  abst_includes:
  ((cc.eT (basics.list__t _p_Elt_T)) -> (cc.eT _p_LCol_T) -> dk_logic.Prop) =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_LCol_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_LCol_T 
             (c:(cc.eT _p_LCol_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.forall _p_Elt_T 
                      (e:(cc.eT _p_Elt_T) =>
                       dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                            (dk_logic.imp 
                               (dk_logic.ebP 
                                  (basics._equal_ 
                                     (dk_tuple.prod _p_Elt_T abst_T) 
                                     (abst_step_it it) 
                                     (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                               (dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.imp (abst_includes l c) 
                                     (abst_includes l2 c)))))))))))).

def SequenceIterator__model_start_includes :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_LCol_contains:((cc.eT _p_Elt_T) ->
                    (cc.eT _p_LCol_T) -> cc.eT basics.bool__t) ->
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  _p_LCol_tolist_contains:(dk_logic.eP 
                             (dk_logic.forall _p_LCol_T 
                                (c:(cc.eT _p_LCol_T) =>
                                 dk_logic.forall _p_Elt_T 
                                   (e:(cc.eT _p_Elt_T) =>
                                    dk_logic.eqv 
                                      (dk_logic.ebP (_p_LCol_contains e c)) 
                                      (dk_logic.ebP 
                                         (_p_L_mem (_p_LCol_tolist c) e)))))) ->
  abst_model_start:(dk_logic.eP 
                      (dk_logic.forall _p_LCol_T 
                         (c:(cc.eT _p_LCol_T) =>
                          SequenceIterator__model _p_Elt_T _p_LCol_T 
                            _p_L_mem _p_LCol_T 
                            (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                               _p_LCol_tolist) 
                            (SequenceIterator__start _p_LCol_T c) c 
                            (_p_LCol_tolist c)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_LCol_T 
       (c:(cc.eT _p_LCol_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.imp 
             (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
                (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) 
                (SequenceIterator__start _p_LCol_T c) c l) 
             (SequenceIterator__includes _p_Elt_T _p_LCol_T _p_L_mem 
                _p_LCol_contains l c))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_LCol_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_LCol_T) -> cc.eT basics.bool__t) =>
  _p_LCol_tolist:((cc.eT _p_LCol_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  _p_LCol_tolist_contains:
  (dk_logic.eP 
     (dk_logic.forall _p_LCol_T 
        (c:(cc.eT _p_LCol_T) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.eqv (dk_logic.ebP (_p_LCol_contains e c)) 
              (dk_logic.ebP (_p_L_mem (_p_LCol_tolist c) e)))))) =>
  abst_model_start:
  (dk_logic.eP 
     (dk_logic.forall _p_LCol_T 
        (c:(cc.eT _p_LCol_T) =>
         SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
           (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) 
           (SequenceIterator__start _p_LCol_T c) c (_p_LCol_tolist c)))) =>
  (__Z_1_LEMMA:
   (c:(cc.eT _p_LCol_T) ->
    l:(cc.eT (basics.list__t _p_Elt_T)) ->
    M:(dk_logic.eP 
         (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
            (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) 
            (SequenceIterator__start _p_LCol_T c) c l)) ->
    dk_logic.eP 
      (dk_logic.forall _p_Elt_T 
         (e:(cc.eT _p_Elt_T) =>
          dk_logic.imp (dk_logic.ebP (_p_L_mem l e)) 
            (dk_logic.ebP (_p_LCol_contains e c))))) =>
   zen.nnpp 
     (zen.forall _p_LCol_T 
        (v_Vzb:(zen.term _p_LCol_T) =>
         zen.forall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.imp 
              (zen.triangle 
                 (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_T 
                    (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                       _p_LCol_tolist) 
                    (SequenceIterator__start _p_LCol_T v_Vzb) v_Vzb v_Vac)) 
              (zen.triangle 
                 (SequenceIterator__includes _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_contains v_Vac v_Vzb))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_LCol_T 
               (v_Vzb:(zen.term _p_LCol_T) =>
                zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.imp 
                     (zen.triangle 
                        (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                           _p_LCol_T 
                           (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                              _p_LCol_tolist) 
                           (SequenceIterator__start _p_LCol_T v_Vzb) v_Vzb 
                           v_Vac)) 
                     (zen.triangle 
                        (SequenceIterator__includes _p_Elt_T _p_LCol_T 
                           _p_L_mem _p_LCol_contains v_Vac v_Vzb))))))) =>
      zen.Rnotall _p_LCol_T 
        (v_Vzb:(zen.term _p_LCol_T) =>
         zen.forall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.imp 
              (zen.triangle 
                 (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_T 
                    (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                       _p_LCol_tolist) 
                    (SequenceIterator__start _p_LCol_T v_Vzb) v_Vzb v_Vac)) 
              (zen.triangle 
                 (SequenceIterator__includes _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_contains v_Vac v_Vzb)))) 
        (v_Vcc:(zen.term _p_LCol_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.imp 
                     (zen.triangle 
                        (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                           _p_LCol_T 
                           (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                              _p_LCol_tolist) 
                           (SequenceIterator__start _p_LCol_T v_Vcc) v_Vcc 
                           v_Vac)) 
                     (zen.triangle 
                        (SequenceIterator__includes _p_Elt_T _p_LCol_T 
                           _p_L_mem _p_LCol_contains v_Vac v_Vcc)))))) =>
         zen.Rnotall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.imp 
              (zen.triangle 
                 (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_T 
                    (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                       _p_LCol_tolist) 
                    (SequenceIterator__start _p_LCol_T v_Vcc) v_Vcc v_Vac)) 
              (zen.triangle 
                 (SequenceIterator__includes _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_contains v_Vac v_Vcc))) 
           (v_Vec:(zen.term (basics.list__t _p_Elt_T)) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle 
                        (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                           _p_LCol_T 
                           (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                              _p_LCol_tolist) 
                           (SequenceIterator__start _p_LCol_T v_Vcc) v_Vcc 
                           v_Vec)) 
                     (zen.triangle 
                        (SequenceIterator__includes _p_Elt_T _p_LCol_T 
                           _p_L_mem _p_LCol_contains v_Vec v_Vcc))))) =>
            zen.Rnotimply 
              (zen.triangle 
                 (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_T 
                    (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                       _p_LCol_tolist) 
                    (SequenceIterator__start _p_LCol_T v_Vcc) v_Vcc v_Vec)) 
              (zen.triangle 
                 (SequenceIterator__includes _p_Elt_T _p_LCol_T _p_L_mem 
                    _p_LCol_contains v_Vec v_Vcc)) 
              (v_Vgc:
               (zen.proof 
                  (zen.triangle 
                     (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem 
                        _p_LCol_T 
                        (SequenceIterator__tolist _p_Elt_T _p_LCol_T 
                           _p_LCol_tolist) 
                        (SequenceIterator__start _p_LCol_T v_Vcc) v_Vcc v_Vec))) =>
               v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.forall _p_Elt_T 
                        (v_Vic:(zen.term _p_Elt_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (_p_L_mem v_Vec v_Vic))) 
                           (zen.triangle 
                              (focal.is_true (_p_LCol_contains v_Vic v_Vcc))))))) =>
               zen.Rnotall _p_Elt_T 
                 (v_Vic:(zen.term _p_Elt_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_L_mem v_Vec v_Vic))) 
                    (zen.triangle 
                       (focal.is_true (_p_LCol_contains v_Vic v_Vcc)))) 
                 (v_Vjc:(zen.term _p_Elt_T) =>
                  v_Vkc:
                  (zen.proof 
                     (zen.not 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (_p_L_mem v_Vec v_Vjc))) 
                           (zen.triangle 
                              (focal.is_true (_p_LCol_contains v_Vjc v_Vcc)))))) =>
                  zen.Rnotimply 
                    (zen.triangle (focal.is_true (_p_L_mem v_Vec v_Vjc))) 
                    (zen.triangle 
                       (focal.is_true (_p_LCol_contains v_Vjc v_Vcc))) 
                    (v_Vlc:
                     (zen.proof 
                        (zen.triangle (focal.is_true (_p_L_mem v_Vec v_Vjc)))) =>
                     v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (_p_LCol_contains v_Vjc v_Vcc))))) =>
                     zen.Rall _p_LCol_T 
                       (v_Vzb:(zen.term _p_LCol_T) =>
                        zen.forall (basics.list__t _p_Elt_T) 
                          (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                           zen.imp 
                             (zen.triangle 
                                (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                   _p_L_mem _p_LCol_T 
                                   (SequenceIterator__tolist _p_Elt_T 
                                      _p_LCol_T _p_LCol_tolist) 
                                   (SequenceIterator__start _p_LCol_T v_Vzb) 
                                   v_Vzb v_Vac)) 
                             (zen.forall _p_Elt_T 
                                (v_Vic:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vac v_Vic))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_LCol_contains v_Vic v_Vzb))))))) 
                       v_Vcc 
                       (v_Vnc:
                        (zen.proof 
                           (zen.forall (basics.list__t _p_Elt_T) 
                              (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                               zen.imp 
                                 (zen.triangle 
                                    (SequenceIterator__model _p_Elt_T 
                                       _p_LCol_T _p_L_mem _p_LCol_T 
                                       (SequenceIterator__tolist _p_Elt_T 
                                          _p_LCol_T _p_LCol_tolist) 
                                       (SequenceIterator__start _p_LCol_T 
                                          v_Vcc) v_Vcc v_Vac)) 
                                 (zen.forall _p_Elt_T 
                                    (v_Vic:(zen.term _p_Elt_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_L_mem v_Vac v_Vic))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_LCol_contains v_Vic v_Vcc)))))))) =>
                        zen.Rall (basics.list__t _p_Elt_T) 
                          (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                           zen.imp 
                             (zen.triangle 
                                (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                   _p_L_mem _p_LCol_T 
                                   (SequenceIterator__tolist _p_Elt_T 
                                      _p_LCol_T _p_LCol_tolist) 
                                   (SequenceIterator__start _p_LCol_T v_Vcc) 
                                   v_Vcc v_Vac)) 
                             (zen.forall _p_Elt_T 
                                (v_Vic:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vac v_Vic))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_LCol_contains v_Vic v_Vcc)))))) 
                          v_Vec 
                          (v_Voc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (SequenceIterator__model _p_Elt_T 
                                       _p_LCol_T _p_L_mem _p_LCol_T 
                                       (SequenceIterator__tolist _p_Elt_T 
                                          _p_LCol_T _p_LCol_tolist) 
                                       (SequenceIterator__start _p_LCol_T 
                                          v_Vcc) v_Vcc v_Vec)) 
                                 (zen.forall _p_Elt_T 
                                    (v_Vic:(zen.term _p_Elt_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_L_mem v_Vec v_Vic))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_LCol_contains v_Vic v_Vcc))))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (SequenceIterator__model _p_Elt_T _p_LCol_T 
                                   _p_L_mem _p_LCol_T 
                                   (SequenceIterator__tolist _p_Elt_T 
                                      _p_LCol_T _p_LCol_tolist) 
                                   (SequenceIterator__start _p_LCol_T v_Vcc) 
                                   v_Vcc v_Vec)) 
                             (zen.forall _p_Elt_T 
                                (v_Vic:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vec v_Vic))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_LCol_contains v_Vic v_Vcc))))) 
                             (v_Vpc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (SequenceIterator__model _p_Elt_T 
                                          _p_LCol_T _p_L_mem _p_LCol_T 
                                          (SequenceIterator__tolist _p_Elt_T 
                                             _p_LCol_T _p_LCol_tolist) 
                                          (SequenceIterator__start _p_LCol_T 
                                             v_Vcc) v_Vcc v_Vec)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (SequenceIterator__model _p_Elt_T 
                                      _p_LCol_T _p_L_mem _p_LCol_T 
                                      (SequenceIterator__tolist _p_Elt_T 
                                         _p_LCol_T _p_LCol_tolist) 
                                      (SequenceIterator__start _p_LCol_T 
                                         v_Vcc) v_Vcc v_Vec)) v_Vgc v_Vpc) 
                             (v_Vqc:
                              (zen.proof 
                                 (zen.forall _p_Elt_T 
                                    (v_Vic:(zen.term _p_Elt_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_L_mem v_Vec v_Vic))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_LCol_contains v_Vic v_Vcc)))))) =>
                              zen.Rall _p_Elt_T 
                                (v_Vic:(zen.term _p_Elt_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vec v_Vic))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_LCol_contains v_Vic v_Vcc)))) 
                                v_Vjc 
                                (v_Vrc:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_L_mem v_Vec v_Vjc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_LCol_contains v_Vjc v_Vcc))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem v_Vec v_Vjc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_LCol_contains v_Vjc v_Vcc))) 
                                   (v_Vsc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem v_Vec v_Vjc))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem v_Vec v_Vjc))) v_Vlc 
                                      v_Vsc) 
                                   (v_Vtc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_LCol_contains v_Vjc v_Vcc)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_LCol_contains v_Vjc v_Vcc))) 
                                      v_Vtc v_Vmc) v_Vrc) v_Vqc) v_Voc) v_Vnc) 
                       __Z_1_LEMMA) v_Vkc) v_Vhc) v_Vfc) v_Vdc) v_Vbc)) 
    (c:(cc.eT _p_LCol_T) =>
     l:(cc.eT (basics.list__t _p_Elt_T)) =>
     M:
     (dk_logic.eP 
        (SequenceIterator__model _p_Elt_T _p_LCol_T _p_L_mem _p_LCol_T 
           (SequenceIterator__tolist _p_Elt_T _p_LCol_T _p_LCol_tolist) 
           (SequenceIterator__start _p_LCol_T c) c l)) =>
     zen.nnpp 
       (zen.forall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_L_mem l v_Vac))) 
             (zen.triangle (focal.is_true (_p_LCol_contains v_Vac c))))) 
       (v_Vbc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.imp (zen.triangle (focal.is_true (_p_L_mem l v_Vac))) 
                    (zen.triangle (focal.is_true (_p_LCol_contains v_Vac c))))))) =>
        zen.Rnotall _p_Elt_T 
          (v_Vac:(zen.term _p_Elt_T) =>
           zen.imp (zen.triangle (focal.is_true (_p_L_mem l v_Vac))) 
             (zen.triangle (focal.is_true (_p_LCol_contains v_Vac c)))) 
          (v_Vcc:(zen.term _p_Elt_T) =>
           v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.imp (zen.triangle (focal.is_true (_p_L_mem l v_Vcc))) 
                    (zen.triangle (focal.is_true (_p_LCol_contains v_Vcc c)))))) =>
           zen.Rnotimply (zen.triangle (focal.is_true (_p_L_mem l v_Vcc))) 
             (zen.triangle (focal.is_true (_p_LCol_contains v_Vcc c))) 
             (v_Vec:
              (zen.proof (zen.triangle (focal.is_true (_p_L_mem l v_Vcc)))) =>
              v_Vfc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (_p_LCol_contains v_Vcc c))))) =>
              zen.Rall _p_LCol_T 
                (v_Vgc:(zen.term _p_LCol_T) =>
                 zen.forall _p_Elt_T 
                   (v_Vac:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true (_p_LCol_contains v_Vac v_Vgc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_L_mem (_p_LCol_tolist v_Vgc) v_Vac))))) c 
                (v_Vhc:
                 (zen.proof 
                    (zen.forall _p_Elt_T 
                       (v_Vac:(zen.term _p_Elt_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (_p_LCol_contains v_Vac c))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (_p_LCol_tolist c) v_Vac)))))) =>
                 zen.Rall _p_Elt_T 
                   (v_Vac:(zen.term _p_Elt_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true (_p_LCol_contains v_Vac c))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (_p_LCol_tolist c) v_Vac)))) 
                   v_Vcc 
                   (v_Vic:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (_p_LCol_contains v_Vcc c))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (_p_LCol_tolist c) v_Vcc))))) =>
                    zen.Requiv 
                      (zen.triangle 
                         (focal.is_true (_p_LCol_contains v_Vcc c))) 
                      (zen.triangle 
                         (focal.is_true (_p_L_mem (_p_LCol_tolist c) v_Vcc))) 
                      (v_Vfc0:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_LCol_contains v_Vcc c))))) =>
                       v_Vjc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (_p_LCol_tolist c) v_Vcc))))) =>
                       zen.Rall _p_Elt_T 
                         (v_Vkc:(zen.term _p_Elt_T) =>
                          zen.eqv 
                            (zen.triangle (focal.is_true (_p_L_mem l v_Vkc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem 
                                     (SequenceIterator__tolist _p_Elt_T 
                                        _p_LCol_T _p_LCol_tolist 
                                        (SequenceIterator__start _p_LCol_T c)) 
                                     v_Vkc)))) v_Vcc 
                         (v_Vlc:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem l v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem 
                                         (SequenceIterator__tolist _p_Elt_T 
                                            _p_LCol_T _p_LCol_tolist 
                                            (SequenceIterator__start 
                                               _p_LCol_T c)) v_Vcc))))) =>
                          zen.Requiv 
                            (zen.triangle (focal.is_true (_p_L_mem l v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem 
                                     (SequenceIterator__tolist _p_Elt_T 
                                        _p_LCol_T _p_LCol_tolist 
                                        (SequenceIterator__start _p_LCol_T c)) 
                                     v_Vcc))) 
                            (v_Vmc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_L_mem l v_Vcc))))) =>
                             v_Vjc0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem (_p_LCol_tolist c) v_Vcc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_L_mem l v_Vcc))) v_Vec 
                               v_Vmc) 
                            (v_Vec0:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem l v_Vcc)))) =>
                             v_Vnc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (_p_LCol_tolist c) v_Vcc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (_p_LCol_tolist c) v_Vcc))) 
                               v_Vnc v_Vjc) v_Vlc) M) 
                      (v_Voc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_LCol_contains v_Vcc c)))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (_p_LCol_tolist c) v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (_p_LCol_contains v_Vcc c))) 
                         v_Voc v_Vfc) v_Vic) v_Vhc) _p_LCol_tolist_contains) 
             v_Vdc) v_Vbc)).

SequenceAsSet__me_as_species :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  Type.

SequenceAsSet__mk_record :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  SequenceAsSet__rf_T:cc.uT ->
  SequenceAsSet__rf_nodouble:((cc.eT (basics.list__t Elt_T)) ->
                              cc.eT basics.bool__t) ->
  SequenceAsSet__rf_add:((cc.eT Elt_T) ->
                         (cc.eT SequenceAsSet__rf_T) ->
                         cc.eT SequenceAsSet__rf_T) ->
  SequenceAsSet__rf_contains:((cc.eT Elt_T) ->
                              (cc.eT SequenceAsSet__rf_T) ->
                              cc.eT basics.bool__t) ->
  SequenceAsSet__rf_empty:(cc.eT SequenceAsSet__rf_T) ->
  SequenceAsSet__rf_head:((cc.eT SequenceAsSet__rf_T) -> cc.eT Elt_T) ->
  SequenceAsSet__rf_is_empty:((cc.eT SequenceAsSet__rf_T) ->
                              cc.eT basics.bool__t) ->
  SequenceAsSet__rf_remove:((cc.eT Elt_T) ->
                            (cc.eT SequenceAsSet__rf_T) ->
                            cc.eT SequenceAsSet__rf_T) ->
  SequenceAsSet__rf_size:((cc.eT SequenceAsSet__rf_T) -> cc.eT basics.int__t) ->
  SequenceAsSet__rf_tail:((cc.eT SequenceAsSet__rf_T) ->
                          cc.eT SequenceAsSet__rf_T) ->
  SequenceAsSet__rf_tolist:((cc.eT SequenceAsSet__rf_T) ->
                            cc.eT (basics.list__t Elt_T)) ->
  SequenceAsSet__rf_torep:((cc.eT SequenceAsSet__rf_T) ->
                           cc.eT (basics.list__t Elt_T)) ->
  SequenceAsSet__rf_add_contains:(dk_logic.eP 
                                    (dk_logic.forall SequenceAsSet__rf_T 
                                       (c:(cc.eT SequenceAsSet__rf_T) =>
                                        dk_logic.forall Elt_T 
                                          (e:(cc.eT Elt_T) =>
                                           dk_logic.forall Elt_T 
                                             (x:(cc.eT Elt_T) =>
                                              dk_logic.eqv 
                                                (dk_logic.ebP 
                                                   (SequenceAsSet__rf_contains 
                                                      x 
                                                      (SequenceAsSet__rf_add 
                                                         e c))) 
                                                (dk_logic.ebP 
                                                   (basics._bar__bar_ 
                                                      (basics._equal_ Elt_T 
                                                         x e) 
                                                      (SequenceAsSet__rf_contains 
                                                         x c)))))))) ->
  SequenceAsSet__rf_contains_empty:(dk_logic.eP 
                                      (dk_logic.forall Elt_T 
                                         (a:(cc.eT Elt_T) =>
                                          dk_logic.ebP 
                                            (basics._equal_ basics.bool__t 
                                               (SequenceAsSet__rf_contains a 
                                                  SequenceAsSet__rf_empty) 
                                               dk_bool.false)))) ->
  SequenceAsSet__rf_head_contains:(dk_logic.eP 
                                     (dk_logic.forall SequenceAsSet__rf_T 
                                        (c:(cc.eT SequenceAsSet__rf_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (basics._tilda__tilda_ 
                                                 (SequenceAsSet__rf_is_empty 
                                                    c))) 
                                           (dk_logic.ebP 
                                              (SequenceAsSet__rf_contains 
                                                 (SequenceAsSet__rf_head c) c))))) ->
  SequenceAsSet__rf_is_empty_empty:(dk_logic.eP 
                                      (dk_logic.ebP 
                                         (basics._equal_ basics.bool__t 
                                            (SequenceAsSet__rf_is_empty 
                                               SequenceAsSet__rf_empty) 
                                            dk_bool.true))) ->
  SequenceAsSet__rf_remove_contains:(dk_logic.eP 
                                       (dk_logic.forall SequenceAsSet__rf_T 
                                          (c:(cc.eT SequenceAsSet__rf_T) =>
                                           dk_logic.forall Elt_T 
                                             (e:(cc.eT Elt_T) =>
                                              dk_logic.forall Elt_T 
                                                (x:(cc.eT Elt_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (basics._tilda__tilda_ 
                                                         (_p_Elt_equal e x))) 
                                                   (dk_logic.eqv 
                                                      (dk_logic.ebP 
                                                         (SequenceAsSet__rf_contains 
                                                            x 
                                                            (SequenceAsSet__rf_remove 
                                                               e c))) 
                                                      (dk_logic.ebP 
                                                         (SequenceAsSet__rf_contains 
                                                            x c)))))))) ->
  SequenceAsSet__rf_empty_has_no_element:(dk_logic.eP 
                                            (dk_logic.ebP 
                                               (basics._equal_ basics.int__t 
                                                  (SequenceAsSet__rf_size 
                                                     SequenceAsSet__rf_empty) 
                                                  (dk_int.from_nat builtins.0)))) ->
  SequenceAsSet__rf_size_positive:(dk_logic.eP 
                                     (dk_logic.forall SequenceAsSet__rf_T 
                                        (a:(cc.eT SequenceAsSet__rf_T) =>
                                         dk_logic.ebP 
                                           (basics._lt__equal_ 
                                              (dk_int.from_nat builtins.0) 
                                              (SequenceAsSet__rf_size a))))) ->
  SequenceAsSet__rf_head_tail_unique:(dk_logic.eP 
                                        (dk_logic.forall SequenceAsSet__rf_T 
                                           (l:(cc.eT SequenceAsSet__rf_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (basics._tilda__tilda_ 
                                                    (SequenceAsSet__rf_is_empty 
                                                       l))) 
                                              (dk_logic.ebP 
                                                 (basics._equal_ 
                                                    SequenceAsSet__rf_T 
                                                    (SequenceAsSet__rf_remove 
                                                       (SequenceAsSet__rf_head 
                                                          l) l) 
                                                    (SequenceAsSet__rf_tail l)))))) ->
  SequenceAsSet__rf_head_tail_spec:(dk_logic.eP 
                                      (dk_logic.forall SequenceAsSet__rf_T 
                                         (l:(cc.eT SequenceAsSet__rf_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP 
                                               (basics._tilda__tilda_ 
                                                  (SequenceAsSet__rf_is_empty 
                                                     l))) 
                                            (dk_logic.ebP 
                                               (basics._equal_ 
                                                  (basics.list__t Elt_T) 
                                                  (SequenceAsSet__rf_tolist l) 
                                                  (builtins.cons Elt_T 
                                                     (SequenceAsSet__rf_head 
                                                        l) 
                                                     (SequenceAsSet__rf_tolist 
                                                        (SequenceAsSet__rf_tail 
                                                           l)))))))) ->
  SequenceAsSet__rf_tail_includes:(dk_logic.eP 
                                     (dk_logic.forall SequenceAsSet__rf_T 
                                        (c:(cc.eT SequenceAsSet__rf_T) =>
                                         dk_logic.forall Elt_T 
                                           (e:(cc.eT Elt_T) =>
                                            dk_logic.imp 
                                              (dk_logic.ebP 
                                                 (_p_L_mem 
                                                    (SequenceAsSet__rf_tolist 
                                                       (SequenceAsSet__rf_tail 
                                                          c)) e)) 
                                              (dk_logic.ebP 
                                                 (SequenceAsSet__rf_contains 
                                                    e c)))))) ->
  SequenceAsSet__rf_tolist_contains:(dk_logic.eP 
                                       (dk_logic.forall SequenceAsSet__rf_T 
                                          (c:(cc.eT SequenceAsSet__rf_T) =>
                                           dk_logic.forall Elt_T 
                                             (e:(cc.eT Elt_T) =>
                                              dk_logic.eqv 
                                                (dk_logic.ebP 
                                                   (SequenceAsSet__rf_contains 
                                                      e c)) 
                                                (dk_logic.ebP 
                                                   (_p_L_mem 
                                                      (SequenceAsSet__rf_tolist 
                                                         c) e)))))) ->
  SequenceAsSet__rf_tolist_empty:(dk_logic.eP 
                                    (dk_logic.forall SequenceAsSet__rf_T 
                                       (l:(cc.eT SequenceAsSet__rf_T) =>
                                        dk_logic.eqv 
                                          (dk_logic.ebP 
                                             (SequenceAsSet__rf_is_empty l)) 
                                          (dk_logic.ebP 
                                             (basics._equal_ 
                                                (basics.list__t Elt_T) 
                                                (SequenceAsSet__rf_tolist l) 
                                                (builtins.nil Elt_T)))))) ->
  SequenceAsSet__rf_nodouble_list_inv:(dk_logic.eP 
                                         (dk_logic.forall 
                                            SequenceAsSet__rf_T 
                                            (l:(cc.eT SequenceAsSet__rf_T) =>
                                             dk_logic.ebP 
                                               (SequenceAsSet__rf_nodouble 
                                                  (SequenceAsSet__rf_torep l))))) ->
  SequenceAsSet__rf_remove_preserves_inv:(dk_logic.eP 
                                            (dk_logic.forall 
                                               SequenceAsSet__rf_T 
                                               (l:
                                                (cc.eT SequenceAsSet__rf_T) =>
                                                dk_logic.forall Elt_T 
                                                  (e:(cc.eT Elt_T) =>
                                                   dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (SequenceAsSet__rf_nodouble 
                                                           (SequenceAsSet__rf_torep 
                                                              l))) 
                                                     (dk_logic.ebP 
                                                        (SequenceAsSet__rf_nodouble 
                                                           (SequenceAsSet__rf_torep 
                                                              (SequenceAsSet__rf_remove 
                                                                 e l)))))))) ->
  SequenceAsSet__rf_remove_smaller:(dk_logic.eP 
                                      (dk_logic.forall SequenceAsSet__rf_T 
                                         (l:(cc.eT SequenceAsSet__rf_T) =>
                                          dk_logic.forall Elt_T 
                                            (e:(cc.eT Elt_T) =>
                                             dk_logic.forall Elt_T 
                                               (h:(cc.eT Elt_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (_p_L_mem 
                                                        (SequenceAsSet__rf_torep 
                                                           (SequenceAsSet__rf_remove 
                                                              e l)) h)) 
                                                  (dk_logic.ebP 
                                                     (_p_L_mem 
                                                        (SequenceAsSet__rf_torep 
                                                           l) h))))))) ->
  SequenceAsSet__rf_add_contains1:(dk_logic.eP 
                                     (dk_logic.forall SequenceAsSet__rf_T 
                                        (c:(cc.eT SequenceAsSet__rf_T) =>
                                         dk_logic.forall Elt_T 
                                           (e:(cc.eT Elt_T) =>
                                            dk_logic.ebP 
                                              (SequenceAsSet__rf_contains e 
                                                 (SequenceAsSet__rf_add e c)))))) ->
  SequenceAsSet__rf_add_contains2:(dk_logic.eP 
                                     (dk_logic.forall SequenceAsSet__rf_T 
                                        (c:(cc.eT SequenceAsSet__rf_T) =>
                                         dk_logic.forall Elt_T 
                                           (e:(cc.eT Elt_T) =>
                                            dk_logic.forall Elt_T 
                                              (x:(cc.eT Elt_T) =>
                                               dk_logic.imp 
                                                 (dk_logic.not 
                                                    (dk_logic.ebP 
                                                       (basics._equal_ Elt_T 
                                                          e x))) 
                                                 (dk_logic.eqv 
                                                    (dk_logic.ebP 
                                                       (SequenceAsSet__rf_contains 
                                                          x 
                                                          (SequenceAsSet__rf_add 
                                                             e c))) 
                                                    (dk_logic.ebP 
                                                       (SequenceAsSet__rf_contains 
                                                          x c)))))))) ->
  SequenceAsSet__rf_unique_contains:(dk_logic.eP 
                                       (dk_logic.forall SequenceAsSet__rf_T 
                                          (c:(cc.eT SequenceAsSet__rf_T) =>
                                           dk_logic.forall Elt_T 
                                             (e:(cc.eT Elt_T) =>
                                              dk_logic.ebP 
                                                (basics._tilda__tilda_ 
                                                   (SequenceAsSet__rf_contains 
                                                      e 
                                                      (SequenceAsSet__rf_remove 
                                                         e c))))))) ->
  SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem.

def proj_SequenceAsSet__rf_T :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  cc.uT.

[SequenceAsSet__rf_T]
  proj_SequenceAsSet__rf_T _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ 
    SequenceAsSet__rf_T _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _)
  -->
  SequenceAsSet__rf_T.

def proj_SequenceAsSet__rf_nodouble :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT (basics.list__t Elt_T)) -> cc.eT basics.bool__t.

[SequenceAsSet__rf_nodouble]
  proj_SequenceAsSet__rf_nodouble _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ 
    _ SequenceAsSet__rf_nodouble _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_nodouble.

def proj_SequenceAsSet__rf_add :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT Elt_T) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record).

[SequenceAsSet__rf_add]
  proj_SequenceAsSet__rf_add _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ _ 
    SequenceAsSet__rf_add _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _)
  -->
  SequenceAsSet__rf_add.

def proj_SequenceAsSet__rf_contains :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT Elt_T) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT basics.bool__t.

[SequenceAsSet__rf_contains]
  proj_SequenceAsSet__rf_contains _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ 
    _ _ _ SequenceAsSet__rf_contains _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_contains.

def proj_SequenceAsSet__rf_empty :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record).

[SequenceAsSet__rf_empty]
  proj_SequenceAsSet__rf_empty _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ _ 
    _ _ SequenceAsSet__rf_empty _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _)
  -->
  SequenceAsSet__rf_empty.

def proj_SequenceAsSet__rf_head :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT Elt_T.

[SequenceAsSet__rf_head]
  proj_SequenceAsSet__rf_head _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ _ 
    _ _ _ SequenceAsSet__rf_head _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _)
  -->
  SequenceAsSet__rf_head.

def proj_SequenceAsSet__rf_is_empty :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT basics.bool__t.

[SequenceAsSet__rf_is_empty]
  proj_SequenceAsSet__rf_is_empty _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ 
    _ _ _ _ _ _ SequenceAsSet__rf_is_empty _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_is_empty.

def proj_SequenceAsSet__rf_remove :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT Elt_T) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record).

[SequenceAsSet__rf_remove]
  proj_SequenceAsSet__rf_remove _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ SequenceAsSet__rf_remove _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _)
  -->
  SequenceAsSet__rf_remove.

def proj_SequenceAsSet__rf_size :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT basics.int__t.

[SequenceAsSet__rf_size]
  proj_SequenceAsSet__rf_size _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ _ 
    _ _ _ _ _ _ SequenceAsSet__rf_size _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _)
  -->
  SequenceAsSet__rf_size.

def proj_SequenceAsSet__rf_tail :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record).

[SequenceAsSet__rf_tail]
  proj_SequenceAsSet__rf_tail _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ _ 
    _ _ _ _ _ _ _ SequenceAsSet__rf_tail _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _)
  -->
  SequenceAsSet__rf_tail.

def proj_SequenceAsSet__rf_tolist :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT (basics.list__t Elt_T).

[SequenceAsSet__rf_tolist]
  proj_SequenceAsSet__rf_tolist _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_tolist _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _)
  -->
  SequenceAsSet__rf_tolist.

def proj_SequenceAsSet__rf_torep :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  (cc.eT (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) ->
  cc.eT (basics.list__t Elt_T).

[SequenceAsSet__rf_torep]
  proj_SequenceAsSet__rf_torep _ _ _ _ (SequenceAsSet__mk_record _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_torep _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _)
  -->
  SequenceAsSet__rf_torep.

def proj_SequenceAsSet__rf_add_contains :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.forall Elt_T 
             (x:(cc.eT Elt_T) =>
              dk_logic.eqv 
                (dk_logic.ebP 
                   (proj_SequenceAsSet__rf_contains Elt_T L_T _p_Elt_equal 
                      _p_L_mem record x 
                      (proj_SequenceAsSet__rf_add Elt_T L_T _p_Elt_equal 
                         _p_L_mem record e c))) 
                (dk_logic.ebP 
                   (basics._bar__bar_ (basics._equal_ Elt_T x e) 
                      (proj_SequenceAsSet__rf_contains Elt_T L_T 
                         _p_Elt_equal _p_L_mem record x c))))))).

[SequenceAsSet__rf_add_contains]
  proj_SequenceAsSet__rf_add_contains _ _ _ _ (SequenceAsSet__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_add_contains _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_add_contains.

def proj_SequenceAsSet__rf_contains_empty :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall Elt_T 
       (a:(cc.eT Elt_T) =>
        dk_logic.ebP 
          (basics._equal_ basics.bool__t 
             (proj_SequenceAsSet__rf_contains Elt_T L_T _p_Elt_equal 
                _p_L_mem record a 
                (proj_SequenceAsSet__rf_empty Elt_T L_T _p_Elt_equal 
                   _p_L_mem record)) dk_bool.false))).

[SequenceAsSet__rf_contains_empty]
  proj_SequenceAsSet__rf_contains_empty _ _ _ _ (SequenceAsSet__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_contains_empty _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_contains_empty.

def proj_SequenceAsSet__rf_head_contains :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (proj_SequenceAsSet__rf_is_empty Elt_T L_T _p_Elt_equal 
                   _p_L_mem record c))) 
          (dk_logic.ebP 
             (proj_SequenceAsSet__rf_contains Elt_T L_T _p_Elt_equal 
                _p_L_mem record 
                (proj_SequenceAsSet__rf_head Elt_T L_T _p_Elt_equal _p_L_mem 
                   record c) c)))).

[SequenceAsSet__rf_head_contains]
  proj_SequenceAsSet__rf_head_contains _ _ _ _ (SequenceAsSet__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_head_contains _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_head_contains.

def proj_SequenceAsSet__rf_is_empty_empty :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.ebP 
       (basics._equal_ basics.bool__t 
          (proj_SequenceAsSet__rf_is_empty Elt_T L_T _p_Elt_equal _p_L_mem 
             record 
             (proj_SequenceAsSet__rf_empty Elt_T L_T _p_Elt_equal _p_L_mem 
                record)) dk_bool.true)).

[SequenceAsSet__rf_is_empty_empty]
  proj_SequenceAsSet__rf_is_empty_empty _ _ _ _ (SequenceAsSet__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_is_empty_empty _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_is_empty_empty.

def proj_SequenceAsSet__rf_remove_contains :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.forall Elt_T 
             (x:(cc.eT Elt_T) =>
              dk_logic.imp 
                (dk_logic.ebP (basics._tilda__tilda_ (_p_Elt_equal e x))) 
                (dk_logic.eqv 
                   (dk_logic.ebP 
                      (proj_SequenceAsSet__rf_contains Elt_T L_T 
                         _p_Elt_equal _p_L_mem record x 
                         (proj_SequenceAsSet__rf_remove Elt_T L_T 
                            _p_Elt_equal _p_L_mem record e c))) 
                   (dk_logic.ebP 
                      (proj_SequenceAsSet__rf_contains Elt_T L_T 
                         _p_Elt_equal _p_L_mem record x c))))))).

[SequenceAsSet__rf_remove_contains]
  proj_SequenceAsSet__rf_remove_contains _ _ _ _ (SequenceAsSet__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_remove_contains 
    _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_remove_contains.

def proj_SequenceAsSet__rf_empty_has_no_element :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.ebP 
       (basics._equal_ basics.int__t 
          (proj_SequenceAsSet__rf_size Elt_T L_T _p_Elt_equal _p_L_mem 
             record 
             (proj_SequenceAsSet__rf_empty Elt_T L_T _p_Elt_equal _p_L_mem 
                record)) (dk_int.from_nat builtins.0))).

[SequenceAsSet__rf_empty_has_no_element]
  proj_SequenceAsSet__rf_empty_has_no_element _ _ _ _ 
    (SequenceAsSet__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_empty_has_no_element _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_empty_has_no_element.

def proj_SequenceAsSet__rf_size_positive :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (a:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.ebP 
          (basics._lt__equal_ (dk_int.from_nat builtins.0) 
             (proj_SequenceAsSet__rf_size Elt_T L_T _p_Elt_equal _p_L_mem 
                record a)))).

[SequenceAsSet__rf_size_positive]
  proj_SequenceAsSet__rf_size_positive _ _ _ _ (SequenceAsSet__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ SequenceAsSet__rf_size_positive 
    _ _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_size_positive.

def proj_SequenceAsSet__rf_head_tail_unique :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (l:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (proj_SequenceAsSet__rf_is_empty Elt_T L_T _p_Elt_equal 
                   _p_L_mem record l))) 
          (dk_logic.ebP 
             (basics._equal_ 
                (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem 
                   record) 
                (proj_SequenceAsSet__rf_remove Elt_T L_T _p_Elt_equal 
                   _p_L_mem record 
                   (proj_SequenceAsSet__rf_head Elt_T L_T _p_Elt_equal 
                      _p_L_mem record l) l) 
                (proj_SequenceAsSet__rf_tail Elt_T L_T _p_Elt_equal _p_L_mem 
                   record l))))).

[SequenceAsSet__rf_head_tail_unique]
  proj_SequenceAsSet__rf_head_tail_unique _ _ _ _ 
    (SequenceAsSet__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_head_tail_unique _ _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_head_tail_unique.

def proj_SequenceAsSet__rf_head_tail_spec :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (l:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ 
                (proj_SequenceAsSet__rf_is_empty Elt_T L_T _p_Elt_equal 
                   _p_L_mem record l))) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t Elt_T) 
                (proj_SequenceAsSet__rf_tolist Elt_T L_T _p_Elt_equal 
                   _p_L_mem record l) 
                (builtins.cons Elt_T 
                   (proj_SequenceAsSet__rf_head Elt_T L_T _p_Elt_equal 
                      _p_L_mem record l) 
                   (proj_SequenceAsSet__rf_tolist Elt_T L_T _p_Elt_equal 
                      _p_L_mem record 
                      (proj_SequenceAsSet__rf_tail Elt_T L_T _p_Elt_equal 
                         _p_L_mem record l))))))).

[SequenceAsSet__rf_head_tail_spec]
  proj_SequenceAsSet__rf_head_tail_spec _ _ _ _ (SequenceAsSet__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_head_tail_spec _ _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_head_tail_spec.

def proj_SequenceAsSet__rf_tail_includes :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (_p_L_mem 
                   (proj_SequenceAsSet__rf_tolist Elt_T L_T _p_Elt_equal 
                      _p_L_mem record 
                      (proj_SequenceAsSet__rf_tail Elt_T L_T _p_Elt_equal 
                         _p_L_mem record c)) e)) 
             (dk_logic.ebP 
                (proj_SequenceAsSet__rf_contains Elt_T L_T _p_Elt_equal 
                   _p_L_mem record e c))))).

[SequenceAsSet__rf_tail_includes]
  proj_SequenceAsSet__rf_tail_includes _ _ _ _ (SequenceAsSet__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_tail_includes _ _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_tail_includes.

def proj_SequenceAsSet__rf_tolist_contains :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_SequenceAsSet__rf_contains Elt_T L_T _p_Elt_equal 
                   _p_L_mem record e c)) 
             (dk_logic.ebP 
                (_p_L_mem 
                   (proj_SequenceAsSet__rf_tolist Elt_T L_T _p_Elt_equal 
                      _p_L_mem record c) e))))).

[SequenceAsSet__rf_tolist_contains]
  proj_SequenceAsSet__rf_tolist_contains _ _ _ _ (SequenceAsSet__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_tolist_contains _ _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_tolist_contains.

def proj_SequenceAsSet__rf_tolist_empty :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (l:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.eqv 
          (dk_logic.ebP 
             (proj_SequenceAsSet__rf_is_empty Elt_T L_T _p_Elt_equal 
                _p_L_mem record l)) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t Elt_T) 
                (proj_SequenceAsSet__rf_tolist Elt_T L_T _p_Elt_equal 
                   _p_L_mem record l) (builtins.nil Elt_T))))).

[SequenceAsSet__rf_tolist_empty]
  proj_SequenceAsSet__rf_tolist_empty _ _ _ _ (SequenceAsSet__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_tolist_empty _ _ _ _ _ _)
  -->
  SequenceAsSet__rf_tolist_empty.

def proj_SequenceAsSet__rf_nodouble_list_inv :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (l:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.ebP 
          (proj_SequenceAsSet__rf_nodouble Elt_T L_T _p_Elt_equal _p_L_mem 
             record 
             (proj_SequenceAsSet__rf_torep Elt_T L_T _p_Elt_equal _p_L_mem 
                record l)))).

[SequenceAsSet__rf_nodouble_list_inv]
  proj_SequenceAsSet__rf_nodouble_list_inv _ _ _ _ 
    (SequenceAsSet__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ SequenceAsSet__rf_nodouble_list_inv _ _ _ _ _)
  -->
  SequenceAsSet__rf_nodouble_list_inv.

def proj_SequenceAsSet__rf_remove_preserves_inv :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (l:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_SequenceAsSet__rf_nodouble Elt_T L_T _p_Elt_equal 
                   _p_L_mem record 
                   (proj_SequenceAsSet__rf_torep Elt_T L_T _p_Elt_equal 
                      _p_L_mem record l))) 
             (dk_logic.ebP 
                (proj_SequenceAsSet__rf_nodouble Elt_T L_T _p_Elt_equal 
                   _p_L_mem record 
                   (proj_SequenceAsSet__rf_torep Elt_T L_T _p_Elt_equal 
                      _p_L_mem record 
                      (proj_SequenceAsSet__rf_remove Elt_T L_T _p_Elt_equal 
                         _p_L_mem record e l))))))).

[SequenceAsSet__rf_remove_preserves_inv]
  proj_SequenceAsSet__rf_remove_preserves_inv _ _ _ _ 
    (SequenceAsSet__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ SequenceAsSet__rf_remove_preserves_inv _ _ _ _)
  -->
  SequenceAsSet__rf_remove_preserves_inv.

def proj_SequenceAsSet__rf_remove_smaller :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (l:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.forall Elt_T 
             (h:(cc.eT Elt_T) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (_p_L_mem 
                      (proj_SequenceAsSet__rf_torep Elt_T L_T _p_Elt_equal 
                         _p_L_mem record 
                         (proj_SequenceAsSet__rf_remove Elt_T L_T 
                            _p_Elt_equal _p_L_mem record e l)) h)) 
                (dk_logic.ebP 
                   (_p_L_mem 
                      (proj_SequenceAsSet__rf_torep Elt_T L_T _p_Elt_equal 
                         _p_L_mem record l) h)))))).

[SequenceAsSet__rf_remove_smaller]
  proj_SequenceAsSet__rf_remove_smaller _ _ _ _ (SequenceAsSet__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_remove_smaller _ _ _)
  -->
  SequenceAsSet__rf_remove_smaller.

def proj_SequenceAsSet__rf_add_contains1 :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.ebP 
             (proj_SequenceAsSet__rf_contains Elt_T L_T _p_Elt_equal 
                _p_L_mem record e 
                (proj_SequenceAsSet__rf_add Elt_T L_T _p_Elt_equal _p_L_mem 
                   record e c))))).

[SequenceAsSet__rf_add_contains1]
  proj_SequenceAsSet__rf_add_contains1 _ _ _ _ (SequenceAsSet__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_add_contains1 _ _)
  -->
  SequenceAsSet__rf_add_contains1.

def proj_SequenceAsSet__rf_add_contains2 :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.forall Elt_T 
             (x:(cc.eT Elt_T) =>
              dk_logic.imp 
                (dk_logic.not (dk_logic.ebP (basics._equal_ Elt_T e x))) 
                (dk_logic.eqv 
                   (dk_logic.ebP 
                      (proj_SequenceAsSet__rf_contains Elt_T L_T 
                         _p_Elt_equal _p_L_mem record x 
                         (proj_SequenceAsSet__rf_add Elt_T L_T _p_Elt_equal 
                            _p_L_mem record e c))) 
                   (dk_logic.ebP 
                      (proj_SequenceAsSet__rf_contains Elt_T L_T 
                         _p_Elt_equal _p_L_mem record x c))))))).

[SequenceAsSet__rf_add_contains2]
  proj_SequenceAsSet__rf_add_contains2 _ _ _ _ (SequenceAsSet__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_add_contains2 _)
  -->
  SequenceAsSet__rf_add_contains2.

def proj_SequenceAsSet__rf_unique_contains :
  Elt_T:cc.uT ->
  L_T:cc.uT ->
  _p_Elt_equal:((cc.eT Elt_T) -> (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem:((cc.eT (basics.list__t Elt_T)) ->
            (cc.eT Elt_T) -> cc.eT basics.bool__t) ->
  record:(SequenceAsSet__me_as_species Elt_T L_T _p_Elt_equal _p_L_mem) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record) 
       (c:
        (cc.eT 
           (proj_SequenceAsSet__rf_T Elt_T L_T _p_Elt_equal _p_L_mem record)) =>
        dk_logic.forall Elt_T 
          (e:(cc.eT Elt_T) =>
           dk_logic.ebP 
             (basics._tilda__tilda_ 
                (proj_SequenceAsSet__rf_contains Elt_T L_T _p_Elt_equal 
                   _p_L_mem record e 
                   (proj_SequenceAsSet__rf_remove Elt_T L_T _p_Elt_equal 
                      _p_L_mem record e c)))))).

[SequenceAsSet__rf_unique_contains]
  proj_SequenceAsSet__rf_unique_contains _ _ _ _ (SequenceAsSet__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    SequenceAsSet__rf_unique_contains)
  -->
  SequenceAsSet__rf_unique_contains.

def SequenceAsSet__nodouble :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t.

[l, _p_L_mem, _p_Elt_T]
  SequenceAsSet__nodouble _p_Elt_T _p_L_mem l
  -->
  basics.match__nil _p_Elt_T basics.bool__t l dk_bool.true 
    (basics.match__cons _p_Elt_T basics.bool__t l 
       (pattern_var_0_:(cc.eT _p_Elt_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_Elt_T)) =>
        (h:(cc.eT _p_Elt_T) =>
         (q:(cc.eT (basics.list__t _p_Elt_T)) =>
          basics._amper__amper_ 
            ((_p_Elt_T:cc.uT =>
              _p_L_mem:
              ((cc.eT (basics.list__t _p_Elt_T)) ->
               (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
              l:(cc.eT (basics.list__t _p_Elt_T)) =>
              dk_builtins.call_by_value (basics.list__t _p_Elt_T) 
                basics.bool__t (SequenceAsSet__nodouble _p_Elt_T _p_L_mem) l) 
               _p_Elt_T _p_L_mem q) (basics._tilda__tilda_ (_p_L_mem q h))) 
           pattern_var_1_) pattern_var_0_) (dk_fail.fail basics.bool__t)).

def SequenceAsSet__add :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  (cc.eT _p_Elt_T) ->
  (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T).

[l, e, _p_L_mem, _p_Elt_T]
  SequenceAsSet__add _p_Elt_T _p_L_mem e l
  -->
  basics.match__nil _p_Elt_T (basics.list__t _p_Elt_T) l 
    (builtins.cons _p_Elt_T e (builtins.nil _p_Elt_T)) 
    (basics.match__cons _p_Elt_T (basics.list__t _p_Elt_T) l 
       (pattern_var_0_:(cc.eT _p_Elt_T) =>
        pattern_var_1_:(cc.eT (basics.list__t _p_Elt_T)) =>
        (h:(cc.eT _p_Elt_T) =>
         (t:(cc.eT (basics.list__t _p_Elt_T)) =>
          dk_bool.ite (basics.list__t _p_Elt_T) 
            (basics._equal_ _p_Elt_T e h) t 
            (dk_bool.ite (basics.list__t _p_Elt_T) (_p_L_mem t e) l 
               (builtins.cons _p_Elt_T e l))) pattern_var_1_) pattern_var_0_) 
       (dk_fail.fail (basics.list__t _p_Elt_T))).

def SequenceAsSet__torep :
  _p_Elt_T:cc.uT ->
  l:(cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)
  :=
  _p_Elt_T:cc.uT => l:(cc.eT (basics.list__t _p_Elt_T)) => l.

def SequenceAsSet__add_contains :
  _p_Elt_T:cc.uT ->
  abst_T:cc.uT ->
  abst_add:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) ->
  abst_contains:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (c:(cc.eT abst_T) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.forall _p_Elt_T 
             (x:(cc.eT _p_Elt_T) =>
              dk_logic.eqv (dk_logic.ebP (abst_contains x (abst_add e c))) 
                (dk_logic.ebP 
                   (basics._bar__bar_ (basics._equal_ _p_Elt_T x e) 
                      (abst_contains x c)))))))
  :=
  _p_Elt_T:cc.uT =>
  abst_T:cc.uT =>
  abst_add:((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT abst_T) =>
  abst_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (c:(cc.eT abst_T) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.forall _p_Elt_T 
             (x:(cc.eT _p_Elt_T) =>
              dk_logic.eqv (dk_logic.ebP (abst_contains x (abst_add e c))) 
                (dk_logic.ebP 
                   (basics._bar__bar_ (basics._equal_ _p_Elt_T x e) 
                      (abst_contains x c))))))).

def SequenceAsSet__head_tail_unique :
  _p_Elt_T:cc.uT ->
  abst_head:((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT _p_Elt_T) ->
  abst_remove:((cc.eT _p_Elt_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) ->
               cc.eT (basics.list__t _p_Elt_T)) ->
  abst_tail:((cc.eT (basics.list__t _p_Elt_T)) ->
             cc.eT (basics.list__t _p_Elt_T)) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (l:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.imp 
          (dk_logic.ebP 
             (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
          (dk_logic.ebP 
             (basics._equal_ (basics.list__t _p_Elt_T) 
                (abst_remove (abst_head l) l) (abst_tail l)))))
  :=
  _p_Elt_T:cc.uT =>
  abst_head:((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT _p_Elt_T) =>
  abst_remove:
  ((cc.eT _p_Elt_T) ->
   (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)) =>
  abst_tail:
  ((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)) =>
  (__BA_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.imp 
         (dk_logic.ebP 
            (basics._tilda__tilda_ 
               (Sequence__is_empty _p_Elt_T (builtins.nil _p_Elt_T)))) 
         (dk_logic.ebP 
            (basics._equal_ (basics.list__t _p_Elt_T) 
               (abst_remove (abst_head (builtins.nil _p_Elt_T)) 
                  (builtins.nil _p_Elt_T)) 
               (abst_tail (builtins.nil _p_Elt_T)))))) =>
   (__BA_2_LEMMA:
    (dk_logic.eP 
       (dk_logic.forall _p_Elt_T 
          (h:(cc.eT _p_Elt_T) =>
           dk_logic.forall (basics.list__t _p_Elt_T) 
             (l:(cc.eT (basics.list__t _p_Elt_T)) =>
              dk_logic.imp 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
                   (dk_logic.ebP 
                      (basics._equal_ (basics.list__t _p_Elt_T) 
                         (abst_remove (abst_head l) l) (abst_tail l)))) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._tilda__tilda_ 
                         (Sequence__is_empty _p_Elt_T 
                            (builtins.cons _p_Elt_T h l)))) 
                   (dk_logic.ebP 
                      (basics._equal_ (basics.list__t _p_Elt_T) 
                         (abst_remove 
                            (abst_head (builtins.cons _p_Elt_T h l)) 
                            (builtins.cons _p_Elt_T h l)) 
                         (abst_tail (builtins.cons _p_Elt_T h l))))))))) =>
    (__BA_3_LEMMA:
     (dk_logic.eP 
        (dk_logic.forall (basics.list__t _p_Elt_T) 
           (l:(cc.eT (basics.list__t _p_Elt_T)) =>
            dk_logic.imp 
              (dk_logic.ebP 
                 (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
              (dk_logic.ebP 
                 (basics._equal_ (basics.list__t _p_Elt_T) 
                    (abst_remove (abst_head l) l) (abst_tail l)))))) =>
     zen.nnpp 
       (zen.forall (basics.list__t _p_Elt_T) 
          (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T v_Vzb)))) 
             (zen.triangle 
                (focal.is_true 
                   (basics._equal_ (basics.list__t _p_Elt_T) 
                      (abst_remove (abst_head v_Vzb) v_Vzb) (abst_tail v_Vzb)))))) 
       (v_Vac:
        (zen.proof 
           (zen.not 
              (zen.forall (basics.list__t _p_Elt_T) 
                 (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (Sequence__is_empty _p_Elt_T v_Vzb)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ (basics.list__t _p_Elt_T) 
                             (abst_remove (abst_head v_Vzb) v_Vzb) 
                             (abst_tail v_Vzb)))))))) =>
        zen.Raxiom 
          (zen.forall (basics.list__t _p_Elt_T) 
             (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ 
                         (Sequence__is_empty _p_Elt_T v_Vzb)))) 
                (zen.triangle 
                   (focal.is_true 
                      (basics._equal_ (basics.list__t _p_Elt_T) 
                         (abst_remove (abst_head v_Vzb) v_Vzb) 
                         (abst_tail v_Vzb)))))) __BA_3_LEMMA v_Vac)) 
      (dk_builtins.magic_prove 
         (dk_logic.forall (basics.list__t _p_Elt_T) 
            (l:(cc.eT (basics.list__t _p_Elt_T)) =>
             dk_logic.imp 
               (dk_logic.ebP 
                  (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
               (dk_logic.ebP 
                  (basics._equal_ (basics.list__t _p_Elt_T) 
                     (abst_remove (abst_head l) l) (abst_tail l))))))) 
     ((__BA_2_1_LEMMA:
       (h:(cc.eT _p_Elt_T) ->
        l:(cc.eT (basics.list__t _p_Elt_T)) ->
        I:(dk_logic.eP 
             (dk_logic.imp 
                (dk_logic.ebP 
                   (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
                (dk_logic.ebP 
                   (basics._equal_ (basics.list__t _p_Elt_T) 
                      (abst_remove (abst_head l) l) (abst_tail l))))) ->
        dk_logic.eP 
          (dk_logic.imp 
             (dk_logic.ebP 
                (basics._tilda__tilda_ 
                   (Sequence__is_empty _p_Elt_T (builtins.cons _p_Elt_T h l)))) 
             (dk_logic.ebP 
                (basics._equal_ (basics.list__t _p_Elt_T) 
                   (abst_remove (abst_head (builtins.cons _p_Elt_T h l)) 
                      (builtins.cons _p_Elt_T h l)) 
                   (abst_tail (builtins.cons _p_Elt_T h l)))))) =>
       zen.nnpp 
         (zen.forall _p_Elt_T 
            (v_Vzb:(zen.term _p_Elt_T) =>
             zen.forall (basics.list__t _p_Elt_T) 
               (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.imp 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (Sequence__is_empty _p_Elt_T v_Vac)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ (basics.list__t _p_Elt_T) 
                              (abst_remove (abst_head v_Vac) v_Vac) 
                              (abst_tail v_Vac))))) 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (Sequence__is_empty _p_Elt_T 
                                 (builtins.cons _p_Elt_T v_Vzb v_Vac))))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ (basics.list__t _p_Elt_T) 
                              (abst_remove 
                                 (abst_head 
                                    (builtins.cons _p_Elt_T v_Vzb v_Vac)) 
                                 (builtins.cons _p_Elt_T v_Vzb v_Vac)) 
                              (abst_tail (builtins.cons _p_Elt_T v_Vzb v_Vac))))))))) 
         (v_Vbc:
          (zen.proof 
             (zen.not 
                (zen.forall _p_Elt_T 
                   (v_Vzb:(zen.term _p_Elt_T) =>
                    zen.forall (basics.list__t _p_Elt_T) 
                      (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                       zen.imp 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._tilda__tilda_ 
                                     (Sequence__is_empty _p_Elt_T v_Vac)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ (basics.list__t _p_Elt_T) 
                                     (abst_remove (abst_head v_Vac) v_Vac) 
                                     (abst_tail v_Vac))))) 
                         (zen.imp 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._tilda__tilda_ 
                                     (Sequence__is_empty _p_Elt_T 
                                        (builtins.cons _p_Elt_T v_Vzb v_Vac))))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._equal_ (basics.list__t _p_Elt_T) 
                                     (abst_remove 
                                        (abst_head 
                                           (builtins.cons _p_Elt_T v_Vzb 
                                              v_Vac)) 
                                        (builtins.cons _p_Elt_T v_Vzb v_Vac)) 
                                     (abst_tail 
                                        (builtins.cons _p_Elt_T v_Vzb v_Vac))))))))))) =>
          zen.Raxiom 
            (zen.forall _p_Elt_T 
               (v_Vzb:(zen.term _p_Elt_T) =>
                zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.imp 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ 
                                 (Sequence__is_empty _p_Elt_T v_Vac)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ (basics.list__t _p_Elt_T) 
                                 (abst_remove (abst_head v_Vac) v_Vac) 
                                 (abst_tail v_Vac))))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ 
                                 (Sequence__is_empty _p_Elt_T 
                                    (builtins.cons _p_Elt_T v_Vzb v_Vac))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._equal_ (basics.list__t _p_Elt_T) 
                                 (abst_remove 
                                    (abst_head 
                                       (builtins.cons _p_Elt_T v_Vzb v_Vac)) 
                                    (builtins.cons _p_Elt_T v_Vzb v_Vac)) 
                                 (abst_tail 
                                    (builtins.cons _p_Elt_T v_Vzb v_Vac))))))))) 
            __BA_2_1_LEMMA v_Vbc)) 
        (h:(cc.eT _p_Elt_T) =>
         l:(cc.eT (basics.list__t _p_Elt_T)) =>
         I:
         (dk_logic.eP 
            (dk_logic.imp 
               (dk_logic.ebP 
                  (basics._tilda__tilda_ (Sequence__is_empty _p_Elt_T l))) 
               (dk_logic.ebP 
                  (basics._equal_ (basics.list__t _p_Elt_T) 
                     (abst_remove (abst_head l) l) (abst_tail l))))) =>
         dk_builtins.magic_prove 
           (dk_logic.imp 
              (dk_logic.ebP 
                 (basics._tilda__tilda_ 
                    (Sequence__is_empty _p_Elt_T (builtins.cons _p_Elt_T h l)))) 
              (dk_logic.ebP 
                 (basics._equal_ (basics.list__t _p_Elt_T) 
                    (abst_remove (abst_head (builtins.cons _p_Elt_T h l)) 
                       (builtins.cons _p_Elt_T h l)) 
                    (abst_tail (builtins.cons _p_Elt_T h l)))))))) 
    (zen.nnpp 
       (zen.imp 
          (zen.triangle 
             (focal.is_true 
                (basics._tilda__tilda_ 
                   (Sequence__is_empty _p_Elt_T (builtins.nil _p_Elt_T))))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_Elt_T) 
                   (abst_remove (abst_head (builtins.nil _p_Elt_T)) 
                      (builtins.nil _p_Elt_T)) 
                   (abst_tail (builtins.nil _p_Elt_T)))))) 
       (v_Vzb:
        (zen.proof 
           (zen.not 
              (zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._tilda__tilda_ 
                          (Sequence__is_empty _p_Elt_T 
                             (builtins.nil _p_Elt_T))))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ (basics.list__t _p_Elt_T) 
                          (abst_remove (abst_head (builtins.nil _p_Elt_T)) 
                             (builtins.nil _p_Elt_T)) 
                          (abst_tail (builtins.nil _p_Elt_T)))))))) =>
        zen.Rnotimply 
          (zen.triangle 
             (focal.is_true 
                (basics._tilda__tilda_ 
                   (Sequence__is_empty _p_Elt_T (builtins.nil _p_Elt_T))))) 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ (basics.list__t _p_Elt_T) 
                   (abst_remove (abst_head (builtins.nil _p_Elt_T)) 
                      (builtins.nil _p_Elt_T)) 
                   (abst_tail (builtins.nil _p_Elt_T))))) 
          (v_Vac:
           (zen.proof 
              (zen.triangle 
                 (focal.is_true 
                    (basics._tilda__tilda_ 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)))))) =>
           v_Vbc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                          (abst_remove (abst_head (builtins.nil _p_Elt_T)) 
                             (builtins.nil _p_Elt_T)) 
                          (abst_tail (builtins.nil _p_Elt_T))))))) =>
           focal.zenon_focal_not 
             (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)) 
             (v_Vcc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics.syntactic_equal (basics.list__t _p_Elt_T) 
                             (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T)))))) =>
              focal.zenon_not_syntactic_equal (basics.list__t _p_Elt_T) 
                (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T) 
                (v_Vdc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal (basics.list__t _p_Elt_T) 
                             (builtins.nil _p_Elt_T) (builtins.nil _p_Elt_T))))) =>
                 zen.Rnoteq (basics.list__t _p_Elt_T) 
                   (builtins.nil _p_Elt_T) v_Vdc) v_Vcc) v_Vac) v_Vzb)).

def SequenceAsSet__nodouble_list_inv :
  _p_Elt_T:cc.uT ->
  abst_T:cc.uT ->
  abst_nodouble:((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) ->
  abst_torep:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (l:(cc.eT abst_T) => dk_logic.ebP (abst_nodouble (abst_torep l))))
  :=
  _p_Elt_T:cc.uT =>
  abst_T:cc.uT =>
  abst_nodouble:
  ((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) =>
  abst_torep:((cc.eT abst_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (l:(cc.eT abst_T) => dk_logic.ebP (abst_nodouble (abst_torep l)))).

def SequenceAsSet__remove_preserves_inv :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_nodouble:((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) ->
  abst_remove:((cc.eT _p_Elt_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) ->
               cc.eT (basics.list__t _p_Elt_T)) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (l:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.imp 
             (dk_logic.ebP (abst_nodouble (SequenceAsSet__torep _p_Elt_T l))) 
             (dk_logic.ebP 
                (abst_nodouble 
                   (SequenceAsSet__torep _p_Elt_T (abst_remove e l)))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_nodouble:
  ((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) =>
  abst_remove:
  ((cc.eT _p_Elt_T) ->
   (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)) =>
  (__BB_1_LEMMA:
   (dk_logic.eP 
      (dk_logic.forall _p_Elt_T 
         (e:(cc.eT _p_Elt_T) =>
          dk_logic.forall (basics.list__t _p_Elt_T) 
            (l:(cc.eT (basics.list__t _p_Elt_T)) =>
             dk_logic.imp (dk_logic.ebP (abst_nodouble l)) 
               (dk_logic.ebP (abst_nodouble (abst_remove e l))))))) =>
   zen.nnpp 
     (zen.forall (basics.list__t _p_Elt_T) 
        (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.forall _p_Elt_T 
           (v_Vac:(zen.term _p_Elt_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble (SequenceAsSet__torep _p_Elt_T v_Vzb)))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble 
                       (SequenceAsSet__torep _p_Elt_T 
                          (abst_remove v_Vac v_Vzb)))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall (basics.list__t _p_Elt_T) 
               (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.forall _p_Elt_T 
                  (v_Vac:(zen.term _p_Elt_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_nodouble 
                              (SequenceAsSet__torep _p_Elt_T v_Vzb)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_nodouble 
                              (SequenceAsSet__torep _p_Elt_T 
                                 (abst_remove v_Vac v_Vzb)))))))))) =>
      zen.Rnotall (basics.list__t _p_Elt_T) 
        (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.forall _p_Elt_T 
           (v_Vac:(zen.term _p_Elt_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble (SequenceAsSet__torep _p_Elt_T v_Vzb)))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble 
                       (SequenceAsSet__torep _p_Elt_T 
                          (abst_remove v_Vac v_Vzb))))))) 
        (v_Vcc:(zen.term (basics.list__t _p_Elt_T)) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall _p_Elt_T 
                  (v_Vac:(zen.term _p_Elt_T) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_nodouble 
                              (SequenceAsSet__torep _p_Elt_T v_Vcc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_nodouble 
                              (SequenceAsSet__torep _p_Elt_T 
                                 (abst_remove v_Vac v_Vcc))))))))) =>
         zen.Rnotall _p_Elt_T 
           (v_Vac:(zen.term _p_Elt_T) =>
            zen.imp 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble (SequenceAsSet__torep _p_Elt_T v_Vcc)))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble 
                       (SequenceAsSet__torep _p_Elt_T 
                          (abst_remove v_Vac v_Vcc)))))) 
           (v_Vec:(zen.term _p_Elt_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_nodouble 
                              (SequenceAsSet__torep _p_Elt_T v_Vcc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_nodouble 
                              (SequenceAsSet__torep _p_Elt_T 
                                 (abst_remove v_Vec v_Vcc)))))))) =>
            zen.Rnotimply 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble (SequenceAsSet__torep _p_Elt_T v_Vcc)))) 
              (zen.triangle 
                 (focal.is_true 
                    (abst_nodouble 
                       (SequenceAsSet__torep _p_Elt_T 
                          (abst_remove v_Vec v_Vcc))))) 
              (v_Vgc:
               (zen.proof 
                  (zen.triangle (focal.is_true (abst_nodouble v_Vcc)))) =>
               v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_nodouble (abst_remove v_Vec v_Vcc)))))) =>
               zen.Rall _p_Elt_T 
                 (v_Vac:(zen.term _p_Elt_T) =>
                  zen.forall (basics.list__t _p_Elt_T) 
                    (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_nodouble v_Vzb))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_nodouble (abst_remove v_Vac v_Vzb)))))) 
                 v_Vec 
                 (v_Vic:
                  (zen.proof 
                     (zen.forall (basics.list__t _p_Elt_T) 
                        (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_nodouble v_Vzb))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_nodouble (abst_remove v_Vec v_Vzb))))))) =>
                  zen.Rall (basics.list__t _p_Elt_T) 
                    (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_nodouble v_Vzb))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_nodouble (abst_remove v_Vec v_Vzb))))) 
                    v_Vcc 
                    (v_Vjc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_nodouble v_Vcc))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_nodouble (abst_remove v_Vec v_Vcc)))))) =>
                     zen.Rimply 
                       (zen.triangle (focal.is_true (abst_nodouble v_Vcc))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_nodouble (abst_remove v_Vec v_Vcc)))) 
                       (v_Vkc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_nodouble v_Vcc))))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (abst_nodouble v_Vcc))) 
                          v_Vgc v_Vkc) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_nodouble (abst_remove v_Vec v_Vcc))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_nodouble (abst_remove v_Vec v_Vcc)))) 
                          v_Vlc v_Vhc) v_Vjc) v_Vic) __BB_1_LEMMA) v_Vfc) 
           v_Vdc) v_Vbc)) 
    ((__BB_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.forall _p_Elt_T 
            (e:(cc.eT _p_Elt_T) =>
             dk_logic.imp 
               (dk_logic.ebP (abst_nodouble (builtins.nil _p_Elt_T))) 
               (dk_logic.ebP 
                  (abst_nodouble (abst_remove e (builtins.nil _p_Elt_T))))))) =>
      (__BB_1_2_LEMMA:
       (h:(cc.eT _p_Elt_T) ->
        e:(cc.eT _p_Elt_T) ->
        t:(cc.eT (basics.list__t _p_Elt_T)) ->
        I:(dk_logic.eP 
             (dk_logic.imp (dk_logic.ebP (abst_nodouble t)) 
                (dk_logic.ebP (abst_nodouble (abst_remove e t))))) ->
        N:(dk_logic.eP 
             (dk_logic.ebP (abst_nodouble (builtins.cons _p_Elt_T h t)))) ->
        dk_logic.eP 
          (dk_logic.ebP 
             (abst_nodouble (abst_remove e (builtins.cons _p_Elt_T h t))))) =>
       dk_builtins.magic_prove 
         (dk_logic.forall _p_Elt_T 
            (e:(cc.eT _p_Elt_T) =>
             dk_logic.forall (basics.list__t _p_Elt_T) 
               (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                dk_logic.imp (dk_logic.ebP (abst_nodouble l)) 
                  (dk_logic.ebP (abst_nodouble (abst_remove e l))))))) 
        (h:(cc.eT _p_Elt_T) =>
         e:(cc.eT _p_Elt_T) =>
         t:(cc.eT (basics.list__t _p_Elt_T)) =>
         I:
         (dk_logic.eP 
            (dk_logic.imp (dk_logic.ebP (abst_nodouble t)) 
               (dk_logic.ebP (abst_nodouble (abst_remove e t))))) =>
         N:
         (dk_logic.eP 
            (dk_logic.ebP (abst_nodouble (builtins.cons _p_Elt_T h t)))) =>
         (__BB_1_2_1_LEMMA:
          (H:(dk_logic.eP (dk_logic.ebP (basics._equal_ _p_Elt_T h e))) ->
           dk_logic.eP 
             (dk_logic.ebP 
                (abst_nodouble (abst_remove e (builtins.cons _p_Elt_T h t))))) =>
          (__BB_1_2_2_LEMMA:
           (E:(dk_logic.eP 
                 (dk_logic.ebP 
                    (basics._tilda__tilda_ (basics._equal_ _p_Elt_T h e)))) ->
            dk_logic.eP 
              (dk_logic.ebP 
                 (abst_nodouble (abst_remove e (builtins.cons _p_Elt_T h t))))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_nodouble 
                      (abst_remove e (builtins.cons _p_Elt_T h t))))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_nodouble 
                             (abst_remove e (builtins.cons _p_Elt_T h t))))))) =>
              zen.Rimply 
                (zen.triangle (focal.is_true (basics._equal_ _p_Elt_T h e))) 
                (zen.triangle 
                   (focal.is_true 
                      (abst_nodouble 
                         (abst_remove e (builtins.cons _p_Elt_T h t))))) 
                (v_Vac:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (basics.syntactic_equal _p_Elt_T h e))))) =>
                 zen.Rimply 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._tilda__tilda_ (basics._equal_ _p_Elt_T h e)))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_nodouble 
                            (abst_remove e (builtins.cons _p_Elt_T h t))))) 
                   (v_Vbc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (basics.syntactic_equal _p_Elt_T h e)))))) =>
                    focal.zenon_focal_notnot 
                      (basics.syntactic_equal _p_Elt_T h e) 
                      (v_Vcc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal _p_Elt_T h e)))) =>
                       focal.zenon_syntactic_equal _p_Elt_T h e 
                         (v_Vdc:
                          (zen.proof (zen.triangle (zen.equal _p_Elt_T h e))) =>
                          focal.zenon_not_syntactic_equal _p_Elt_T h e 
                            (v_Vec:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_Elt_T h e)))) =>
                             zen.Raxiom 
                               (zen.triangle (zen.equal _p_Elt_T h e)) v_Vdc 
                               v_Vec) v_Vac) v_Vcc) v_Vbc) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_nodouble 
                                (abst_remove e (builtins.cons _p_Elt_T h t)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_nodouble 
                               (abst_remove e (builtins.cons _p_Elt_T h t))))) 
                      v_Vfc v_Vzb) __BB_1_2_2_LEMMA) 
                (v_Vfc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_nodouble 
                             (abst_remove e (builtins.cons _p_Elt_T h t)))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_nodouble 
                            (abst_remove e (builtins.cons _p_Elt_T h t))))) 
                   v_Vfc v_Vzb) __BB_1_2_1_LEMMA)) 
            (E:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (basics._tilda__tilda_ (basics._equal_ _p_Elt_T h e)))) =>
             (__BB_1_2_2_1_LEMMA:
              (dk_logic.eP 
                 (dk_logic.ebP 
                    (basics._equal_ (basics.list__t _p_Elt_T) 
                       (abst_remove e (builtins.cons _p_Elt_T h t)) 
                       (builtins.cons _p_Elt_T h (abst_remove e t))))) =>
              (__BB_1_2_2_2_LEMMA:
               (dk_logic.eP (dk_logic.ebP (abst_nodouble t))) =>
               (__BB_1_2_2_3_LEMMA:
                (dk_logic.eP (dk_logic.ebP (abst_nodouble (abst_remove e t)))) =>
                (__BB_1_2_2_4_LEMMA:
                 (dk_logic.eP 
                    (dk_logic.ebP 
                       (abst_nodouble 
                          (builtins.cons _p_Elt_T h (abst_remove e t))))) =>
                 zen.nnpp 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_nodouble 
                            (abst_remove e (builtins.cons _p_Elt_T h t))))) 
                   (v_Vbc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_nodouble 
                                   (abst_remove e 
                                      (builtins.cons _p_Elt_T h t))))))) =>
                    focal.zenon_syntactic_equal (basics.list__t _p_Elt_T) 
                      (abst_remove e (builtins.cons _p_Elt_T h t)) 
                      (builtins.cons _p_Elt_T h (abst_remove e t)) 
                      (v_Vcc:
                       (zen.proof 
                          (zen.triangle 
                             (zen.equal (basics.list__t _p_Elt_T) 
                                (abst_remove e (builtins.cons _p_Elt_T h t)) 
                                (builtins.cons _p_Elt_T h (abst_remove e t))))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vdc:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vdc)) 
                         (abst_nodouble 
                            (builtins.cons _p_Elt_T h (abst_remove e t))) 
                         (abst_nodouble 
                            (abst_remove e (builtins.cons _p_Elt_T h t))) 
                         (v_Vec:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_nodouble 
                                         (builtins.cons _p_Elt_T h 
                                            (abst_remove e t))) 
                                      (abst_nodouble 
                                         (abst_remove e 
                                            (builtins.cons _p_Elt_T h t))))))) =>
                          zen.Rsubst (basics.list__t _p_Elt_T) 
                            (v_Vfc:(zen.term (basics.list__t _p_Elt_T)) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_nodouble v_Vfc) 
                                     (abst_nodouble 
                                        (abst_remove e 
                                           (builtins.cons _p_Elt_T h t)))))) 
                            (builtins.cons _p_Elt_T h (abst_remove e t)) 
                            (abst_remove e (builtins.cons _p_Elt_T h t)) 
                            (v_Vgc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal (basics.list__t _p_Elt_T) 
                                         (builtins.cons _p_Elt_T h 
                                            (abst_remove e t)) 
                                         (abst_remove e 
                                            (builtins.cons _p_Elt_T h t)))))) =>
                             zen.Reqsym (basics.list__t _p_Elt_T) 
                               (abst_remove e (builtins.cons _p_Elt_T h t)) 
                               (builtins.cons _p_Elt_T h (abst_remove e t)) 
                               v_Vcc v_Vgc) 
                            (v_Vhc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_nodouble 
                                            (abst_remove e 
                                               (builtins.cons _p_Elt_T h t))) 
                                         (abst_nodouble 
                                            (abst_remove e 
                                               (builtins.cons _p_Elt_T h t))))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_nodouble 
                                  (abst_remove e (builtins.cons _p_Elt_T h t))) 
                               v_Vhc) v_Vec) 
                         (v_Vic:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_nodouble 
                                      (abst_remove e 
                                         (builtins.cons _p_Elt_T h t)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_nodouble 
                                     (abst_remove e 
                                        (builtins.cons _p_Elt_T h t))))) 
                            v_Vic v_Vbc) __BB_1_2_2_4_LEMMA) 
                      __BB_1_2_2_1_LEMMA)) 
                  ((__BB_1_2_2_4_1_LEMMA:
                    (dk_logic.eP 
                       (dk_logic.ebP 
                          (basics._tilda__tilda_ 
                             (_p_L_mem (abst_remove e t) h)))) =>
                    dk_builtins.magic_prove 
                      (dk_logic.ebP 
                         (abst_nodouble 
                            (builtins.cons _p_Elt_T h (abst_remove e t))))) 
                     ((__BB_1_2_2_4_1_1_LEMMA:
                       (F:(dk_logic.eP 
                             (dk_logic.ebP (_p_L_mem (abst_remove e t) h))) ->
                        dk_logic.eP (dk_logic.ebP (_p_L_mem t h))) =>
                       dk_builtins.magic_prove 
                         (dk_logic.ebP 
                            (basics._tilda__tilda_ 
                               (_p_L_mem (abst_remove e t) h)))) 
                        (F:
                         (dk_logic.eP 
                            (dk_logic.ebP (_p_L_mem (abst_remove e t) h))) =>
                         dk_builtins.magic_prove 
                           (dk_logic.ebP (_p_L_mem t h)))))) 
                 (zen.nnpp 
                    (zen.triangle 
                       (focal.is_true (abst_nodouble (abst_remove e t)))) 
                    (v_Vzb:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_nodouble (abst_remove e t)))))) =>
                     zen.Rimply 
                       (zen.triangle (focal.is_true (abst_nodouble t))) 
                       (zen.triangle 
                          (focal.is_true (abst_nodouble (abst_remove e t)))) 
                       (v_Vac:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle (focal.is_true (abst_nodouble t))))) =>
                        zen.Raxiom 
                          (zen.triangle (focal.is_true (abst_nodouble t))) 
                          __BB_1_2_2_2_LEMMA v_Vac) 
                       (v_Vbc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_nodouble (abst_remove e t))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (abst_nodouble (abst_remove e t)))) 
                          v_Vbc v_Vzb) I))) 
                (dk_builtins.magic_prove (dk_logic.ebP (abst_nodouble t)))) 
               (dk_builtins.magic_prove 
                  (dk_logic.ebP 
                     (basics._equal_ (basics.list__t _p_Elt_T) 
                        (abst_remove e (builtins.cons _p_Elt_T h t)) 
                        (builtins.cons _p_Elt_T h (abst_remove e t))))))) 
           (H:(dk_logic.eP (dk_logic.ebP (basics._equal_ _p_Elt_T h e))) =>
            (__BB_1_2_1_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (basics._equal_ (basics.list__t _p_Elt_T) 
                      (abst_remove e (builtins.cons _p_Elt_T h t)) t))) =>
             (__BB_1_2_1_2_LEMMA:
              (dk_logic.eP (dk_logic.ebP (abst_nodouble t))) =>
              zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (abst_nodouble 
                         (abst_remove e (builtins.cons _p_Elt_T h t))))) 
                (v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_nodouble 
                                (abst_remove e (builtins.cons _p_Elt_T h t))))))) =>
                 focal.zenon_syntactic_equal (basics.list__t _p_Elt_T) 
                   (abst_remove e (builtins.cons _p_Elt_T h t)) t 
                   (v_Vcc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal (basics.list__t _p_Elt_T) 
                             (abst_remove e (builtins.cons _p_Elt_T h t)) t))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vdc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vdc)) (abst_nodouble t) 
                      (abst_nodouble 
                         (abst_remove e (builtins.cons _p_Elt_T h t))) 
                      (v_Vec:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t (abst_nodouble t) 
                                   (abst_nodouble 
                                      (abst_remove e 
                                         (builtins.cons _p_Elt_T h t))))))) =>
                       zen.Rsubst (basics.list__t _p_Elt_T) 
                         (v_Vfc:(zen.term (basics.list__t _p_Elt_T)) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_nodouble v_Vfc) 
                                  (abst_nodouble 
                                     (abst_remove e 
                                        (builtins.cons _p_Elt_T h t)))))) t 
                         (abst_remove e (builtins.cons _p_Elt_T h t)) 
                         (v_Vgc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal (basics.list__t _p_Elt_T) t 
                                      (abst_remove e 
                                         (builtins.cons _p_Elt_T h t)))))) =>
                          zen.Reqsym (basics.list__t _p_Elt_T) 
                            (abst_remove e (builtins.cons _p_Elt_T h t)) t 
                            v_Vcc v_Vgc) 
                         (v_Vhc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_nodouble 
                                         (abst_remove e 
                                            (builtins.cons _p_Elt_T h t))) 
                                      (abst_nodouble 
                                         (abst_remove e 
                                            (builtins.cons _p_Elt_T h t))))))) =>
                          zen.Rnoteq basics.bool__t 
                            (abst_nodouble 
                               (abst_remove e (builtins.cons _p_Elt_T h t))) 
                            v_Vhc) v_Vec) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_nodouble 
                                   (abst_remove e 
                                      (builtins.cons _p_Elt_T h t)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_nodouble 
                                  (abst_remove e (builtins.cons _p_Elt_T h t))))) 
                         v_Vic v_Vbc) __BB_1_2_1_2_LEMMA) __BB_1_2_1_1_LEMMA)) 
               (dk_builtins.magic_prove (dk_logic.ebP (abst_nodouble t)))) 
              (dk_builtins.magic_prove 
                 (dk_logic.ebP 
                    (basics._equal_ (basics.list__t _p_Elt_T) 
                       (abst_remove e (builtins.cons _p_Elt_T h t)) t)))))) 
       (dk_builtins.magic_prove 
          (dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.imp 
                (dk_logic.ebP (abst_nodouble (builtins.nil _p_Elt_T))) 
                (dk_logic.ebP 
                   (abst_nodouble (abst_remove e (builtins.nil _p_Elt_T)))))))).

def SequenceAsSet__remove_smaller :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem_spec:(dk_logic.eP 
                   (dk_logic.forall (basics.list__t _p_Elt_T) 
                      (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                       dk_logic.forall _p_Elt_T 
                         (e:(cc.eT _p_Elt_T) =>
                          dk_logic.forall _p_Elt_T 
                            (h:(cc.eT _p_Elt_T) =>
                             dk_logic.eqv 
                               (dk_logic.or (dk_logic.ebP (_p_L_mem l e)) 
                                  (dk_logic.ebP (basics._equal_ _p_Elt_T e h))) 
                               (dk_logic.ebP 
                                  (_p_L_mem (builtins.cons _p_Elt_T h l) e))))))) ->
  abst_remove:((cc.eT _p_Elt_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) ->
               cc.eT (basics.list__t _p_Elt_T)) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (l:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.forall _p_Elt_T 
             (h:(cc.eT _p_Elt_T) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (_p_L_mem 
                      (SequenceAsSet__torep _p_Elt_T (abst_remove e l)) h)) 
                (dk_logic.ebP (_p_L_mem (SequenceAsSet__torep _p_Elt_T l) h))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem_spec:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_Elt_T) 
        (l:(cc.eT (basics.list__t _p_Elt_T)) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (h:(cc.eT _p_Elt_T) =>
               dk_logic.eqv 
                 (dk_logic.or (dk_logic.ebP (_p_L_mem l e)) 
                    (dk_logic.ebP (basics._equal_ _p_Elt_T e h))) 
                 (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T h l) e))))))) =>
  abst_remove:
  ((cc.eT _p_Elt_T) ->
   (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)) =>
  (__BC_1_LEMMA:
   (l:(cc.eT (basics.list__t _p_Elt_T)) ->
    e:(cc.eT _p_Elt_T) ->
    h:(cc.eT _p_Elt_T) ->
    R:(dk_logic.eP (dk_logic.ebP (_p_L_mem (abst_remove e l) h))) ->
    dk_logic.eP (dk_logic.ebP (_p_L_mem l h))) =>
   zen.nnpp 
     (zen.forall (basics.list__t _p_Elt_T) 
        (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.forall _p_Elt_T 
           (v_Vac:(zen.term _p_Elt_T) =>
            zen.forall _p_Elt_T 
              (v_Vbc:(zen.term _p_Elt_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem 
                          (SequenceAsSet__torep _p_Elt_T 
                             (abst_remove v_Vac v_Vzb)) v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem (SequenceAsSet__torep _p_Elt_T v_Vzb) v_Vbc))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall (basics.list__t _p_Elt_T) 
               (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.forall _p_Elt_T 
                  (v_Vac:(zen.term _p_Elt_T) =>
                   zen.forall _p_Elt_T 
                     (v_Vbc:(zen.term _p_Elt_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T 
                                    (abst_remove v_Vac v_Vzb)) v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T v_Vzb) v_Vbc))))))))) =>
      zen.Rnotall (basics.list__t _p_Elt_T) 
        (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.forall _p_Elt_T 
           (v_Vac:(zen.term _p_Elt_T) =>
            zen.forall _p_Elt_T 
              (v_Vbc:(zen.term _p_Elt_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem 
                          (SequenceAsSet__torep _p_Elt_T 
                             (abst_remove v_Vac v_Vzb)) v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem (SequenceAsSet__torep _p_Elt_T v_Vzb) v_Vbc)))))) 
        (v_Vdc:(zen.term (basics.list__t _p_Elt_T)) =>
         v_Vec:
         (zen.proof 
            (zen.not 
               (zen.forall _p_Elt_T 
                  (v_Vac:(zen.term _p_Elt_T) =>
                   zen.forall _p_Elt_T 
                     (v_Vbc:(zen.term _p_Elt_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T 
                                    (abst_remove v_Vac v_Vdc)) v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T v_Vdc) v_Vbc)))))))) =>
         zen.Rnotall _p_Elt_T 
           (v_Vac:(zen.term _p_Elt_T) =>
            zen.forall _p_Elt_T 
              (v_Vbc:(zen.term _p_Elt_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem 
                          (SequenceAsSet__torep _p_Elt_T 
                             (abst_remove v_Vac v_Vdc)) v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem (SequenceAsSet__torep _p_Elt_T v_Vdc) v_Vbc))))) 
           (v_Vfc:(zen.term _p_Elt_T) =>
            v_Vgc:
            (zen.proof 
               (zen.not 
                  (zen.forall _p_Elt_T 
                     (v_Vbc:(zen.term _p_Elt_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T 
                                    (abst_remove v_Vfc v_Vdc)) v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T v_Vdc) v_Vbc))))))) =>
            zen.Rnotall _p_Elt_T 
              (v_Vbc:(zen.term _p_Elt_T) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem 
                          (SequenceAsSet__torep _p_Elt_T 
                             (abst_remove v_Vfc v_Vdc)) v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem (SequenceAsSet__torep _p_Elt_T v_Vdc) v_Vbc)))) 
              (v_Vhc:(zen.term _p_Elt_T) =>
               v_Vic:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T 
                                    (abst_remove v_Vfc v_Vdc)) v_Vhc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (SequenceAsSet__torep _p_Elt_T v_Vdc) v_Vhc)))))) =>
               zen.Rnotimply 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem 
                          (SequenceAsSet__torep _p_Elt_T 
                             (abst_remove v_Vfc v_Vdc)) v_Vhc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_L_mem (SequenceAsSet__torep _p_Elt_T v_Vdc) v_Vhc))) 
                 (v_Vjc:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_L_mem (abst_remove v_Vfc v_Vdc) v_Vhc)))) =>
                  v_Vkc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (_p_L_mem v_Vdc v_Vhc))))) =>
                  zen.Rall (basics.list__t _p_Elt_T) 
                    (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                     zen.forall _p_Elt_T 
                       (v_Vac:(zen.term _p_Elt_T) =>
                        zen.forall _p_Elt_T 
                          (v_Vbc:(zen.term _p_Elt_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_remove v_Vac v_Vzb) v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vzb v_Vbc)))))) 
                    v_Vdc 
                    (v_Vlc:
                     (zen.proof 
                        (zen.forall _p_Elt_T 
                           (v_Vac:(zen.term _p_Elt_T) =>
                            zen.forall _p_Elt_T 
                              (v_Vbc:(zen.term _p_Elt_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (abst_remove v_Vac v_Vdc) 
                                          v_Vbc))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_L_mem v_Vdc v_Vbc))))))) =>
                     zen.Rall _p_Elt_T 
                       (v_Vac:(zen.term _p_Elt_T) =>
                        zen.forall _p_Elt_T 
                          (v_Vbc:(zen.term _p_Elt_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_remove v_Vac v_Vdc) v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vdc v_Vbc))))) 
                       v_Vfc 
                       (v_Vmc:
                        (zen.proof 
                           (zen.forall _p_Elt_T 
                              (v_Vbc:(zen.term _p_Elt_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (abst_remove v_Vfc v_Vdc) 
                                          v_Vbc))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_L_mem v_Vdc v_Vbc)))))) =>
                        zen.Rall _p_Elt_T 
                          (v_Vbc:(zen.term _p_Elt_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_remove v_Vfc v_Vdc) v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vdc v_Vbc)))) 
                          v_Vhc 
                          (v_Vnc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (abst_remove v_Vfc v_Vdc) 
                                          v_Vhc))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_L_mem v_Vdc v_Vhc))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_remove v_Vfc v_Vdc) v_Vhc))) 
                             (zen.triangle 
                                (focal.is_true (_p_L_mem v_Vdc v_Vhc))) 
                             (v_Voc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem 
                                             (abst_remove v_Vfc v_Vdc) v_Vhc))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_L_mem (abst_remove v_Vfc v_Vdc) 
                                         v_Vhc))) v_Vjc v_Voc) 
                             (v_Vpc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (_p_L_mem v_Vdc v_Vhc)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (_p_L_mem v_Vdc v_Vhc))) 
                                v_Vpc v_Vkc) v_Vnc) v_Vmc) v_Vlc) 
                    __BC_1_LEMMA) v_Vic) v_Vgc) v_Vec) v_Vcc)) 
    (l:(cc.eT (basics.list__t _p_Elt_T)) =>
     e:(cc.eT _p_Elt_T) =>
     h:(cc.eT _p_Elt_T) =>
     R:(dk_logic.eP (dk_logic.ebP (_p_L_mem (abst_remove e l) h))) =>
     (__BC_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.imp 
            (dk_logic.ebP 
               (_p_L_mem (abst_remove e (builtins.nil _p_Elt_T)) h)) 
            (dk_logic.ebP (_p_L_mem (builtins.nil _p_Elt_T) h)))) =>
      (__BC_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.forall (basics.list__t _p_Elt_T) 
             (ll:(cc.eT (basics.list__t _p_Elt_T)) =>
              dk_logic.forall _p_Elt_T 
                (hh:(cc.eT _p_Elt_T) =>
                 dk_logic.imp 
                   (dk_logic.imp 
                      (dk_logic.ebP (_p_L_mem (abst_remove e ll) h)) 
                      (dk_logic.ebP (_p_L_mem ll h))) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (_p_L_mem 
                            (abst_remove e (builtins.cons _p_Elt_T hh ll)) h)) 
                      (dk_logic.ebP 
                         (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))))))) =>
       (__BC_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.forall (basics.list__t _p_Elt_T) 
              (l0:(cc.eT (basics.list__t _p_Elt_T)) =>
               dk_logic.imp (dk_logic.ebP (_p_L_mem (abst_remove e l0) h)) 
                 (dk_logic.ebP (_p_L_mem l0 h))))) =>
        zen.nnpp (zen.triangle (focal.is_true (_p_L_mem l h))) 
          (v_Vzb:
           (zen.proof (zen.not (zen.triangle (focal.is_true (_p_L_mem l h))))) =>
           zen.Rall (basics.list__t _p_Elt_T) 
             (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true (_p_L_mem (abst_remove e v_Vac) h))) 
                (zen.triangle (focal.is_true (_p_L_mem v_Vac h)))) l 
             (v_Vbc:
              (zen.proof 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true (_p_L_mem (abst_remove e l) h))) 
                    (zen.triangle (focal.is_true (_p_L_mem l h))))) =>
              zen.Rimply 
                (zen.triangle (focal.is_true (_p_L_mem (abst_remove e l) h))) 
                (zen.triangle (focal.is_true (_p_L_mem l h))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (_p_L_mem (abst_remove e l) h))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true (_p_L_mem (abst_remove e l) h))) R v_Vcc) 
                (v_Vdc:
                 (zen.proof (zen.triangle (focal.is_true (_p_L_mem l h)))) =>
                 zen.Raxiom (zen.triangle (focal.is_true (_p_L_mem l h))) 
                   v_Vdc v_Vzb) v_Vbc) __BC_1_3_LEMMA)) 
         (dk_builtins.magic_prove 
            (dk_logic.forall (basics.list__t _p_Elt_T) 
               (l0:(cc.eT (basics.list__t _p_Elt_T)) =>
                dk_logic.imp (dk_logic.ebP (_p_L_mem (abst_remove e l0) h)) 
                  (dk_logic.ebP (_p_L_mem l0 h)))))) 
        ((__BC_1_2_1_LEMMA:
          (ll:(cc.eT (basics.list__t _p_Elt_T)) ->
           hh:(cc.eT _p_Elt_T) ->
           I:(dk_logic.eP 
                (dk_logic.imp (dk_logic.ebP (_p_L_mem (abst_remove e ll) h)) 
                   (dk_logic.ebP (_p_L_mem ll h)))) ->
           RR:(dk_logic.eP 
                 (dk_logic.ebP 
                    (_p_L_mem (abst_remove e (builtins.cons _p_Elt_T hh ll)) 
                       h))) ->
           dk_logic.eP 
             (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) =>
          zen.nnpp 
            (zen.forall (basics.list__t _p_Elt_T) 
               (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.forall _p_Elt_T 
                  (v_Vac:(zen.term _p_Elt_T) =>
                   zen.imp 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (_p_L_mem (abst_remove e v_Vzb) h))) 
                        (zen.triangle (focal.is_true (_p_L_mem v_Vzb h)))) 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem 
                                 (abst_remove e 
                                    (builtins.cons _p_Elt_T v_Vac v_Vzb)) h))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_L_mem (builtins.cons _p_Elt_T v_Vac v_Vzb) 
                                 h))))))) 
            (v_Vbc:
             (zen.proof 
                (zen.not 
                   (zen.forall (basics.list__t _p_Elt_T) 
                      (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                       zen.forall _p_Elt_T 
                         (v_Vac:(zen.term _p_Elt_T) =>
                          zen.imp 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (abst_remove e v_Vzb) h))) 
                               (zen.triangle 
                                  (focal.is_true (_p_L_mem v_Vzb h)))) 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem 
                                        (abst_remove e 
                                           (builtins.cons _p_Elt_T v_Vac 
                                              v_Vzb)) h))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem 
                                        (builtins.cons _p_Elt_T v_Vac v_Vzb) 
                                        h))))))))) =>
             zen.Raxiom 
               (zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.forall _p_Elt_T 
                     (v_Vac:(zen.term _p_Elt_T) =>
                      zen.imp 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (abst_remove e v_Vzb) h))) 
                           (zen.triangle (focal.is_true (_p_L_mem v_Vzb h)))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem 
                                    (abst_remove e 
                                       (builtins.cons _p_Elt_T v_Vac v_Vzb)) 
                                    h))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem 
                                    (builtins.cons _p_Elt_T v_Vac v_Vzb) h))))))) 
               __BC_1_2_1_LEMMA v_Vbc)) 
           (ll:(cc.eT (basics.list__t _p_Elt_T)) =>
            hh:(cc.eT _p_Elt_T) =>
            I:
            (dk_logic.eP 
               (dk_logic.imp (dk_logic.ebP (_p_L_mem (abst_remove e ll) h)) 
                  (dk_logic.ebP (_p_L_mem ll h)))) =>
            RR:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (_p_L_mem (abst_remove e (builtins.cons _p_Elt_T hh ll)) h))) =>
            (__BC_1_2_1_1_LEMMA:
             (E:(dk_logic.eP (dk_logic.ebP (basics._equal_ _p_Elt_T e hh))) ->
              dk_logic.eP 
                (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) =>
             (__BC_1_2_1_2_LEMMA:
              (E:(dk_logic.eP 
                    (dk_logic.not 
                       (dk_logic.ebP (basics._equal_ _p_Elt_T e hh)))) ->
               dk_logic.eP 
                 (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) =>
              zen.nnpp 
                (zen.triangle 
                   (focal.is_true (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))))) =>
                 zen.Rimply 
                   (zen.triangle 
                      (focal.is_true (basics._equal_ _p_Elt_T e hh))) 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                   (v_Vac:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics.syntactic_equal _p_Elt_T e hh))))) =>
                    zen.Rimply 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (basics._equal_ _p_Elt_T e hh)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                      (v_Vbc:
                       (zen.proof 
                          (zen.not 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._equal_ _p_Elt_T e hh)))))) =>
                       zen.Raxiom 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (basics._equal_ _p_Elt_T e hh)))) 
                         v_Vac v_Vbc) 
                      (v_Vcc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (builtins.cons _p_Elt_T hh ll) h)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                         v_Vcc v_Vzb) __BC_1_2_1_2_LEMMA) 
                   (v_Vcc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_L_mem (builtins.cons _p_Elt_T hh ll) h)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                      v_Vcc v_Vzb) __BC_1_2_1_1_LEMMA)) 
               (E:
                (dk_logic.eP 
                   (dk_logic.not 
                      (dk_logic.ebP (basics._equal_ _p_Elt_T e hh)))) =>
                (__BC_1_2_1_2_1_LEMMA:
                 (H:(dk_logic.eP 
                       (dk_logic.ebP (basics._equal_ _p_Elt_T h hh))) ->
                  dk_logic.eP 
                    (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) =>
                 (__BC_1_2_1_2_2_LEMMA:
                  (H:(dk_logic.eP 
                        (dk_logic.not 
                           (dk_logic.ebP (basics._equal_ _p_Elt_T h hh)))) ->
                   dk_logic.eP (dk_logic.ebP (_p_L_mem ll h))) =>
                  zen.nnpp 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                    (v_Vzb:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))))) =>
                     zen.Rimply 
                       (zen.triangle 
                          (focal.is_true (basics._equal_ _p_Elt_T h hh))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                       (v_Vac:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (basics.syntactic_equal _p_Elt_T h hh))))) =>
                        zen.Rimply 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (basics._equal_ _p_Elt_T h hh)))) 
                          (zen.triangle (focal.is_true (_p_L_mem ll h))) 
                          (v_Vbc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (basics._equal_ _p_Elt_T h hh)))))) =>
                           zen.Raxiom 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._equal_ _p_Elt_T h hh)))) 
                             v_Vac v_Vbc) 
                          (v_Vcc:
                           (zen.proof 
                              (zen.triangle (focal.is_true (_p_L_mem ll h)))) =>
                           zen.Rall (basics.list__t _p_Elt_T) 
                             (v_Vdc:(zen.term (basics.list__t _p_Elt_T)) =>
                              zen.forall _p_Elt_T 
                                (v_Vec:(zen.term _p_Elt_T) =>
                                 zen.forall _p_Elt_T 
                                   (v_Vfc:(zen.term _p_Elt_T) =>
                                    zen.eqv 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem v_Vdc v_Vec))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._equal_ _p_Elt_T 
                                                  v_Vec v_Vfc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T v_Vfc 
                                                  v_Vdc) v_Vec)))))) ll 
                             (v_Vgc:
                              (zen.proof 
                                 (zen.forall _p_Elt_T 
                                    (v_Vec:(zen.term _p_Elt_T) =>
                                     zen.forall _p_Elt_T 
                                       (v_Vfc:(zen.term _p_Elt_T) =>
                                        zen.eqv 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem ll v_Vec))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      v_Vec v_Vfc)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vfc ll) v_Vec))))))) =>
                              zen.Rall _p_Elt_T 
                                (v_Vec:(zen.term _p_Elt_T) =>
                                 zen.forall _p_Elt_T 
                                   (v_Vfc:(zen.term _p_Elt_T) =>
                                    zen.eqv 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem ll v_Vec))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._equal_ _p_Elt_T 
                                                  v_Vec v_Vfc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T v_Vfc 
                                                  ll) v_Vec))))) h 
                                (v_Vhc:
                                 (zen.proof 
                                    (zen.forall _p_Elt_T 
                                       (v_Vfc:(zen.term _p_Elt_T) =>
                                        zen.eqv 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem ll h))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      h v_Vfc)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vfc ll) h)))))) =>
                                 zen.Rall _p_Elt_T 
                                   (v_Vfc:(zen.term _p_Elt_T) =>
                                    zen.eqv 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem ll h))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._equal_ _p_Elt_T h 
                                                  v_Vfc)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T v_Vfc 
                                                  ll) h)))) hh 
                                   (v_Vic:
                                    (zen.proof 
                                       (zen.eqv 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem ll h))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      h hh)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      hh ll) h))))) =>
                                    zen.Requiv 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem ll h))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._equal_ _p_Elt_T h hh)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T hh ll) 
                                               h))) 
                                      (v_Vjc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem ll h))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._equal_ 
                                                         _p_Elt_T h hh)))))) =>
                                       v_Vzb0:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T hh ll) h))))) =>
                                       zen.Rnotor 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem ll h))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._equal_ _p_Elt_T h hh))) 
                                         (v_Vkc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem ll h))))) =>
                                          v_Vac0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics.syntactic_equal 
                                                         _p_Elt_T h hh))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true (_p_L_mem ll h))) 
                                            v_Vcc v_Vkc) v_Vjc) 
                                      (v_Vlc:
                                       (zen.proof 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem ll h))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      h hh))))) =>
                                       v_Vmc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      hh ll) h)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem 
                                                  (builtins.cons _p_Elt_T hh 
                                                     ll) h))) v_Vmc v_Vzb) 
                                      v_Vic) v_Vhc) v_Vgc) _p_L_mem_spec) 
                          __BC_1_2_1_2_2_LEMMA) 
                       (v_Vmc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (builtins.cons _p_Elt_T hh ll) h)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                          v_Vmc v_Vzb) __BC_1_2_1_2_1_LEMMA)) 
                   (H:
                    (dk_logic.eP 
                       (dk_logic.not 
                          (dk_logic.ebP (basics._equal_ _p_Elt_T h hh)))) =>
                    (__BC_1_2_1_2_2_1_LEMMA:
                     (dk_logic.eP 
                        (dk_logic.ebP (_p_L_mem (abst_remove e ll) h))) =>
                     zen.nnpp (zen.triangle (focal.is_true (_p_L_mem ll h))) 
                       (v_Vzb:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle (focal.is_true (_p_L_mem ll h))))) =>
                        zen.Rimply 
                          (zen.triangle 
                             (focal.is_true (_p_L_mem (abst_remove e ll) h))) 
                          (zen.triangle (focal.is_true (_p_L_mem ll h))) 
                          (v_Vac:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem (abst_remove e ll) h))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem (abst_remove e ll) h))) 
                             __BC_1_2_1_2_2_1_LEMMA v_Vac) 
                          (v_Vbc:
                           (zen.proof 
                              (zen.triangle (focal.is_true (_p_L_mem ll h)))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (_p_L_mem ll h))) 
                             v_Vbc v_Vzb) I)) 
                      ((__BC_1_2_1_2_2_1_1_LEMMA:
                        (dk_logic.eP 
                           (dk_logic.ebP 
                              (basics._equal_ (basics.list__t _p_Elt_T) 
                                 (abst_remove e 
                                    (builtins.cons _p_Elt_T hh ll)) 
                                 (builtins.cons _p_Elt_T hh 
                                    (abst_remove e ll))))) =>
                        (__BC_1_2_1_2_2_1_2_LEMMA:
                         (dk_logic.eP 
                            (dk_logic.ebP 
                               (_p_L_mem 
                                  (builtins.cons _p_Elt_T hh 
                                     (abst_remove e ll)) h))) =>
                         (__BC_1_2_1_2_2_1_3_LEMMA:
                          (dk_logic.eP 
                             (dk_logic.ebP (_p_L_mem (abst_remove e ll) h))) =>
                          zen.nnpp 
                            (zen.triangle 
                               (focal.is_true (_p_L_mem (abst_remove e ll) h))) 
                            (v_Vzb:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem (abst_remove e ll) h))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem (abst_remove e ll) h))) 
                               __BC_1_2_1_2_2_1_3_LEMMA v_Vzb)) 
                           (zen.nnpp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_L_mem (abst_remove e ll) h))) 
                              (v_Vzb:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_L_mem (abst_remove e ll) h))))) =>
                               zen.Rall (basics.list__t _p_Elt_T) 
                                 (v_Vac:
                                  (zen.term (basics.list__t _p_Elt_T)) =>
                                  zen.forall _p_Elt_T 
                                    (v_Vbc:(zen.term _p_Elt_T) =>
                                     zen.forall _p_Elt_T 
                                       (v_Vcc:(zen.term _p_Elt_T) =>
                                        zen.eqv 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem v_Vac v_Vbc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      v_Vbc v_Vcc)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vcc v_Vac) v_Vbc)))))) 
                                 (abst_remove e ll) 
                                 (v_Vdc:
                                  (zen.proof 
                                     (zen.forall _p_Elt_T 
                                        (v_Vbc:(zen.term _p_Elt_T) =>
                                         zen.forall _p_Elt_T 
                                           (v_Vcc:(zen.term _p_Elt_T) =>
                                            zen.eqv 
                                              (zen.or 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_L_mem 
                                                          (abst_remove e ll) 
                                                          v_Vbc))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._equal_ 
                                                          _p_Elt_T v_Vbc 
                                                          v_Vcc)))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_L_mem 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          (abst_remove e ll)) 
                                                       v_Vbc))))))) =>
                                  zen.Rall _p_Elt_T 
                                    (v_Vbc:(zen.term _p_Elt_T) =>
                                     zen.forall _p_Elt_T 
                                       (v_Vcc:(zen.term _p_Elt_T) =>
                                        zen.eqv 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (abst_remove e ll) 
                                                      v_Vbc))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      v_Vbc v_Vcc)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vcc 
                                                      (abst_remove e ll)) 
                                                   v_Vbc))))) h 
                                    (v_Vec:
                                     (zen.proof 
                                        (zen.forall _p_Elt_T 
                                           (v_Vcc:(zen.term _p_Elt_T) =>
                                            zen.eqv 
                                              (zen.or 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_L_mem 
                                                          (abst_remove e ll) 
                                                          h))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._equal_ 
                                                          _p_Elt_T h v_Vcc)))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_L_mem 
                                                       (builtins.cons 
                                                          _p_Elt_T v_Vcc 
                                                          (abst_remove e ll)) 
                                                       h)))))) =>
                                     zen.Rall _p_Elt_T 
                                       (v_Vcc:(zen.term _p_Elt_T) =>
                                        zen.eqv 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (abst_remove e ll) h))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      h v_Vcc)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      v_Vcc 
                                                      (abst_remove e ll)) h)))) 
                                       hh 
                                       (v_Vfc:
                                        (zen.proof 
                                           (zen.eqv 
                                              (zen.or 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_L_mem 
                                                          (abst_remove e ll) 
                                                          h))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._equal_ 
                                                          _p_Elt_T h hh)))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_L_mem 
                                                       (builtins.cons 
                                                          _p_Elt_T hh 
                                                          (abst_remove e ll)) 
                                                       h))))) =>
                                        zen.Requiv 
                                          (zen.or 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (abst_remove e ll) h))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      h hh)))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      hh (abst_remove e ll)) 
                                                   h))) 
                                          (v_Vgc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.or 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_L_mem 
                                                             (abst_remove e 
                                                                ll) h))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (basics._equal_ 
                                                             _p_Elt_T h hh)))))) =>
                                           v_Vhc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_L_mem 
                                                          (builtins.cons 
                                                             _p_Elt_T hh 
                                                             (abst_remove e 
                                                                ll)) h))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T hh 
                                                         (abst_remove e ll)) 
                                                      h))) 
                                             __BC_1_2_1_2_2_1_2_LEMMA v_Vhc) 
                                          (v_Vic:
                                           (zen.proof 
                                              (zen.or 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_L_mem 
                                                          (abst_remove e ll) 
                                                          h))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics._equal_ 
                                                          _p_Elt_T h hh))))) =>
                                           __BC_1_2_1_2_2_1_2_LEMMA0:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_L_mem 
                                                       (builtins.cons 
                                                          _p_Elt_T hh 
                                                          (abst_remove e ll)) 
                                                       h)))) =>
                                           zen.Ror 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (abst_remove e ll) h))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (basics._equal_ _p_Elt_T 
                                                      h hh))) 
                                             (v_Vjc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_L_mem 
                                                          (abst_remove e ll) 
                                                          h)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem 
                                                         (abst_remove e ll) h))) 
                                                v_Vjc v_Vzb) 
                                             (v_Vkc:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (basics.syntactic_equal 
                                                          _p_Elt_T h hh)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._equal_ 
                                                         _p_Elt_T h hh))) 
                                                v_Vkc H) v_Vic) v_Vfc) v_Vec) 
                                    v_Vdc) _p_L_mem_spec))) 
                          (zen.nnpp 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_L_mem 
                                      (builtins.cons _p_Elt_T hh 
                                         (abst_remove e ll)) h))) 
                             (v_Vcc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem 
                                             (builtins.cons _p_Elt_T hh 
                                                (abst_remove e ll)) h))))) =>
                              focal.zenon_syntactic_equal 
                                (basics.list__t _p_Elt_T) 
                                (abst_remove e (builtins.cons _p_Elt_T hh ll)) 
                                (builtins.cons _p_Elt_T hh (abst_remove e ll)) 
                                (v_Vdc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal (basics.list__t _p_Elt_T) 
                                          (abst_remove e 
                                             (builtins.cons _p_Elt_T hh ll)) 
                                          (builtins.cons _p_Elt_T hh 
                                             (abst_remove e ll))))) =>
                                 zen.Rsubst basics.bool__t 
                                   (v_Vec:(zen.term basics.bool__t) =>
                                    zen.triangle (focal.is_true v_Vec)) 
                                   (_p_L_mem 
                                      (abst_remove e 
                                         (builtins.cons _p_Elt_T hh ll)) h) 
                                   (_p_L_mem 
                                      (builtins.cons _p_Elt_T hh 
                                         (abst_remove e ll)) h) 
                                   (v_Vfc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (_p_L_mem 
                                                   (abst_remove e 
                                                      (builtins.cons 
                                                         _p_Elt_T hh ll)) h) 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      hh (abst_remove e ll)) 
                                                   h))))) =>
                                    zen.Rsubst (basics.list__t _p_Elt_T) 
                                      (v_Vgc:
                                       (zen.term (basics.list__t _p_Elt_T)) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_L_mem v_Vgc h) 
                                               (_p_L_mem 
                                                  (builtins.cons _p_Elt_T hh 
                                                     (abst_remove e ll)) h)))) 
                                      (abst_remove e 
                                         (builtins.cons _p_Elt_T hh ll)) 
                                      (builtins.cons _p_Elt_T hh 
                                         (abst_remove e ll)) 
                                      (v_Vhc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal 
                                                   (basics.list__t _p_Elt_T) 
                                                   (abst_remove e 
                                                      (builtins.cons 
                                                         _p_Elt_T hh ll)) 
                                                   (builtins.cons _p_Elt_T 
                                                      hh (abst_remove e ll)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal 
                                               (basics.list__t _p_Elt_T) 
                                               (abst_remove e 
                                                  (builtins.cons _p_Elt_T hh 
                                                     ll)) 
                                               (builtins.cons _p_Elt_T hh 
                                                  (abst_remove e ll)))) 
                                         v_Vdc v_Vhc) 
                                      (v_Vic:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T hh 
                                                         (abst_remove e ll)) 
                                                      h) 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T hh 
                                                         (abst_remove e ll)) 
                                                      h))))) =>
                                       zen.Rsubst _p_Elt_T 
                                         (v_Vjc:(zen.term _p_Elt_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_L_mem 
                                                     (builtins.cons _p_Elt_T 
                                                        hh (abst_remove e ll)) 
                                                     v_Vjc) 
                                                  (_p_L_mem 
                                                     (builtins.cons _p_Elt_T 
                                                        hh (abst_remove e ll)) 
                                                     h)))) h h 
                                         (v_Vkc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_Elt_T h h)))) =>
                                          zen.Rnoteq _p_Elt_T h v_Vkc) 
                                         (v_Vic0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T hh 
                                                            (abst_remove e ll)) 
                                                         h) 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T hh 
                                                            (abst_remove e ll)) 
                                                         h))))) =>
                                          zen.Rnoteq basics.bool__t 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T hh 
                                                  (abst_remove e ll)) h) 
                                            v_Vic0) v_Vic) v_Vfc) 
                                   (v_Vlc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_L_mem 
                                                (builtins.cons _p_Elt_T hh 
                                                   (abst_remove e ll)) h)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T hh 
                                                  (abst_remove e ll)) h))) 
                                      v_Vlc v_Vcc) RR) 
                                __BC_1_2_1_2_2_1_1_LEMMA))) 
                         (dk_builtins.magic_prove 
                            (dk_logic.ebP 
                               (basics._equal_ (basics.list__t _p_Elt_T) 
                                  (abst_remove e 
                                     (builtins.cons _p_Elt_T hh ll)) 
                                  (builtins.cons _p_Elt_T hh 
                                     (abst_remove e ll)))))))) 
                  (H:
                   (dk_logic.eP (dk_logic.ebP (basics._equal_ _p_Elt_T h hh))) =>
                   zen.nnpp 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                     (v_Vec:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))))) =>
                      focal.zenon_syntactic_equal _p_Elt_T h hh 
                        (v_Vfc:
                         (zen.proof (zen.triangle (zen.equal _p_Elt_T h hh))) =>
                         zen.Rall (basics.list__t _p_Elt_T) 
                           (v_Vgc:(zen.term (basics.list__t _p_Elt_T)) =>
                            zen.forall _p_Elt_T 
                              (v_Vhc:(zen.term _p_Elt_T) =>
                               zen.forall _p_Elt_T 
                                 (v_Vic:(zen.term _p_Elt_T) =>
                                  zen.eqv 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_L_mem v_Vgc v_Vhc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ _p_Elt_T v_Vhc 
                                                v_Vic)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem 
                                             (builtins.cons _p_Elt_T v_Vic 
                                                v_Vgc) v_Vhc)))))) ll 
                           (v_Vjc:
                            (zen.proof 
                               (zen.forall _p_Elt_T 
                                  (v_Vhc:(zen.term _p_Elt_T) =>
                                   zen.forall _p_Elt_T 
                                     (v_Vic:(zen.term _p_Elt_T) =>
                                      zen.eqv 
                                        (zen.or 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_L_mem ll v_Vhc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._equal_ _p_Elt_T 
                                                    v_Vhc v_Vic)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_L_mem 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vic ll) v_Vhc))))))) =>
                            zen.Rall _p_Elt_T 
                              (v_Vhc:(zen.term _p_Elt_T) =>
                               zen.forall _p_Elt_T 
                                 (v_Vic:(zen.term _p_Elt_T) =>
                                  zen.eqv 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (_p_L_mem ll v_Vhc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ _p_Elt_T v_Vhc 
                                                v_Vic)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem 
                                             (builtins.cons _p_Elt_T v_Vic ll) 
                                             v_Vhc))))) h 
                              (v_Vkc:
                               (zen.proof 
                                  (zen.forall _p_Elt_T 
                                     (v_Vic:(zen.term _p_Elt_T) =>
                                      zen.eqv 
                                        (zen.or 
                                           (zen.triangle 
                                              (focal.is_true (_p_L_mem ll h))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._equal_ _p_Elt_T h 
                                                    v_Vic)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_L_mem 
                                                 (builtins.cons _p_Elt_T 
                                                    v_Vic ll) h)))))) =>
                               zen.Rall _p_Elt_T 
                                 (v_Vic:(zen.term _p_Elt_T) =>
                                  zen.eqv 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (_p_L_mem ll h))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ _p_Elt_T h v_Vic)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem 
                                             (builtins.cons _p_Elt_T v_Vic ll) 
                                             h)))) h 
                                 (v_Vlc:
                                  (zen.proof 
                                     (zen.eqv 
                                        (zen.or 
                                           (zen.triangle 
                                              (focal.is_true (_p_L_mem ll h))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._equal_ _p_Elt_T h h)))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_L_mem 
                                                 (builtins.cons _p_Elt_T h ll) 
                                                 h))))) =>
                                  zen.Requiv 
                                    (zen.or 
                                       (zen.triangle 
                                          (focal.is_true (_p_L_mem ll h))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ _p_Elt_T h h)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_L_mem 
                                             (builtins.cons _p_Elt_T h ll) h))) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.or 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_L_mem ll h))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics._equal_ _p_Elt_T 
                                                       h h)))))) =>
                                     v_Vnc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_L_mem 
                                                    (builtins.cons _p_Elt_T 
                                                       h ll) h))))) =>
                                     zen.Rnotor 
                                       (zen.triangle 
                                          (focal.is_true (_p_L_mem ll h))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (basics._equal_ _p_Elt_T h h))) 
                                       (v_Voc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_L_mem ll h))))) =>
                                        v_Vpc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (basics.syntactic_equal 
                                                       _p_Elt_T h h))))) =>
                                        focal.zenon_not_syntactic_equal 
                                          _p_Elt_T h h 
                                          (v_Vqc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_Elt_T h h)))) =>
                                           zen.Rnoteq _p_Elt_T h v_Vqc) v_Vpc) 
                                       v_Vmc) 
                                    (v_Vrc:
                                     (zen.proof 
                                        (zen.or 
                                           (zen.triangle 
                                              (focal.is_true (_p_L_mem ll h))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (basics._equal_ _p_Elt_T h h))))) =>
                                     v_Vsc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_L_mem 
                                                 (builtins.cons _p_Elt_T h ll) 
                                                 h)))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vtc:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vtc)) 
                                       (_p_L_mem 
                                          (builtins.cons _p_Elt_T h ll) h) 
                                       (_p_L_mem 
                                          (builtins.cons _p_Elt_T hh ll) h) 
                                       (v_Vuc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_L_mem 
                                                       (builtins.cons 
                                                          _p_Elt_T h ll) h) 
                                                    (_p_L_mem 
                                                       (builtins.cons 
                                                          _p_Elt_T hh ll) h))))) =>
                                        zen.Rsubst (basics.list__t _p_Elt_T) 
                                          (v_Vvc:
                                           (zen.term 
                                              (basics.list__t _p_Elt_T)) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_L_mem v_Vvc h) 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T hh ll) h)))) 
                                          (builtins.cons _p_Elt_T h ll) 
                                          (builtins.cons _p_Elt_T hh ll) 
                                          (v_Vwc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       (basics.list__t 
                                                          _p_Elt_T) 
                                                       (builtins.cons 
                                                          _p_Elt_T h ll) 
                                                       (builtins.cons 
                                                          _p_Elt_T hh ll))))) =>
                                           zen.Rsubst _p_Elt_T 
                                             (v_Vxc:(zen.term _p_Elt_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal 
                                                      (basics.list__t 
                                                         _p_Elt_T) 
                                                      (builtins.cons 
                                                         _p_Elt_T v_Vxc ll) 
                                                      (builtins.cons 
                                                         _p_Elt_T hh ll)))) 
                                             h hh 
                                             (v_Vyc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_Elt_T h 
                                                          hh)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal _p_Elt_T h hh)) 
                                                v_Vfc v_Vyc) 
                                             (v_Vzc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          (basics.list__t 
                                                             _p_Elt_T) 
                                                          (builtins.cons 
                                                             _p_Elt_T hh ll) 
                                                          (builtins.cons 
                                                             _p_Elt_T hh ll))))) =>
                                              zen.Rsubst 
                                                (basics.list__t _p_Elt_T) 
                                                (v_Vad:
                                                 (zen.term 
                                                    (basics.list__t _p_Elt_T)) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         (basics.list__t 
                                                            _p_Elt_T) 
                                                         (builtins.cons 
                                                            _p_Elt_T hh v_Vad) 
                                                         (builtins.cons 
                                                            _p_Elt_T hh ll)))) 
                                                ll ll 
                                                (v_Vbd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             (basics.list__t 
                                                                _p_Elt_T) ll 
                                                             ll)))) =>
                                                 zen.Rnoteq 
                                                   (basics.list__t _p_Elt_T) 
                                                   ll v_Vbd) 
                                                (v_Vzc0:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             (basics.list__t 
                                                                _p_Elt_T) 
                                                             (builtins.cons 
                                                                _p_Elt_T hh 
                                                                ll) 
                                                             (builtins.cons 
                                                                _p_Elt_T hh 
                                                                ll))))) =>
                                                 zen.Rnoteq 
                                                   (basics.list__t _p_Elt_T) 
                                                   (builtins.cons _p_Elt_T 
                                                      hh ll) v_Vzc0) v_Vzc) 
                                             v_Vwc) 
                                          (v_Vcd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_L_mem 
                                                          (builtins.cons 
                                                             _p_Elt_T hh ll) 
                                                          h) 
                                                       (_p_L_mem 
                                                          (builtins.cons 
                                                             _p_Elt_T hh ll) 
                                                          h))))) =>
                                           zen.Rsubst _p_Elt_T 
                                             (v_Vdd:(zen.term _p_Elt_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T hh ll) 
                                                         v_Vdd) 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T hh ll) h)))) 
                                             h h 
                                             (v_Vqc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_Elt_T h 
                                                          h)))) =>
                                              zen.Rnoteq _p_Elt_T h v_Vqc) 
                                             (v_Vcd0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_L_mem 
                                                             (builtins.cons 
                                                                _p_Elt_T hh 
                                                                ll) h) 
                                                          (_p_L_mem 
                                                             (builtins.cons 
                                                                _p_Elt_T hh 
                                                                ll) h))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      hh ll) h) v_Vcd0) v_Vcd) 
                                          v_Vuc) 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_L_mem 
                                                    (builtins.cons _p_Elt_T 
                                                       hh ll) h)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_L_mem 
                                                   (builtins.cons _p_Elt_T 
                                                      hh ll) h))) v_Ved v_Vec) 
                                       v_Vsc) v_Vlc) v_Vkc) v_Vjc) 
                           _p_L_mem_spec) H)))) 
              (E:
               (dk_logic.eP (dk_logic.ebP (basics._equal_ _p_Elt_T e hh))) =>
               (__BC_1_2_1_1_1_LEMMA:
                (dk_logic.eP 
                   (dk_logic.ebP 
                      (basics._equal_ (basics.list__t _p_Elt_T) 
                         (abst_remove e (builtins.cons _p_Elt_T hh ll)) ll))) =>
                (__BC_1_2_1_1_2_LEMMA:
                 (dk_logic.eP (dk_logic.ebP (_p_L_mem ll h))) =>
                 zen.nnpp 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))) 
                   (v_Vzb:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (builtins.cons _p_Elt_T hh ll) h))))) =>
                    zen.Rall (basics.list__t _p_Elt_T) 
                      (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                       zen.forall _p_Elt_T 
                         (v_Vbc:(zen.term _p_Elt_T) =>
                          zen.forall _p_Elt_T 
                            (v_Vcc:(zen.term _p_Elt_T) =>
                             zen.eqv 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (_p_L_mem v_Vac v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ _p_Elt_T v_Vbc v_Vcc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem 
                                        (builtins.cons _p_Elt_T v_Vcc v_Vac) 
                                        v_Vbc)))))) ll 
                      (v_Vdc:
                       (zen.proof 
                          (zen.forall _p_Elt_T 
                             (v_Vbc:(zen.term _p_Elt_T) =>
                              zen.forall _p_Elt_T 
                                (v_Vcc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true (_p_L_mem ll v_Vbc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ _p_Elt_T v_Vbc 
                                               v_Vcc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem 
                                            (builtins.cons _p_Elt_T v_Vcc ll) 
                                            v_Vbc))))))) =>
                       zen.Rall _p_Elt_T 
                         (v_Vbc:(zen.term _p_Elt_T) =>
                          zen.forall _p_Elt_T 
                            (v_Vcc:(zen.term _p_Elt_T) =>
                             zen.eqv 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (_p_L_mem ll v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ _p_Elt_T v_Vbc v_Vcc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem 
                                        (builtins.cons _p_Elt_T v_Vcc ll) 
                                        v_Vbc))))) h 
                         (v_Vec:
                          (zen.proof 
                             (zen.forall _p_Elt_T 
                                (v_Vcc:(zen.term _p_Elt_T) =>
                                 zen.eqv 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true (_p_L_mem ll h))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ _p_Elt_T h v_Vcc)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem 
                                            (builtins.cons _p_Elt_T v_Vcc ll) 
                                            h)))))) =>
                          zen.Rall _p_Elt_T 
                            (v_Vcc:(zen.term _p_Elt_T) =>
                             zen.eqv 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (_p_L_mem ll h))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ _p_Elt_T h v_Vcc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem 
                                        (builtins.cons _p_Elt_T v_Vcc ll) h)))) 
                            hh 
                            (v_Vfc:
                             (zen.proof 
                                (zen.eqv 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true (_p_L_mem ll h))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ _p_Elt_T h hh)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem 
                                            (builtins.cons _p_Elt_T hh ll) h))))) =>
                             zen.Requiv 
                               (zen.or 
                                  (zen.triangle 
                                     (focal.is_true (_p_L_mem ll h))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ _p_Elt_T h hh)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_L_mem 
                                        (builtins.cons _p_Elt_T hh ll) h))) 
                               (v_Vgc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.or 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem ll h))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics._equal_ _p_Elt_T h hh)))))) =>
                                v_Vzb0:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T hh ll) 
                                               h))))) =>
                                zen.Rnotor 
                                  (zen.triangle 
                                     (focal.is_true (_p_L_mem ll h))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (basics._equal_ _p_Elt_T h hh))) 
                                  (v_Vhc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem ll h))))) =>
                                   v_Vic:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (basics.syntactic_equal 
                                                  _p_Elt_T h hh))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (_p_L_mem ll h))) 
                                     __BC_1_2_1_1_2_LEMMA v_Vhc) v_Vgc) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.or 
                                      (zen.triangle 
                                         (focal.is_true (_p_L_mem ll h))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (basics._equal_ _p_Elt_T h hh))))) =>
                                v_Vkc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem 
                                            (builtins.cons _p_Elt_T hh ll) h)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_L_mem 
                                           (builtins.cons _p_Elt_T hh ll) h))) 
                                  v_Vkc v_Vzb) v_Vfc) v_Vec) v_Vdc) 
                      _p_L_mem_spec)) 
                  (zen.nnpp (zen.triangle (focal.is_true (_p_L_mem ll h))) 
                     (v_Vcc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (_p_L_mem ll h))))) =>
                      focal.zenon_syntactic_equal (basics.list__t _p_Elt_T) 
                        (abst_remove e (builtins.cons _p_Elt_T hh ll)) ll 
                        (v_Vdc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal (basics.list__t _p_Elt_T) 
                                  (abst_remove e 
                                     (builtins.cons _p_Elt_T hh ll)) ll))) =>
                         zen.Rsubst basics.bool__t 
                           (v_Vec:(zen.term basics.bool__t) =>
                            zen.triangle (focal.is_true v_Vec)) 
                           (_p_L_mem 
                              (abst_remove e (builtins.cons _p_Elt_T hh ll)) 
                              h) (_p_L_mem ll h) 
                           (v_Vfc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_L_mem 
                                           (abst_remove e 
                                              (builtins.cons _p_Elt_T hh ll)) 
                                           h) (_p_L_mem ll h))))) =>
                            zen.Rsubst (basics.list__t _p_Elt_T) 
                              (v_Vgc:(zen.term (basics.list__t _p_Elt_T)) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_L_mem v_Vgc h) (_p_L_mem ll h)))) 
                              (abst_remove e (builtins.cons _p_Elt_T hh ll)) 
                              ll 
                              (v_Vhc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal (basics.list__t _p_Elt_T) 
                                           (abst_remove e 
                                              (builtins.cons _p_Elt_T hh ll)) 
                                           ll)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal (basics.list__t _p_Elt_T) 
                                       (abst_remove e 
                                          (builtins.cons _p_Elt_T hh ll)) ll)) 
                                 v_Vdc v_Vhc) 
                              (v_Vic:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_L_mem ll h) (_p_L_mem ll h))))) =>
                               zen.Rsubst _p_Elt_T 
                                 (v_Vjc:(zen.term _p_Elt_T) =>
                                  zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_L_mem ll v_Vjc) (_p_L_mem ll h)))) 
                                 h h 
                                 (v_Vkc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_Elt_T h h)))) =>
                                  zen.Rnoteq _p_Elt_T h v_Vkc) 
                                 (v_Vic0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_L_mem ll h) (_p_L_mem ll h))))) =>
                                  zen.Rnoteq basics.bool__t (_p_L_mem ll h) 
                                    v_Vic0) v_Vic) v_Vfc) 
                           (v_Vlc:
                            (zen.proof 
                               (zen.triangle (focal.is_true (_p_L_mem ll h)))) =>
                            zen.Raxiom 
                              (zen.triangle (focal.is_true (_p_L_mem ll h))) 
                              v_Vlc v_Vcc) RR) __BC_1_2_1_1_1_LEMMA))) 
                 (dk_builtins.magic_prove 
                    (dk_logic.ebP 
                       (basics._equal_ (basics.list__t _p_Elt_T) 
                          (abst_remove e (builtins.cons _p_Elt_T hh ll)) ll))))))) 
       (dk_builtins.magic_prove 
          (dk_logic.imp 
             (dk_logic.ebP 
                (_p_L_mem (abst_remove e (builtins.nil _p_Elt_T)) h)) 
             (dk_logic.ebP (_p_L_mem (builtins.nil _p_Elt_T) h))))).

def SequenceAsSet__unique_contains :
  _p_Elt_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_L_mem_empty_spec:(dk_logic.eP 
                         (dk_logic.forall _p_Elt_T 
                            (x:(cc.eT _p_Elt_T) =>
                             dk_logic.ebP 
                               (basics._tilda__tilda_ 
                                  (_p_L_mem (builtins.nil _p_Elt_T) x))))) ->
  _p_L_mem_spec:(dk_logic.eP 
                   (dk_logic.forall (basics.list__t _p_Elt_T) 
                      (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                       dk_logic.forall _p_Elt_T 
                         (e:(cc.eT _p_Elt_T) =>
                          dk_logic.forall _p_Elt_T 
                            (h:(cc.eT _p_Elt_T) =>
                             dk_logic.eqv 
                               (dk_logic.or (dk_logic.ebP (_p_L_mem l e)) 
                                  (dk_logic.ebP (basics._equal_ _p_Elt_T e h))) 
                               (dk_logic.ebP 
                                  (_p_L_mem (builtins.cons _p_Elt_T h l) e))))))) ->
  abst_nodouble:((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) ->
  abst_contains:((cc.eT _p_Elt_T) ->
                 (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) ->
  abst_remove:((cc.eT _p_Elt_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) ->
               cc.eT (basics.list__t _p_Elt_T)) ->
  abst_tolist_contains:(dk_logic.eP 
                          (dk_logic.forall (basics.list__t _p_Elt_T) 
                             (c:(cc.eT (basics.list__t _p_Elt_T)) =>
                              dk_logic.forall _p_Elt_T 
                                (e:(cc.eT _p_Elt_T) =>
                                 dk_logic.eqv 
                                   (dk_logic.ebP (abst_contains e c)) 
                                   (dk_logic.ebP 
                                      (_p_L_mem 
                                         (Sequence__tolist _p_Elt_T c) e)))))) ->
  abst_nodouble_list_inv:(dk_logic.eP 
                            (dk_logic.forall (basics.list__t _p_Elt_T) 
                               (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                                dk_logic.ebP 
                                  (abst_nodouble 
                                     (SequenceAsSet__torep _p_Elt_T l))))) ->
  dk_logic.eP 
    (dk_logic.forall (basics.list__t _p_Elt_T) 
       (c:(cc.eT (basics.list__t _p_Elt_T)) =>
        dk_logic.forall _p_Elt_T 
          (e:(cc.eT _p_Elt_T) =>
           dk_logic.ebP 
             (basics._tilda__tilda_ (abst_contains e (abst_remove e c))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem_empty_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_Elt_T 
        (x:(cc.eT _p_Elt_T) =>
         dk_logic.ebP 
           (basics._tilda__tilda_ (_p_L_mem (builtins.nil _p_Elt_T) x))))) =>
  _p_L_mem_spec:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_Elt_T) 
        (l:(cc.eT (basics.list__t _p_Elt_T)) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (h:(cc.eT _p_Elt_T) =>
               dk_logic.eqv 
                 (dk_logic.or (dk_logic.ebP (_p_L_mem l e)) 
                    (dk_logic.ebP (basics._equal_ _p_Elt_T e h))) 
                 (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T h l) e))))))) =>
  abst_nodouble:
  ((cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) =>
  abst_contains:
  ((cc.eT _p_Elt_T) ->
   (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT basics.bool__t) =>
  abst_remove:
  ((cc.eT _p_Elt_T) ->
   (cc.eT (basics.list__t _p_Elt_T)) -> cc.eT (basics.list__t _p_Elt_T)) =>
  abst_tolist_contains:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_Elt_T) 
        (c:(cc.eT (basics.list__t _p_Elt_T)) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_contains e c)) 
              (dk_logic.ebP (_p_L_mem (Sequence__tolist _p_Elt_T c) e)))))) =>
  abst_nodouble_list_inv:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_Elt_T) 
        (l:(cc.eT (basics.list__t _p_Elt_T)) =>
         dk_logic.ebP (abst_nodouble (SequenceAsSet__torep _p_Elt_T l))))) =>
  (__BD_1_LEMMA:
   (c:(cc.eT (basics.list__t _p_Elt_T)) ->
    e:(cc.eT _p_Elt_T) ->
    dk_logic.eP 
      (dk_logic.ebP (basics._tilda__tilda_ (_p_L_mem (abst_remove e c) e)))) =>
   zen.nnpp 
     (zen.forall (basics.list__t _p_Elt_T) 
        (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.forall _p_Elt_T 
           (v_Vbc:(zen.term _p_Elt_T) =>
            zen.triangle 
              (focal.is_true 
                 (basics._tilda__tilda_ 
                    (abst_contains v_Vbc (abst_remove v_Vbc v_Vac))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall (basics.list__t _p_Elt_T) 
               (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.forall _p_Elt_T 
                  (v_Vbc:(zen.term _p_Elt_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (abst_contains v_Vbc (abst_remove v_Vbc v_Vac))))))))) =>
      zen.Rnotall (basics.list__t _p_Elt_T) 
        (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
         zen.forall _p_Elt_T 
           (v_Vbc:(zen.term _p_Elt_T) =>
            zen.triangle 
              (focal.is_true 
                 (basics._tilda__tilda_ 
                    (abst_contains v_Vbc (abst_remove v_Vbc v_Vac)))))) 
        (v_Vdc:(zen.term (basics.list__t _p_Elt_T)) =>
         v_Vec:
         (zen.proof 
            (zen.not 
               (zen.forall _p_Elt_T 
                  (v_Vbc:(zen.term _p_Elt_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (abst_contains v_Vbc (abst_remove v_Vbc v_Vdc)))))))) =>
         zen.Rnotall _p_Elt_T 
           (v_Vbc:(zen.term _p_Elt_T) =>
            zen.triangle 
              (focal.is_true 
                 (basics._tilda__tilda_ 
                    (abst_contains v_Vbc (abst_remove v_Vbc v_Vdc))))) 
           (v_Vfc:(zen.term _p_Elt_T) =>
            v_Vgc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (abst_contains v_Vfc (abst_remove v_Vfc v_Vdc))))))) =>
            focal.zenon_focal_notnot 
              (abst_contains v_Vfc (abst_remove v_Vfc v_Vdc)) 
              (v_Vhc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_contains v_Vfc (abst_remove v_Vfc v_Vdc))))) =>
               zen.Rall (basics.list__t _p_Elt_T) 
                 (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                  zen.forall _p_Elt_T 
                    (v_Vbc:(zen.term _p_Elt_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true (abst_contains v_Vbc v_Vac))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_L_mem (Sequence__tolist _p_Elt_T v_Vac) 
                                v_Vbc))))) (abst_remove v_Vfc v_Vdc) 
                 (v_Vic:
                  (zen.proof 
                     (zen.forall _p_Elt_T 
                        (v_Vbc:(zen.term _p_Elt_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_contains v_Vbc 
                                    (abst_remove v_Vfc v_Vdc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem 
                                    (Sequence__tolist _p_Elt_T 
                                       (abst_remove v_Vfc v_Vdc)) v_Vbc)))))) =>
                  zen.Rall _p_Elt_T 
                    (v_Vbc:(zen.term _p_Elt_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_contains v_Vbc (abst_remove v_Vfc v_Vdc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_L_mem 
                                (Sequence__tolist _p_Elt_T 
                                   (abst_remove v_Vfc v_Vdc)) v_Vbc)))) 
                    v_Vfc 
                    (v_Vjc:
                     (zen.proof 
                        (zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_contains v_Vfc 
                                    (abst_remove v_Vfc v_Vdc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem 
                                    (Sequence__tolist _p_Elt_T 
                                       (abst_remove v_Vfc v_Vdc)) v_Vfc))))) =>
                     zen.Requiv 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_contains v_Vfc (abst_remove v_Vfc v_Vdc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_L_mem 
                                (Sequence__tolist _p_Elt_T 
                                   (abst_remove v_Vfc v_Vdc)) v_Vfc))) 
                       (v_Vkc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_contains v_Vfc 
                                       (abst_remove v_Vfc v_Vdc)))))) =>
                        v_Vlc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_L_mem (abst_remove v_Vfc v_Vdc) v_Vfc))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_contains v_Vfc 
                                   (abst_remove v_Vfc v_Vdc)))) v_Vhc v_Vkc) 
                       (v_Vhc0:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_contains v_Vfc 
                                    (abst_remove v_Vfc v_Vdc))))) =>
                        v_Vmc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem (abst_remove v_Vfc v_Vdc) v_Vfc)))) =>
                        zen.Rall (basics.list__t _p_Elt_T) 
                          (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                           zen.forall _p_Elt_T 
                             (v_Vbc:(zen.term _p_Elt_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (_p_L_mem (abst_remove v_Vbc v_Vac) 
                                         v_Vbc))))) v_Vdc 
                          (v_Vnc:
                           (zen.proof 
                              (zen.forall _p_Elt_T 
                                 (v_Vbc:(zen.term _p_Elt_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem 
                                             (abst_remove v_Vbc v_Vdc) v_Vbc)))))) =>
                           zen.Rall _p_Elt_T 
                             (v_Vbc:(zen.term _p_Elt_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (_p_L_mem (abst_remove v_Vbc v_Vdc) 
                                         v_Vbc)))) v_Vfc 
                             (v_Voc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem 
                                             (abst_remove v_Vfc v_Vdc) v_Vfc))))) =>
                              focal.zenon_focal_not 
                                (_p_L_mem (abst_remove v_Vfc v_Vdc) v_Vfc) 
                                (v_Vlc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_L_mem 
                                                (abst_remove v_Vfc v_Vdc) 
                                                v_Vfc))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_L_mem (abst_remove v_Vfc v_Vdc) 
                                            v_Vfc))) v_Vmc v_Vlc) v_Voc) 
                             v_Vnc) __BD_1_LEMMA) v_Vjc) v_Vic) 
                 abst_tolist_contains) v_Vgc) v_Vec) v_Vcc)) 
    (c:(cc.eT (basics.list__t _p_Elt_T)) =>
     e:(cc.eT _p_Elt_T) =>
     (__BD_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._tilda__tilda_ 
               (_p_L_mem (abst_remove e (builtins.nil _p_Elt_T)) e)))) =>
      (__BD_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.forall (basics.list__t _p_Elt_T) 
             (l:(cc.eT (basics.list__t _p_Elt_T)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (basics._tilda__tilda_ (_p_L_mem (abst_remove e l) e))) 
                (dk_logic.forall _p_Elt_T 
                   (x:(cc.eT _p_Elt_T) =>
                    dk_logic.ebP 
                      (basics._tilda__tilda_ 
                         (_p_L_mem 
                            (abst_remove e (builtins.cons _p_Elt_T x l)) e))))))) =>
       (__BD_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.forall (basics.list__t _p_Elt_T) 
              (l:(cc.eT (basics.list__t _p_Elt_T)) =>
               dk_logic.ebP 
                 (basics._tilda__tilda_ (_p_L_mem (abst_remove e l) e))))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (basics._tilda__tilda_ (_p_L_mem (abst_remove e c) e)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._tilda__tilda_ (_p_L_mem (abst_remove e c) e)))))) =>
           zen.Rall (basics.list__t _p_Elt_T) 
             (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
              zen.triangle 
                (focal.is_true 
                   (basics._tilda__tilda_ (_p_L_mem (abst_remove e v_Vac) e)))) 
             c 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._tilda__tilda_ (_p_L_mem (abst_remove e c) e))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ (_p_L_mem (abst_remove e c) e)))) 
                v_Vbc v_Vzb) __BD_1_3_LEMMA)) 
         (dk_builtins.magic_prove 
            (dk_logic.forall (basics.list__t _p_Elt_T) 
               (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                dk_logic.ebP 
                  (basics._tilda__tilda_ (_p_L_mem (abst_remove e l) e)))))) 
        ((__BD_1_2_1_LEMMA:
          (l:(cc.eT (basics.list__t _p_Elt_T)) ->
           H:(dk_logic.eP 
                (dk_logic.ebP 
                   (basics._tilda__tilda_ (_p_L_mem (abst_remove e l) e)))) ->
           dk_logic.eP 
             (dk_logic.forall _p_Elt_T 
                (x:(cc.eT _p_Elt_T) =>
                 dk_logic.ebP 
                   (basics._tilda__tilda_ 
                      (_p_L_mem (abst_remove e (builtins.cons _p_Elt_T x l)) 
                         e))))) =>
          zen.nnpp 
            (zen.forall (basics.list__t _p_Elt_T) 
               (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                zen.imp 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (_p_L_mem (abst_remove e v_Vzb) e)))) 
                  (zen.forall _p_Elt_T 
                     (v_Vac:(zen.term _p_Elt_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (_p_L_mem 
                                 (abst_remove e 
                                    (builtins.cons _p_Elt_T v_Vac v_Vzb)) e))))))) 
            (v_Vbc:
             (zen.proof 
                (zen.not 
                   (zen.forall (basics.list__t _p_Elt_T) 
                      (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (_p_L_mem (abst_remove e v_Vzb) e)))) 
                         (zen.forall _p_Elt_T 
                            (v_Vac:(zen.term _p_Elt_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (basics._tilda__tilda_ 
                                     (_p_L_mem 
                                        (abst_remove e 
                                           (builtins.cons _p_Elt_T v_Vac 
                                              v_Vzb)) e))))))))) =>
             zen.Raxiom 
               (zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vzb:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (_p_L_mem (abst_remove e v_Vzb) e)))) 
                     (zen.forall _p_Elt_T 
                        (v_Vac:(zen.term _p_Elt_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ 
                                 (_p_L_mem 
                                    (abst_remove e 
                                       (builtins.cons _p_Elt_T v_Vac v_Vzb)) 
                                    e))))))) __BD_1_2_1_LEMMA v_Vbc)) 
           (l:(cc.eT (basics.list__t _p_Elt_T)) =>
            H:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (basics._tilda__tilda_ (_p_L_mem (abst_remove e l) e)))) =>
            (__BD_1_2_1_1_LEMMA:
             (x:(cc.eT _p_Elt_T) ->
              dk_logic.eP 
                (dk_logic.ebP 
                   (basics._tilda__tilda_ 
                      (_p_L_mem (abst_remove e (builtins.cons _p_Elt_T x l)) 
                         e)))) =>
             zen.nnpp 
               (zen.forall _p_Elt_T 
                  (v_Vzb:(zen.term _p_Elt_T) =>
                   zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (_p_L_mem 
                              (abst_remove e (builtins.cons _p_Elt_T v_Vzb l)) 
                              e))))) 
               (v_Vac:
                (zen.proof 
                   (zen.not 
                      (zen.forall _p_Elt_T 
                         (v_Vzb:(zen.term _p_Elt_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (_p_L_mem 
                                     (abst_remove e 
                                        (builtins.cons _p_Elt_T v_Vzb l)) e))))))) =>
                zen.Raxiom 
                  (zen.forall _p_Elt_T 
                     (v_Vzb:(zen.term _p_Elt_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (basics._tilda__tilda_ 
                              (_p_L_mem 
                                 (abst_remove e 
                                    (builtins.cons _p_Elt_T v_Vzb l)) e))))) 
                  __BD_1_2_1_1_LEMMA v_Vac)) 
              (x:(cc.eT _p_Elt_T) =>
               (__BD_1_2_1_1_1_LEMMA:
                (Hxe:(dk_logic.eP 
                        (dk_logic.ebP (basics._equal_ _p_Elt_T x e))) ->
                 dk_logic.eP 
                   (dk_logic.ebP 
                      (basics._tilda__tilda_ 
                         (_p_L_mem 
                            (abst_remove e (builtins.cons _p_Elt_T x l)) e)))) =>
                (__BD_1_2_1_1_2_LEMMA:
                 (Hnxe:(dk_logic.eP 
                          (dk_logic.ebP 
                             (basics._tilda__tilda_ 
                                (basics._equal_ _p_Elt_T x e)))) ->
                  dk_logic.eP 
                    (dk_logic.ebP 
                       (basics._tilda__tilda_ 
                          (_p_L_mem 
                             (abst_remove e (builtins.cons _p_Elt_T x l)) e)))) =>
                 zen.nnpp 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._tilda__tilda_ 
                            (_p_L_mem 
                               (abst_remove e (builtins.cons _p_Elt_T x l)) e)))) 
                   (v_Vzb:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem 
                                      (abst_remove e 
                                         (builtins.cons _p_Elt_T x l)) e)))))) =>
                    zen.Rimply 
                      (zen.triangle 
                         (focal.is_true (basics._equal_ _p_Elt_T x e))) 
                      (zen.triangle 
                         (focal.is_true 
                            (basics._tilda__tilda_ 
                               (_p_L_mem 
                                  (abst_remove e (builtins.cons _p_Elt_T x l)) 
                                  e)))) 
                      (v_Vac:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics.syntactic_equal _p_Elt_T x e))))) =>
                       zen.Rimply 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (basics._equal_ _p_Elt_T x e)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (_p_L_mem 
                                     (abst_remove e 
                                        (builtins.cons _p_Elt_T x l)) e)))) 
                         (v_Vbc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics._tilda__tilda_ 
                                         (basics.syntactic_equal _p_Elt_T x e)))))) =>
                          focal.zenon_focal_notnot 
                            (basics.syntactic_equal _p_Elt_T x e) 
                            (v_Vcc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (basics.syntactic_equal _p_Elt_T x e)))) =>
                             focal.zenon_syntactic_equal _p_Elt_T x e 
                               (v_Vdc:
                                (zen.proof 
                                   (zen.triangle (zen.equal _p_Elt_T x e))) =>
                                focal.zenon_not_syntactic_equal _p_Elt_T x e 
                                  (v_Vec:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_Elt_T x e)))) =>
                                   zen.Raxiom 
                                     (zen.triangle (zen.equal _p_Elt_T x e)) 
                                     v_Vdc v_Vec) v_Vac) v_Vcc) v_Vbc) 
                         (v_Vfc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (basics._tilda__tilda_ 
                                      (_p_L_mem 
                                         (abst_remove e 
                                            (builtins.cons _p_Elt_T x l)) e))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (basics._tilda__tilda_ 
                                     (_p_L_mem 
                                        (abst_remove e 
                                           (builtins.cons _p_Elt_T x l)) e)))) 
                            v_Vfc v_Vzb) __BD_1_2_1_1_2_LEMMA) 
                      (v_Vfc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem 
                                      (abst_remove e 
                                         (builtins.cons _p_Elt_T x l)) e))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (_p_L_mem 
                                     (abst_remove e 
                                        (builtins.cons _p_Elt_T x l)) e)))) 
                         v_Vfc v_Vzb) __BD_1_2_1_1_1_LEMMA)) 
                  (Hnxe:
                   (dk_logic.eP 
                      (dk_logic.ebP 
                         (basics._tilda__tilda_ (basics._equal_ _p_Elt_T x e)))) =>
                   (__BD_1_2_1_1_2_1_LEMMA:
                    (dk_logic.eP 
                       (dk_logic.ebP 
                          (basics._tilda__tilda_ 
                             (_p_L_mem 
                                (builtins.cons _p_Elt_T x (abst_remove e l)) 
                                e)))) =>
                    dk_builtins.magic_prove 
                      (dk_logic.ebP 
                         (basics._tilda__tilda_ 
                            (_p_L_mem 
                               (abst_remove e (builtins.cons _p_Elt_T x l)) e)))) 
                     (zen.nnpp 
                        (zen.triangle 
                           (focal.is_true 
                              (basics._tilda__tilda_ 
                                 (_p_L_mem 
                                    (builtins.cons _p_Elt_T x 
                                       (abst_remove e l)) e)))) 
                        (v_Vzb:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (basics._tilda__tilda_ 
                                        (_p_L_mem 
                                           (builtins.cons _p_Elt_T x 
                                              (abst_remove e l)) e)))))) =>
                         focal.zenon_focal_not 
                           (_p_L_mem (abst_remove e l) e) 
                           (v_Vac:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_L_mem (abst_remove e l) e))))) =>
                            focal.zenon_focal_not 
                              (basics._equal_ _p_Elt_T x e) 
                              (v_Vbc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (basics.syntactic_equal _p_Elt_T 
                                              x e))))) =>
                               focal.zenon_not_syntactic_equal _p_Elt_T x e 
                                 (v_Vcc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_Elt_T x e)))) =>
                                  focal.zenon_focal_notnot 
                                    (_p_L_mem 
                                       (builtins.cons _p_Elt_T x 
                                          (abst_remove e l)) e) 
                                    (v_Vdc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_L_mem 
                                                 (builtins.cons _p_Elt_T x 
                                                    (abst_remove e l)) e)))) =>
                                     zen.Rall (basics.list__t _p_Elt_T) 
                                       (v_Vec:
                                        (zen.term (basics.list__t _p_Elt_T)) =>
                                        zen.forall _p_Elt_T 
                                          (v_Vfc:(zen.term _p_Elt_T) =>
                                           zen.forall _p_Elt_T 
                                             (v_Vgc:(zen.term _p_Elt_T) =>
                                              zen.eqv 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem v_Vec 
                                                            v_Vfc))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._equal_ 
                                                            _p_Elt_T v_Vfc 
                                                            v_Vgc)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T v_Vgc 
                                                            v_Vec) v_Vfc)))))) 
                                       (abst_remove e l) 
                                       (v_Vhc:
                                        (zen.proof 
                                           (zen.forall _p_Elt_T 
                                              (v_Vfc:(zen.term _p_Elt_T) =>
                                               zen.forall _p_Elt_T 
                                                 (v_Vgc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.or 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem 
                                                                (abst_remove 
                                                                   e l) v_Vfc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics._equal_ 
                                                                _p_Elt_T 
                                                                v_Vfc v_Vgc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_L_mem 
                                                             (builtins.cons 
                                                                _p_Elt_T 
                                                                v_Vgc 
                                                                (abst_remove 
                                                                   e l)) 
                                                             v_Vfc))))))) =>
                                        zen.Rall _p_Elt_T 
                                          (v_Vfc:(zen.term _p_Elt_T) =>
                                           zen.forall _p_Elt_T 
                                             (v_Vgc:(zen.term _p_Elt_T) =>
                                              zen.eqv 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem 
                                                            (abst_remove e l) 
                                                            v_Vfc))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._equal_ 
                                                            _p_Elt_T v_Vfc 
                                                            v_Vgc)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T v_Vgc 
                                                            (abst_remove e l)) 
                                                         v_Vfc))))) e 
                                          (v_Vic:
                                           (zen.proof 
                                              (zen.forall _p_Elt_T 
                                                 (v_Vgc:
                                                  (zen.term _p_Elt_T) =>
                                                  zen.eqv 
                                                    (zen.or 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem 
                                                                (abst_remove 
                                                                   e l) e))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics._equal_ 
                                                                _p_Elt_T e 
                                                                v_Vgc)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_L_mem 
                                                             (builtins.cons 
                                                                _p_Elt_T 
                                                                v_Vgc 
                                                                (abst_remove 
                                                                   e l)) e)))))) =>
                                           zen.Rall _p_Elt_T 
                                             (v_Vgc:(zen.term _p_Elt_T) =>
                                              zen.eqv 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem 
                                                            (abst_remove e l) 
                                                            e))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._equal_ 
                                                            _p_Elt_T e v_Vgc)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T v_Vgc 
                                                            (abst_remove e l)) 
                                                         e)))) x 
                                             (v_Vjc:
                                              (zen.proof 
                                                 (zen.eqv 
                                                    (zen.or 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem 
                                                                (abst_remove 
                                                                   e l) e))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics._equal_ 
                                                                _p_Elt_T e x)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_L_mem 
                                                             (builtins.cons 
                                                                _p_Elt_T x 
                                                                (abst_remove 
                                                                   e l)) e))))) =>
                                              zen.Requiv 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem 
                                                            (abst_remove e l) 
                                                            e))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._equal_ 
                                                            _p_Elt_T e x)))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T x 
                                                            (abst_remove e l)) 
                                                         e))) 
                                                (v_Vkc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.or 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_L_mem 
                                                                   (abst_remove 
                                                                    e l) e))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (basics._equal_ 
                                                                   _p_Elt_T 
                                                                   e x)))))) =>
                                                 v_Vlc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem 
                                                                (builtins.cons 
                                                                   _p_Elt_T 
                                                                   x 
                                                                   (abst_remove 
                                                                    e l)) e))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem 
                                                            (builtins.cons 
                                                               _p_Elt_T x 
                                                               (abst_remove 
                                                                  e l)) e))) 
                                                   v_Vdc v_Vlc) 
                                                (v_Vmc:
                                                 (zen.proof 
                                                    (zen.or 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem 
                                                                (abst_remove 
                                                                   e l) e))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics._equal_ 
                                                                _p_Elt_T e x))))) =>
                                                 v_Vdc0:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_L_mem 
                                                             (builtins.cons 
                                                                _p_Elt_T x 
                                                                (abst_remove 
                                                                   e l)) e)))) =>
                                                 zen.Ror 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem 
                                                            (abst_remove e l) 
                                                            e))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._equal_ 
                                                            _p_Elt_T e x))) 
                                                   (v_Vnc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_L_mem 
                                                                (abst_remove 
                                                                   e l) e)))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_L_mem 
                                                               (abst_remove 
                                                                  e l) e))) 
                                                      v_Vnc v_Vac) 
                                                   (v_Voc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (basics.syntactic_equal 
                                                                _p_Elt_T e x)))) =>
                                                    focal.zenon_syntactic_equal 
                                                      _p_Elt_T e x 
                                                      (v_Vpc:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_Elt_T e x))) =>
                                                       zen.Reqsym _p_Elt_T e 
                                                         x v_Vpc v_Vcc) v_Voc) 
                                                   v_Vmc) v_Vjc) v_Vic) v_Vhc) 
                                       _p_L_mem_spec) v_Vzb) v_Vbc) Hnxe) H)))) 
                 (Hxe:
                  (dk_logic.eP (dk_logic.ebP (basics._equal_ _p_Elt_T x e))) =>
                  (__BD_1_2_1_1_1_1_LEMMA:
                   (dk_logic.eP 
                      (dk_logic.ebP (basics._tilda__tilda_ (_p_L_mem l e)))) =>
                   dk_builtins.magic_prove 
                     (dk_logic.ebP 
                        (basics._tilda__tilda_ 
                           (_p_L_mem 
                              (abst_remove e (builtins.cons _p_Elt_T x l)) e)))) 
                    ((__BD_1_2_1_1_1_1_1_LEMMA:
                      (dk_logic.eP 
                         (dk_logic.ebP 
                            (_p_L_mem (builtins.cons _p_Elt_T x l) e))) =>
                      (__BD_1_2_1_1_1_1_2_LEMMA:
                       (dk_logic.eP 
                          (dk_logic.ebP 
                             (abst_nodouble (builtins.cons _p_Elt_T x l)))) =>
                       (__BD_1_2_1_1_1_1_3_LEMMA:
                        (dk_logic.eP 
                           (dk_logic.ebP 
                              (basics._tilda__tilda_ (_p_L_mem l x)))) =>
                        zen.nnpp 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ (_p_L_mem l e)))) 
                          (v_Vcc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ (_p_L_mem l e)))))) =>
                           focal.zenon_focal_not (_p_L_mem l x) 
                             (v_Vdc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (_p_L_mem l x))))) =>
                              focal.zenon_syntactic_equal _p_Elt_T x e 
                                (v_Vec:
                                 (zen.proof 
                                    (zen.triangle (zen.equal _p_Elt_T x e))) =>
                                 focal.zenon_focal_notnot (_p_L_mem l e) 
                                   (v_Vfc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (_p_L_mem l e)))) =>
                                    zen.Rsubst basics.bool__t 
                                      (v_Vgc:(zen.term basics.bool__t) =>
                                       zen.triangle (focal.is_true v_Vgc)) 
                                      (_p_L_mem l e) (_p_L_mem l x) 
                                      (v_Vhc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_L_mem l e) 
                                                   (_p_L_mem l x))))) =>
                                       zen.Rsubst (basics.list__t _p_Elt_T) 
                                         (v_Vic:
                                          (zen.term (basics.list__t _p_Elt_T)) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_L_mem v_Vic e) 
                                                  (_p_L_mem l x)))) l l 
                                         (v_Vjc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal 
                                                      (basics.list__t 
                                                         _p_Elt_T) l l)))) =>
                                          zen.Rnoteq 
                                            (basics.list__t _p_Elt_T) l v_Vjc) 
                                         (v_Vhc0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_L_mem l e) 
                                                      (_p_L_mem l x))))) =>
                                          zen.Rsubst _p_Elt_T 
                                            (v_Vkc:(zen.term _p_Elt_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_L_mem l v_Vkc) 
                                                     (_p_L_mem l x)))) e x 
                                            (v_Vlc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_Elt_T e x)))) =>
                                             zen.Reqsym _p_Elt_T x e v_Vec 
                                               v_Vlc) 
                                            (v_Vmc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_L_mem l x) 
                                                         (_p_L_mem l x))))) =>
                                             zen.Rnoteq basics.bool__t 
                                               (_p_L_mem l x) v_Vmc) v_Vhc0) 
                                         v_Vhc) 
                                      (v_Vnc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true (_p_L_mem l x)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true (_p_L_mem l x))) 
                                         v_Vnc v_Vdc) v_Vfc) v_Vcc) Hxe) 
                             __BD_1_2_1_1_1_1_3_LEMMA)) 
                         (dk_builtins.magic_prove 
                            (dk_logic.ebP 
                               (basics._tilda__tilda_ (_p_L_mem l x))))) 
                        (zen.nnpp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_nodouble (builtins.cons _p_Elt_T x l)))) 
                           (v_Vzb:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_nodouble 
                                           (builtins.cons _p_Elt_T x l)))))) =>
                            zen.Rall (basics.list__t _p_Elt_T) 
                              (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                               zen.triangle 
                                 (focal.is_true 
                                    (abst_nodouble 
                                       (SequenceAsSet__torep _p_Elt_T v_Vac)))) 
                              (builtins.cons _p_Elt_T x l) 
                              (v_Vbc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_nodouble 
                                           (builtins.cons _p_Elt_T x l))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_nodouble 
                                          (builtins.cons _p_Elt_T x l)))) 
                                 v_Vbc v_Vzb) abst_nodouble_list_inv))) 
                       (zen.nnpp 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_L_mem (builtins.cons _p_Elt_T x l) e))) 
                          (v_Vec:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_L_mem 
                                          (builtins.cons _p_Elt_T x l) e))))) =>
                           focal.zenon_syntactic_equal _p_Elt_T x e 
                             (v_Vfc:
                              (zen.proof 
                                 (zen.triangle (zen.equal _p_Elt_T x e))) =>
                              zen.Rall (basics.list__t _p_Elt_T) 
                                (v_Vgc:
                                 (zen.term (basics.list__t _p_Elt_T)) =>
                                 zen.forall _p_Elt_T 
                                   (v_Vhc:(zen.term _p_Elt_T) =>
                                    zen.forall _p_Elt_T 
                                      (v_Vic:(zen.term _p_Elt_T) =>
                                       zen.eqv 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_L_mem v_Vgc v_Vhc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ _p_Elt_T 
                                                     v_Vhc v_Vic)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem 
                                                  (builtins.cons _p_Elt_T 
                                                     v_Vic v_Vgc) v_Vhc)))))) 
                                l 
                                (v_Vjc:
                                 (zen.proof 
                                    (zen.forall _p_Elt_T 
                                       (v_Vhc:(zen.term _p_Elt_T) =>
                                        zen.forall _p_Elt_T 
                                          (v_Vic:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem l v_Vhc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._equal_ 
                                                         _p_Elt_T v_Vhc v_Vic)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T v_Vic l) 
                                                      v_Vhc))))))) =>
                                 zen.Rall _p_Elt_T 
                                   (v_Vhc:(zen.term _p_Elt_T) =>
                                    zen.forall _p_Elt_T 
                                      (v_Vic:(zen.term _p_Elt_T) =>
                                       zen.eqv 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_L_mem l v_Vhc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ _p_Elt_T 
                                                     v_Vhc v_Vic)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem 
                                                  (builtins.cons _p_Elt_T 
                                                     v_Vic l) v_Vhc))))) e 
                                   (v_Vkc:
                                    (zen.proof 
                                       (zen.forall _p_Elt_T 
                                          (v_Vic:(zen.term _p_Elt_T) =>
                                           zen.eqv 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem l e))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._equal_ 
                                                         _p_Elt_T e v_Vic)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T v_Vic l) e)))))) =>
                                    zen.Rall _p_Elt_T 
                                      (v_Vic:(zen.term _p_Elt_T) =>
                                       zen.eqv 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true (_p_L_mem l e))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ _p_Elt_T e 
                                                     v_Vic)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem 
                                                  (builtins.cons _p_Elt_T 
                                                     v_Vic l) e)))) e 
                                      (v_Vlc:
                                       (zen.proof 
                                          (zen.eqv 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem l e))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._equal_ 
                                                         _p_Elt_T e e)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T e l) e))))) =>
                                       zen.Requiv 
                                         (zen.or 
                                            (zen.triangle 
                                               (focal.is_true (_p_L_mem l e))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ _p_Elt_T e 
                                                     e)))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_L_mem 
                                                  (builtins.cons _p_Elt_T e l) 
                                                  e))) 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.or 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem l e))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._equal_ 
                                                            _p_Elt_T e e)))))) =>
                                          v_Vnc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T e l) e))))) =>
                                          zen.Rnotor 
                                            (zen.triangle 
                                               (focal.is_true (_p_L_mem l e))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (basics._equal_ _p_Elt_T e 
                                                     e))) 
                                            (v_Voc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_L_mem l e))))) =>
                                             v_Vpc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics.syntactic_equal 
                                                            _p_Elt_T e e))))) =>
                                             focal.zenon_not_syntactic_equal 
                                               _p_Elt_T e e 
                                               (v_Vqc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_Elt_T 
                                                            e e)))) =>
                                                zen.Rnoteq _p_Elt_T e v_Vqc) 
                                               v_Vpc) v_Vmc) 
                                         (v_Vrc:
                                          (zen.proof 
                                             (zen.or 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem l e))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (basics._equal_ 
                                                         _p_Elt_T e e))))) =>
                                          v_Vsc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_L_mem 
                                                      (builtins.cons 
                                                         _p_Elt_T e l) e)))) =>
                                          zen.Rsubst basics.bool__t 
                                            (v_Vtc:
                                             (zen.term basics.bool__t) =>
                                             zen.triangle 
                                               (focal.is_true v_Vtc)) 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T e l) e) 
                                            (_p_L_mem 
                                               (builtins.cons _p_Elt_T x l) e) 
                                            (v_Vuc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_L_mem 
                                                            (builtins.cons 
                                                               _p_Elt_T e l) 
                                                            e) 
                                                         (_p_L_mem 
                                                            (builtins.cons 
                                                               _p_Elt_T x l) 
                                                            e))))) =>
                                             zen.Rsubst 
                                               (basics.list__t _p_Elt_T) 
                                               (v_Vvc:
                                                (zen.term 
                                                   (basics.list__t _p_Elt_T)) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_L_mem v_Vvc e) 
                                                        (_p_L_mem 
                                                           (builtins.cons 
                                                              _p_Elt_T x l) e)))) 
                                               (builtins.cons _p_Elt_T e l) 
                                               (builtins.cons _p_Elt_T x l) 
                                               (v_Vwc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            (basics.list__t 
                                                               _p_Elt_T) 
                                                            (builtins.cons 
                                                               _p_Elt_T e l) 
                                                            (builtins.cons 
                                                               _p_Elt_T x l))))) =>
                                                zen.Rsubst _p_Elt_T 
                                                  (v_Vxc:
                                                   (zen.term _p_Elt_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           (basics.list__t 
                                                              _p_Elt_T) 
                                                           (builtins.cons 
                                                              _p_Elt_T v_Vxc 
                                                              l) 
                                                           (builtins.cons 
                                                              _p_Elt_T x l)))) 
                                                  e x 
                                                  (v_Vyc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_Elt_T e x)))) =>
                                                   zen.Reqsym _p_Elt_T x e 
                                                     v_Vfc v_Vyc) 
                                                  (v_Vzc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               (basics.list__t 
                                                                  _p_Elt_T) 
                                                               (builtins.cons 
                                                                  _p_Elt_T x 
                                                                  l) 
                                                               (builtins.cons 
                                                                  _p_Elt_T x 
                                                                  l))))) =>
                                                   zen.Rsubst 
                                                     (basics.list__t _p_Elt_T) 
                                                     (v_Vad:
                                                      (zen.term 
                                                         (basics.list__t 
                                                            _p_Elt_T)) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              (basics.list__t 
                                                                 _p_Elt_T) 
                                                              (builtins.cons 
                                                                 _p_Elt_T x 
                                                                 v_Vad) 
                                                              (builtins.cons 
                                                                 _p_Elt_T x l)))) 
                                                     l l 
                                                     (v_Vbd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  (basics.list__t 
                                                                    _p_Elt_T) 
                                                                  l l)))) =>
                                                      zen.Rnoteq 
                                                        (basics.list__t 
                                                           _p_Elt_T) l v_Vbd) 
                                                     (v_Vzc0:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  (basics.list__t 
                                                                    _p_Elt_T) 
                                                                  (builtins.cons 
                                                                    _p_Elt_T 
                                                                    x l) 
                                                                  (builtins.cons 
                                                                    _p_Elt_T 
                                                                    x l))))) =>
                                                      zen.Rnoteq 
                                                        (basics.list__t 
                                                           _p_Elt_T) 
                                                        (builtins.cons 
                                                           _p_Elt_T x l) 
                                                        v_Vzc0) v_Vzc) v_Vwc) 
                                               (v_Vcd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_L_mem 
                                                               (builtins.cons 
                                                                  _p_Elt_T x 
                                                                  l) e) 
                                                            (_p_L_mem 
                                                               (builtins.cons 
                                                                  _p_Elt_T x 
                                                                  l) e))))) =>
                                                zen.Rsubst _p_Elt_T 
                                                  (v_Vdd:
                                                   (zen.term _p_Elt_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_L_mem 
                                                              (builtins.cons 
                                                                 _p_Elt_T x l) 
                                                              v_Vdd) 
                                                           (_p_L_mem 
                                                              (builtins.cons 
                                                                 _p_Elt_T x l) 
                                                              e)))) e e 
                                                  (v_Vqc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_Elt_T e e)))) =>
                                                   zen.Rnoteq _p_Elt_T e 
                                                     v_Vqc) 
                                                  (v_Vcd0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_L_mem 
                                                                  (builtins.cons 
                                                                    _p_Elt_T 
                                                                    x l) e) 
                                                               (_p_L_mem 
                                                                  (builtins.cons 
                                                                    _p_Elt_T 
                                                                    x l) e))))) =>
                                                   zen.Rnoteq basics.bool__t 
                                                     (_p_L_mem 
                                                        (builtins.cons 
                                                           _p_Elt_T x l) e) 
                                                     v_Vcd0) v_Vcd) v_Vuc) 
                                            (v_Ved:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_L_mem 
                                                         (builtins.cons 
                                                            _p_Elt_T x l) e)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_L_mem 
                                                        (builtins.cons 
                                                           _p_Elt_T x l) e))) 
                                               v_Ved v_Vec) v_Vsc) v_Vlc) 
                                      v_Vkc) v_Vjc) _p_L_mem_spec) Hxe)))))))) 
       ((__BD_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (basics._tilda__tilda_ (_p_L_mem (builtins.nil _p_Elt_T) e)))) =>
         dk_builtins.magic_prove 
           (dk_logic.ebP 
              (basics._tilda__tilda_ 
                 (_p_L_mem (abst_remove e (builtins.nil _p_Elt_T)) e)))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (basics._tilda__tilda_ 
                      (_p_L_mem (builtins.nil _p_Elt_T) e)))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (_p_L_mem (builtins.nil _p_Elt_T) e)))))) =>
              zen.Rall _p_Elt_T 
                (v_Vac:(zen.term _p_Elt_T) =>
                 zen.triangle 
                   (focal.is_true 
                      (basics._tilda__tilda_ 
                         (_p_L_mem (builtins.nil _p_Elt_T) v_Vac)))) e 
                (v_Vbc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (_p_L_mem (builtins.nil _p_Elt_T) e))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (basics._tilda__tilda_ 
                            (_p_L_mem (builtins.nil _p_Elt_T) e)))) v_Vbc 
                   v_Vzb) _p_L_mem_empty_spec)))).

def SequenceAsSet__collection_create
  :=
  _p_Elt_T:cc.uT =>
  _p_L_T:cc.uT =>
  _p_Elt_element:(cc.eT _p_Elt_T) =>
  _p_Elt_equal:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_L_mem_empty_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_Elt_T 
        (x:(cc.eT _p_Elt_T) =>
         dk_logic.ebP 
           (basics._tilda__tilda_ (_p_L_mem (builtins.nil _p_Elt_T) x))))) =>
  _p_L_mem_spec:
  (dk_logic.eP 
     (dk_logic.forall (basics.list__t _p_Elt_T) 
        (l:(cc.eT (basics.list__t _p_Elt_T)) =>
         dk_logic.forall _p_Elt_T 
           (e:(cc.eT _p_Elt_T) =>
            dk_logic.forall _p_Elt_T 
              (h:(cc.eT _p_Elt_T) =>
               dk_logic.eqv 
                 (dk_logic.or (dk_logic.ebP (_p_L_mem l e)) 
                    (dk_logic.ebP (basics._equal_ _p_Elt_T e h))) 
                 (dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T h l) e))))))) =>
  _p_L_mem_cons_head:
  (dk_logic.eP 
     (dk_logic.forall _p_Elt_T 
        (x:(cc.eT _p_Elt_T) =>
         dk_logic.forall (basics.list__t _p_Elt_T) 
           (l:(cc.eT (basics.list__t _p_Elt_T)) =>
            dk_logic.ebP (_p_L_mem (builtins.cons _p_Elt_T x l) x))))) =>
  SequenceAsSet__mk_record _p_Elt_T _p_L_T _p_Elt_equal _p_L_mem 
    (basics.list__t _p_Elt_T) (SequenceAsSet__nodouble _p_Elt_T _p_L_mem) 
    (SequenceAsSet__add _p_Elt_T _p_L_mem) 
    (Sequence__contains _p_Elt_T _p_L_mem) (Sequence__empty _p_Elt_T) 
    (Sequence__head _p_Elt_T _p_Elt_element) (Sequence__is_empty _p_Elt_T) 
    (Sequence__remove _p_Elt_T) (Sequence__size _p_Elt_T) 
    (Sequence__tail _p_Elt_T) (Sequence__tolist _p_Elt_T) 
    (SequenceAsSet__torep _p_Elt_T) 
    (SequenceAsSet__add_contains _p_Elt_T (basics.list__t _p_Elt_T) 
       (SequenceAsSet__add _p_Elt_T _p_L_mem) 
       (Sequence__contains _p_Elt_T _p_L_mem)) 
    (Sequence__contains_empty _p_Elt_T (basics.list__t _p_Elt_T) 
       (Sequence__contains _p_Elt_T _p_L_mem) (Sequence__empty _p_Elt_T)) 
    (Sequence__head_contains _p_Elt_T _p_Elt_element _p_L_mem 
       _p_L_mem_cons_head) (Sequence__is_empty_empty _p_Elt_T) 
    (Sequence__remove_contains _p_Elt_T _p_Elt_equal 
       (basics.list__t _p_Elt_T) (Sequence__contains _p_Elt_T _p_L_mem) 
       (Sequence__remove _p_Elt_T)) 
    (Sequence__empty_has_no_element _p_Elt_T (basics.list__t _p_Elt_T) 
       (Sequence__empty _p_Elt_T) (Sequence__size _p_Elt_T)) 
    (Sequence__size_positive _p_Elt_T (basics.list__t _p_Elt_T) 
       (Sequence__size _p_Elt_T)) 
    (SequenceAsSet__head_tail_unique _p_Elt_T 
       (Sequence__head _p_Elt_T _p_Elt_element) (Sequence__remove _p_Elt_T) 
       (Sequence__tail _p_Elt_T)) 
    (Sequence__head_tail_spec _p_Elt_T _p_Elt_element) 
    (Sequence__tail_includes _p_Elt_T _p_L_mem _p_L_mem_spec) 
    (Sequence__tolist_contains _p_Elt_T _p_L_mem) 
    (Sequence__tolist_empty _p_Elt_T) 
    (SequenceAsSet__nodouble_list_inv _p_Elt_T (basics.list__t _p_Elt_T) 
       (SequenceAsSet__nodouble _p_Elt_T _p_L_mem) 
       (SequenceAsSet__torep _p_Elt_T)) 
    (SequenceAsSet__remove_preserves_inv _p_Elt_T _p_L_mem 
       (SequenceAsSet__nodouble _p_Elt_T _p_L_mem) 
       (Sequence__remove _p_Elt_T)) 
    (SequenceAsSet__remove_smaller _p_Elt_T _p_L_mem _p_L_mem_spec 
       (Sequence__remove _p_Elt_T)) 
    (Collection__add_contains1 _p_Elt_T (basics.list__t _p_Elt_T) 
       (SequenceAsSet__add _p_Elt_T _p_L_mem) 
       (Sequence__contains _p_Elt_T _p_L_mem) 
       (SequenceAsSet__add_contains _p_Elt_T (basics.list__t _p_Elt_T) 
          (SequenceAsSet__add _p_Elt_T _p_L_mem) 
          (Sequence__contains _p_Elt_T _p_L_mem))) 
    (Collection__add_contains2 _p_Elt_T (basics.list__t _p_Elt_T) 
       (SequenceAsSet__add _p_Elt_T _p_L_mem) 
       (Sequence__contains _p_Elt_T _p_L_mem) 
       (SequenceAsSet__add_contains _p_Elt_T (basics.list__t _p_Elt_T) 
          (SequenceAsSet__add _p_Elt_T _p_L_mem) 
          (Sequence__contains _p_Elt_T _p_L_mem))) 
    (SequenceAsSet__unique_contains _p_Elt_T _p_L_mem _p_L_mem_empty_spec 
       _p_L_mem_spec (SequenceAsSet__nodouble _p_Elt_T _p_L_mem) 
       (Sequence__contains _p_Elt_T _p_L_mem) (Sequence__remove _p_Elt_T) 
       (Sequence__tolist_contains _p_Elt_T _p_L_mem) 
       (SequenceAsSet__nodouble_list_inv _p_Elt_T (basics.list__t _p_Elt_T) 
          (SequenceAsSet__nodouble _p_Elt_T _p_L_mem) 
          (SequenceAsSet__torep _p_Elt_T))).

def UniqueSeqIterator__model_step_unique :
  _p_Elt_T:cc.uT ->
  _p_LCol_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_LCol_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.forall _p_LCol_T 
                      (c:(cc.eT _p_LCol_T) =>
                       dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                            (dk_logic.imp 
                               (dk_logic.ebP 
                                  (basics._equal_ 
                                     (dk_tuple.prod _p_Elt_T abst_T) 
                                     (abst_step_it it) 
                                     (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                               (dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.ebP 
                                     (basics._tilda__tilda_ (_p_L_mem l2 e)))))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_LCol_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_LCol_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.forall _p_LCol_T 
                      (c:(cc.eT _p_LCol_T) =>
                       dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                            (dk_logic.imp 
                               (dk_logic.ebP 
                                  (basics._equal_ 
                                     (dk_tuple.prod _p_Elt_T abst_T) 
                                     (abst_step_it it) 
                                     (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                               (dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.ebP 
                                     (basics._tilda__tilda_ (_p_L_mem l2 e))))))))))))).

__partial__t : __var_a:cc.uT -> Type.

def partial__t : __var_a:cc.uT -> cc.uT.

[__var_a] cc.eT (partial__t __var_a) --> __partial__t __var_a.

PFailed : __var_a:cc.uT -> cc.eT (partial__t __var_a).

PUnfailed : __var_a:cc.uT -> (cc.eT __var_a) -> cc.eT (partial__t __var_a).

def match__PFailed :
  __var_a:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (partial__t __var_a)) ->
  (cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, Ret_type, __var_a]
  match__PFailed __var_a Ret_type (PFailed __var_a) pattern default
  -->
  pattern.

[default, pattern, x_0_, Ret_type, __var_a]
  match__PFailed __var_a Ret_type (PUnfailed __var_a x_0_) pattern default
  -->
  default.

def match__PUnfailed :
  __var_a:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (partial__t __var_a)) ->
  ((cc.eT __var_a) -> cc.eT Ret_type) -> (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, Ret_type, __var_a]
  match__PUnfailed __var_a Ret_type (PFailed __var_a) pattern default
  -->
  default.

[default, pattern, x_0_, Ret_type, __var_a]
  match__PUnfailed __var_a Ret_type (PUnfailed __var_a x_0_) pattern default
  -->
  pattern x_0_.

def call_by_value_partial__t :
  __var_a:cc.uT ->
  R:cc.uT ->
  ((cc.eT (partial__t __var_a)) -> cc.eT R) ->
  (cc.eT (partial__t __var_a)) -> cc.eT R.

[f, R, __var_a]
  dk_builtins.call_by_value (partial__t __var_a) R f (PFailed _)
  -->
  f (PFailed __var_a).

[x_0_, f, R, __var_a]
  dk_builtins.call_by_value (partial__t __var_a) R f (PUnfailed _ x_0_)
  -->
  f (PUnfailed __var_a x_0_).

def RemovableGenericIterator__get_iterator :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  it:(cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  cc.eT _p_It_T
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  it:
  (cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  dk_tuple.match__pair _p_It_T 
    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) _p_It_T it 
    (pattern_var_0_:(cc.eT _p_It_T) =>
     pattern_var_1_:(cc.eT (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) =>
     (i:(cc.eT _p_It_T) => i) pattern_var_0_) (dk_fail.fail _p_It_T).

def RemovableGenericIterator__get_collection :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  it:(cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  cc.eT _p_Col_T
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  it:
  (cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  dk_tuple.match__pair _p_It_T 
    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) _p_Col_T it 
    (pattern_var_0_:(cc.eT _p_It_T) =>
     pattern_var_1_:(cc.eT (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) =>
     (_i:(cc.eT _p_It_T) =>
      (re:(cc.eT (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) =>
       dk_tuple.match__pair (partial__t _p_Elt_T) _p_Col_T _p_Col_T re 
         (pattern_var_0_0:(cc.eT (partial__t _p_Elt_T)) =>
          pattern_var_1_0:(cc.eT _p_Col_T) =>
          (_e:(cc.eT (partial__t _p_Elt_T)) =>
           (col:(cc.eT _p_Col_T) => col) pattern_var_1_0) pattern_var_0_0) 
         (dk_fail.fail _p_Col_T)) pattern_var_1_) pattern_var_0_) 
    (dk_fail.fail _p_Col_T).

def RemovableGenericIterator__has_next :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) ->
  it:(cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  cc.eT basics.bool__t
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) =>
  it:
  (cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  dk_tuple.match__pair _p_It_T 
    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) basics.bool__t it 
    (pattern_var_0_:(cc.eT _p_It_T) =>
     pattern_var_1_:(cc.eT (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) =>
     (i:(cc.eT _p_It_T) => _p_It_has_next i) pattern_var_0_) 
    (dk_fail.fail basics.bool__t).

def RemovableGenericIterator__measure_it :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) ->
  it:(cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  cc.eT basics.int__t
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_measure_it:((cc.eT _p_It_T) -> cc.eT basics.int__t) =>
  it:
  (cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  dk_tuple.match__pair _p_It_T 
    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) basics.int__t it 
    (pattern_var_0_:(cc.eT _p_It_T) =>
     pattern_var_1_:(cc.eT (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) =>
     (i:(cc.eT _p_It_T) => _p_It_measure_it i) pattern_var_0_) 
    (dk_fail.fail basics.int__t).

def RemovableGenericIterator__model :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_model:((cc.eT _p_It_T) ->
               (cc.eT _p_Col_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_get_iterator:((cc.eT 
                        (dk_tuple.prod _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
                     cc.eT _p_It_T) ->
  it:(cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  c:(cc.eT _p_Col_T) -> l:(cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_model:
  ((cc.eT _p_It_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_get_iterator:
  ((cc.eT 
      (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
   cc.eT _p_It_T) =>
  it:
  (cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  c:(cc.eT _p_Col_T) =>
  l:(cc.eT (basics.list__t _p_Elt_T)) =>
  _p_It_model (abst_get_iterator it) c l.

def RemovableGenericIterator__remove :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_Col_remove:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) ->
  it:(cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  cc.eT 
    (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_Col_remove:((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT _p_Col_T) =>
  it:
  (cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  (i:(cc.eT _p_It_T) =>
   (re:(cc.eT (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) =>
    (e:(cc.eT (partial__t _p_Elt_T)) =>
     (col:(cc.eT _p_Col_T) =>
      match__PFailed _p_Elt_T 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
        e it 
        (match__PUnfailed _p_Elt_T 
           (dk_tuple.prod _p_It_T 
              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) e 
           (pattern_var_0_:(cc.eT _p_Elt_T) =>
            (x:(cc.eT _p_Elt_T) =>
             dk_tuple.pair _p_It_T 
               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) i 
               (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                  (PFailed _p_Elt_T) (_p_Col_remove x col))) pattern_var_0_) 
           (dk_fail.fail 
              (dk_tuple.prod _p_It_T 
                 (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))))) 
       (basics.snd (partial__t _p_Elt_T) _p_Col_T re)) 
      (basics.fst (partial__t _p_Elt_T) _p_Col_T re)) 
     (basics.snd _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it)) 
    (basics.fst _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it).

def RemovableGenericIterator__start :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) ->
  c:(cc.eT _p_Col_T) ->
  cc.eT 
    (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) =>
  c:(cc.eT _p_Col_T) =>
  dk_tuple.pair _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
    (_p_It_start c) 
    (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T (PFailed _p_Elt_T) c).

def RemovableGenericIterator__step_it :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_step_it:((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) ->
  abst_has_next:((cc.eT 
                    (dk_tuple.prod _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
                 cc.eT basics.bool__t) ->
  it:(cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  cc.eT 
    (dk_tuple.prod _p_Elt_T 
       (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_step_it:
  ((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
  abst_has_next:
  ((cc.eT 
      (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
   cc.eT basics.bool__t) =>
  it:
  (cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  dk_bool.ite 
    (dk_tuple.prod _p_Elt_T 
       (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) 
    (abst_has_next it) 
    ((c:(cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
      dk_tuple.pair _p_Elt_T 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
        (basics.fst _p_Elt_T _p_It_T c) 
        (dk_tuple.pair _p_It_T 
           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
           (basics.snd _p_Elt_T _p_It_T c) 
           (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
              (PUnfailed _p_Elt_T (basics.fst _p_Elt_T _p_It_T c)) 
              (basics.snd (partial__t _p_Elt_T) _p_Col_T 
                 (basics.snd _p_It_T 
                    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it))))) 
       (_p_It_step_it 
          (basics.fst _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
             it))) 
    (basics.focalize_error 
       (dk_tuple.prod _p_Elt_T 
          (dk_tuple.prod _p_It_T 
             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) 
       (builtins.string_cons 
          (builtins.char_of_nat 
             (builtins.S 
                (builtins.S 
                   (builtins.S 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
          (builtins.string_cons 
             (builtins.char_of_nat 
                (builtins.S 
                   (builtins.S 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
             (builtins.string_cons 
                (builtins.char_of_nat 
                   (builtins.S 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))) 
                (builtins.string_cons 
                   (builtins.char_of_nat 
                      (builtins.S 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                   (builtins.string_cons 
                      (builtins.char_of_nat 
                         (builtins.S 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                      (builtins.string_cons 
                         (builtins.char_of_nat 
                            (builtins.S 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                         (builtins.string_cons 
                            (builtins.char_of_nat 
                               (builtins.S 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                            (builtins.string_cons 
                               (builtins.char_of_nat 
                                  (builtins.S 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))) 
                               (builtins.string_cons 
                                  (builtins.char_of_nat 
                                     (builtins.S 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                  (builtins.string_cons 
                                     (builtins.char_of_nat 
                                        (builtins.S 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                     (builtins.string_cons 
                                        (builtins.char_of_nat 
                                           (builtins.S 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                        (builtins.string_cons 
                                           (builtins.char_of_nat 
                                              (builtins.S 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                           (builtins.string_cons 
                                              (builtins.char_of_nat 
                                                 (builtins.S 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                              (builtins.string_cons 
                                                 (builtins.char_of_nat 
                                                    (builtins.S 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                                 (builtins.string_cons 
                                                    (builtins.char_of_nat 
                                                       (builtins.S 
                                                          (builtins.S 
                                                             (builtins.S 
                                                                (builtins.S 
                                                                   (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    (builtins.S 
                                                                    builtins.0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
                                                    builtins.string_nil)))))))))))))))).

def RemovableGenericIterator__model_has_next_false :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_Col_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall _p_Col_T 
             (c:(cc.eT _p_Col_T) =>
              dk_logic.imp (abst_model it c l) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ basics.bool__t (abst_has_next it) 
                         dk_bool.false)) 
                   (dk_logic.ebP 
                      (basics._equal_ (basics.list__t _p_Elt_T) l 
                         (builtins.nil _p_Elt_T))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall _p_Col_T 
             (c:(cc.eT _p_Col_T) =>
              dk_logic.imp (abst_model it c l) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ basics.bool__t (abst_has_next it) 
                         dk_bool.false)) 
                   (dk_logic.ebP 
                      (basics._equal_ (basics.list__t _p_Elt_T) l 
                         (builtins.nil _p_Elt_T)))))))).

def RemovableGenericIterator__model_has_next_true :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_Col_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall _p_Col_T 
             (c:(cc.eT _p_Col_T) =>
              dk_logic.imp (abst_model it c l) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ basics.bool__t (abst_has_next it) 
                         dk_bool.true)) 
                   (dk_logic.ebP 
                      (basics._tilda__tilda_ 
                         (basics._equal_ (basics.list__t _p_Elt_T) l 
                            (builtins.nil _p_Elt_T)))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall _p_Col_T 
             (c:(cc.eT _p_Col_T) =>
              dk_logic.imp (abst_model it c l) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (basics._equal_ basics.bool__t (abst_has_next it) 
                         dk_bool.true)) 
                   (dk_logic.ebP 
                      (basics._tilda__tilda_ 
                         (basics._equal_ (basics.list__t _p_Elt_T) l 
                            (builtins.nil _p_Elt_T))))))))).

def RemovableGenericIterator__remove_idempotent :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  abst_T:cc.uT ->
  abst_remove:((cc.eT abst_T) -> cc.eT abst_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.ebP 
          (basics._equal_ abst_T (abst_remove (abst_remove it)) 
             (abst_remove it))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  abst_T:cc.uT =>
  abst_remove:((cc.eT abst_T) -> cc.eT abst_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.ebP 
          (basics._equal_ abst_T (abst_remove (abst_remove it)) 
             (abst_remove it)))).

def RemovableGenericIterator__model_start :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_Col_tolist:((cc.eT _p_Col_T) -> cc.eT (basics.list__t _p_Elt_T)) ->
  _p_It_model:((cc.eT _p_It_T) ->
               (cc.eT _p_Col_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) ->
  _p_It_model_start:(dk_logic.eP 
                       (dk_logic.forall _p_Col_T 
                          (c:(cc.eT _p_Col_T) =>
                           _p_It_model (_p_It_start c) c (_p_Col_tolist c)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_Col_T 
       (c:(cc.eT _p_Col_T) =>
        RemovableGenericIterator__model _p_Elt_T _p_Col_T _p_It_T 
          _p_It_model 
          (RemovableGenericIterator__get_iterator _p_Elt_T _p_Col_T _p_It_T) 
          (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
             _p_It_start c) c (_p_Col_tolist c)))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_Col_tolist:((cc.eT _p_Col_T) -> cc.eT (basics.list__t _p_Elt_T)) =>
  _p_It_model:
  ((cc.eT _p_It_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) =>
  _p_It_model_start:
  (dk_logic.eP 
     (dk_logic.forall _p_Col_T 
        (c:(cc.eT _p_Col_T) =>
         _p_It_model (_p_It_start c) c (_p_Col_tolist c)))) =>
  zen.nnpp 
    (zen.forall _p_Col_T 
       (v_Vzb:(zen.term _p_Col_T) =>
        zen.triangle 
          (RemovableGenericIterator__model _p_Elt_T _p_Col_T _p_It_T 
             _p_It_model 
             (RemovableGenericIterator__get_iterator _p_Elt_T _p_Col_T 
                _p_It_T) 
             (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                _p_It_start v_Vzb) v_Vzb (_p_Col_tolist v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_Col_T 
              (v_Vzb:(zen.term _p_Col_T) =>
               zen.triangle 
                 (RemovableGenericIterator__model _p_Elt_T _p_Col_T _p_It_T 
                    _p_It_model 
                    (RemovableGenericIterator__get_iterator _p_Elt_T 
                       _p_Col_T _p_It_T) 
                    (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                       _p_It_T _p_It_start v_Vzb) v_Vzb (_p_Col_tolist v_Vzb)))))) =>
     zen.Rnotall _p_Col_T 
       (v_Vzb:(zen.term _p_Col_T) =>
        zen.triangle 
          (RemovableGenericIterator__model _p_Elt_T _p_Col_T _p_It_T 
             _p_It_model 
             (RemovableGenericIterator__get_iterator _p_Elt_T _p_Col_T 
                _p_It_T) 
             (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                _p_It_start v_Vzb) v_Vzb (_p_Col_tolist v_Vzb))) 
       (v_Vbc:(zen.term _p_Col_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (_p_It_model (_p_It_start v_Vbc) v_Vbc (_p_Col_tolist v_Vbc))))) =>
        zen.Rall _p_Col_T 
          (v_Vzb:(zen.term _p_Col_T) =>
           zen.triangle 
             (_p_It_model (_p_It_start v_Vzb) v_Vzb (_p_Col_tolist v_Vzb))) 
          v_Vbc 
          (v_Vdc:
           (zen.proof 
              (zen.triangle 
                 (_p_It_model (_p_It_start v_Vbc) v_Vbc (_p_Col_tolist v_Vbc)))) =>
           zen.Raxiom 
             (zen.triangle 
                (_p_It_model (_p_It_start v_Vbc) v_Vbc (_p_Col_tolist v_Vbc))) 
             v_Vdc v_Vcc) _p_It_model_start) v_Vac).

def RemovableGenericIterator__remove_initial_false :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) ->
  abst_remove:((cc.eT 
                  (dk_tuple.prod _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
               cc.eT 
                 (dk_tuple.prod _p_It_T 
                    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
  dk_logic.eP 
    (dk_logic.forall _p_Col_T 
       (c:(cc.eT _p_Col_T) =>
        dk_logic.ebP 
          (basics._equal_ 
             (dk_tuple.prod _p_It_T 
                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
             (abst_remove 
                (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                   _p_It_start c)) 
             (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                _p_It_start c))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_It_start:((cc.eT _p_Col_T) -> cc.eT _p_It_T) =>
  abst_remove:
  ((cc.eT 
      (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
   cc.eT 
     (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
  (__BF_1_LEMMA:
   (c:(cc.eT _p_Col_T) ->
    it:(cc.eT 
          (dk_tuple.prod _p_It_T 
             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
    It:(dk_logic.eP 
          (dk_logic.ebP 
             (basics._equal_ 
                (dk_tuple.prod _p_It_T 
                   (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
                (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                   _p_It_start c)))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (basics._equal_ 
            (dk_tuple.prod _p_It_T 
               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
            (abst_remove it) it))) =>
   zen.nnpp 
     (zen.forall _p_Col_T 
        (v_Vzb:(zen.term _p_Col_T) =>
         zen.triangle 
           (focal.is_true 
              (basics._equal_ 
                 (dk_tuple.prod _p_It_T 
                    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                 (abst_remove 
                    (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                       _p_It_T _p_It_start v_Vzb)) 
                 (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                    _p_It_start v_Vzb))))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall _p_Col_T 
               (v_Vzb:(zen.term _p_Col_T) =>
                zen.triangle 
                  (focal.is_true 
                     (basics._equal_ 
                        (dk_tuple.prod _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                        (abst_remove 
                           (RemovableGenericIterator__start _p_Elt_T 
                              _p_Col_T _p_It_T _p_It_start v_Vzb)) 
                        (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                           _p_It_T _p_It_start v_Vzb))))))) =>
      zen.Rnotall _p_Col_T 
        (v_Vzb:(zen.term _p_Col_T) =>
         zen.triangle 
           (focal.is_true 
              (basics._equal_ 
                 (dk_tuple.prod _p_It_T 
                    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                 (abst_remove 
                    (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                       _p_It_T _p_It_start v_Vzb)) 
                 (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                    _p_It_start v_Vzb)))) 
        (v_Vbc:(zen.term _p_Col_T) =>
         v_Vcc:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (basics.syntactic_equal 
                        (dk_tuple.prod _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                        (abst_remove 
                           (RemovableGenericIterator__start _p_Elt_T 
                              _p_Col_T _p_It_T _p_It_start v_Vbc)) 
                        (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                           _p_It_T _p_It_start v_Vbc)))))) =>
         zen.Rall _p_Col_T 
           (v_Vzb:(zen.term _p_Col_T) =>
            zen.forall 
              (dk_tuple.prod _p_It_T 
                 (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
              (v_Vdc:
               (zen.term 
                  (dk_tuple.prod _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          v_Vdc 
                          (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                             _p_It_T _p_It_start v_Vzb)))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          (abst_remove v_Vdc) v_Vdc))))) v_Vbc 
           (v_Vec:
            (zen.proof 
               (zen.forall 
                  (dk_tuple.prod _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                  (v_Vdc:
                   (zen.term 
                      (dk_tuple.prod _p_It_T 
                         (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
                   zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) v_Vdc 
                              (RemovableGenericIterator__start _p_Elt_T 
                                 _p_Col_T _p_It_T _p_It_start v_Vbc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) (abst_remove v_Vdc) v_Vdc)))))) =>
            zen.Rall 
              (dk_tuple.prod _p_It_T 
                 (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
              (v_Vdc:
               (zen.term 
                  (dk_tuple.prod _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
               zen.imp 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          v_Vdc 
                          (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                             _p_It_T _p_It_start v_Vbc)))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          (abst_remove v_Vdc) v_Vdc)))) 
              (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                 _p_It_start v_Vbc) 
              (v_Vfc:
               (zen.proof 
                  (zen.imp 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) 
                              (RemovableGenericIterator__start _p_Elt_T 
                                 _p_Col_T _p_It_T _p_It_start v_Vbc) 
                              (RemovableGenericIterator__start _p_Elt_T 
                                 _p_Col_T _p_It_T _p_It_start v_Vbc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (basics._equal_ 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) 
                              (abst_remove 
                                 (RemovableGenericIterator__start _p_Elt_T 
                                    _p_Col_T _p_It_T _p_It_start v_Vbc)) 
                              (RemovableGenericIterator__start _p_Elt_T 
                                 _p_Col_T _p_It_T _p_It_start v_Vbc)))))) =>
               zen.Rimply 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                             _p_It_T _p_It_start v_Vbc) 
                          (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                             _p_It_T _p_It_start v_Vbc)))) 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._equal_ 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          (abst_remove 
                             (RemovableGenericIterator__start _p_Elt_T 
                                _p_Col_T _p_It_T _p_It_start v_Vbc)) 
                          (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                             _p_It_T _p_It_start v_Vbc)))) 
                 (v_Vgc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (basics.syntactic_equal 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T)) 
                                 (RemovableGenericIterator__start _p_Elt_T 
                                    _p_Col_T _p_It_T _p_It_start v_Vbc) 
                                 (RemovableGenericIterator__start _p_Elt_T 
                                    _p_Col_T _p_It_T _p_It_start v_Vbc)))))) =>
                  focal.zenon_not_syntactic_equal 
                    (dk_tuple.prod _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                    (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                       _p_It_T _p_It_start v_Vbc) 
                    (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                       _p_It_T _p_It_start v_Vbc) 
                    (v_Vhc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T)) 
                                 (RemovableGenericIterator__start _p_Elt_T 
                                    _p_Col_T _p_It_T _p_It_start v_Vbc) 
                                 (RemovableGenericIterator__start _p_Elt_T 
                                    _p_Col_T _p_It_T _p_It_start v_Vbc))))) =>
                     zen.Rnoteq 
                       (dk_tuple.prod _p_It_T 
                          (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                       (RemovableGenericIterator__start _p_Elt_T _p_Col_T 
                          _p_It_T _p_It_start v_Vbc) v_Vhc) v_Vgc) 
                 (v_Vic:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (basics.syntactic_equal 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) 
                              (abst_remove 
                                 (RemovableGenericIterator__start _p_Elt_T 
                                    _p_Col_T _p_It_T _p_It_start v_Vbc)) 
                              (RemovableGenericIterator__start _p_Elt_T 
                                 _p_Col_T _p_It_T _p_It_start v_Vbc))))) =>
                  zen.Raxiom 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._equal_ 
                             (dk_tuple.prod _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                             (abst_remove 
                                (RemovableGenericIterator__start _p_Elt_T 
                                   _p_Col_T _p_It_T _p_It_start v_Vbc)) 
                             (RemovableGenericIterator__start _p_Elt_T 
                                _p_Col_T _p_It_T _p_It_start v_Vbc)))) v_Vic 
                    v_Vcc) v_Vfc) v_Vec) __BF_1_LEMMA) v_Vac)) 
    (c:(cc.eT _p_Col_T) =>
     it:
     (cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
     It:
     (dk_logic.eP 
        (dk_logic.ebP 
           (basics._equal_ 
              (dk_tuple.prod _p_It_T 
                 (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
              (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                 _p_It_start c)))) =>
     (__BF_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._equal_ 
               (dk_tuple.prod _p_It_T 
                  (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
               (dk_tuple.pair _p_It_T 
                  (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                  (_p_It_start c) 
                  (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                     (PFailed _p_Elt_T) c))))) =>
      (__BF_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (basics._equal_ 
                (dk_tuple.prod _p_It_T 
                   (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                (abst_remove 
                   (dk_tuple.pair _p_It_T 
                      (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                      (_p_It_start c) 
                      (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                         (PFailed _p_Elt_T) c))) 
                (dk_tuple.pair _p_It_T 
                   (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                   (_p_It_start c) 
                   (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                      (PFailed _p_Elt_T) c))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (basics._equal_ 
                  (dk_tuple.prod _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                  (abst_remove it) it))) 
         (v_Vec:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (basics.syntactic_equal 
                         (dk_tuple.prod _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                         (abst_remove it) it))))) =>
          focal.zenon_syntactic_equal 
            (dk_tuple.prod _p_It_T 
               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
            (dk_tuple.pair _p_It_T 
               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
               (_p_It_start c) 
               (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                  (PFailed _p_Elt_T) c)) 
            (v_Vfc:
             (zen.proof 
                (zen.triangle 
                   (zen.equal 
                      (dk_tuple.prod _p_It_T 
                         (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
                      (basics.pair _p_It_T 
                         (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                         (_p_It_start c) 
                         (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                            (PFailed _p_Elt_T) c))))) =>
             focal.zenon_syntactic_equal 
               (dk_tuple.prod _p_It_T 
                  (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
               (abst_remove 
                  (dk_tuple.pair _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                     (_p_It_start c) 
                     (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                        (PFailed _p_Elt_T) c))) 
               (dk_tuple.pair _p_It_T 
                  (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                  (_p_It_start c) 
                  (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                     (PFailed _p_Elt_T) c)) 
               (v_Vgc:
                (zen.proof 
                   (zen.triangle 
                      (zen.equal 
                         (dk_tuple.prod _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                         (abst_remove 
                            (basics.pair _p_It_T 
                               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                               (_p_It_start c) 
                               (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                                  (PFailed _p_Elt_T) c))) 
                         (basics.pair _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                            (_p_It_start c) 
                            (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                               (PFailed _p_Elt_T) c))))) =>
                focal.zenon_not_syntactic_equal 
                  (dk_tuple.prod _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                  (abst_remove it) it 
                  (v_Vhc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal 
                               (dk_tuple.prod _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T)) (abst_remove it) it)))) =>
                   zen.Rsubst 
                     (dk_tuple.prod _p_It_T 
                        (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                     (v_Vic:
                      (zen.term 
                         (dk_tuple.prod _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
                      zen.triangle 
                        (zen.equal 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           v_Vic 
                           (basics.pair _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                              (_p_It_start c) 
                              (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                                 (PFailed _p_Elt_T) c)))) 
                     (abst_remove 
                        (basics.pair _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                           (_p_It_start c) 
                           (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                              (PFailed _p_Elt_T) c))) (abst_remove it) 
                     (v_Vjc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal 
                                  (dk_tuple.prod _p_It_T 
                                     (dk_tuple.prod (partial__t _p_Elt_T) 
                                        _p_Col_T)) 
                                  (abst_remove 
                                     (basics.pair _p_It_T 
                                        (dk_tuple.prod (partial__t _p_Elt_T) 
                                           _p_Col_T) (_p_It_start c) 
                                        (basics.pair (partial__t _p_Elt_T) 
                                           _p_Col_T (PFailed _p_Elt_T) c))) 
                                  (abst_remove it))))) =>
                      zen.Rcut 
                        (zen.triangle 
                           (zen.equal 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) (abst_remove it) 
                              (abst_remove it))) 
                        (v_Vkc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal 
                                  (dk_tuple.prod _p_It_T 
                                     (dk_tuple.prod (partial__t _p_Elt_T) 
                                        _p_Col_T)) (abst_remove it) 
                                  (abst_remove it)))) =>
                         zen.Rsubst 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           (v_Vlc:
                            (zen.term 
                               (dk_tuple.prod _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T))) =>
                            zen.triangle 
                              (zen.equal 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T)) v_Vlc (abst_remove it))) 
                           (abst_remove it) 
                           (abst_remove 
                              (basics.pair _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T) (_p_It_start c) 
                                 (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                                    (PFailed _p_Elt_T) c))) 
                           (v_Vmc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal 
                                        (dk_tuple.prod _p_It_T 
                                           (dk_tuple.prod 
                                              (partial__t _p_Elt_T) _p_Col_T)) 
                                        (abst_remove it) 
                                        (abst_remove 
                                           (basics.pair _p_It_T 
                                              (dk_tuple.prod 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T) (_p_It_start c) 
                                              (basics.pair 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T (PFailed _p_Elt_T) 
                                                 c))))))) =>
                            zen.Rsubst 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) 
                              (v_Vnc:
                               (zen.term 
                                  (dk_tuple.prod _p_It_T 
                                     (dk_tuple.prod (partial__t _p_Elt_T) 
                                        _p_Col_T))) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal 
                                       (dk_tuple.prod _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T)) 
                                       (abst_remove v_Vnc) 
                                       (abst_remove 
                                          (basics.pair _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T) (_p_It_start c) 
                                             (basics.pair 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T (PFailed _p_Elt_T) c)))))) 
                              it 
                              (basics.pair _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T) (_p_It_start c) 
                                 (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                                    (PFailed _p_Elt_T) c)) 
                              (v_Voc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal 
                                           (dk_tuple.prod _p_It_T 
                                              (dk_tuple.prod 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T)) it 
                                           (basics.pair _p_It_T 
                                              (dk_tuple.prod 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T) (_p_It_start c) 
                                              (basics.pair 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T (PFailed _p_Elt_T) 
                                                 c)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal 
                                       (dk_tuple.prod _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T)) 
                                       it 
                                       (basics.pair _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T) 
                                          (_p_It_start c) 
                                          (basics.pair (partial__t _p_Elt_T) 
                                             _p_Col_T (PFailed _p_Elt_T) c)))) 
                                 v_Vfc v_Voc) 
                              (v_Vpc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal 
                                           (dk_tuple.prod _p_It_T 
                                              (dk_tuple.prod 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T)) 
                                           (abst_remove 
                                              (basics.pair _p_It_T 
                                                 (dk_tuple.prod 
                                                    (partial__t _p_Elt_T) 
                                                    _p_Col_T) 
                                                 (_p_It_start c) 
                                                 (basics.pair 
                                                    (partial__t _p_Elt_T) 
                                                    _p_Col_T 
                                                    (PFailed _p_Elt_T) c))) 
                                           (abst_remove 
                                              (basics.pair _p_It_T 
                                                 (dk_tuple.prod 
                                                    (partial__t _p_Elt_T) 
                                                    _p_Col_T) 
                                                 (_p_It_start c) 
                                                 (basics.pair 
                                                    (partial__t _p_Elt_T) 
                                                    _p_Col_T 
                                                    (PFailed _p_Elt_T) c))))))) =>
                               zen.Rnoteq 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T)) 
                                 (abst_remove 
                                    (basics.pair _p_It_T 
                                       (dk_tuple.prod (partial__t _p_Elt_T) 
                                          _p_Col_T) (_p_It_start c) 
                                       (basics.pair (partial__t _p_Elt_T) 
                                          _p_Col_T (PFailed _p_Elt_T) c))) 
                                 v_Vpc) v_Vmc) 
                           (v_Vqc:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal 
                                     (dk_tuple.prod _p_It_T 
                                        (dk_tuple.prod (partial__t _p_Elt_T) 
                                           _p_Col_T)) 
                                     (abst_remove 
                                        (basics.pair _p_It_T 
                                           (dk_tuple.prod 
                                              (partial__t _p_Elt_T) _p_Col_T) 
                                           (_p_It_start c) 
                                           (basics.pair 
                                              (partial__t _p_Elt_T) _p_Col_T 
                                              (PFailed _p_Elt_T) c))) 
                                     (abst_remove it)))) =>
                            zen.Rsubst 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) 
                              (v_Vrc:
                               (zen.term 
                                  (dk_tuple.prod _p_It_T 
                                     (dk_tuple.prod (partial__t _p_Elt_T) 
                                        _p_Col_T))) =>
                               zen.triangle 
                                 (zen.equal 
                                    (dk_tuple.prod _p_It_T 
                                       (dk_tuple.prod (partial__t _p_Elt_T) 
                                          _p_Col_T)) 
                                    (abst_remove 
                                       (basics.pair _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T) 
                                          (_p_It_start c) 
                                          (basics.pair (partial__t _p_Elt_T) 
                                             _p_Col_T (PFailed _p_Elt_T) c))) 
                                    v_Vrc)) (abst_remove it) 
                              (abst_remove it) 
                              (v_Vsc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal 
                                           (dk_tuple.prod _p_It_T 
                                              (dk_tuple.prod 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T)) (abst_remove it) 
                                           (abst_remove it))))) =>
                               zen.Rnoteq 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T)) (abst_remove it) v_Vsc) 
                              (v_Vqc0:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal 
                                        (dk_tuple.prod _p_It_T 
                                           (dk_tuple.prod 
                                              (partial__t _p_Elt_T) _p_Col_T)) 
                                        (abst_remove 
                                           (basics.pair _p_It_T 
                                              (dk_tuple.prod 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T) (_p_It_start c) 
                                              (basics.pair 
                                                 (partial__t _p_Elt_T) 
                                                 _p_Col_T (PFailed _p_Elt_T) 
                                                 c))) (abst_remove it)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (zen.equal 
                                       (dk_tuple.prod _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T)) 
                                       (abst_remove 
                                          (basics.pair _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T) (_p_It_start c) 
                                             (basics.pair 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T (PFailed _p_Elt_T) c))) 
                                       (abst_remove it))) v_Vqc0 v_Vjc) v_Vqc) 
                           v_Vkc) 
                        (v_Vsc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal 
                                     (dk_tuple.prod _p_It_T 
                                        (dk_tuple.prod (partial__t _p_Elt_T) 
                                           _p_Col_T)) (abst_remove it) 
                                     (abst_remove it))))) =>
                         zen.Rnoteq 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           (abst_remove it) v_Vsc)) 
                     (v_Vtc:
                      (zen.proof 
                         (zen.triangle 
                            (zen.equal 
                               (dk_tuple.prod _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T)) (abst_remove it) 
                               (basics.pair _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T) (_p_It_start c) 
                                  (basics.pair (partial__t _p_Elt_T) 
                                     _p_Col_T (PFailed _p_Elt_T) c))))) =>
                      zen.Rsubst 
                        (dk_tuple.prod _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                        (v_Vuc:
                         (zen.term 
                            (dk_tuple.prod _p_It_T 
                               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
                         zen.triangle 
                           (zen.equal 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) (abst_remove it) v_Vuc)) 
                        (basics.pair _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                           (_p_It_start c) 
                           (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                              (PFailed _p_Elt_T) c)) it 
                        (v_Vvc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal 
                                     (dk_tuple.prod _p_It_T 
                                        (dk_tuple.prod (partial__t _p_Elt_T) 
                                           _p_Col_T)) 
                                     (basics.pair _p_It_T 
                                        (dk_tuple.prod (partial__t _p_Elt_T) 
                                           _p_Col_T) (_p_It_start c) 
                                        (basics.pair (partial__t _p_Elt_T) 
                                           _p_Col_T (PFailed _p_Elt_T) c)) it)))) =>
                         zen.Reqsym 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           it 
                           (basics.pair _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                              (_p_It_start c) 
                              (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                                 (PFailed _p_Elt_T) c)) v_Vfc v_Vvc) 
                        (v_Vwc:
                         (zen.proof 
                            (zen.triangle 
                               (zen.equal 
                                  (dk_tuple.prod _p_It_T 
                                     (dk_tuple.prod (partial__t _p_Elt_T) 
                                        _p_Col_T)) (abst_remove it) it))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (zen.equal 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T)) (abst_remove it) it)) 
                           v_Vwc v_Vhc) v_Vtc) v_Vgc) v_Vec) __BF_1_2_LEMMA) 
            __BF_1_1_LEMMA)) 
        (dk_builtins.magic_prove 
           (dk_logic.ebP 
              (basics._equal_ 
                 (dk_tuple.prod _p_It_T 
                    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                 (abst_remove 
                    (dk_tuple.pair _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                       (_p_It_start c) 
                       (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                          (PFailed _p_Elt_T) c))) 
                 (dk_tuple.pair _p_It_T 
                    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                    (_p_It_start c) 
                    (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                       (PFailed _p_Elt_T) c)))))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (basics._equal_ 
                   (dk_tuple.prod _p_It_T 
                      (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
                   (dk_tuple.pair _p_It_T 
                      (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                      (_p_It_start c) 
                      (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                         (PFailed _p_Elt_T) c))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (basics.syntactic_equal 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          it 
                          (basics.pair _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                             (_p_It_start c) 
                             (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                                (PFailed _p_Elt_T) c))))))) =>
           focal.zenon_syntactic_equal 
             (dk_tuple.prod _p_It_T 
                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
             (RemovableGenericIterator__start _p_Elt_T _p_Col_T _p_It_T 
                _p_It_start c) 
             (v_Vac:
              (zen.proof 
                 (zen.triangle 
                    (zen.equal 
                       (dk_tuple.prod _p_It_T 
                          (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
                       (basics.pair _p_It_T 
                          (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                          (_p_It_start c) 
                          (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                             (PFailed _p_Elt_T) c))))) =>
              focal.zenon_not_syntactic_equal 
                (dk_tuple.prod _p_It_T 
                   (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) it 
                (dk_tuple.pair _p_It_T 
                   (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                   (_p_It_start c) 
                   (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                      (PFailed _p_Elt_T) c)) 
                (v_Vbc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal 
                             (dk_tuple.prod _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                             it 
                             (basics.pair _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                                (_p_It_start c) 
                                (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                                   (PFailed _p_Elt_T) c)))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (zen.equal 
                         (dk_tuple.prod _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                         it 
                         (basics.pair _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                            (_p_It_start c) 
                            (basics.pair (partial__t _p_Elt_T) _p_Col_T 
                               (PFailed _p_Elt_T) c)))) v_Vac v_Vbc) v_Vzb) 
             It))).

def RemovableGenericIterator__model_step :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_Col_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall _p_Col_T 
                   (c:(cc.eT _p_Col_T) =>
                    dk_logic.imp (abst_model it c l) 
                      (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.ebP (_p_L_mem l e))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall _p_Col_T 
                   (c:(cc.eT _p_Col_T) =>
                    dk_logic.imp (abst_model it c l) 
                      (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.ebP (_p_L_mem l e)))))))))).

def RemovableGenericIterator__model_step_new2 :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_Col_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall _p_Col_T 
                   (c:(cc.eT _p_Col_T) =>
                    dk_logic.imp (abst_model it c l) 
                      (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.forall (basics.list__t _p_Elt_T) 
                               (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.forall _p_Elt_T 
                                     (y:(cc.eT _p_Elt_T) =>
                                      dk_logic.not 
                                        (dk_logic.imp 
                                           (dk_logic.ebP 
                                              (basics._equal_ _p_Elt_T e y)) 
                                           (dk_logic.eqv 
                                              (dk_logic.ebP (_p_L_mem l y)) 
                                              (dk_logic.ebP (_p_L_mem l2 y))))))))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall _p_Col_T 
                   (c:(cc.eT _p_Col_T) =>
                    dk_logic.imp (abst_model it c l) 
                      (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (basics._equal_ 
                                  (dk_tuple.prod _p_Elt_T abst_T) 
                                  (abst_step_it it) 
                                  (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                            (dk_logic.forall (basics.list__t _p_Elt_T) 
                               (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                                dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.forall _p_Elt_T 
                                     (y:(cc.eT _p_Elt_T) =>
                                      dk_logic.not 
                                        (dk_logic.imp 
                                           (dk_logic.ebP 
                                              (basics._equal_ _p_Elt_T e y)) 
                                           (dk_logic.eqv 
                                              (dk_logic.ebP (_p_L_mem l y)) 
                                              (dk_logic.ebP (_p_L_mem l2 y)))))))))))))))).

def RemovableGenericIterator__step_remove_spec :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_Elt_equal:((cc.eT _p_Elt_T) -> (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_Col_contains:((cc.eT _p_Elt_T) ->
                   (cc.eT _p_Col_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_get_collection:((cc.eT abst_T) -> cc.eT _p_Col_T) ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_remove:((cc.eT abst_T) -> cc.eT abst_T) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall _p_Elt_T 
       (e:(cc.eT _p_Elt_T) =>
        dk_logic.forall _p_Elt_T 
          (x:(cc.eT _p_Elt_T) =>
           dk_logic.forall abst_T 
             (it:(cc.eT abst_T) =>
              dk_logic.forall abst_T 
                (it2:(cc.eT abst_T) =>
                 dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (basics._equal_ (dk_tuple.prod _p_Elt_T abst_T) 
                            (abst_step_it it) 
                            (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics._tilda__tilda_ (_p_Elt_equal e x))) 
                         (dk_logic.eqv 
                            (dk_logic.ebP 
                               (_p_Col_contains x (abst_get_collection it))) 
                            (dk_logic.ebP 
                               (_p_Col_contains x 
                                  (abst_get_collection (abst_remove it2))))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_Elt_equal:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_Col_contains:
  ((cc.eT _p_Elt_T) -> (cc.eT _p_Col_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_get_collection:((cc.eT abst_T) -> cc.eT _p_Col_T) =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_remove:((cc.eT abst_T) -> cc.eT abst_T) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_Elt_T 
       (e:(cc.eT _p_Elt_T) =>
        dk_logic.forall _p_Elt_T 
          (x:(cc.eT _p_Elt_T) =>
           dk_logic.forall abst_T 
             (it:(cc.eT abst_T) =>
              dk_logic.forall abst_T 
                (it2:(cc.eT abst_T) =>
                 dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                   (dk_logic.imp 
                      (dk_logic.ebP 
                         (basics._equal_ (dk_tuple.prod _p_Elt_T abst_T) 
                            (abst_step_it it) 
                            (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                      (dk_logic.imp 
                         (dk_logic.ebP 
                            (basics._tilda__tilda_ (_p_Elt_equal e x))) 
                         (dk_logic.eqv 
                            (dk_logic.ebP 
                               (_p_Col_contains x (abst_get_collection it))) 
                            (dk_logic.ebP 
                               (_p_Col_contains x 
                                  (abst_get_collection (abst_remove it2)))))))))))).

def RemovableUniqueIterator__model_step_unique :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_model:((cc.eT abst_T) ->
              (cc.eT _p_Col_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.forall _p_Col_T 
                      (c:(cc.eT _p_Col_T) =>
                       dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                            (dk_logic.imp 
                               (dk_logic.ebP 
                                  (basics._equal_ 
                                     (dk_tuple.prod _p_Elt_T abst_T) 
                                     (abst_step_it it) 
                                     (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                               (dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.ebP 
                                     (basics._tilda__tilda_ (_p_L_mem l2 e)))))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_has_next:((cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT abst_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:((cc.eT abst_T) -> cc.eT (dk_tuple.prod _p_Elt_T abst_T)) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (it:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (it2:(cc.eT abst_T) =>
           dk_logic.forall _p_Elt_T 
             (e:(cc.eT _p_Elt_T) =>
              dk_logic.forall (basics.list__t _p_Elt_T) 
                (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                 dk_logic.forall (basics.list__t _p_Elt_T) 
                   (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                    dk_logic.forall _p_Col_T 
                      (c:(cc.eT _p_Col_T) =>
                       dk_logic.imp (abst_model it c l) 
                         (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                            (dk_logic.imp 
                               (dk_logic.ebP 
                                  (basics._equal_ 
                                     (dk_tuple.prod _p_Elt_T abst_T) 
                                     (abst_step_it it) 
                                     (dk_tuple.pair _p_Elt_T abst_T e it2))) 
                               (dk_logic.imp (abst_model it2 c l2) 
                                  (dk_logic.ebP 
                                     (basics._tilda__tilda_ (_p_L_mem l2 e))))))))))))).

def RemovableUniqueIterator__model_unique :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  _p_L_mem:((cc.eT (basics.list__t _p_Elt_T)) ->
            (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) ->
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) ->
  _p_It_model:((cc.eT _p_It_T) ->
               (cc.eT _p_Col_T) ->
               (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  _p_It_step_it:((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) ->
  _p_It_model_step_unique:(dk_logic.eP 
                             (dk_logic.forall _p_It_T 
                                (it:(cc.eT _p_It_T) =>
                                 dk_logic.forall _p_It_T 
                                   (it2:(cc.eT _p_It_T) =>
                                    dk_logic.forall _p_Elt_T 
                                      (e:(cc.eT _p_Elt_T) =>
                                       dk_logic.forall 
                                         (basics.list__t _p_Elt_T) 
                                         (l:
                                          (cc.eT (basics.list__t _p_Elt_T)) =>
                                          dk_logic.forall 
                                            (basics.list__t _p_Elt_T) 
                                            (l2:
                                             (cc.eT (basics.list__t _p_Elt_T)) =>
                                             dk_logic.forall _p_Col_T 
                                               (c:(cc.eT _p_Col_T) =>
                                                dk_logic.imp 
                                                  (_p_It_model it c l) 
                                                  (dk_logic.imp 
                                                     (dk_logic.ebP 
                                                        (_p_It_has_next it)) 
                                                     (dk_logic.imp 
                                                        (dk_logic.ebP 
                                                           (basics._equal_ 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 it) 
                                                              (dk_tuple.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T e 
                                                                 it2))) 
                                                        (dk_logic.imp 
                                                           (_p_It_model it2 
                                                              c l2) 
                                                           (dk_logic.ebP 
                                                              (basics._tilda__tilda_ 
                                                                 (_p_L_mem 
                                                                    l2 e)))))))))))))) ->
  abst_has_next:((cc.eT 
                    (dk_tuple.prod _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
                 cc.eT basics.bool__t) ->
  abst_model:((cc.eT 
                 (dk_tuple.prod _p_It_T 
                    (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
              (cc.eT _p_Col_T) ->
              (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) ->
  abst_step_it:((cc.eT 
                   (dk_tuple.prod _p_It_T 
                      (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
                cc.eT 
                  (dk_tuple.prod _p_Elt_T 
                     (dk_tuple.prod _p_It_T 
                        (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)))) ->
  dk_logic.eP 
    (dk_logic.forall 
       (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
       (it:
        (cc.eT 
           (dk_tuple.prod _p_It_T 
              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
        dk_logic.forall (basics.list__t _p_Elt_T) 
          (l:(cc.eT (basics.list__t _p_Elt_T)) =>
           dk_logic.forall (basics.list__t _p_Elt_T) 
             (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
              dk_logic.forall _p_Col_T 
                (c:(cc.eT _p_Col_T) =>
                 dk_logic.imp (abst_model it c l) 
                   (dk_logic.imp (dk_logic.ebP (abst_has_next it)) 
                      (dk_logic.imp 
                         (abst_model 
                            (basics.snd _p_Elt_T 
                               (dk_tuple.prod _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T)) (abst_step_it it)) c l2) 
                         (dk_logic.ebP 
                            (basics._tilda__tilda_ 
                               (_p_L_mem l2 
                                  (basics.fst _p_Elt_T 
                                     (dk_tuple.prod _p_It_T 
                                        (dk_tuple.prod (partial__t _p_Elt_T) 
                                           _p_Col_T)) (abst_step_it it))))))))))))
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  _p_L_mem:
  ((cc.eT (basics.list__t _p_Elt_T)) ->
   (cc.eT _p_Elt_T) -> cc.eT basics.bool__t) =>
  _p_It_has_next:((cc.eT _p_It_T) -> cc.eT basics.bool__t) =>
  _p_It_model:
  ((cc.eT _p_It_T) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  _p_It_step_it:
  ((cc.eT _p_It_T) -> cc.eT (dk_tuple.prod _p_Elt_T _p_It_T)) =>
  _p_It_model_step_unique:
  (dk_logic.eP 
     (dk_logic.forall _p_It_T 
        (it:(cc.eT _p_It_T) =>
         dk_logic.forall _p_It_T 
           (it2:(cc.eT _p_It_T) =>
            dk_logic.forall _p_Elt_T 
              (e:(cc.eT _p_Elt_T) =>
               dk_logic.forall (basics.list__t _p_Elt_T) 
                 (l:(cc.eT (basics.list__t _p_Elt_T)) =>
                  dk_logic.forall (basics.list__t _p_Elt_T) 
                    (l2:(cc.eT (basics.list__t _p_Elt_T)) =>
                     dk_logic.forall _p_Col_T 
                       (c:(cc.eT _p_Col_T) =>
                        dk_logic.imp (_p_It_model it c l) 
                          (dk_logic.imp (dk_logic.ebP (_p_It_has_next it)) 
                             (dk_logic.imp 
                                (dk_logic.ebP 
                                   (basics._equal_ 
                                      (dk_tuple.prod _p_Elt_T _p_It_T) 
                                      (_p_It_step_it it) 
                                      (dk_tuple.pair _p_Elt_T _p_It_T e it2))) 
                                (dk_logic.imp (_p_It_model it2 c l2) 
                                   (dk_logic.ebP 
                                      (basics._tilda__tilda_ (_p_L_mem l2 e)))))))))))))) =>
  abst_has_next:
  ((cc.eT 
      (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
   cc.eT basics.bool__t) =>
  abst_model:
  ((cc.eT 
      (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
   (cc.eT _p_Col_T) -> (cc.eT (basics.list__t _p_Elt_T)) -> dk_logic.Prop) =>
  abst_step_it:
  ((cc.eT 
      (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
   cc.eT 
     (dk_tuple.prod _p_Elt_T 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)))) =>
  (__BG_1_LEMMA:
   (it:(cc.eT 
          (dk_tuple.prod _p_It_T 
             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) ->
    l:(cc.eT (basics.list__t _p_Elt_T)) ->
    l2:(cc.eT (basics.list__t _p_Elt_T)) ->
    c:(cc.eT _p_Col_T) ->
    N:(dk_logic.eP (dk_logic.ebP (abst_has_next it))) ->
    M:(dk_logic.eP (abst_model it c l)) ->
    M2:(dk_logic.eP 
          (abst_model 
             (basics.snd _p_Elt_T 
                (dk_tuple.prod _p_It_T 
                   (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                (abst_step_it it)) c l2)) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (basics._tilda__tilda_ 
            (_p_L_mem l2 
               (basics.fst _p_Elt_T 
                  (dk_tuple.prod _p_It_T 
                     (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                  (abst_step_it it)))))) =>
   zen.nnpp 
     (zen.forall 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
        (v_Vzb:
         (zen.term 
            (dk_tuple.prod _p_It_T 
               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
         zen.forall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall (basics.list__t _p_Elt_T) 
              (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
               zen.forall _p_Col_T 
                 (v_Vcc:(zen.term _p_Col_T) =>
                  zen.imp (zen.triangle (abst_model v_Vzb v_Vcc v_Vac)) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_has_next v_Vzb))) 
                       (zen.imp 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vzb)) 
                                v_Vcc v_Vbc)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vbc 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vzb))))))))))))) 
     (v_Vdc:
      (zen.proof 
         (zen.not 
            (zen.forall 
               (dk_tuple.prod _p_It_T 
                  (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
               (v_Vzb:
                (zen.term 
                   (dk_tuple.prod _p_It_T 
                      (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
                zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.forall (basics.list__t _p_Elt_T) 
                     (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
                      zen.forall _p_Col_T 
                        (v_Vcc:(zen.term _p_Col_T) =>
                         zen.imp 
                           (zen.triangle (abst_model v_Vzb v_Vcc v_Vac)) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_has_next v_Vzb))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_model 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) 
                                          (abst_step_it v_Vzb)) v_Vcc v_Vbc)) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vbc 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vzb))))))))))))))) =>
      zen.Rnotall 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
        (v_Vzb:
         (zen.term 
            (dk_tuple.prod _p_It_T 
               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
         zen.forall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall (basics.list__t _p_Elt_T) 
              (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
               zen.forall _p_Col_T 
                 (v_Vcc:(zen.term _p_Col_T) =>
                  zen.imp (zen.triangle (abst_model v_Vzb v_Vcc v_Vac)) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_has_next v_Vzb))) 
                       (zen.imp 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vzb)) 
                                v_Vcc v_Vbc)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vbc 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vzb)))))))))))) 
        (v_Vec:
         (zen.term 
            (dk_tuple.prod _p_It_T 
               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
         v_Vfc:
         (zen.proof 
            (zen.not 
               (zen.forall (basics.list__t _p_Elt_T) 
                  (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
                   zen.forall (basics.list__t _p_Elt_T) 
                     (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
                      zen.forall _p_Col_T 
                        (v_Vcc:(zen.term _p_Col_T) =>
                         zen.imp 
                           (zen.triangle (abst_model v_Vec v_Vcc v_Vac)) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_has_next v_Vec))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_model 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) 
                                          (abst_step_it v_Vec)) v_Vcc v_Vbc)) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vbc 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vec)))))))))))))) =>
         zen.Rnotall (basics.list__t _p_Elt_T) 
           (v_Vac:(zen.term (basics.list__t _p_Elt_T)) =>
            zen.forall (basics.list__t _p_Elt_T) 
              (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
               zen.forall _p_Col_T 
                 (v_Vcc:(zen.term _p_Col_T) =>
                  zen.imp (zen.triangle (abst_model v_Vec v_Vcc v_Vac)) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_has_next v_Vec))) 
                       (zen.imp 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vec)) 
                                v_Vcc v_Vbc)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vbc 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vec))))))))))) 
           (v_Vgc:(zen.term (basics.list__t _p_Elt_T)) =>
            v_Vhc:
            (zen.proof 
               (zen.not 
                  (zen.forall (basics.list__t _p_Elt_T) 
                     (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
                      zen.forall _p_Col_T 
                        (v_Vcc:(zen.term _p_Col_T) =>
                         zen.imp 
                           (zen.triangle (abst_model v_Vec v_Vcc v_Vgc)) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_has_next v_Vec))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_model 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) 
                                          (abst_step_it v_Vec)) v_Vcc v_Vbc)) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vbc 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vec))))))))))))) =>
            zen.Rnotall (basics.list__t _p_Elt_T) 
              (v_Vbc:(zen.term (basics.list__t _p_Elt_T)) =>
               zen.forall _p_Col_T 
                 (v_Vcc:(zen.term _p_Col_T) =>
                  zen.imp (zen.triangle (abst_model v_Vec v_Vcc v_Vgc)) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_has_next v_Vec))) 
                       (zen.imp 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vec)) 
                                v_Vcc v_Vbc)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vbc 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vec)))))))))) 
              (v_Vic:(zen.term (basics.list__t _p_Elt_T)) =>
               v_Vjc:
               (zen.proof 
                  (zen.not 
                     (zen.forall _p_Col_T 
                        (v_Vcc:(zen.term _p_Col_T) =>
                         zen.imp 
                           (zen.triangle (abst_model v_Vec v_Vcc v_Vgc)) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_has_next v_Vec))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_model 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) 
                                          (abst_step_it v_Vec)) v_Vcc v_Vic)) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vic 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vec)))))))))))) =>
               zen.Rnotall _p_Col_T 
                 (v_Vcc:(zen.term _p_Col_T) =>
                  zen.imp (zen.triangle (abst_model v_Vec v_Vcc v_Vgc)) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_has_next v_Vec))) 
                       (zen.imp 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vec)) 
                                v_Vcc v_Vic)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vic 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vec))))))))) 
                 (v_Vkc:(zen.term _p_Col_T) =>
                  v_Vlc:
                  (zen.proof 
                     (zen.not 
                        (zen.imp 
                           (zen.triangle (abst_model v_Vec v_Vkc v_Vgc)) 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_has_next v_Vec))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_model 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) 
                                          (abst_step_it v_Vec)) v_Vkc v_Vic)) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vic 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vec))))))))))) =>
                  zen.Rnotimply 
                    (zen.triangle (abst_model v_Vec v_Vkc v_Vgc)) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_has_next v_Vec))) 
                       (zen.imp 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vec)) 
                                v_Vkc v_Vic)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vic 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vec)))))))) 
                    (v_Vmc:
                     (zen.proof (zen.triangle (abst_model v_Vec v_Vkc v_Vgc))) =>
                     v_Vnc:
                     (zen.proof 
                        (zen.not 
                           (zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_has_next v_Vec))) 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_model 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) 
                                          (abst_step_it v_Vec)) v_Vkc v_Vic)) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vic 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vec)))))))))) =>
                     zen.Rnotimply 
                       (zen.triangle (focal.is_true (abst_has_next v_Vec))) 
                       (zen.imp 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vec)) 
                                v_Vkc v_Vic)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vic 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vec))))))) 
                       (v_Voc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_has_next v_Vec)))) =>
                        v_Vpc:
                        (zen.proof 
                           (zen.not 
                              (zen.imp 
                                 (zen.triangle 
                                    (abst_model 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) 
                                          (abst_step_it v_Vec)) v_Vkc v_Vic)) 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vic 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vec))))))))) =>
                        zen.Rnotimply 
                          (zen.triangle 
                             (abst_model 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it v_Vec)) 
                                v_Vkc v_Vic)) 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._tilda__tilda_ 
                                   (_p_L_mem v_Vic 
                                      (basics.fst _p_Elt_T 
                                         (dk_tuple.prod _p_It_T 
                                            (dk_tuple.prod 
                                               (partial__t _p_Elt_T) _p_Col_T)) 
                                         (abst_step_it v_Vec)))))) 
                          (v_Vqc:
                           (zen.proof 
                              (zen.triangle 
                                 (abst_model 
                                    (basics.snd _p_Elt_T 
                                       (dk_tuple.prod _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T)) 
                                       (abst_step_it v_Vec)) v_Vkc v_Vic))) =>
                           v_Vrc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (basics._tilda__tilda_ 
                                          (_p_L_mem v_Vic 
                                             (basics.fst _p_Elt_T 
                                                (dk_tuple.prod _p_It_T 
                                                   (dk_tuple.prod 
                                                      (partial__t _p_Elt_T) 
                                                      _p_Col_T)) 
                                                (abst_step_it v_Vec)))))))) =>
                           zen.Rall 
                             (dk_tuple.prod _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                             (v_Vzb:
                              (zen.term 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T))) =>
                              zen.forall (basics.list__t _p_Elt_T) 
                                (v_Vac:
                                 (zen.term (basics.list__t _p_Elt_T)) =>
                                 zen.forall (basics.list__t _p_Elt_T) 
                                   (v_Vbc:
                                    (zen.term (basics.list__t _p_Elt_T)) =>
                                    zen.forall _p_Col_T 
                                      (v_Vcc:(zen.term _p_Col_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_has_next v_Vzb))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (abst_model v_Vzb v_Vcc v_Vac)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (abst_model 
                                                     (basics.snd _p_Elt_T 
                                                        (dk_tuple.prod 
                                                           _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T)) 
                                                        (abst_step_it v_Vzb)) 
                                                     v_Vcc v_Vbc)) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._tilda__tilda_ 
                                                        (_p_L_mem v_Vbc 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 v_Vzb)))))))))))) 
                             v_Vec 
                             (v_Vsc:
                              (zen.proof 
                                 (zen.forall (basics.list__t _p_Elt_T) 
                                    (v_Vac:
                                     (zen.term (basics.list__t _p_Elt_T)) =>
                                     zen.forall (basics.list__t _p_Elt_T) 
                                       (v_Vbc:
                                        (zen.term (basics.list__t _p_Elt_T)) =>
                                        zen.forall _p_Col_T 
                                          (v_Vcc:(zen.term _p_Col_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_has_next v_Vec))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (abst_model v_Vec v_Vcc 
                                                      v_Vac)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (abst_model 
                                                         (basics.snd 
                                                            _p_Elt_T 
                                                            (dk_tuple.prod 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T)) 
                                                            (abst_step_it 
                                                               v_Vec)) v_Vcc 
                                                         v_Vbc)) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._tilda__tilda_ 
                                                            (_p_L_mem v_Vbc 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                  (abst_step_it 
                                                                    v_Vec))))))))))))) =>
                              zen.Rall (basics.list__t _p_Elt_T) 
                                (v_Vac:
                                 (zen.term (basics.list__t _p_Elt_T)) =>
                                 zen.forall (basics.list__t _p_Elt_T) 
                                   (v_Vbc:
                                    (zen.term (basics.list__t _p_Elt_T)) =>
                                    zen.forall _p_Col_T 
                                      (v_Vcc:(zen.term _p_Col_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_has_next v_Vec))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (abst_model v_Vec v_Vcc v_Vac)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (abst_model 
                                                     (basics.snd _p_Elt_T 
                                                        (dk_tuple.prod 
                                                           _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T)) 
                                                        (abst_step_it v_Vec)) 
                                                     v_Vcc v_Vbc)) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._tilda__tilda_ 
                                                        (_p_L_mem v_Vbc 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 v_Vec))))))))))) 
                                v_Vgc 
                                (v_Vtc:
                                 (zen.proof 
                                    (zen.forall (basics.list__t _p_Elt_T) 
                                       (v_Vbc:
                                        (zen.term (basics.list__t _p_Elt_T)) =>
                                        zen.forall _p_Col_T 
                                          (v_Vcc:(zen.term _p_Col_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_has_next v_Vec))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (abst_model v_Vec v_Vcc 
                                                      v_Vgc)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (abst_model 
                                                         (basics.snd 
                                                            _p_Elt_T 
                                                            (dk_tuple.prod 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T)) 
                                                            (abst_step_it 
                                                               v_Vec)) v_Vcc 
                                                         v_Vbc)) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._tilda__tilda_ 
                                                            (_p_L_mem v_Vbc 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                  (abst_step_it 
                                                                    v_Vec)))))))))))) =>
                                 zen.Rall (basics.list__t _p_Elt_T) 
                                   (v_Vbc:
                                    (zen.term (basics.list__t _p_Elt_T)) =>
                                    zen.forall _p_Col_T 
                                      (v_Vcc:(zen.term _p_Col_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_has_next v_Vec))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (abst_model v_Vec v_Vcc v_Vgc)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (abst_model 
                                                     (basics.snd _p_Elt_T 
                                                        (dk_tuple.prod 
                                                           _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T)) 
                                                        (abst_step_it v_Vec)) 
                                                     v_Vcc v_Vbc)) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._tilda__tilda_ 
                                                        (_p_L_mem v_Vbc 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 v_Vec)))))))))) 
                                   v_Vic 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.forall _p_Col_T 
                                          (v_Vcc:(zen.term _p_Col_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_has_next v_Vec))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (abst_model v_Vec v_Vcc 
                                                      v_Vgc)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (abst_model 
                                                         (basics.snd 
                                                            _p_Elt_T 
                                                            (dk_tuple.prod 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T)) 
                                                            (abst_step_it 
                                                               v_Vec)) v_Vcc 
                                                         v_Vic)) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._tilda__tilda_ 
                                                            (_p_L_mem v_Vic 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                  (abst_step_it 
                                                                    v_Vec))))))))))) =>
                                    zen.Rall _p_Col_T 
                                      (v_Vcc:(zen.term _p_Col_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_has_next v_Vec))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (abst_model v_Vec v_Vcc v_Vgc)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (abst_model 
                                                     (basics.snd _p_Elt_T 
                                                        (dk_tuple.prod 
                                                           _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T)) 
                                                        (abst_step_it v_Vec)) 
                                                     v_Vcc v_Vic)) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._tilda__tilda_ 
                                                        (_p_L_mem v_Vic 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 v_Vec))))))))) 
                                      v_Vkc 
                                      (v_Vvc:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_has_next v_Vec))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (abst_model v_Vec v_Vkc 
                                                      v_Vgc)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (abst_model 
                                                         (basics.snd 
                                                            _p_Elt_T 
                                                            (dk_tuple.prod 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T)) 
                                                            (abst_step_it 
                                                               v_Vec)) v_Vkc 
                                                         v_Vic)) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._tilda__tilda_ 
                                                            (_p_L_mem v_Vic 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                  (abst_step_it 
                                                                    v_Vec)))))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_has_next v_Vec))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (abst_model v_Vec v_Vkc v_Vgc)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (abst_model 
                                                     (basics.snd _p_Elt_T 
                                                        (dk_tuple.prod 
                                                           _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T)) 
                                                        (abst_step_it v_Vec)) 
                                                     v_Vkc v_Vic)) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._tilda__tilda_ 
                                                        (_p_L_mem v_Vic 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 v_Vec)))))))) 
                                         (v_Vwc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_has_next v_Vec))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_has_next v_Vec))) 
                                            v_Voc v_Vwc) 
                                         (v_Vxc:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (abst_model v_Vec v_Vkc 
                                                      v_Vgc)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (abst_model 
                                                         (basics.snd 
                                                            _p_Elt_T 
                                                            (dk_tuple.prod 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T)) 
                                                            (abst_step_it 
                                                               v_Vec)) v_Vkc 
                                                         v_Vic)) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._tilda__tilda_ 
                                                            (_p_L_mem v_Vic 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                  (abst_step_it 
                                                                    v_Vec))))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (abst_model v_Vec v_Vkc v_Vgc)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (abst_model 
                                                     (basics.snd _p_Elt_T 
                                                        (dk_tuple.prod 
                                                           _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T)) 
                                                        (abst_step_it v_Vec)) 
                                                     v_Vkc v_Vic)) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._tilda__tilda_ 
                                                        (_p_L_mem v_Vic 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 v_Vec))))))) 
                                            (v_Vyc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (abst_model v_Vec 
                                                         v_Vkc v_Vgc)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (abst_model v_Vec v_Vkc 
                                                     v_Vgc)) v_Vmc v_Vyc) 
                                            (v_Vzc:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (abst_model 
                                                         (basics.snd 
                                                            _p_Elt_T 
                                                            (dk_tuple.prod 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T)) 
                                                            (abst_step_it 
                                                               v_Vec)) v_Vkc 
                                                         v_Vic)) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._tilda__tilda_ 
                                                            (_p_L_mem v_Vic 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                  (abst_step_it 
                                                                    v_Vec)))))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (abst_model 
                                                     (basics.snd _p_Elt_T 
                                                        (dk_tuple.prod 
                                                           _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T)) 
                                                        (abst_step_it v_Vec)) 
                                                     v_Vkc v_Vic)) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (basics._tilda__tilda_ 
                                                        (_p_L_mem v_Vic 
                                                           (basics.fst 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 v_Vec)))))) 
                                               (v_Vad:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (abst_model 
                                                            (basics.snd 
                                                               _p_Elt_T 
                                                               (dk_tuple.prod 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                               (abst_step_it 
                                                                  v_Vec)) 
                                                            v_Vkc v_Vic)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (abst_model 
                                                        (basics.snd _p_Elt_T 
                                                           (dk_tuple.prod 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T)) 
                                                           (abst_step_it 
                                                              v_Vec)) v_Vkc 
                                                        v_Vic)) v_Vqc v_Vad) 
                                               (v_Vbd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (basics._tilda__tilda_ 
                                                            (_p_L_mem v_Vic 
                                                               (basics.fst 
                                                                  _p_Elt_T 
                                                                  (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                  (abst_step_it 
                                                                    v_Vec))))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._tilda__tilda_ 
                                                           (_p_L_mem v_Vic 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    v_Vec)))))) 
                                                  v_Vbd v_Vrc) v_Vzc) v_Vxc) 
                                         v_Vvc) v_Vuc) v_Vtc) v_Vsc) 
                             __BG_1_LEMMA) v_Vpc) v_Vnc) v_Vlc) v_Vjc) v_Vhc) 
           v_Vfc) v_Vdc)) 
    (it:
     (cc.eT 
        (dk_tuple.prod _p_It_T (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T))) =>
     l:(cc.eT (basics.list__t _p_Elt_T)) =>
     l2:(cc.eT (basics.list__t _p_Elt_T)) =>
     c:(cc.eT _p_Col_T) =>
     N:(dk_logic.eP (dk_logic.ebP (abst_has_next it))) =>
     M:(dk_logic.eP (abst_model it c l)) =>
     M2:
     (dk_logic.eP 
        (abst_model 
           (basics.snd _p_Elt_T 
              (dk_tuple.prod _p_It_T 
                 (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
              (abst_step_it it)) c l2)) =>
     (__BG_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (basics._tilda__tilda_ 
               (_p_L_mem l2 
                  (basics.fst _p_Elt_T 
                     (dk_tuple.prod _p_It_T 
                        (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                     (abst_step_it it)))))) =>
      zen.nnpp 
        (zen.triangle 
           (focal.is_true 
              (basics._tilda__tilda_ 
                 (_p_L_mem l2 
                    (basics.fst _p_Elt_T 
                       (dk_tuple.prod _p_It_T 
                          (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                       (abst_step_it it)))))) 
        (v_Vzb:
         (zen.proof 
            (zen.not 
               (zen.triangle 
                  (focal.is_true 
                     (basics._tilda__tilda_ 
                        (_p_L_mem l2 
                           (basics.fst _p_Elt_T 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) (abst_step_it it)))))))) =>
         zen.Raxiom 
           (zen.triangle 
              (focal.is_true 
                 (basics._tilda__tilda_ 
                    (_p_L_mem l2 
                       (basics.fst _p_Elt_T 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          (abst_step_it it)))))) __BG_1_1_LEMMA v_Vzb)) 
       ((__BG_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (basics._equal_ _p_Elt_T 
                  (basics.fst _p_Elt_T 
                     (dk_tuple.prod _p_It_T 
                        (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                     (abst_step_it it)) 
                  (basics.fst _p_Elt_T _p_It_T 
                     (_p_It_step_it 
                        (basics.fst _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it)))))) =>
         (__BG_1_1_2_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (basics._equal_ 
                   (dk_tuple.prod _p_It_T 
                      (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                   (basics.snd _p_Elt_T 
                      (dk_tuple.prod _p_It_T 
                         (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                      (abst_step_it it)) 
                   (dk_tuple.pair _p_It_T 
                      (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                      (basics.snd _p_Elt_T _p_It_T 
                         (_p_It_step_it 
                            (basics.fst _p_It_T 
                               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                               it))) 
                      (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                         (PUnfailed _p_Elt_T 
                            (basics.fst _p_Elt_T 
                               (dk_tuple.prod _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T)) (abst_step_it it))) 
                         (basics.snd (partial__t _p_Elt_T) _p_Col_T 
                            (basics.snd _p_It_T 
                               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                               it))))))) =>
          (__BG_1_1_3_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP 
                 (basics._equal_ _p_It_T 
                    (basics.fst _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                       (basics.snd _p_Elt_T 
                          (dk_tuple.prod _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                          (abst_step_it it))) 
                    (basics.snd _p_Elt_T _p_It_T 
                       (_p_It_step_it 
                          (basics.fst _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                             it)))))) =>
           (__BG_1_1_4_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP 
                  (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                     (_p_It_step_it 
                        (basics.fst _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it)) 
                     (dk_tuple.pair _p_Elt_T _p_It_T 
                        (basics.fst _p_Elt_T 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           (abst_step_it it)) 
                        (basics.fst _p_It_T 
                           (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                           (basics.snd _p_Elt_T 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) (abst_step_it it))))))) =>
            (__BG_1_1_5_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (_p_It_has_next 
                      (basics.fst _p_It_T 
                         (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it)))) =>
             (__BG_1_1_6_LEMMA:
              (dk_logic.eP 
                 (_p_It_model 
                    (basics.fst _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it) c l)) =>
              (__BG_1_1_7_LEMMA:
               (dk_logic.eP 
                  (_p_It_model 
                     (basics.fst _p_It_T 
                        (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                        (basics.snd _p_Elt_T 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           (abst_step_it it))) c l2)) =>
               (__BG_1_1_8_LEMMA:
                (dk_logic.eP 
                   (dk_logic.ebP 
                      (basics._tilda__tilda_ 
                         (_p_L_mem l2 
                            (basics.fst _p_Elt_T 
                               (dk_tuple.prod _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T)) (abst_step_it it)))))) =>
                zen.nnpp 
                  (zen.triangle 
                     (focal.is_true 
                        (basics._tilda__tilda_ 
                           (_p_L_mem l2 
                              (basics.fst _p_Elt_T 
                                 (dk_tuple.prod _p_It_T 
                                    (dk_tuple.prod (partial__t _p_Elt_T) 
                                       _p_Col_T)) (abst_step_it it)))))) 
                  (v_Vzb:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (basics._tilda__tilda_ 
                                  (_p_L_mem l2 
                                     (basics.fst _p_Elt_T 
                                        (dk_tuple.prod _p_It_T 
                                           (dk_tuple.prod 
                                              (partial__t _p_Elt_T) _p_Col_T)) 
                                        (abst_step_it it)))))))) =>
                   focal.zenon_focal_not 
                     (_p_L_mem l2 
                        (basics.fst _p_Elt_T 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           (abst_step_it it))) 
                     (v_Vac:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem l2 
                                     (basics.fst _p_Elt_T 
                                        (dk_tuple.prod _p_It_T 
                                           (dk_tuple.prod 
                                              (partial__t _p_Elt_T) _p_Col_T)) 
                                        (abst_step_it it))))))) =>
                      focal.zenon_focal_notnot 
                        (_p_L_mem l2 
                           (basics.fst _p_Elt_T 
                              (dk_tuple.prod _p_It_T 
                                 (dk_tuple.prod (partial__t _p_Elt_T) 
                                    _p_Col_T)) (abst_step_it it))) 
                        (v_Vbc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_L_mem l2 
                                     (basics.fst _p_Elt_T 
                                        (dk_tuple.prod _p_It_T 
                                           (dk_tuple.prod 
                                              (partial__t _p_Elt_T) _p_Col_T)) 
                                        (abst_step_it it)))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_L_mem l2 
                                    (basics.fst _p_Elt_T 
                                       (dk_tuple.prod _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T)) 
                                       (abst_step_it it))))) v_Vbc v_Vac) 
                        v_Vzb) __BG_1_1_8_LEMMA)) 
                 (zen.nnpp 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ 
                             (_p_L_mem l2 
                                (basics.fst _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it it)))))) 
                    (v_Vzb:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (basics._tilda__tilda_ 
                                    (_p_L_mem l2 
                                       (basics.fst _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) (abst_step_it it)))))))) =>
                     focal.zenon_syntactic_equal 
                       (dk_tuple.prod _p_Elt_T _p_It_T) 
                       (_p_It_step_it 
                          (basics.fst _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                             it)) 
                       (dk_tuple.pair _p_Elt_T _p_It_T 
                          (basics.fst _p_Elt_T 
                             (dk_tuple.prod _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                             (abst_step_it it)) 
                          (basics.fst _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                             (basics.snd _p_Elt_T 
                                (dk_tuple.prod _p_It_T 
                                   (dk_tuple.prod (partial__t _p_Elt_T) 
                                      _p_Col_T)) (abst_step_it it)))) 
                       (v_Vac:
                        (zen.proof 
                           (zen.triangle 
                              (zen.equal (dk_tuple.prod _p_Elt_T _p_It_T) 
                                 (_p_It_step_it 
                                    (basics.fst _p_It_T 
                                       (dk_tuple.prod (partial__t _p_Elt_T) 
                                          _p_Col_T) it)) 
                                 (basics.pair _p_Elt_T _p_It_T 
                                    (basics.fst _p_Elt_T 
                                       (dk_tuple.prod _p_It_T 
                                          (dk_tuple.prod 
                                             (partial__t _p_Elt_T) _p_Col_T)) 
                                       (abst_step_it it)) 
                                    (basics.fst _p_It_T 
                                       (dk_tuple.prod (partial__t _p_Elt_T) 
                                          _p_Col_T) 
                                       (basics.snd _p_Elt_T 
                                          (dk_tuple.prod _p_It_T 
                                             (dk_tuple.prod 
                                                (partial__t _p_Elt_T) 
                                                _p_Col_T)) (abst_step_it it))))))) =>
                        zen.Rall _p_It_T 
                          (v_Vbc:(zen.term _p_It_T) =>
                           zen.forall _p_It_T 
                             (v_Vcc:(zen.term _p_It_T) =>
                              zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.forall (basics.list__t _p_Elt_T) 
                                   (v_Vec:
                                    (zen.term (basics.list__t _p_Elt_T)) =>
                                    zen.forall (basics.list__t _p_Elt_T) 
                                      (v_Vfc:
                                       (zen.term (basics.list__t _p_Elt_T)) =>
                                       zen.forall _p_Col_T 
                                         (v_Vgc:(zen.term _p_Col_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (_p_It_model v_Vbc v_Vgc v_Vec)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next v_Vbc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              v_Vbc) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T v_Vdc 
                                                              v_Vcc)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model v_Vcc 
                                                           v_Vgc v_Vfc)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem 
                                                                 v_Vfc v_Vdc))))))))))))) 
                          (basics.fst _p_It_T 
                             (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                             it) 
                          (v_Vhc:
                           (zen.proof 
                              (zen.forall _p_It_T 
                                 (v_Vcc:(zen.term _p_It_T) =>
                                  zen.forall _p_Elt_T 
                                    (v_Vdc:(zen.term _p_Elt_T) =>
                                     zen.forall (basics.list__t _p_Elt_T) 
                                       (v_Vec:
                                        (zen.term (basics.list__t _p_Elt_T)) =>
                                        zen.forall (basics.list__t _p_Elt_T) 
                                          (v_Vfc:
                                           (zen.term 
                                              (basics.list__t _p_Elt_T)) =>
                                           zen.forall _p_Col_T 
                                             (v_Vgc:(zen.term _p_Col_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (_p_It_model 
                                                      (basics.fst _p_It_T 
                                                         (dk_tuple.prod 
                                                            (partial__t 
                                                               _p_Elt_T) 
                                                            _p_Col_T) it) 
                                                      v_Vgc v_Vec)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_It_has_next 
                                                            (basics.fst 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T) 
                                                               it)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  v_Vdc v_Vcc)))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               v_Vcc v_Vgc 
                                                               v_Vfc)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    v_Vfc 
                                                                    v_Vdc)))))))))))))) =>
                           zen.Rall _p_It_T 
                             (v_Vcc:(zen.term _p_It_T) =>
                              zen.forall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.forall (basics.list__t _p_Elt_T) 
                                   (v_Vec:
                                    (zen.term (basics.list__t _p_Elt_T)) =>
                                    zen.forall (basics.list__t _p_Elt_T) 
                                      (v_Vfc:
                                       (zen.term (basics.list__t _p_Elt_T)) =>
                                       zen.forall _p_Col_T 
                                         (v_Vgc:(zen.term _p_Col_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (_p_It_model 
                                                  (basics.fst _p_It_T 
                                                     (dk_tuple.prod 
                                                        (partial__t _p_Elt_T) 
                                                        _p_Col_T) it) v_Vgc 
                                                  v_Vec)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T v_Vdc 
                                                              v_Vcc)))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model v_Vcc 
                                                           v_Vgc v_Vfc)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem 
                                                                 v_Vfc v_Vdc)))))))))))) 
                             (basics.fst _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                                (basics.snd _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it it))) 
                             (v_Vic:
                              (zen.proof 
                                 (zen.forall _p_Elt_T 
                                    (v_Vdc:(zen.term _p_Elt_T) =>
                                     zen.forall (basics.list__t _p_Elt_T) 
                                       (v_Vec:
                                        (zen.term (basics.list__t _p_Elt_T)) =>
                                        zen.forall (basics.list__t _p_Elt_T) 
                                          (v_Vfc:
                                           (zen.term 
                                              (basics.list__t _p_Elt_T)) =>
                                           zen.forall _p_Col_T 
                                             (v_Vgc:(zen.term _p_Col_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (_p_It_model 
                                                      (basics.fst _p_It_T 
                                                         (dk_tuple.prod 
                                                            (partial__t 
                                                               _p_Elt_T) 
                                                            _p_Col_T) it) 
                                                      v_Vgc v_Vec)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_It_has_next 
                                                            (basics.fst 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T) 
                                                               it)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  v_Vdc 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) 
                                                               v_Vgc v_Vfc)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    v_Vfc 
                                                                    v_Vdc))))))))))))) =>
                              zen.Rall _p_Elt_T 
                                (v_Vdc:(zen.term _p_Elt_T) =>
                                 zen.forall (basics.list__t _p_Elt_T) 
                                   (v_Vec:
                                    (zen.term (basics.list__t _p_Elt_T)) =>
                                    zen.forall (basics.list__t _p_Elt_T) 
                                      (v_Vfc:
                                       (zen.term (basics.list__t _p_Elt_T)) =>
                                       zen.forall _p_Col_T 
                                         (v_Vgc:(zen.term _p_Col_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (_p_It_model 
                                                  (basics.fst _p_It_T 
                                                     (dk_tuple.prod 
                                                        (partial__t _p_Elt_T) 
                                                        _p_Col_T) it) v_Vgc 
                                                  v_Vec)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T v_Vdc 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) 
                                                           v_Vgc v_Vfc)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem 
                                                                 v_Vfc v_Vdc))))))))))) 
                                (basics.fst _p_Elt_T 
                                   (dk_tuple.prod _p_It_T 
                                      (dk_tuple.prod (partial__t _p_Elt_T) 
                                         _p_Col_T)) (abst_step_it it)) 
                                (v_Vjc:
                                 (zen.proof 
                                    (zen.forall (basics.list__t _p_Elt_T) 
                                       (v_Vec:
                                        (zen.term (basics.list__t _p_Elt_T)) =>
                                        zen.forall (basics.list__t _p_Elt_T) 
                                          (v_Vfc:
                                           (zen.term 
                                              (basics.list__t _p_Elt_T)) =>
                                           zen.forall _p_Col_T 
                                             (v_Vgc:(zen.term _p_Col_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (_p_It_model 
                                                      (basics.fst _p_It_T 
                                                         (dk_tuple.prod 
                                                            (partial__t 
                                                               _p_Elt_T) 
                                                            _p_Col_T) it) 
                                                      v_Vgc v_Vec)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_It_has_next 
                                                            (basics.fst 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T) 
                                                               it)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) 
                                                               v_Vgc v_Vfc)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    v_Vfc 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)))))))))))))) =>
                                 zen.Rall (basics.list__t _p_Elt_T) 
                                   (v_Vec:
                                    (zen.term (basics.list__t _p_Elt_T)) =>
                                    zen.forall (basics.list__t _p_Elt_T) 
                                      (v_Vfc:
                                       (zen.term (basics.list__t _p_Elt_T)) =>
                                       zen.forall _p_Col_T 
                                         (v_Vgc:(zen.term _p_Col_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (_p_It_model 
                                                  (basics.fst _p_It_T 
                                                     (dk_tuple.prod 
                                                        (partial__t _p_Elt_T) 
                                                        _p_Col_T) it) v_Vgc 
                                                  v_Vec)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it)) 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) 
                                                           v_Vgc v_Vfc)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem 
                                                                 v_Vfc 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it)))))))))))) 
                                   l 
                                   (v_Vkc:
                                    (zen.proof 
                                       (zen.forall (basics.list__t _p_Elt_T) 
                                          (v_Vfc:
                                           (zen.term 
                                              (basics.list__t _p_Elt_T)) =>
                                           zen.forall _p_Col_T 
                                             (v_Vgc:(zen.term _p_Col_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (_p_It_model 
                                                      (basics.fst _p_It_T 
                                                         (dk_tuple.prod 
                                                            (partial__t 
                                                               _p_Elt_T) 
                                                            _p_Col_T) it) 
                                                      v_Vgc l)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_It_has_next 
                                                            (basics.fst 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T) 
                                                               it)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) 
                                                               v_Vgc v_Vfc)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    v_Vfc 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))))))))) =>
                                    zen.Rall (basics.list__t _p_Elt_T) 
                                      (v_Vfc:
                                       (zen.term (basics.list__t _p_Elt_T)) =>
                                       zen.forall _p_Col_T 
                                         (v_Vgc:(zen.term _p_Col_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (_p_It_model 
                                                  (basics.fst _p_It_T 
                                                     (dk_tuple.prod 
                                                        (partial__t _p_Elt_T) 
                                                        _p_Col_T) it) v_Vgc l)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it)) 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) 
                                                           v_Vgc v_Vfc)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem 
                                                                 v_Vfc 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))))))) 
                                      l2 
                                      (v_Vlc:
                                       (zen.proof 
                                          (zen.forall _p_Col_T 
                                             (v_Vgc:(zen.term _p_Col_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (_p_It_model 
                                                      (basics.fst _p_It_T 
                                                         (dk_tuple.prod 
                                                            (partial__t 
                                                               _p_Elt_T) 
                                                            _p_Col_T) it) 
                                                      v_Vgc l)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_It_has_next 
                                                            (basics.fst 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T) 
                                                               it)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) 
                                                               v_Vgc l2)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    l2 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)))))))))))) =>
                                       zen.Rall _p_Col_T 
                                         (v_Vgc:(zen.term _p_Col_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (_p_It_model 
                                                  (basics.fst _p_It_T 
                                                     (dk_tuple.prod 
                                                        (partial__t _p_Elt_T) 
                                                        _p_Col_T) it) v_Vgc l)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it)) 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) 
                                                           v_Vgc l2)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem l2 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it)))))))))) 
                                         c 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (_p_It_model 
                                                      (basics.fst _p_It_T 
                                                         (dk_tuple.prod 
                                                            (partial__t 
                                                               _p_Elt_T) 
                                                            _p_Col_T) it) c l)) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_It_has_next 
                                                            (basics.fst 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T) 
                                                               it)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) c 
                                                               l2)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    l2 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (_p_It_model 
                                                  (basics.fst _p_It_T 
                                                     (dk_tuple.prod 
                                                        (partial__t _p_Elt_T) 
                                                        _p_Col_T) it) c l)) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it)) 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) c 
                                                           l2)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem l2 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))))) 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (_p_It_model 
                                                         (basics.fst _p_It_T 
                                                            (dk_tuple.prod 
                                                               (partial__t 
                                                                  _p_Elt_T) 
                                                               _p_Col_T) it) 
                                                         c l)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (_p_It_model 
                                                     (basics.fst _p_It_T 
                                                        (dk_tuple.prod 
                                                           (partial__t 
                                                              _p_Elt_T) 
                                                           _p_Col_T) it) c l)) 
                                               __BG_1_1_6_LEMMA v_Vnc) 
                                            (v_Voc:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_It_has_next 
                                                            (basics.fst 
                                                               _p_It_T 
                                                               (dk_tuple.prod 
                                                                  (partial__t 
                                                                    _p_Elt_T) 
                                                                  _p_Col_T) 
                                                               it)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) c 
                                                               l2)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    l2 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)))))))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_It_has_next 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it)) 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) c 
                                                           l2)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem l2 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it)))))))) 
                                               (v_Vpc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_It_has_next 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  it)))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_It_has_next 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) it)))) 
                                                  __BG_1_1_5_LEMMA v_Vpc) 
                                               (v_Vqc:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (basics._equal_ 
                                                               (dk_tuple.prod 
                                                                  _p_Elt_T 
                                                                  _p_It_T) 
                                                               (_p_It_step_it 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                               (dk_tuple.pair 
                                                                  _p_Elt_T 
                                                                  _p_It_T 
                                                                  (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) c 
                                                               l2)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    l2 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (basics._equal_ 
                                                           (dk_tuple.prod 
                                                              _p_Elt_T 
                                                              _p_It_T) 
                                                           (_p_It_step_it 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 it)) 
                                                           (dk_tuple.pair 
                                                              _p_Elt_T 
                                                              _p_It_T 
                                                              (basics.fst 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it)) 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) c 
                                                           l2)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem l2 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))))))) 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics.syntactic_equal 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                                  (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                    (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))))) =>
                                                   focal.zenon_not_syntactic_equal 
                                                     (dk_tuple.prod _p_Elt_T 
                                                        _p_It_T) 
                                                     (_p_It_step_it 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) it)) 
                                                     (basics.pair _p_Elt_T 
                                                        _p_It_T 
                                                        (basics.fst _p_Elt_T 
                                                           (dk_tuple.prod 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T)) 
                                                           (abst_step_it it)) 
                                                        (basics.fst _p_It_T 
                                                           (dk_tuple.prod 
                                                              (partial__t 
                                                                 _p_Elt_T) 
                                                              _p_Col_T) 
                                                           (basics.snd 
                                                              _p_Elt_T 
                                                              (dk_tuple.prod 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                              (abst_step_it 
                                                                 it)))) 
                                                     (v_Vsc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  (dk_tuple.prod 
                                                                    _p_Elt_T 
                                                                    _p_It_T) 
                                                                  (_p_It_step_it 
                                                                    (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                                  (basics.pair 
                                                                    _p_Elt_T 
                                                                    _p_It_T 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)) 
                                                                    (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)))))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              (dk_tuple.prod 
                                                                 _p_Elt_T 
                                                                 _p_It_T) 
                                                              (_p_It_step_it 
                                                                 (basics.fst 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    it)) 
                                                              (basics.pair 
                                                                 _p_Elt_T 
                                                                 _p_It_T 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it)) 
                                                                 (basics.fst 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (
                                                                    basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)))))) 
                                                        v_Vac v_Vsc) v_Vrc) 
                                                  (v_Vtc:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (_p_It_model 
                                                               (basics.fst 
                                                                  _p_It_T 
                                                                  (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                  (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) c 
                                                               l2)) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    l2 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)))))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (_p_It_model 
                                                           (basics.fst 
                                                              _p_It_T 
                                                              (dk_tuple.prod 
                                                                 (partial__t 
                                                                    _p_Elt_T) 
                                                                 _p_Col_T) 
                                                              (basics.snd 
                                                                 _p_Elt_T 
                                                                 (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                 (abst_step_it 
                                                                    it))) c 
                                                           l2)) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (basics._tilda__tilda_ 
                                                              (_p_L_mem l2 
                                                                 (basics.fst 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it)))))) 
                                                     (v_Vuc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (_p_It_model 
                                                                  (basics.fst 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                    (basics.snd 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))) c 
                                                                  l2)))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (_p_It_model 
                                                              (basics.fst 
                                                                 _p_It_T 
                                                                 (dk_tuple.prod 
                                                                    (
                                                                    partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T) 
                                                                 (basics.snd 
                                                                    _p_Elt_T 
                                                                    (
                                                                    dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (
                                                                    abst_step_it 
                                                                    it))) c 
                                                              l2)) 
                                                        __BG_1_1_7_LEMMA 
                                                        v_Vuc) 
                                                     (v_Vvc:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (basics._tilda__tilda_ 
                                                                  (_p_L_mem 
                                                                    l2 
                                                                    (basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it))))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (basics._tilda__tilda_ 
                                                                 (_p_L_mem 
                                                                    l2 
                                                                    (
                                                                    basics.fst 
                                                                    _p_Elt_T 
                                                                    (dk_tuple.prod 
                                                                    _p_It_T 
                                                                    (dk_tuple.prod 
                                                                    (partial__t 
                                                                    _p_Elt_T) 
                                                                    _p_Col_T)) 
                                                                    (abst_step_it 
                                                                    it)))))) 
                                                        v_Vvc v_Vzb) v_Vtc) 
                                                  v_Vqc) v_Voc) v_Vmc) v_Vlc) 
                                      v_Vkc) v_Vjc) v_Vic) v_Vhc) 
                          _p_It_model_step_unique) __BG_1_1_4_LEMMA))) 
                (dk_builtins.magic_prove 
                   (_p_It_model 
                      (basics.fst _p_It_T 
                         (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                         (basics.snd _p_Elt_T 
                            (dk_tuple.prod _p_It_T 
                               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                            (abst_step_it it))) c l2))) 
               (dk_builtins.magic_prove 
                  (_p_It_model 
                     (basics.fst _p_It_T 
                        (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it) c 
                     l))) 
              (dk_builtins.magic_prove 
                 (dk_logic.ebP 
                    (_p_It_has_next 
                       (basics.fst _p_It_T 
                          (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it))))) 
             (dk_builtins.magic_prove 
                (dk_logic.ebP 
                   (basics._equal_ (dk_tuple.prod _p_Elt_T _p_It_T) 
                      (_p_It_step_it 
                         (basics.fst _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it)) 
                      (dk_tuple.pair _p_Elt_T _p_It_T 
                         (basics.fst _p_Elt_T 
                            (dk_tuple.prod _p_It_T 
                               (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                            (abst_step_it it)) 
                         (basics.fst _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                            (basics.snd _p_Elt_T 
                               (dk_tuple.prod _p_It_T 
                                  (dk_tuple.prod (partial__t _p_Elt_T) 
                                     _p_Col_T)) (abst_step_it it)))))))) 
            (dk_builtins.magic_prove 
               (dk_logic.ebP 
                  (basics._equal_ _p_It_T 
                     (basics.fst _p_It_T 
                        (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                        (basics.snd _p_Elt_T 
                           (dk_tuple.prod _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                           (abst_step_it it))) 
                     (basics.snd _p_Elt_T _p_It_T 
                        (_p_It_step_it 
                           (basics.fst _p_It_T 
                              (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                              it))))))) 
           (dk_builtins.magic_prove 
              (dk_logic.ebP 
                 (basics._equal_ 
                    (dk_tuple.prod _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                    (basics.snd _p_Elt_T 
                       (dk_tuple.prod _p_It_T 
                          (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                       (abst_step_it it)) 
                    (dk_tuple.pair _p_It_T 
                       (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                       (basics.snd _p_Elt_T _p_It_T 
                          (_p_It_step_it 
                             (basics.fst _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                                it))) 
                       (dk_tuple.pair (partial__t _p_Elt_T) _p_Col_T 
                          (PUnfailed _p_Elt_T 
                             (basics.fst _p_Elt_T 
                                (dk_tuple.prod _p_It_T 
                                   (dk_tuple.prod (partial__t _p_Elt_T) 
                                      _p_Col_T)) (abst_step_it it))) 
                          (basics.snd (partial__t _p_Elt_T) _p_Col_T 
                             (basics.snd _p_It_T 
                                (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) 
                                it)))))))) 
          (dk_builtins.magic_prove 
             (dk_logic.ebP 
                (basics._equal_ _p_Elt_T 
                   (basics.fst _p_Elt_T 
                      (dk_tuple.prod _p_It_T 
                         (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T)) 
                      (abst_step_it it)) 
                   (basics.fst _p_Elt_T _p_It_T 
                      (_p_It_step_it 
                         (basics.fst _p_It_T 
                            (dk_tuple.prod (partial__t _p_Elt_T) _p_Col_T) it)))))))).

__embeded_iterator__t :
  __var_a:cc.uT -> __var_b:cc.uT -> __var_c:cc.uT -> Type.

def embeded_iterator__t :
  __var_a:cc.uT -> __var_b:cc.uT -> __var_c:cc.uT -> cc.uT.

[__var_c, __var_b, __var_a]
  cc.eT (embeded_iterator__t __var_a __var_b __var_c)
  -->
  __embeded_iterator__t __var_a __var_b __var_c.

Rien :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  __var_c:cc.uT ->
  (cc.eT __var_a) ->
  (cc.eT __var_c) -> cc.eT (embeded_iterator__t __var_a __var_b __var_c).

Un :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  __var_c:cc.uT ->
  (cc.eT __var_a) ->
  (cc.eT __var_b) ->
  (cc.eT __var_c) -> cc.eT (embeded_iterator__t __var_a __var_b __var_c).

def match__Rien :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  __var_c:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (embeded_iterator__t __var_a __var_b __var_c)) ->
  ((cc.eT __var_a) -> (cc.eT __var_c) -> cc.eT Ret_type) ->
  (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, x_1_, x_0_, Ret_type, __var_c, __var_b, __var_a]
  match__Rien __var_a __var_b __var_c Ret_type (Rien __var_a __var_b __var_c 
    x_0_ x_1_) pattern default
  -->
  pattern x_0_ x_1_.

[default, pattern, x_2_, x_1_, x_0_, Ret_type, __var_c, __var_b, __var_a]
  match__Rien __var_a __var_b __var_c Ret_type (Un __var_a __var_b __var_c 
    x_0_ x_1_ x_2_) pattern default
  -->
  default.

def match__Un :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  __var_c:cc.uT ->
  Ret_type:cc.uT ->
  (cc.eT (embeded_iterator__t __var_a __var_b __var_c)) ->
  ((cc.eT __var_a) -> (cc.eT __var_b) -> (cc.eT __var_c) -> cc.eT Ret_type) ->
  (cc.eT Ret_type) -> cc.eT Ret_type.

[default, pattern, x_1_, x_0_, Ret_type, __var_c, __var_b, __var_a]
  match__Un __var_a __var_b __var_c Ret_type (Rien __var_a __var_b __var_c 
    x_0_ x_1_) pattern default
  -->
  default.

[default, pattern, x_2_, x_1_, x_0_, Ret_type, __var_c, __var_b, __var_a]
  match__Un __var_a __var_b __var_c Ret_type (Un __var_a __var_b __var_c 
    x_0_ x_1_ x_2_) pattern default
  -->
  pattern x_0_ x_1_ x_2_.

def call_by_value_embeded_iterator__t :
  __var_a:cc.uT ->
  __var_b:cc.uT ->
  __var_c:cc.uT ->
  R:cc.uT ->
  ((cc.eT (embeded_iterator__t __var_a __var_b __var_c)) -> cc.eT R) ->
  (cc.eT (embeded_iterator__t __var_a __var_b __var_c)) -> cc.eT R.

[x_1_, x_0_, f, R, __var_c, __var_b, __var_a]
  dk_builtins.call_by_value (embeded_iterator__t __var_a __var_b __var_c) R 
    f (Rien _ _ _ x_0_ x_1_)
  -->
  f (Rien __var_a __var_b __var_c x_0_ x_1_).

[x_2_, x_1_, x_0_, f, R, __var_c, __var_b, __var_a]
  dk_builtins.call_by_value (embeded_iterator__t __var_a __var_b __var_c) R 
    f (Un _ _ _ x_0_ x_1_ x_2_)
  -->
  f (Un __var_a __var_b __var_c x_0_ x_1_ x_2_).

def RemovableEmbededIterator__get_collection :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  it:(cc.eT (embeded_iterator__t _p_It_T _p_Elt_T _p_Col_T)) ->
  cc.eT _p_Col_T
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  it:(cc.eT (embeded_iterator__t _p_It_T _p_Elt_T _p_Col_T)) =>
  match__Rien _p_It_T _p_Elt_T _p_Col_T _p_Col_T it 
    (pattern_var_0_:(cc.eT _p_It_T) =>
     pattern_var_1_:(cc.eT _p_Col_T) =>
     (c:(cc.eT _p_Col_T) => c) pattern_var_1_) 
    (match__Un _p_It_T _p_Elt_T _p_Col_T _p_Col_T it 
       (pattern_var_0_:(cc.eT _p_It_T) =>
        pattern_var_1_:(cc.eT _p_Elt_T) =>
        pattern_var_2_:(cc.eT _p_Col_T) =>
        (c:(cc.eT _p_Col_T) => c) pattern_var_2_) (dk_fail.fail _p_Col_T)).

def RemovableEmbededIterator__get_iterator :
  _p_Elt_T:cc.uT ->
  _p_Col_T:cc.uT ->
  _p_It_T:cc.uT ->
  it:(cc.eT (embeded_iterator__t _p_It_T _p_Elt_T _p_Col_T)) -> cc.eT _p_It_T
  :=
  _p_Elt_T:cc.uT =>
  _p_Col_T:cc.uT =>
  _p_It_T:cc.uT =>
  it:(cc.eT (embeded_iterator__t _p_It_T _p_Elt_T _p_Col_T)) =>
  match__Rien _p_It_T _p_Elt_T _p_Col_T _p_It_T it 
    (pattern_var_0_:(cc.eT _p_It_T) =>
     pattern_var_1_:(cc.eT _p_Col_T) =>
     (i:(cc.eT _p_It_T) => i) pattern_var_0_) 
    (match__Un _p_It_T _p_Elt_T _p_Col_T _p_It_T it 
       (pattern_var_0_:(cc.eT _p_It_T) =>
        pattern_var_1_:(cc.eT _p_Elt_T) =>
        pattern_var_2_:(cc.eT _p_Col_T) =>
        (i:(cc.eT _p_It_T) => i) pattern_var_0_) (dk_fail.fail _p_It_T)).

