#NAME sets.

def Setoid__different :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) => basics._tilda__tilda_ (abst_equal x y).

def Setoid__same_is_not_different :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP (Setoid__different abst_T abst_equal x y)) 
             (dk_logic.not (dk_logic.ebP (abst_equal x y))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Setoid__different abst_T abst_equal v_Vzb v_Vac))) 
             (zen.not (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Setoid__different abst_T abst_equal v_Vzb v_Vac))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Setoid__different abst_T abst_equal v_Vzb v_Vac))) 
             (zen.not (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac)))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Setoid__different abst_T abst_equal v_Vcc v_Vac))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Setoid__different abst_T abst_equal v_Vcc v_Vac))) 
             (zen.not (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Setoid__different abst_T abst_equal v_Vcc v_Vec))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Setoid__different abst_T abst_equal v_Vcc v_Vec))) 
             (zen.not (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ (abst_equal v_Vcc v_Vec)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))))) =>
              focal.zenon_focal_notnot (abst_equal v_Vcc v_Vec) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                   v_Vic v_Vhc) v_Vgc) 
             (v_Vjc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._tilda__tilda_ (abst_equal v_Vcc v_Vec))))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))))) =>
              zen.Rnotnot 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) =>
                 focal.zenon_focal_not (abst_equal v_Vcc v_Vec) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc v_Vec))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                      v_Vic v_Vhc) v_Vjc) v_Vkc) v_Vfc) v_Vdc) v_Vbc).

def Setoid__different_is_complete :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_different x y)) 
                (dk_logic.or (dk_logic.ebP (abst_different x z)) 
                   (dk_logic.ebP (abst_different y z)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vnc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_different v_Vnc v_Voc))) 
                (zen.or 
                   (zen.triangle (focal.is_true (abst_different v_Vnc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_different v_Voc v_Vpc)))))))) 
    (v_Vqc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vnc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vnc v_Voc))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vnc v_Vpc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Voc v_Vpc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vnc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_different v_Vnc v_Voc))) 
                (zen.or 
                   (zen.triangle (focal.is_true (abst_different v_Vnc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_different v_Voc v_Vpc))))))) 
       (v_Vrc:(zen.term abst_T) =>
        v_Vsc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vrc v_Voc))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vrc v_Vpc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Voc v_Vpc))))))))) =>
        zen.Rnotall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_different v_Vrc v_Voc))) 
                (zen.or 
                   (zen.triangle (focal.is_true (abst_different v_Vrc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_different v_Voc v_Vpc)))))) 
          (v_Vtc:(zen.term abst_T) =>
           v_Vuc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vrc v_Vtc))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vrc v_Vpc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vtc v_Vpc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_different v_Vrc v_Vtc))) 
                (zen.or 
                   (zen.triangle (focal.is_true (abst_different v_Vrc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_different v_Vtc v_Vpc))))) 
             (v_Vvc:(zen.term abst_T) =>
              v_Vwc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vrc v_Vtc))) 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vrc v_Vvc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vtc v_Vvc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_different v_Vrc v_Vtc))) 
                (zen.or 
                   (zen.triangle (focal.is_true (abst_different v_Vrc v_Vvc))) 
                   (zen.triangle (focal.is_true (abst_different v_Vtc v_Vvc)))) 
                (v_Vxc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vrc v_Vtc)))) =>
                 v_Vyc:
                 (zen.proof 
                    (zen.not 
                       (zen.or 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vrc v_Vvc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vtc v_Vvc)))))) =>
                 zen.Rnotor 
                   (zen.triangle (focal.is_true (abst_different v_Vrc v_Vvc))) 
                   (zen.triangle (focal.is_true (abst_different v_Vtc v_Vvc))) 
                   (v_Vzc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vrc v_Vvc))))) =>
                    v_Vad:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vtc v_Vvc))))) =>
                    zen.Rall abst_T 
                      (v_Vnc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different v_Vnc v_Voc))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vnc v_Voc)))))) 
                      v_Vrc 
                      (v_Vbd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Voc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vrc v_Voc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vrc v_Voc))))))) =>
                       zen.Rall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different v_Vrc v_Voc))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vrc v_Voc))))) 
                         v_Vtc 
                         (v_Vcd:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vrc v_Vtc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vrc v_Vtc)))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (abst_different v_Vrc v_Vtc))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vrc v_Vtc)))) 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vrc v_Vtc))))) =>
                             v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vrc v_Vtc)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vrc v_Vtc))) 
                               v_Vxc v_Vdd) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vrc v_Vtc)))) =>
                             v_Vfd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vrc v_Vtc))))) =>
                             zen.Rall abst_T 
                               (v_Vnc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Voc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_different v_Vnc v_Voc))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vnc v_Voc)))))) 
                               v_Vrc 
                               (v_Vbd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Voc:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_different v_Vrc v_Voc))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vrc v_Voc))))))) =>
                                zen.Rall abst_T 
                                  (v_Voc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_different v_Vrc v_Voc))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vrc v_Voc))))) 
                                  v_Vvc 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_different v_Vrc v_Vvc))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vrc v_Vvc)))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_different v_Vrc v_Vvc))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vrc v_Vvc)))) 
                                     (v_Vzc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vrc v_Vvc))))) =>
                                      v_Vhd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vrc v_Vvc)))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vrc v_Vvc))) 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vrc v_Vvc)))) =>
                                         zen.Rall abst_T 
                                           (v_Vnc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Voc:(zen.term abst_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vnc 
                                                          v_Voc))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vnc 
                                                             v_Voc)))))) 
                                           v_Vtc 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Voc:(zen.term abst_T) =>
                                                   zen.eqv 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vtc v_Voc))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vtc v_Voc))))))) =>
                                            zen.Rall abst_T 
                                              (v_Voc:(zen.term abst_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vtc 
                                                          v_Voc))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vtc 
                                                             v_Voc))))) 
                                              v_Vvc 
                                              (v_Vkd:
                                               (zen.proof 
                                                  (zen.eqv 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vtc v_Vvc))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vtc v_Vvc)))))) =>
                                               zen.Requiv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vtc 
                                                          v_Vvc))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vtc 
                                                             v_Vvc)))) 
                                                 (v_Vad:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_different 
                                                                 v_Vtc v_Vvc))))) =>
                                                  v_Vld:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vtc 
                                                             v_Vvc))) 
                                                    (v_Vmd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vtc v_Vvc)))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vnc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Voc:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Voc 
                                                                    v_Vnc))))) 
                                                       v_Vtc 
                                                       (v_Vnd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Voc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vtc)))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Voc:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Voc 
                                                                    v_Vtc)))) 
                                                          v_Vrc 
                                                          (v_Vod:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                             (v_Vpd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                              zen.Rcut 
                                                                (zen.and 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))))) 
                                                                (v_Vqd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))))) =>
                                                                 zen.Rand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))) 
                                                                   (v_Vrd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vrd) 
                                                                   v_Vqd) 
                                                                (v_Vtd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.and 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))))))) =>
                                                                 zen.Rcut 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vrc)) 
                                                                   (v_Vud:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vrc))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vvd)) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vxd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vxd 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    v_Vtc 
                                                                    v_Vtc 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vae:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vae 
                                                                    v_Vtc)) 
                                                                    v_Vtc 
                                                                    v_Vtc 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)) 
                                                                    v_Vzd 
                                                                    v_Vrd) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vbe)) 
                                                                    v_Vtc 
                                                                    v_Vtc 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vrd) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)) 
                                                                    v_Vzd 
                                                                    v_Vrd) 
                                                                    v_Vzd) 
                                                                    v_Vzd) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vrd)) 
                                                                    v_Vyd) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                                    v_Vtc 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc)))))) 
                                                                    v_Vtc 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))))) 
                                                                    v_Vvc 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc)))) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    v_Vde 
                                                                    v_Vsd) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    v_Vmd 
                                                                    v_Vie) 
                                                                    (v_Vmd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vvd)) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vxd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vxd 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    v_Vtc 
                                                                    v_Vtc 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vrd) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vje:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vje) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    v_Vvc 
                                                                    v_Vrc 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vrc)) 
                                                                    v_Vud 
                                                                    v_Vke) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    v_Vle) 
                                                                    v_Vwd) 
                                                                    v_Vwd) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vme 
                                                                    v_Vpd) 
                                                                    v_Vmd) 
                                                                    v_Vhe) 
                                                                    v_Vge) 
                                                                    v_Vfe) 
                                                                    v_Vee) 
                                                                    abst_equal_transitive) 
                                                                    v_Vce) 
                                                                    v_Vtd) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vje:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vje) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    v_Vvc 
                                                                    v_Vrc 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vrc)) 
                                                                    v_Vud 
                                                                    v_Vke) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    v_Vle) 
                                                                    v_Vwd) 
                                                                    v_Vwd) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vme 
                                                                    v_Vpd) 
                                                                    v_Vmd) 
                                                                   (v_Vke:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                                    v_Vtc 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc)))))) 
                                                                    v_Vvc 
                                                                    (v_Voe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))))) 
                                                                    v_Vrc 
                                                                    (v_Vpe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vvc))) 
                                                                    v_Vmd 
                                                                    v_Vie) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (v_Vre:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vne 
                                                                    v_Vre) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vvd)) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vse:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vse 
                                                                    v_Vrc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    v_Vtc 
                                                                    v_Vtc 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc)) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vtc 
                                                                    v_Vzd 
                                                                    v_Vrd) 
                                                                    v_Vyd) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                                    v_Vtc 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc)))))) 
                                                                    v_Vtc 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vpc))))) 
                                                                    v_Vrc 
                                                                    (v_Vte:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vtc))) 
                                                                    v_Vde 
                                                                    v_Vsd) 
                                                                    (v_Vue:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vme 
                                                                    v_Vpd) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vme 
                                                                    v_Vpd) 
                                                                    v_Vue) 
                                                                    v_Vte) 
                                                                    v_Vfe) 
                                                                    v_Vee) 
                                                                    abst_equal_transitive) 
                                                                    v_Vce) 
                                                                    v_Vtd) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vje:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vje) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                    v_Vrc 
                                                                    v_Vrc 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vve) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    v_Vle) 
                                                                    v_Vle) 
                                                                    v_Vle) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vme 
                                                                    v_Vpd) 
                                                                    v_Vme) 
                                                                    v_Vqe) 
                                                                    v_Vpe) 
                                                                    v_Voe) 
                                                                    v_Vee) 
                                                                    abst_equal_transitive) 
                                                                    (v_Vre:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vnc))))) 
                                                                    v_Vrc 
                                                                    (v_Vwe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Voc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vrc)))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Voc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vrc)))) 
                                                                    v_Vvc 
                                                                    (v_Vxe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vvc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vvc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (v_Vye:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vvc))) 
                                                                    v_Vid 
                                                                    v_Vye) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vne 
                                                                    v_Vre) 
                                                                    v_Vxe) 
                                                                    v_Vwe) 
                                                                    abst_equal_symmetric)))) 
                                                             (v_Vze:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vtc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                                v_Vze v_Vfd) 
                                                             v_Vod) v_Vnd) 
                                                       abst_equal_symmetric) 
                                                    v_Vld) 
                                                 (v_Vaf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vtc v_Vvc)))) =>
                                                  v_Vie:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vtc v_Vvc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_different 
                                                             v_Vtc v_Vvc))) 
                                                    v_Vaf v_Vad) v_Vkd) v_Vjd) 
                                           abst_same_is_not_different) v_Vhd) 
                                     (v_Vbf:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_different v_Vrc v_Vvc)))) =>
                                      v_Vye:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vrc v_Vvc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vrc v_Vvc))) 
                                        v_Vbf v_Vzc) v_Vgd) v_Vbd) 
                               abst_same_is_not_different) v_Vcd) v_Vbd) 
                      abst_same_is_not_different) v_Vyc) v_Vwc) v_Vuc) v_Vsc) 
       v_Vqc).

def Setoid__different_is_irreflexive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_different x x))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_different v_Vac v_Vac))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.not 
                 (zen.triangle (focal.is_true (abst_different v_Vac v_Vac))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_different v_Vac v_Vac)))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.not 
                 (zen.triangle (focal.is_true (abst_different v_Vcc v_Vcc)))))) =>
        zen.Rnotnot 
          (zen.triangle (focal.is_true (abst_different v_Vcc v_Vcc))) 
          (v_Vec:
           (zen.proof 
              (zen.triangle (focal.is_true (abst_different v_Vcc v_Vcc)))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_different v_Vac v_Vfc))) 
                   (zen.not 
                      (zen.triangle (focal.is_true (abst_equal v_Vac v_Vfc)))))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vfc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vfc))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc v_Vfc))))))) =>
              zen.Rall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_different v_Vcc v_Vfc))) 
                   (zen.not 
                      (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vfc))))) 
                v_Vcc 
                (v_Vhc:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vcc))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc v_Vcc)))))) =>
                 zen.Requiv 
                   (zen.triangle (focal.is_true (abst_different v_Vcc v_Vcc))) 
                   (zen.not 
                      (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc)))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vcc))))) =>
                    v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vcc v_Vcc)))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vcc))) v_Vec 
                      v_Vic) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vcc)))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc v_Vcc))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.triangle (focal.is_true (abst_equal v_Vac v_Vac))) 
                      v_Vcc 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vcc v_Vcc))) v_Vlc 
                         v_Vkc) abst_equal_reflexive) v_Vhc) v_Vgc) 
             abst_same_is_not_different) v_Vdc) v_Vbc).

def Setoid__different_is_symmetric :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_different x y)) 
             (dk_logic.ebP (abst_different y x)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle (focal.is_true (abst_different v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_different v_Vcc v_Vbc)))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vbc v_Vcc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vcc v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle (focal.is_true (abst_different v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_different v_Vcc v_Vbc))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vec v_Vcc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vcc v_Vec))))))) =>
        zen.Rnotall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle (focal.is_true (abst_different v_Vec v_Vcc))) 
             (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec)))) 
          (v_Vgc:(zen.term abst_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vec v_Vgc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vgc v_Vec)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_different v_Vec v_Vgc))) 
             (zen.triangle (focal.is_true (abst_different v_Vgc v_Vec))) 
             (v_Vic:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_different v_Vec v_Vgc)))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vgc v_Vec))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vbc v_Vcc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                v_Vec 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vec v_Vcc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vec v_Vcc))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vec v_Vcc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vec v_Vcc))))) 
                   v_Vgc 
                   (v_Vlc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vec v_Vgc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vec v_Vgc)))))) =>
                    zen.Requiv 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vec v_Vgc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vec v_Vgc)))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vec v_Vgc))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vec v_Vgc)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vec v_Vgc))) 
                         v_Vic v_Vmc) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vec v_Vgc)))) =>
                       v_Voc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vec v_Vgc))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vbc v_Vcc))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                         v_Vgc 
                         (v_Vpc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vcc:(zen.term abst_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vgc v_Vcc))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vcc))))))) =>
                          zen.Rall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vgc v_Vcc))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vgc v_Vcc))))) 
                            v_Vec 
                            (v_Vqc:
                             (zen.proof 
                                (zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vgc v_Vec))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vec)))))) =>
                             zen.Requiv 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vgc v_Vec))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vgc v_Vec)))) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_different v_Vgc v_Vec))))) =>
                                v_Vrc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vgc v_Vec)))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vgc v_Vec))) 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vec)))) =>
                                   zen.Rall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vbc v_Vcc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vcc v_Vbc))))) 
                                     v_Vgc 
                                     (v_Vtc:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vcc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vgc v_Vcc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vcc v_Vgc)))))) =>
                                      zen.Rall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vgc v_Vcc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vcc v_Vgc)))) 
                                        v_Vec 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vgc v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vec v_Vgc))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vgc v_Vec))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vec v_Vgc))) 
                                           (v_Vvc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vgc 
                                                           v_Vec))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vgc v_Vec))) 
                                              v_Vsc v_Vvc) 
                                           (v_Vwc:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vec v_Vgc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vec v_Vgc))) 
                                              v_Vwc v_Voc) v_Vuc) v_Vtc) 
                                     abst_equal_symmetric) v_Vrc) 
                               (v_Vxc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vgc v_Vec)))) =>
                                v_Vvc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vec))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_different v_Vgc v_Vec))) v_Vxc 
                                  v_Vjc) v_Vqc) v_Vpc) 
                         abst_same_is_not_different) v_Vlc) v_Vkc) 
                abst_same_is_not_different) v_Vhc) v_Vfc) v_Vdc).

def Anti_setoid__equal :
  abst_T:cc.uT ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) => basics._tilda__tilda_ (abst_different x y).

def Anti_setoid__different_is_not_same :
  abst_T:cc.uT ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP (Anti_setoid__equal abst_T abst_different x y)) 
             (dk_logic.not (dk_logic.ebP (abst_different x y))))))
  :=
  abst_T:cc.uT =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Anti_setoid__equal abst_T abst_different v_Vzb v_Vac))) 
             (zen.not 
                (zen.triangle (focal.is_true (abst_different v_Vzb v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Anti_setoid__equal abst_T abst_different v_Vzb 
                             v_Vac))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vzb v_Vac))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Anti_setoid__equal abst_T abst_different v_Vzb v_Vac))) 
             (zen.not 
                (zen.triangle (focal.is_true (abst_different v_Vzb v_Vac)))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Anti_setoid__equal abst_T abst_different v_Vcc 
                             v_Vac))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vac)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Anti_setoid__equal abst_T abst_different v_Vcc v_Vac))) 
             (zen.not 
                (zen.triangle (focal.is_true (abst_different v_Vcc v_Vac))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Anti_setoid__equal abst_T abst_different v_Vcc 
                             v_Vec))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vec))))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Anti_setoid__equal abst_T abst_different v_Vcc v_Vec))) 
             (zen.not 
                (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._tilda__tilda_ (abst_different v_Vcc v_Vec)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vcc v_Vec))))) =>
              focal.zenon_focal_notnot (abst_different v_Vcc v_Vec) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vcc v_Vec)))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec))) 
                   v_Vic v_Vhc) v_Vgc) 
             (v_Vjc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._tilda__tilda_ (abst_different v_Vcc v_Vec))))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vec)))))) =>
              zen.Rnotnot 
                (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec))) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vcc v_Vec)))) =>
                 focal.zenon_focal_not (abst_different v_Vcc v_Vec) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vec))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vec))) v_Vic 
                      v_Vhc) v_Vjc) v_Vkc) v_Vfc) v_Vdc) v_Vbc).

def Anti_setoid__equal_reflexive :
  abst_T:cc.uT ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_irreflexive:(dk_logic.eP 
                                   (dk_logic.forall abst_T 
                                      (x:(cc.eT abst_T) =>
                                       dk_logic.not 
                                         (dk_logic.ebP (abst_different x x))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_not_same:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP 
                                               (abst_different x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))
  :=
  abst_T:cc.uT =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_different x x))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_not_same:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.not (dk_logic.ebP (abst_different x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac)))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle (focal.is_true (abst_equal v_Vac v_Vac)))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))))) =>
        zen.Rall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv 
                (zen.triangle (focal.is_true (abst_equal v_Vac v_Vec))) 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_different v_Vac v_Vec)))))) 
          v_Vcc 
          (v_Vfc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vec:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vec))))))) =>
           zen.Rall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec))))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vcc)))))) =>
              zen.Requiv 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                (zen.not 
                   (zen.triangle (focal.is_true (abst_different v_Vcc v_Vcc)))) 
                (v_Vdc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))))) =>
                 v_Vhc:
                 (zen.proof 
                    (zen.not 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vcc)))))) =>
                 zen.Rnotnot 
                   (zen.triangle (focal.is_true (abst_different v_Vcc v_Vcc))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vcc)))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vac v_Vac)))) 
                      v_Vcc 
                      (v_Vjc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vcc v_Vcc))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vcc v_Vcc))) 
                         v_Vic v_Vjc) abst_different_is_irreflexive) v_Vhc) 
                (v_Vkc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc)))) =>
                 v_Vjc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vcc))))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                   v_Vkc v_Vdc) v_Vgc) v_Vfc) abst_different_is_not_same) 
       v_Vbc).

def Anti_setoid__equal_symmetric :
  abst_T:cc.uT ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_symmetric:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (y:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP (abst_different x y)) 
                                          (dk_logic.ebP (abst_different y x)))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_not_same:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP 
                                               (abst_different x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_equal y x)))))
  :=
  abst_T:cc.uT =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_different x y)) 
              (dk_logic.ebP (abst_different y x)))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_not_same:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.not (dk_logic.ebP (abst_different x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc)))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))))))) =>
        zen.Rnotall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) 
          (v_Vgc:(zen.term abst_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec))) 
             (v_Vic:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc)))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vbc v_Vcc)))))) 
                v_Vec 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vcc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vec v_Vcc))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vec v_Vcc))))) 
                   v_Vgc 
                   (v_Vlc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vgc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vec v_Vgc)))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vec v_Vgc)))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vec v_Vgc))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vec v_Vgc)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vec v_Vgc))) v_Vic 
                         v_Vmc) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vgc)))) =>
                       v_Voc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vec v_Vgc))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_different v_Vbc v_Vcc)))))) 
                         v_Vgc 
                         (v_Vpc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vcc:(zen.term abst_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vgc v_Vcc))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_different v_Vgc v_Vcc))))))) =>
                          zen.Rall abst_T 
                            (v_Vcc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vgc v_Vcc))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_different v_Vgc v_Vcc))))) 
                            v_Vec 
                            (v_Vqc:
                             (zen.proof 
                                (zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vgc v_Vec))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_different v_Vgc v_Vec)))))) =>
                             zen.Requiv 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vgc v_Vec))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_different v_Vgc v_Vec)))) 
                               (v_Vjc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vec))))) =>
                                v_Vrc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_different v_Vgc v_Vec)))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_different v_Vgc v_Vec))) 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_different v_Vgc v_Vec)))) =>
                                   zen.Rall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vbc v_Vcc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vcc v_Vbc))))) 
                                     v_Vgc 
                                     (v_Vtc:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vcc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vgc 
                                                        v_Vcc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vcc 
                                                        v_Vgc)))))) =>
                                      zen.Rall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vgc v_Vcc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vcc v_Vgc)))) 
                                        v_Vec 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vgc 
                                                        v_Vec))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vec 
                                                        v_Vgc))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vgc v_Vec))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vec v_Vgc))) 
                                           (v_Vvc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_different 
                                                           v_Vgc v_Vec))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_different v_Vgc 
                                                       v_Vec))) v_Vsc v_Vvc) 
                                           (v_Vwc:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vec 
                                                        v_Vgc)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_different v_Vec 
                                                       v_Vgc))) v_Vwc v_Voc) 
                                           v_Vuc) v_Vtc) 
                                     abst_different_is_symmetric) v_Vrc) 
                               (v_Vxc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vgc v_Vec)))) =>
                                v_Vvc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_different v_Vgc v_Vec))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vgc v_Vec))) 
                                  v_Vxc v_Vjc) v_Vqc) v_Vpc) 
                         abst_different_is_not_same) v_Vlc) v_Vkc) 
                abst_different_is_not_same) v_Vhc) v_Vfc) v_Vdc).

def Anti_setoid__equal_transitive :
  abst_T:cc.uT ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_complete:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.forall abst_T 
                                         (z:(cc.eT abst_T) =>
                                          dk_logic.imp 
                                            (dk_logic.ebP 
                                               (abst_different x y)) 
                                            (dk_logic.or 
                                               (dk_logic.ebP 
                                                  (abst_different x z)) 
                                               (dk_logic.ebP 
                                                  (abst_different y z)))))))) ->
  abst_different_is_irreflexive:(dk_logic.eP 
                                   (dk_logic.forall abst_T 
                                      (x:(cc.eT abst_T) =>
                                       dk_logic.not 
                                         (dk_logic.ebP (abst_different x x))))) ->
  abst_different_is_symmetric:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (y:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP (abst_different x y)) 
                                          (dk_logic.ebP (abst_different y x)))))) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_not_same:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_equal x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP 
                                               (abst_different x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                   (dk_logic.ebP (abst_equal x z)))))))
  :=
  abst_T:cc.uT =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_complete:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_different x y)) 
                 (dk_logic.or (dk_logic.ebP (abst_different x z)) 
                    (dk_logic.ebP (abst_different y z)))))))) =>
  abst_different_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_different x x))))) =>
  abst_different_is_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_different x y)) 
              (dk_logic.ebP (abst_different y x)))))) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_not_same:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.not (dk_logic.ebP (abst_different x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vcc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vec))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))))))) 
    (v_Vfc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vcc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vec:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc v_Vec)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vcc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vec))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))))))) 
       (v_Vgc:(zen.term abst_T) =>
        v_Vhc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vec:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vdc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vgc v_Vec))))))))) =>
        zen.Rnotall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vdc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vec))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec)))))) 
          (v_Vic:(zen.term abst_T) =>
           v_Vjc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vec:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vic))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vic v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vgc v_Vec)))))))) =>
           zen.Rnotall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vic))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vic v_Vec))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec))))) 
             (v_Vkc:(zen.term abst_T) =>
              v_Vlc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vic))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vic v_Vkc))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vgc v_Vkc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vic))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vic v_Vkc))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vkc)))) 
                (v_Vmc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vic)))) =>
                 v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vic v_Vkc))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vgc v_Vkc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_equal v_Vic v_Vkc))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vkc))) 
                   (v_Voc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vic v_Vkc)))) =>
                    v_Vpc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vgc v_Vkc))))) =>
                    zen.Rall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vdc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vcc v_Vdc))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vcc v_Vdc)))))) 
                      v_Vgc 
                      (v_Vqc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vdc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vgc v_Vdc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vgc v_Vdc))))))) =>
                       zen.Rall abst_T 
                         (v_Vdc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vgc v_Vdc))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vgc v_Vdc))))) 
                         v_Vic 
                         (v_Vrc:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vgc v_Vic))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vgc v_Vic)))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vgc v_Vic))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vgc v_Vic)))) 
                            (v_Vsc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vgc v_Vic))))) =>
                             v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_different v_Vgc v_Vic)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vgc v_Vic))) 
                               v_Vmc v_Vsc) 
                            (v_Vmc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vgc v_Vic)))) =>
                             v_Vuc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vgc v_Vic))))) =>
                             zen.Rall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vdc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vcc v_Vdc))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vcc v_Vdc)))))) 
                               v_Vic 
                               (v_Vvc:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vdc:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vic v_Vdc))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vic v_Vdc))))))) =>
                                zen.Rall abst_T 
                                  (v_Vdc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vic v_Vdc))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vic v_Vdc))))) 
                                  v_Vkc 
                                  (v_Vwc:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vic v_Vkc))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vic v_Vkc)))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vic v_Vkc))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vic v_Vkc)))) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vic v_Vkc))))) =>
                                      v_Vyc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vic 
                                                        v_Vkc)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vic v_Vkc))) 
                                        v_Voc v_Vxc) 
                                     (v_Voc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vic v_Vkc)))) =>
                                      v_Vzc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vic v_Vkc))))) =>
                                      zen.Rall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Vdc:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vcc v_Vdc))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vcc 
                                                          v_Vdc)))))) v_Vgc 
                                        (v_Vqc:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Vdc:(zen.term abst_T) =>
                                                zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vgc 
                                                           v_Vdc))) 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vgc v_Vdc))))))) =>
                                         zen.Rall abst_T 
                                           (v_Vdc:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vgc v_Vdc))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vgc 
                                                          v_Vdc))))) v_Vkc 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vgc 
                                                           v_Vkc))) 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vgc v_Vkc)))))) =>
                                            zen.Requiv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vgc v_Vkc))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vgc 
                                                          v_Vkc)))) 
                                              (v_Vpc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vgc 
                                                              v_Vkc))))) =>
                                               v_Vbd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_different 
                                                                 v_Vgc v_Vkc)))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vgc 
                                                          v_Vkc))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vgc v_Vkc)))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vcc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vdc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vec:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_different 
                                                                    v_Vcc 
                                                                    v_Vdc))) 
                                                             (zen.or 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vcc 
                                                                    v_Vec))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vec))))))) 
                                                    v_Vkc 
                                                    (v_Vdd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vdc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vec:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vdc))) 
                                                                 (zen.or 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vec))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vec)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vdc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vec:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_different 
                                                                    v_Vkc 
                                                                    v_Vdc))) 
                                                             (zen.or 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vec))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vec)))))) 
                                                       v_Vgc 
                                                       (v_Ved:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vec:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))) 
                                                                 (zen.or 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vec))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vec))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vec:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))) 
                                                             (zen.or 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vec))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vec))))) 
                                                          v_Vic 
                                                          (v_Vfd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))) 
                                                                 (zen.or 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vic)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))) 
                                                             (zen.or 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vic)))) 
                                                             (v_Vgd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vcc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Vdc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vcc 
                                                                    v_Vdc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vcc))))) 
                                                                v_Vgc 
                                                                (v_Vhd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vdc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vgc)))))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vdc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vdc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vgc)))) 
                                                                   v_Vkc 
                                                                   (v_Vid:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vkc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vkc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vkc))) 
                                                                    v_Vcd 
                                                                    v_Vjd) 
                                                                    (v_Vkd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vgc))) 
                                                                    v_Vkd 
                                                                    v_Vgd) 
                                                                    v_Vid) 
                                                                   v_Vhd) 
                                                                abst_different_is_symmetric) 
                                                             (v_Vld:
                                                              (zen.proof 
                                                                 (zen.or 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vic))))) =>
                                                              zen.Ror 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vic))) 
                                                                (v_Vmd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic)))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vcc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vdc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vcc 
                                                                    v_Vdc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vcc))))) 
                                                                   v_Vkc 
                                                                   (v_Vnd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vdc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vdc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vkc)))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vdc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vdc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vdc 
                                                                    v_Vkc)))) 
                                                                    v_Vic 
                                                                    (v_Vod:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vic 
                                                                    v_Vkc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vic 
                                                                    v_Vkc))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vkc 
                                                                    v_Vic))) 
                                                                    v_Vmd 
                                                                    v_Vpd) 
                                                                    (v_Vqd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vic 
                                                                    v_Vkc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vic 
                                                                    v_Vkc))) 
                                                                    v_Vqd 
                                                                    v_Vzc) 
                                                                    v_Vod) 
                                                                    v_Vnd) 
                                                                   abst_different_is_symmetric) 
                                                                (v_Vrd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vic)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_different 
                                                                    v_Vgc 
                                                                    v_Vic))) 
                                                                   v_Vrd 
                                                                   v_Vuc) 
                                                                v_Vld) v_Vfd) 
                                                          v_Ved) v_Vdd) 
                                                    abst_different_is_complete) 
                                                 v_Vbd) 
                                              (v_Vsd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vgc 
                                                           v_Vkc)))) =>
                                               v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vgc v_Vkc))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vgc 
                                                          v_Vkc))) v_Vsd 
                                                 v_Vpc) v_Vad) v_Vqc) 
                                        abst_different_is_not_same) v_Vwc) 
                                  v_Vvc) abst_different_is_not_same) v_Vrc) 
                         v_Vqc) abst_different_is_not_same) v_Vnc) v_Vlc) 
             v_Vjc) v_Vhc) v_Vfc).

def ifailed :
  __var_a:cc.uT ->
  (cc.eT basics.string__t) -> (cc.eT __var_a) -> cc.eT __var_a
  :=
  __var_a:cc.uT => sets_externals.i_failed __var_a.

def Partial_set__failed :
  abst_T:cc.uT ->
  abst_element:(cc.eT abst_T) ->
  reason:(cc.eT basics.string__t) -> cc.eT abst_T
  :=
  abst_T:cc.uT =>
  abst_element:(cc.eT abst_T) =>
  reason:(cc.eT basics.string__t) => ifailed abst_T reason abst_element.

def Equivalence_relation__equiv_reflexive :
  _p_S_T:cc.uT ->
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) ->
  _p_S_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_S_T 
                             (x:(cc.eT _p_S_T) =>
                              dk_logic.ebP (_p_S_equal x x)))) ->
  abst_equiv:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> dk_logic.Prop) ->
  abst_equal_refines_equiv:(dk_logic.eP 
                              (dk_logic.forall _p_S_T 
                                 (x:(cc.eT _p_S_T) =>
                                  dk_logic.forall _p_S_T 
                                    (y:(cc.eT _p_S_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_S_equal x y)) 
                                       (abst_equiv x y))))) ->
  dk_logic.eP (dk_logic.forall _p_S_T (x:(cc.eT _p_S_T) => abst_equiv x x))
  :=
  _p_S_T:cc.uT =>
  _p_S_equal:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> cc.eT basics.bool__t) =>
  _p_S_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) => dk_logic.ebP (_p_S_equal x x)))) =>
  abst_equiv:((cc.eT _p_S_T) -> (cc.eT _p_S_T) -> dk_logic.Prop) =>
  abst_equal_refines_equiv:
  (dk_logic.eP 
     (dk_logic.forall _p_S_T 
        (x:(cc.eT _p_S_T) =>
         dk_logic.forall _p_S_T 
           (y:(cc.eT _p_S_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S_equal x y)) (abst_equiv x y))))) =>
  zen.nnpp 
    (zen.forall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) => zen.triangle (abst_equiv v_Vzb v_Vzb))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S_T 
              (v_Vzb:(zen.term _p_S_T) =>
               zen.triangle (abst_equiv v_Vzb v_Vzb))))) =>
     zen.Rnotall _p_S_T 
       (v_Vzb:(zen.term _p_S_T) => zen.triangle (abst_equiv v_Vzb v_Vzb)) 
       (v_Vbc:(zen.term _p_S_T) =>
        v_Vcc:
        (zen.proof (zen.not (zen.triangle (abst_equiv v_Vbc v_Vbc)))) =>
        zen.Rall _p_S_T 
          (v_Vzb:(zen.term _p_S_T) =>
           zen.forall _p_S_T 
             (v_Vdc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vdc))) 
                (zen.triangle (abst_equiv v_Vzb v_Vdc)))) v_Vbc 
          (v_Vec:
           (zen.proof 
              (zen.forall _p_S_T 
                 (v_Vdc:(zen.term _p_S_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vdc))) 
                    (zen.triangle (abst_equiv v_Vbc v_Vdc))))) =>
           zen.Rall _p_S_T 
             (v_Vdc:(zen.term _p_S_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vdc))) 
                (zen.triangle (abst_equiv v_Vbc v_Vdc))) v_Vbc 
             (v_Vfc:
              (zen.proof 
                 (zen.imp 
                    (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))) 
                    (zen.triangle (abst_equiv v_Vbc v_Vbc)))) =>
              zen.Rimply 
                (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))) 
                (zen.triangle (abst_equiv v_Vbc v_Vbc)) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))))) =>
                 zen.Rall _p_S_T 
                   (v_Vzb:(zen.term _p_S_T) =>
                    zen.triangle (focal.is_true (_p_S_equal v_Vzb v_Vzb))) 
                   v_Vbc 
                   (v_Vhc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_S_equal v_Vbc v_Vbc))) 
                      v_Vhc v_Vgc) _p_S_equal_reflexive) 
                (v_Vic:(zen.proof (zen.triangle (abst_equiv v_Vbc v_Vbc))) =>
                 zen.Raxiom (zen.triangle (abst_equiv v_Vbc v_Vbc)) v_Vic 
                   v_Vcc) v_Vfc) v_Vec) abst_equal_refines_equiv) v_Vac).

